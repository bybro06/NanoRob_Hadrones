'Siguelíneas 1-4 con control Proporcional, integral y derivativo (PID)

'Sentido de los motores
Sentido_Motores = 1

'Siguelíneas hasta cruce

Function SL14PID(in number Velocidad, in number kp, in number ki, in number kd)
  'Siguelíneas 1-4 PID
  
  #Valores ideales:
  #KP = 0.18
  #KI = 0.00015
  #KD = 7
  
  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  
  diametro = 5.6
  distancia = 5 * 360 / (diametro * Math.Pi)
  
  error = 0
  olderror = 0
  errsum = 0
  
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()
  
  While Sensor.ReadPercent(1) > 5 Or Sensor.ReadPercent(4) > 5
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4))*sentido*@Sentido_Motores
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "True")
EndFunction

Function SL14PIDF(in number Velocidad, in number kp, in number ki, in number kd)
  'Siguelíneas 1-4 PID Sin Frenos

  #Valores ideales:
  #KP = 0.18
  #KI = 0.00015
  #KD = 7

  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  
  diametro = 5.6
  distancia = 5 * 360 / (diametro * Math.Pi)
  
  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While Sensor.ReadPercent(1) > 5 Or Sensor.ReadPercent(4) > 5
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4)) * sentido * @Sentido_Motores
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas hasta ambos blancos

Function SL14PIDHastaBlanco(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  
  diametro = 5.6
  distancia = 5 * 360 / (diametro * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_kp = kp
  start_ki = ki
  start_kd = kd

  encoder_inicio = MotorC.GetTacho()

  While Sensor.ReadPercent(1) < 90 Or Sensor.ReadPercent(4) < 90
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4)) * sentido * @Sentido_Motores
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
EndFunction

Function SL14PIDHastaBlancoF(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  
  diametro = 5.6
  distancia = 5 * 360 / (diametro * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_kp = kp
  start_ki = ki
  start_kd = kd

  encoder_inicio = MotorC.GetTacho()

  While Sensor.ReadPercent(1) < 90 Or Sensor.ReadPercent(4) < 90
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4)) * sentido * @Sentido_Motores
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas por encoder

Function SL14PIDEnc(in number Velocidad, in number kp, in number ki, in number kd, in number Encoder)

  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  
  diametro = 5.6
  distancia = 5 * 360 / (diametro * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  Encoder = Encoder / (diametro * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0

  While Math.Abs(encoder_C) < Encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    'Corrección fuerte los primeros 5 cm
    If encoder_C < distancia Then
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4)) * sentido * @Sentido_Motores
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
EndFunction

Function SL14PIDEncF(in number Velocidad, in number kp, in number ki, in number kd, in number Encoder)

  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  
  diametro = 5.6
  distancia = 5 * 360 / (diametro * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  Encoder = Encoder / (diametro * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0

  While Math.Abs(encoder_C) < Encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    'Corrección fuerte los primeros 5 cm
    If encoder_C < distancia Then
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4)) * sentido * @Sentido_Motores
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas hasta x cruces

Function SL14PIDCruces(in number Velocidad, in number kp, in number ki, in number kd, in number Cruces)
  
  SL14PIDF(Velocidad, kp, ki, kd)
  
  i = 1
  
  While i < Cruces
    SL14PIDEncF(Velocidad, kp, ki, kd, 4)
    SL14PIDF(Velocidad, kp, ki, kd)
    i++
  EndWhile
  
  MotorBC.OffAndBrake()
  
EndFunction

Function SL14PIDCrucesF(in number Velocidad, in number kp, in number ki, in number kd, in number Cruces)
  
  SL14PIDF(Velocidad,kp,ki,kd)
  
  i=1
  
  While i < Cruces
    SL14PIDEncF(Velocidad,kp,ki,kd,4)
    SL14PIDF(Velocidad,kp,ki,kd)
    i ++
  EndWhile
  
  MotorBC.Off()
  
EndFunction


'SIGUELINEAS 31
Function SL31PID(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  
  diametro = 5.6
  distancia = 5 * 360 / (diametro * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While Sensor.ReadPercent(3) > 15 Or Sensor.ReadPercent(1) > 15
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(3) - Sensor.ReadPercent(1)) * sentido * @Sentido_Motores
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
EndFunction

Function SL31PIDF(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  
  diametro = 5.6
  distancia = 5 * 360 / (diametro * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While Sensor.ReadPercent(3) > 15 Or Sensor.ReadPercent(1) > 15
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(3) - Sensor.ReadPercent(1)) * sentido * @Sentido_Motores
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas hasta ambos blancos

Function SL31PIDHastaBlanco(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  
  diametro = 5.6
  distancia = 5 * 360 / (diametro * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While Sensor.ReadPercent(3) < 90 Or Sensor.ReadPercent(1) < 90
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(3) - Sensor.ReadPercent(1)) * sentido * @Sentido_Motores
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
EndFunction

Function SL31PIDHastaBlancoF(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  
  diametro = 5.6
  distancia = 5 * 360 / (diametro * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While Sensor.ReadPercent(3) < 90 Or Sensor.ReadPercent(1) < 90
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(3) - Sensor.ReadPercent(1)) * sentido * @Sentido_Motores
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas por encoder

Function SL31PIDEnc(in number Velocidad, in number kp, in number ki, in number kd, in number Encoder)

  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  
  diametro = 5.6
  distancia = 5 * 360 / (diametro * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  Encoder = Encoder / (diametro * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0

  While Math.Abs(encoder_C) < Encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    'Corrección fuerte los primeros 5 cm
    If encoder_C < distancia Then
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(3) - Sensor.ReadPercent(1)) * sentido * @Sentido_Motores
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
EndFunction

Function SL31PIDEncF(in number Velocidad, in number kp, in number ki, in number kd, in number Encoder)

  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  
  diametro = 5.6
  distancia = 5 * 360 / (diametro * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  Encoder = Encoder / (diametro * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0

  While Math.Abs(encoder_C) < Encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    'Corrección fuerte los primeros 5 cm
    If encoder_C < distancia Then
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(3) - Sensor.ReadPercent(1)) * sentido * @Sentido_Motores
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas hasta x cruces

Function SL31PIDCruces(in number Velocidad, in number kp, in number ki, in number kd, in number Cruces)
  
  SL14PIDF(Velocidad,kp,ki,kd)
  
  i=1
  
  While i < Cruces
    SL14PIDEncF(Velocidad,kp,ki,kd,4)
    SL14PIDF(Velocidad,kp,ki,kd)
    i ++
  EndWhile
  
  MotorBC.OffAndBrake()
  
EndFunction

Function SL31PIDCrucesF(in number Velocidad, in number kp, in number ki, in number kd, in number Cruces)
  
  SL14PIDF(Velocidad,kp,ki,kd)
  
  i=1
  
  While i < Cruces
    SL14PIDEncF(Velocidad,kp,ki,kd,4)
    SL14PIDF(Velocidad,kp,ki,kd)
    i ++
  EndWhile
  
  MotorBC.Off()
  
EndFunction


'Siguelíneas 1 sensor con control Proporcional, integral y derivativo (PID)

'Siguelíneas hasta cruce negro por ambos lados

Function SL1SPID(in number Velocidad, in number kp, in number ki, in number kd, in number lado, in number sens)
  'Siguelíneas 1-4 PID
  
  '"sens" especifica el sensor de lectura
  'lado = 1 --> borde izquierdo
  'lado = -1 --> borde derecho
  
  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  While Sensor.ReadPercent(1) > 15 Or Sensor.ReadPercent(4) > 15
    error = (Sensor.ReadPercent(sens) - 50)*sentido*lado*@Sentido_Motores
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "True")
EndFunction

Function SL1SPIDF(in number Velocidad, in number kp, in number ki, in number kd, in number lado, in number sens)
  'Siguelíneas 1-4 PID
  
  '"sens" especifica el sensor de lectura
  'lado = 1 --> borde izquierdo
  'lado = -1 --> borde derecho
  
  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  While Sensor.ReadPercent(1) > 15 Or Sensor.ReadPercent(4) > 15
    error = (Sensor.ReadPercent(sens) - 50)*sentido*lado*@Sentido_Motores
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "False")
EndFunction

'Siguelíneas hasta cruce negro por 1 lado

Function SL1SPIDCross(in number Velocidad, in number kp, in number ki, in number kd, in number reader)
  'Siguelíneas 1-4 PID
  
  '"sens" especifica el sensor de lectura
  'lado = 1 --> borde izquierdo
  'lado = -1 --> borde derecho
  
  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  If reader = 3 Then
    reader1 = 1
    reader2 = 4
  Else
    reader1 = 3
    reader2 = 1
  EndIf
  
  While Sensor.ReadPercent(reader) > 10
    error = (Sensor.ReadPercent(reader1) - Sensor.ReadPercent(reader2))*sentido*@Sentido_Motores
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "True")
EndFunction

Function SL1SPIDCrossF(in number Velocidad, in number kp, in number ki, in number kd, in number reader)
  'Siguelíneas 1-4 PID
  
  '"sens" especifica el sensor de lectura
  'lado = 1 --> borde izquierdo
  'lado = -1 --> borde derecho
  
  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  If reader = 3 Then
    reader1 = 1
    reader2 = 4
  Else
    reader1 = 3
    reader2 = 1
  EndIf
  
  While Sensor.ReadPercent(reader) > 10
    error = (Sensor.ReadPercent(reader1) - Sensor.ReadPercent(reader2))*sentido*@Sentido_Motores
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "False")
EndFunction

'Siguelíneas hasta ambos blancos

Function SL1SPIDHastaBlanco(in number Velocidad, in number kp, in number ki, in number kd, in number lado, in number sens)
  'Siguelíneas 1-4 PID
  
  '"sens" especifica el sensor de lectura
  'lado = 1 --> borde izquierdo
  'lado = -1 --> borde derecho
  
  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  While Sensor.ReadPercent(1) < 85 Or Sensor.ReadPercent(4) < 85
    error = (Sensor.ReadPercent(sens) - 50)*sentido*lado*@Sentido_Motores
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "True")
EndFunction

Function SL1SPIDHastaBlancoF(in number Velocidad, in number kp, in number ki, in number kd, in number lado, in number sens)
  'Siguelíneas 1-4 PID
  
  '"sens" especifica el sensor de lectura
  'lado = 1 --> borde izquierdo
  'lado = -1 --> borde derecho
  
  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  While Sensor.ReadPercent(1) < 85 Or Sensor.ReadPercent(4) < 85
    error = (Sensor.ReadPercent(sens) - 50)*sentido*lado*@Sentido_Motores
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "False")
EndFunction

'Siguelíneas por encoder

Function SL1SPIDEnc(in number Velocidad, in number kp, in number ki, in number kd, in number lado, in number sens, in number encoder)
  'Siguelíneas 1-4 PID
  
  '"sens" especifica el sensor de lectura
  'lado = 1 --> borde izquierdo
  'lado = -1 --> borde derecho
  
  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  Encoder = Encoder / (5.6 * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0
  
  While Motor.GetCount("C") < encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    error = (Sensor.ReadPercent(sens) - 50)*sentido*lado*@Sentido_Motores
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "True")
EndFunction

Function SL1SPIDEncF(in number Velocidad, in number kp, in number ki, in number kd, in number lado, in number sens, in number encoder)
  'Siguelíneas 1-4 PID
  
  '"sens" especifica el sensor de lectura
  'lado = 1 --> borde izquierdo
  'lado = -1 --> borde derecho
  
  Velocidad *= @Sentido_Motores
  
  I = "B"
  D = "C"
  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  Encoder = Encoder / (5.6 * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0
  
  While Motor.GetCount("C") < encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    error = (Sensor.ReadPercent(sens) - 50)*sentido*lado*@Sentido_Motores
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "False")
EndFunction

Function Shift14_31(in number Velocidad)
  
  MotorBC.Off()
  Motor.MoveSync("BC", Velocidad*-1,Velocidad*0.2,230,"False")
  Motor.MoveSync("BC", Velocidad*-0.2,Velocidad,230,"False")
  
EndFunction

Function Shift31_14(in number Velocidad)
  
  MotorBC.Off()
  Motor.MoveSync("BC", Velocidad*-0.2,Velocidad,230,"False")
  Motor.MoveSync("BC", Velocidad*-1,Velocidad*0.2,230,"False")
  
EndFunction
