'Movimiento Recto con Motores Medianos

'Sentido de los motores
Sentido_Motores = 1
Correccion = 0

'Por encoder
Function EncoderRectoMM(in number Velocidad, in number Distancia)
  
  Velocidad *= @Sentido_Motores
  diametro = 5.6

  Enc = Distancia*360 / Math.Pi / diametro
  
  Start_B = Motor.GetCount ("B") *-1 + (@Correccion/30*Velocidad)
  Start_C = Motor.GetCount ("C")
  
  encoder_C = Motor.GetCount ("C") - Start_C
  
  While Math.abs(encoder_C) < Enc
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)

  EndWhile

  Motor.Stop("BC", "True")

EndFunction

Function EncoderRectoMMF(in number Velocidad, in number Distancia)

  Velocidad *= @Sentido_Motores
  diametro = 5.6

  Enc = Distancia*360 / Math.Pi / diametro
  
  Start_B = Motor.GetCount ("B") *-1 + @Correccion
  Start_C = Motor.GetCount ("C")
  
  encoder_C = Motor.GetCount ("C") - Start_C

  While Math.abs(encoder_C) < Enc
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)

  EndWhile

  Motor.Stop("BC", "True")

EndFunction

Function NewEncoderRectoMM(in number Velocidad, in number Distancia)
  
  Velocidad *= @Sentido_Motores
  diametro = 5.6

  Enc = Distancia*360 / Math.Pi / diametro
  
  Start_B = Motor.GetCount ("B") *-1 + (@Correccion/30*Velocidad)
  Start_C = Motor.GetCount ("C")
  
  encoder_C = Motor.GetCount ("C") - Start_C
  
  If Math.Abs(Velocidad) < 25 Then
    While Math.abs(encoder_C) < Enc
      
      encoder_B = Motor.GetCount ("B")*-1 - Start_B
      encoder_C = Motor.GetCount ("C") - Start_C
      
      error = (encoder_B - encoder_C)*@Sentido_Motores

      proporcial = error*1.2

      Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)

    EndWhile

    Motor.Stop("BC", "True")
  Else
    While Math.abs(encoder_C) < (Distancia-(Velocidad/6)) *360 / Math.Pi / diametro
      
      encoder_B = Motor.GetCount ("B")*-1 - Start_B
      encoder_C = Motor.GetCount ("C") - Start_C
      
      error = (encoder_B - encoder_C)*@Sentido_Motores

      proporcial = error*1.2

      Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)

    EndWhile

    Motor.Stop("BC", "False")
    
    dist_restante = Enc - encoder_C
    Motor.MoveSync("BC",Velocidad*-0.5,Velocidad*0.5,dist_restante,"True")
  EndIf
  
EndFunction

Function NewEncoderRectoMMF(in number Velocidad, in number Distancia)
  
  Velocidad *= @Sentido_Motores
  diametro = 5.6

  Enc = Distancia*360 / Math.Pi / diametro
  
  Start_B = Motor.GetCount ("B") *-1 + (@Correccion/30*Velocidad)
  Start_C = Motor.GetCount ("C")
  
  encoder_C = Motor.GetCount ("C") - Start_C
  
  If Math.Abs(Velocidad) < 25 Then
    While Math.abs(encoder_C) < Enc
      
      encoder_B = Motor.GetCount ("B")*-1 - Start_B
      encoder_C = Motor.GetCount ("C") - Start_C
      
      error = (encoder_B - encoder_C)*@Sentido_Motores

      proporcial = error*1.2

      Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)

    EndWhile

    Motor.Stop("BC", "True")
  Else
    While Math.abs(encoder_C) < (Distancia-(Velocidad/6)) *360 / Math.Pi / diametro
      
      encoder_B = Motor.GetCount ("B")*-1 - Start_B
      encoder_C = Motor.GetCount ("C") - Start_C
      
      error = (encoder_B - encoder_C)*@Sentido_Motores

      proporcial = error*1.2

      Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)

    EndWhile

    Motor.Stop("BC", "False")
    
    dist_restante = Enc - encoder_C
    Motor.MoveSync("BC",Velocidad*-0.5,Velocidad*0.5,dist_restante,"False")
  EndIf
  
EndFunction

'Hasta negro en 1 sensor
Function 1NegroRectoMM(in number Velocidad, in number sens)

  Velocidad *= @Sentido_Motores
  
  Start_B = Motor.GetCount ("B") *-1 + @Correccion
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens) > 10
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), (Velocidad+proporcial))
  EndWhile
  Motor.Stop("BC", "True")
EndFunction

Function 1NegroRectoMMF(in number Velocidad, in number sens)  
  
  Velocidad *= @Sentido_Motores
  
  Start_B = Motor.GetCount ("B") *-1 + @Correccion
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens) > 10
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)
  EndWhile
  Motor.Stop("BC", "False")
EndFunction

'Hasta blanco en 1 sensor
Function 1BlancoRectoMM(in number Velocidad, in number sens)  
  
  Velocidad *= @Sentido_Motores
  
  Start_B = Motor.GetCount ("B") *-1 + @Correccion
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens) < 70
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)
  EndWhile
  Motor.Stop("BC", "True")
EndFunction

Function 1BlancoRectoMMF(in number Velocidad, in number sens)  
  
  Velocidad *= @Sentido_Motores
  
  Start_B = Motor.GetCount ("B") *-1 + @Correccion
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens) < 70
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)
  EndWhile
  Motor.Stop("BC", "False")
EndFunction

'Hasta negro en 2 sensores
Function 2NegrosRectoMM(in number Velocidad, in number sens1, in number sens2)  
  
  Velocidad *= @Sentido_Motores
  
  Start_B = Motor.GetCount ("B") *-1 + @Correccion
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens1) > 2 Or Sensor.ReadPercent(sens2) > 2
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)
  EndWhile
  Motor.Stop("BC", "True")
EndFunction

Function 2NegrosRectoMMF(in number Velocidad, in number sens1, in number sens2)  
  
  Velocidad *= @Sentido_Motores
  
  Start_B = Motor.GetCount ("B") *-1 + @Correccion
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens1) > 5 Or Sensor.ReadPercent(sens2) > 5
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)
  EndWhile
  Motor.Stop("BC", "False")
EndFunction

'Hasta blanco en 2 sensores
Function 2BlancosRectoMM(in number Velocidad, in number sens1, in number sens2)  
  
  Velocidad *= @Sentido_Motores
  
  Start_B = Motor.GetCount ("B") *-1 + @Correccion
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens1) < 70 Or Sensor.ReadPercent(sens2) < 70
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)
  EndWhile
  Motor.Stop("BC", "True")
EndFunction

Function 2BlancosRectoMMF(in number Velocidad, in number sens1, in number sens2)  
  
  Velocidad *= @Sentido_Motores
  
  Start_B = Motor.GetCount ("B") *-1 + @Correccion
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens1) < 70 Or Sensor.ReadPercent(sens2) < 70
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)
  EndWhile
  Motor.Stop("BC", "False")
EndFunction

'Hasta color en 1 sensor
Function 1ColorRectoMM(in number Velocidad, in number sens, in number Color)  
  
  Velocidad *= @Sentido_Motores
  
  Start_B = Motor.GetCount ("B") *-1 + @Correccion
  Start_C = Motor.GetCount ("C")

  mode = Sensor.GetMode(sens)
  Sensor.SetMode(sens,2)
  
  While Sensor.ReadRawValue(sens,0) <> Color
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)
  EndWhile
  Motor.Stop("BC", "True")
  Sensor.SetMode(sens,mode)
EndFunction

Function 1ColorRectoMMF(in number Velocidad, in number sens, in number Color)  
  
  Velocidad *= @Sentido_Motores
  
  Start_B = Motor.GetCount ("B") *-1 + @Correccion
  Start_C = Motor.GetCount ("C")

  mode = Sensor.GetMode(sens)
  Sensor.SetMode(sens,2)
  
  While Sensor.ReadRawValue(sens,0) <> Color
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)
  EndWhile
  Motor.Stop("BC", "False")
  Sensor.SetMode(sens,mode)
EndFunction

'Por tiempo
Function TiempoRectoMM(in number Velocidad, in number Tiempo)  
  
  Velocidad *= @Sentido_Motores
  
  Start_B = Motor.GetCount ("B") *-1 + @Correccion
  Start_C = Motor.GetCount ("C")

  Time.Reset3()
  
  While Time.Get3() < Tiempo
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)
  EndWhile
  Motor.Stop("BC", "True")
EndFunction

Function TiempoRectoMMF(in number Velocidad, in number Tiempo)  
  
  Velocidad *= @Sentido_Motores
  
  Start_B = Motor.GetCount ("B") *-1 + @Correccion
  Start_C = Motor.GetCount ("C")

  Time.Reset3()
  
  While Time.Get3() < Tiempo
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*@Sentido_Motores

    proporcial = error*1.2

    Motor.StartSync("BC", -(Velocidad-proporcial), Velocidad+proporcial)
  EndWhile
  Motor.Stop("BC", "False")
EndFunction
