lv_v_105 = 0
lv_aenc_105 = 0
lv_velocidad_1 = 0
lv_distancia_1 = 0
lv_read_126 = 0
lv_v_95 = 0
lv_aenc_95 = 0
lv_v_109 = 0
lv_aenc_109 = 0
lv_v_108 = 0
lv_t_108 = 0
lv_v_96 = 0
lv_v_106 = 0
lv_v_101 = 0
lv_v0_56 = 0
lv_vmax_56 = 0
lv_kp_56 = 0
lv_ki_56 = 0
lv_kd_56 = 0
lv_accelencoder_56 = 0
lv_velocidad_72 = 0
lv_kp_72 = 0
lv_ki_72 = 0
lv_kd_72 = 0
lv_velocidad_76 = 0
lv_kp_76 = 0
lv_ki_76 = 0
lv_kd_76 = 0
lv_encoder_76 = 0
lv_vmax_88 = 0
lv_kp_88 = 0
lv_ki_88 = 0
lv_kd_88 = 0
lv_color_122 = 0
lv_reps_110 = 0
lv_color_110 = 0
lv_reps_111 = 0
lv_color_111 = 0
lv_reps_112 = 0
lv_color_112 = 0
lv_reps_113 = 0
lv_color_113 = 0
lv_m_129 [ 0 ] = 0
lv_k_129 = 0
lv_s_129 [ 0 ] = 0
lv_m_127 [ 0 ] = 0
lv_s_127 [ 0 ] = 0
lv_m_128 [ 0 ] = 0
lv_s_128 [ 0 ] = 0
gv_floor = 0
lv_color_114 = 0
lv_color_115 = 0
lv_color_116 = 0
lv_color_117 = 0
lv_veli_123 [ 0 ] = 0
lv_veld_123 [ 0 ] = 0
lv_omegai_k1_123 [ 0 ] = 0
lv_omegad_k1_123 [ 0 ] = 0
lv_v_123 [ 0 ] = 0
lv_dh_t_123 [ 0 ] = 0
lv_s_inv_123 [ 0 ] = 0
lv_read_126 = 0
gv_centro = 0
gv_xtime = 0
gv_ytime = 0
gv_thetatime = 0
gv_xtcorrect = 0
gv_ytcorrect = 0
gv_thetatcorrect = 0
gv_sentido_d = 0
gv_dw = 0
gv_diameter = 0
gv_d_t = 0
gv_sentido_motores = 0
gv_g1 = 0
gv_centro = 0
gv_xtime = 0
gv_ytime = 0
gv_thetatime = 0
gv_xtcorrect = 0
gv_ytcorrect = 0
gv_thetatcorrect = 0
gv_sentido_d = 1
gv_dw = 102
gv_diameter = 56
gv_d_t = 0
gv_sentido_motores = 1
gv_sentido_motores = 1
gv_sentido_motores = 1
gv_g1 = 65 / 18
gv_sentido_motores = 1
gv_sentido_motores = 1
gv_sentido_motores = 1
gv_sentido_motores = 1
f_setup_0 ()
Thread.Run = f_odometry_0
Thread.Run = f_display_0
f_main_0 ()
Sub f_setup_0
Sensor.SetMode ( 1 , 0 )
Sensor.SetMode ( 2 , 4 )
Sensor.SetMode ( 3 , 4 )
Sensor.SetMode ( 4 , 0 )
EndSub
Sub f_startarm_0
Time.Reset1 ()
While Time.Get1 () < 700
MotorA.StartSpeed ( 30 )
MotorD.StartSpeed ( 40 )
EndWhile
MotorAD.OffAndBrake ()
MotorA.ResetCount ()
MotorD.ResetCount ()
lv_v_105 = 40
lv_aenc_105 = - 360
f_bmoved_2 ()
MotorD.ResetCount ()
Program.Delay ( 100 )
EndSub
Sub f_odometry_0
gv_alpha_l [ 0 ] = 0
gv_alpha_r [ 0 ] = 0
gv_oldb = 0
gv_oldc = 0
gv_xt [ 0 ] = 0
gv_yt [ 0 ] = 0
gv_thetat [ 0 ] = 0
gv_i = 0
While "True"
gv_alpha_l [ gv_i ] = Math.GetRadians ( MotorB.GetTacho () * - 1 )
gv_alpha_r [ gv_i ] = Math.GetRadians ( MotorC.GetTacho () )
gv_d_l = ( gv_alpha_l [ gv_i ] - gv_alpha_l [ gv_i - 1 ] ) * gv_diameter / 2
gv_d_r = ( gv_alpha_r [ gv_i ] - gv_alpha_r [ gv_i - 1 ] ) * gv_diameter / 2
gv_d = ( gv_d_l + gv_d_r ) / 2
gv_delta_theta = ( gv_d_r - gv_d_l ) / ( 2 * gv_dw )
gv_xt [ gv_i + 1 ] = ( gv_d * Math.Sin ( gv_thetat [ gv_i ] + gv_delta_theta / 2 ) + gv_xt [ gv_i ] )
gv_yt [ gv_i + 1 ] = ( gv_d * Math.Cos ( gv_thetat [ gv_i ] + gv_delta_theta / 2 ) + gv_yt [ gv_i ] )
gv_thetat [ gv_i + 1 ] = gv_thetat [ gv_i ] + gv_delta_theta
gv_xtime = gv_xt [ gv_i + 1 ]
gv_ytime = gv_yt [ gv_i + 1 ]
gv_thetatime = gv_thetat [ gv_i + 1 ]
gv_i = gv_i + 1
Program.Delay ( 10 )
EndWhile
EndSub
Sub f_display_0
gv_old_b = 0
gv_old_c = 0
While "True"
LCD.StopUpdate ()
LCD.Clear ()
LCD.Write ( 5 , 5 , "xt: " + Math.Round ( gv_xt [ gv_i ] * 100 ) / 100 )
LCD.Write ( 5 , 15 , "yt: " + Math.Round ( gv_yt [ gv_i ] * 100 ) / 100 )
LCD.Write ( 5 , 25 , "thetat: " + math.getdegrees ( gv_thetat [ gv_i ] ) )
LCD.Write ( 5 , 35 , "centro: " + gv_centro )
LCD.Write ( 5 , 45 , "Velocidad de B:  " + MotorB.GetSpeed () * - 1 )
LCD.Write ( 5 , 55 , "Velocidad de C:  " + MotorC.GetSpeed () )
LCD.Write ( 5 , 65 , "rad/s de B:  " + Math.GetRadians ( MotorB.GetTacho () - gv_old_b ) / 0.05 * - 1 )
LCD.Write ( 5 , 75 , "rad/s de C:  " + Math.GetRadians ( MotorC.GetTacho () - gv_old_c ) / 0.05 )
LCD.Write ( 5 , 85 , "Encoder de B:  " + MotorB.GetTacho () * - 1 )
LCD.Write ( 5 , 95 , "Encoder de C:  " + MotorC.GetTacho () )
LCD.Write ( 5 , 105 , "Delta T:  " + gv_d_t )
LCD.Update ()
Program.Delay ( 50 )
gv_old_b = MotorB.GetTacho ()
gv_old_c = MotorC.GetTacho ()
EndWhile
EndSub
Sub f_main_0
f_startarm_0 ()
lv_velocidad_1 = 30
lv_distancia_1 = 10
f_encoderrectomm_2 ()
f_lectura_1 ()
gv_floor = lv_read_126
lv_velocidad_1 = - 30
lv_distancia_1 = 5
f_encoderrectomm_2 ()
lv_v_95 = 30
lv_aenc_95 = - 840
f_bmovea_2 ()
lv_v_109 = 40
lv_aenc_109 = - 280
f_bmovedsafe_2 ()
lv_v_108 = - 40
lv_t_108 = 200
f_bmovedtimer_2 ()
lv_v_96 = 30
f_bmovea0_1 ()
lv_velocidad_1 = 30
lv_distancia_1 = 20
f_encoderrectomm_2 ()
f_lectura_1 ()
gv_floor = lv_read_126
lv_v_95 = 30
lv_aenc_95 = - 600
f_bmovea_2 ()
lv_velocidad_1 = - 30
lv_distancia_1 = 6
f_encoderrectomm_2 ()
lv_v_95 = 30
lv_aenc_95 = - 700
f_bmovea_2 ()
lv_v_105 = 20
lv_aenc_105 = - 300
f_bmoved_2 ()
lv_v_95 = 10
lv_aenc_95 = - 750
f_bmovea_2 ()
Program.Delay ( 400 )
lv_v_106 = 20
f_bmoved0_1 ()
lv_v_101 = 30
f_bmovead0_1 ()
Program.Delay ( 10000 )
EndSub
Sub f_encoderrectomm_2
lv_velocidad_1 = lv_velocidad_1 * gv_sentido_motores
lv_diametro_1 = 5.6
lv_enc_1 = lv_distancia_1 * 360 / Math.Pi / lv_diametro_1
lv_start_b_1 = Motor.GetCount ( "B" ) * - 1
lv_start_c_1 = Motor.GetCount ( "C" )
lv_encoder_c_1 = Motor.GetCount ( "C" ) - lv_start_c_1
While Math.abs ( lv_encoder_c_1 ) < lv_enc_1
lv_encoder_b_1 = Motor.GetCount ( "B" ) * - 1 - lv_start_b_1
lv_encoder_c_1 = Motor.GetCount ( "C" ) - lv_start_c_1
lv_error_1 = ( lv_encoder_b_1 - lv_encoder_c_1 ) * gv_sentido_motores
lv_proporcial_1 = lv_error_1 * 2
Motor.StartSync ( "BC" , - ( lv_velocidad_1 - lv_proporcial_1 ) , lv_velocidad_1 + lv_proporcial_1 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub f_sl14sicf_6
lv_i_56 = "B"
lv_d_56 = "C"
lv_accelencoder_56 = ( lv_accelencoder_56 / ( 5.6 * Math.Pi ) ) * 360
lv_u_56 = 0
lv_error_56 = 0
lv_olderror_56 = 0
lv_errsum_56 = 0
Motor.ResetCount ( "C" )
While Sensor.ReadPercent ( 1 ) > 15 Or Sensor.ReadPercent ( 4 ) > 15
lv_vel_56 = ( Motor.GetCount ( "C" ) / lv_accelencoder_56 * 0.72 ) * ( lv_vmax_56 + lv_v0_56 ) + lv_v0_56
lv_vel_56 = Math.Min ( lv_vel_56 , lv_vmax_56 )
lv_sentido_56 = lv_vel_56 / Math.Abs ( lv_vel_56 )
lv_error_56 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_56
lv_errsum_56 = lv_errsum_56 + lv_error_56
lv_u_56 = lv_error_56 * lv_kp_56 + ( lv_error_56 - lv_olderror_56 ) * lv_kd_56 + lv_errsum_56 * lv_ki_56
Motor.StartSync ( lv_i_56 + lv_d_56 , - ( lv_vel_56 + lv_u_56 ) * gv_sentido_motores , ( lv_vel_56 - lv_u_56 ) * gv_sentido_motores )
lv_olderror_56 = lv_error_56
EndWhile
Motor.Stop ( lv_i_56 + lv_d_56 , "False" )
EndSub
Sub f_sl14pidf_4
lv_velocidad_72 = lv_velocidad_72 * gv_sentido_motores
lv_i_72 = "B"
lv_d_72 = "C"
lv_error_72 = 0
lv_olderror_72 = 0
lv_errsum_72 = 0
lv_u_72 = 0
lv_sentido_72 = lv_velocidad_72 / Math.Abs ( lv_velocidad_72 )
While Sensor.ReadPercent ( 1 ) > 15 Or Sensor.ReadPercent ( 4 ) > 15
lv_error_72 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_72 * gv_sentido_motores
lv_errsum_72 = lv_errsum_72 + lv_error_72
lv_u_72 = lv_error_72 * lv_kp_72 + ( lv_error_72 - lv_olderror_72 ) * lv_kd_72 + lv_errsum_72 * lv_ki_72
Motor.StartSync ( lv_i_72 + lv_d_72 , - ( lv_velocidad_72 + lv_u_72 ) , lv_velocidad_72 - lv_u_72 )
lv_olderror_72 = lv_error_72
EndWhile
Motor.Stop ( lv_i_72 + lv_d_72 , "False" )
EndSub
Sub f_sl14pidencf_5
lv_velocidad_76 = lv_velocidad_76 * gv_sentido_motores
lv_i_76 = "B"
lv_d_76 = "C"
lv_error_76 = 0
lv_olderror_76 = 0
lv_errsum_76 = 0
lv_u_76 = 0
lv_sentido_76 = lv_velocidad_76 / Math.Abs ( lv_velocidad_76 )
lv_encoder_76 = lv_encoder_76 / ( 5.6 * Math.Pi ) * 360
lv_start_c_76 = Motor.GetCount ( "C" )
lv_encoder_c_76 = 0
While Math.Abs ( lv_encoder_c_76 ) < lv_encoder_76
lv_encoder_c_76 = Motor.GetCount ( "C" ) - lv_start_c_76
lv_error_76 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_76 * gv_sentido_motores
lv_errsum_76 = lv_errsum_76 + lv_error_76
lv_u_76 = lv_error_76 * lv_kp_76 + ( lv_error_76 - lv_olderror_76 ) * lv_kd_76 + lv_errsum_76 * lv_ki_76
Motor.StartSync ( lv_i_76 + lv_d_76 , - ( lv_velocidad_76 + lv_u_76 ) , lv_velocidad_76 - lv_u_76 )
lv_olderror_76 = lv_error_76
EndWhile
Motor.Stop ( lv_i_76 + lv_d_76 , "False" )
EndSub
Sub f_smart14pidf_4
lv_vmax_88 = lv_vmax_88 * gv_sentido_motores
lv_i_88 = "B"
lv_d_88 = "C"
lv_v0_88 = 10 * gv_sentido_motores
lv_accelencoder_88 = 150
lv_u_88 = 0
lv_errsum_88 = 0
lv_olderror_88 = 0
Motor.ResetCount ( "C" )
While Sensor.ReadPercent ( 1 ) > 15 Or Sensor.ReadPercent ( 4 ) > 15
lv_vel_88 = ( Motor.GetCount ( "C" ) / lv_accelencoder_88 ) * ( lv_vmax_88 + lv_v0_88 ) + lv_v0_88
lv_vel_88 = Math.Min ( lv_vel_88 , lv_vmax_88 )
lv_sentido_88 = lv_vel_88 / Math.Abs ( lv_vel_88 )
lv_error_88 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_88 * gv_sentido_motores
lv_errsum_88 = lv_errsum_88 * 0.9 + lv_error_88
lv_u_88 = lv_error_88 * lv_kp_88 + ( lv_error_88 - lv_olderror_88 ) * lv_kd_88 + lv_errsum_88 * lv_ki_88
Motor.StartSync ( lv_i_88 + lv_d_88 , - ( lv_vel_88 + lv_u_88 ) , lv_vel_88 - lv_u_88 )
lv_olderror_88 = lv_error_88
EndWhile
Motor.Stop ( lv_i_88 + lv_d_88 , "False" )
EndSub
Sub f_bmovea_2
lv_encdiff_95 = lv_aenc_95 - Motor.GetCount ( "A" )
lv_signo_95 = lv_encdiff_95 / Math.Abs ( lv_encdiff_95 )
If lv_encdiff_95 <> 0 Then
MotorA.StartSpeed ( lv_signo_95 * lv_v_95 )
While Math.Abs ( Motor.GetCount ( "A" ) - lv_aenc_95 ) > 5
EndWhile
Motor.Stop ( "A" , "True" )
EndIf
EndSub
Sub f_bmovea0_1
lv_encdiff_96 = - 5 - Motor.GetCount ( "A" )
lv_signo_96 = lv_encdiff_96 / Math.Abs ( lv_encdiff_96 )
If lv_encdiff_96 <> 0 Then
MotorA.StartSpeed ( lv_signo_96 * lv_v_96 )
While Math.Abs ( Motor.GetCount ( "A" ) + 5 ) > 5
EndWhile
Motor.Stop ( "A" , "True" )
EndIf
EndSub
Sub f_bmovead0_1
lv_aenc_101 = - 10
While MotorA.GetTacho () <> lv_aenc_101 Or MotorD.GetTacho () <> lv_aenc_101
If MotorA.GetTacho () < lv_aenc_101 Then
MotorA.StartSpeed ( Math.Min ( lv_v_101 , lv_v_101 / 2 + ( lv_aenc_101 - MotorA.GetTacho () ) / 10 ) )
ElseIf MotorA.GetTacho () > lv_aenc_101 Then
MotorA.StartSpeed ( - Math.Min ( lv_v_101 , lv_v_101 / 2 + ( MotorA.GetTacho () - lv_aenc_101 ) / 10 ) )
Else
MotorA.OffAndBrake ()
EndIf
If MotorD.GetTacho () < lv_aenc_101 Then
MotorD.StartSpeed ( Math.Min ( lv_v_101 , lv_v_101 / 2 + ( lv_aenc_101 - MotorD.GetTacho () ) / 10 ) )
ElseIf MotorD.GetTacho () > lv_aenc_101 Then
MotorD.StartSpeed ( - Math.Min ( lv_v_101 , lv_v_101 / 2 + ( MotorD.GetTacho () - lv_aenc_101 ) / 10 ) )
Else
MotorD.OffAndBrake ()
EndIf
EndWhile
MotorAD.OffAndBrake ()
EndSub
Sub f_bmoved_2
lv_encdiff_105 = lv_aenc_105 - Motor.GetCount ( "D" )
lv_signo_105 = lv_encdiff_105 / Math.Abs ( lv_encdiff_105 )
If lv_encdiff_105 <> 0 Then
MotorD.StartSpeed ( lv_signo_105 * lv_v_105 )
While Math.Abs ( Motor.GetCount ( "D" ) - lv_aenc_105 ) > 10
EndWhile
Motor.Stop ( "D" , "True" )
EndIf
EndSub
Sub f_bmoved0_1
If Motor.GetCount ( "D" ) > - 10 Then
While Motor.GetCount ( "D" ) > - 10
MotorD.StartSpeed ( - lv_v_106 )
EndWhile
Motor.Stop ( "D" , "True" )
ElseIf Motor.GetCount ( "D" ) < - 10 Then
While Motor.GetCount ( "D" ) < - 10
MotorD.StartSpeed ( lv_v_106 )
EndWhile
Motor.Stop ( "D" , "True" )
Else
Motor.Stop ( "D" , "True" )
EndIf
EndSub
Sub f_bmovedtimer_2
Time.Reset1 ()
While Time.Get1 () < lv_t_108
MotorD.StartSpeed ( lv_v_108 )
EndWhile
Motor.Stop ( "D" , "True" )
EndSub
Sub f_bmovedsafe_2
lv_encdiff_109 = lv_aenc_109 - Motor.GetCount ( "D" )
lv_signo_109 = lv_encdiff_109 / Math.Abs ( lv_encdiff_109 )
lv_safetytimer_109 = Math.Max ( ( ( Math.abs ( lv_encdiff_109 ) / 100 ) / ( lv_v_109 / 20 ) * 650 * 2 ) , 400 )
Time.Reset3 ()
If lv_encdiff_109 <> 0 Then
While Math.Abs ( Motor.GetCount ( "D" ) - lv_aenc_109 ) > 5 and Time.Get3 () < lv_safetytimer_109
MotorD.StartSpeed ( lv_signo_109 * lv_v_109 )
LCD.Clear ()
LCD.Write ( 5 , 30 , "SafetyTimer: " + lv_safetytimer_109 )
EndWhile
Motor.Stop ( "D" , "True" )
EndIf
EndSub
Sub f_rgbdetect1_2
Sensor.SetMode ( 1 , 4 )
lv_red_110 = 15
lv_yellow_110 = 60
lv_green_110 = 170
lv_blue_110 = 330
lv_valuenegro_110 = 10
lv_valueblanco_110 = 100
lv_rwhite_110 = 147
lv_gwhite_110 = 143
lv_bwhite_110 = 160
lv_hue_110 = 0
lv_sat_110 = 0
lv_value_110 = 0
lv_color_110 = 0
lv_rnorma_110 [ 0 ] = 0
lv_gnorma_110 [ 0 ] = 0
lv_bnorma_110 [ 0 ] = 0
lv_maxa_110 [ 0 ] = 0
LCD.Clear ()
For lv_j_110 = 1 To lv_reps_110 Step 1
lv_rgb_110 = Sensor.ReadRaw ( 1 , 3 )
lv_rraw_110 = lv_rgb_110 [ 0 ]
lv_graw_110 = lv_rgb_110 [ 1 ]
lv_braw_110 = lv_rgb_110 [ 2 ]
lv_rnorma_110 [ lv_j_110 ] = Math.Round ( lv_rraw_110 / lv_rwhite_110 * 255 )
lv_gnorma_110 [ lv_j_110 ] = Math.Round ( lv_graw_110 / lv_gwhite_110 * 255 )
lv_bnorma_110 [ lv_j_110 ] = Math.Round ( lv_braw_110 / lv_bwhite_110 * 255 )
lv_maxa_110 [ lv_j_110 ] = Math.Max ( Math.Max ( lv_rnorma_110 [ lv_j_110 ] , lv_gnorma_110 [ lv_j_110 ] ) , lv_bnorma_110 [ lv_j_110 ] )
Program.Delay ( 5 )
EndFor
For lv_j_110 = 1 To lv_reps_110 Step 2
lv_rnorm_110 = lv_rnorma_110 [ lv_j_110 ] + lv_rnorma_110 [ lv_j_110 + 1 ]
lv_gnorm_110 = lv_gnorma_110 [ lv_j_110 ] + lv_gnorma_110 [ lv_j_110 + 1 ]
lv_bnorm_110 = lv_bnorma_110 [ lv_j_110 ] + lv_bnorma_110 [ lv_j_110 + 1 ]
lv_max_110 = lv_maxa_110 [ lv_j_110 ] + lv_maxa_110 [ lv_j_110 + 1 ]
EndFor
lv_rnorm_110 = lv_rnorm_110 / lv_reps_110
lv_gnorm_110 = lv_gnorm_110 / lv_reps_110
lv_bnorm_110 = lv_bnorm_110 / lv_reps_110
lv_max_110 = lv_max_110 / lv_reps_110
lv_min_110 = Math.Min ( Math.Min ( lv_rnorm_110 , lv_gnorm_110 ) , lv_bnorm_110 )
If lv_max_110 = lv_min_110 Then
lv_hue_110 = 0
ElseIf lv_max_110 = lv_rnorm_110 Then
If lv_gnorm_110 >= lv_bnorm_110 Then
lv_hue_110 = 60 * ( lv_gnorm_110 - lv_bnorm_110 ) / ( lv_max_110 - lv_min_110 )
Else
lv_hue_110 = 60 * ( lv_gnorm_110 - lv_bnorm_110 ) / ( lv_max_110 - lv_min_110 ) + 360
EndIf
ElseIf lv_max_110 = lv_gnorm_110 Then
lv_hue_110 = 60 * ( lv_bnorm_110 - lv_rnorm_110 ) / ( lv_max_110 - lv_min_110 ) + 120
Else
lv_hue_110 = 60 * ( lv_rnorm_110 - lv_gnorm_110 ) / ( lv_max_110 - lv_min_110 ) + 240
EndIf
If lv_max_110 = 0 Then
lv_sat_110 = 0
Else
lv_sat_110 = 1 - lv_min_110 / lv_max_110
EndIf
lv_value_110 = lv_max_110
lv_rgbgrey_110 = ( lv_valueblanco_110 + lv_valuenegro_110 ) / 2
If lv_rnorm_110 + lv_gnorm_110 + lv_bnorm_110 <= 3 Then
lv_color_110 = 0
Else
If lv_sat_110 < 0.4 Then
If lv_value_110 > lv_rgbgrey_110 Then
lv_color_110 = 6
Else
lv_color_110 = 1
EndIf
Else
If lv_hue_110 >= 0 And lv_hue_110 < lv_red_110 Then
lv_color_110 = 5
ElseIf lv_hue_110 >= lv_red_110 And lv_hue_110 < lv_yellow_110 Then
lv_color_110 = 4
ElseIf lv_hue_110 >= lv_yellow_110 And lv_hue_110 < lv_green_110 Then
lv_color_110 = 3
ElseIf lv_hue_110 >= lv_green_110 And lv_hue_110 < lv_blue_110 Then
lv_color_110 = 2
Else
lv_color_110 = 5
EndIf
EndIf
EndIf
LCD.Write ( 33 , 20 , "R: " + lv_rraw_110 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_110 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_110 )
LCD.Write ( 33 , 70 , "Color: " + lv_color_110 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_110 )
lv_color_122 = lv_color_110
f_leercolor_1 ()
EndSub
Sub f_rgbdetect2_2
Sensor.SetMode ( 2 , 4 )
lv_red_111 = 15
lv_yellow_111 = 60
lv_green_111 = 170
lv_blue_111 = 330
lv_valuenegro_111 = 10
lv_valueblanco_111 = 100
lv_rwhite_111 = 147
lv_gwhite_111 = 143
lv_bwhite_111 = 160
lv_hue_111 = 0
lv_sat_111 = 0
lv_value_111 = 0
lv_color_111 = 0
lv_rnorma_111 [ 0 ] = 0
lv_gnorma_111 [ 0 ] = 0
lv_bnorma_111 [ 0 ] = 0
lv_maxa_111 [ 0 ] = 0
LCD.Clear ()
For lv_j_111 = 1 To lv_reps_111 Step 1
lv_rgb_111 = Sensor.ReadRaw ( 2 , 3 )
lv_rraw_111 = lv_rgb_111 [ 0 ]
lv_graw_111 = lv_rgb_111 [ 1 ]
lv_braw_111 = lv_rgb_111 [ 2 ]
lv_rnorma_111 [ lv_j_111 ] = Math.Round ( lv_rraw_111 / lv_rwhite_111 * 255 )
lv_gnorma_111 [ lv_j_111 ] = Math.Round ( lv_graw_111 / lv_gwhite_111 * 255 )
lv_bnorma_111 [ lv_j_111 ] = Math.Round ( lv_braw_111 / lv_bwhite_111 * 255 )
lv_maxa_111 [ lv_j_111 ] = Math.Max ( Math.Max ( lv_rnorma_111 [ lv_j_111 ] , lv_gnorma_111 [ lv_j_111 ] ) , lv_bnorma_111 [ lv_j_111 ] )
Program.Delay ( 5 )
EndFor
For lv_j_111 = 1 To lv_reps_111 Step 2
lv_rnorm_111 = lv_rnorma_111 [ lv_j_111 ] + lv_rnorma_111 [ lv_j_111 + 1 ]
lv_gnorm_111 = lv_gnorma_111 [ lv_j_111 ] + lv_gnorma_111 [ lv_j_111 + 1 ]
lv_bnorm_111 = lv_bnorma_111 [ lv_j_111 ] + lv_bnorma_111 [ lv_j_111 + 1 ]
lv_max_111 = lv_maxa_111 [ lv_j_111 ] + lv_maxa_111 [ lv_j_111 + 1 ]
EndFor
lv_rnorm_111 = lv_rnorm_111 / lv_reps_111
lv_gnorm_111 = lv_gnorm_111 / lv_reps_111
lv_bnorm_111 = lv_bnorm_111 / lv_reps_111
lv_max_111 = lv_max_111 / lv_reps_111
lv_min_111 = Math.Min ( Math.Min ( lv_rnorm_111 , lv_gnorm_111 ) , lv_bnorm_111 )
If lv_max_111 = lv_min_111 Then
lv_hue_111 = 0
ElseIf lv_max_111 = lv_rnorm_111 Then
If lv_gnorm_111 >= lv_bnorm_111 Then
lv_hue_111 = 60 * ( lv_gnorm_111 - lv_bnorm_111 ) / ( lv_max_111 - lv_min_111 )
Else
lv_hue_111 = 60 * ( lv_gnorm_111 - lv_bnorm_111 ) / ( lv_max_111 - lv_min_111 ) + 360
EndIf
ElseIf lv_max_111 = lv_gnorm_111 Then
lv_hue_111 = 60 * ( lv_bnorm_111 - lv_rnorm_111 ) / ( lv_max_111 - lv_min_111 ) + 120
Else
lv_hue_111 = 60 * ( lv_rnorm_111 - lv_gnorm_111 ) / ( lv_max_111 - lv_min_111 ) + 240
EndIf
If lv_max_111 = 0 Then
lv_sat_111 = 0
Else
lv_sat_111 = 1 - lv_min_111 / lv_max_111
EndIf
lv_value_111 = lv_max_111
lv_rgbgrey_111 = ( lv_valueblanco_111 + lv_valuenegro_111 ) / 2
If lv_rnorm_111 + lv_gnorm_111 + lv_bnorm_111 <= 3 Then
lv_color_111 = 0
Else
If lv_sat_111 < 0.4 Then
If lv_value_111 > lv_rgbgrey_111 Then
lv_color_111 = 6
Else
lv_color_111 = 1
EndIf
Else
If lv_hue_111 >= 0 And lv_hue_111 < lv_red_111 Then
lv_color_111 = 5
ElseIf lv_hue_111 >= lv_red_111 And lv_hue_111 < lv_yellow_111 Then
lv_color_111 = 4
ElseIf lv_hue_111 >= lv_yellow_111 And lv_hue_111 < lv_green_111 Then
lv_color_111 = 3
ElseIf lv_hue_111 >= lv_green_111 And lv_hue_111 < lv_blue_111 Then
lv_color_111 = 2
Else
lv_color_111 = 5
EndIf
EndIf
EndIf
LCD.Write ( 33 , 20 , "R: " + lv_rraw_111 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_111 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_111 )
LCD.Write ( 33 , 70 , "Color: " + lv_color_111 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_111 )
lv_color_122 = lv_color_111
f_leercolor_1 ()
EndSub
Sub f_rgbdetect3_2
Sensor.SetMode ( 3 , 4 )
lv_red_112 = 15
lv_yellow_112 = 60
lv_green_112 = 170
lv_blue_112 = 330
lv_valuenegro_112 = 10
lv_valueblanco_112 = 100
lv_rwhite_112 = 147
lv_gwhite_112 = 143
lv_bwhite_112 = 160
lv_hue_112 = 0
lv_sat_112 = 0
lv_value_112 = 0
lv_color_112 = 0
lv_rnorma_112 [ 0 ] = 0
lv_gnorma_112 [ 0 ] = 0
lv_bnorma_112 [ 0 ] = 0
lv_maxa_112 [ 0 ] = 0
LCD.Clear ()
For lv_j_112 = 1 To lv_reps_112 Step 1
lv_rgb_112 = Sensor.ReadRaw ( 3 , 3 )
lv_rraw_112 = lv_rgb_112 [ 0 ]
lv_graw_112 = lv_rgb_112 [ 1 ]
lv_braw_112 = lv_rgb_112 [ 2 ]
lv_rnorma_112 [ lv_j_112 ] = Math.Round ( lv_rraw_112 / lv_rwhite_112 * 255 )
lv_gnorma_112 [ lv_j_112 ] = Math.Round ( lv_graw_112 / lv_gwhite_112 * 255 )
lv_bnorma_112 [ lv_j_112 ] = Math.Round ( lv_braw_112 / lv_bwhite_112 * 255 )
lv_maxa_112 [ lv_j_112 ] = Math.Max ( Math.Max ( lv_rnorma_112 [ lv_j_112 ] , lv_gnorma_112 [ lv_j_112 ] ) , lv_bnorma_112 [ lv_j_112 ] )
Program.Delay ( 5 )
EndFor
For lv_j_112 = 1 To lv_reps_112 Step 2
lv_rnorm_112 = lv_rnorma_112 [ lv_j_112 ] + lv_rnorma_112 [ lv_j_112 + 1 ]
lv_gnorm_112 = lv_gnorma_112 [ lv_j_112 ] + lv_gnorma_112 [ lv_j_112 + 1 ]
lv_bnorm_112 = lv_bnorma_112 [ lv_j_112 ] + lv_bnorma_112 [ lv_j_112 + 1 ]
lv_max_112 = lv_maxa_112 [ lv_j_112 ] + lv_maxa_112 [ lv_j_112 + 1 ]
EndFor
lv_rnorm_112 = lv_rnorm_112 / lv_reps_112
lv_gnorm_112 = lv_gnorm_112 / lv_reps_112
lv_bnorm_112 = lv_bnorm_112 / lv_reps_112
lv_max_112 = lv_max_112 / lv_reps_112
lv_min_112 = Math.Min ( Math.Min ( lv_rnorm_112 , lv_gnorm_112 ) , lv_bnorm_112 )
If lv_max_112 = lv_min_112 Then
lv_hue_112 = 0
ElseIf lv_max_112 = lv_rnorm_112 Then
If lv_gnorm_112 >= lv_bnorm_112 Then
lv_hue_112 = 60 * ( lv_gnorm_112 - lv_bnorm_112 ) / ( lv_max_112 - lv_min_112 )
Else
lv_hue_112 = 60 * ( lv_gnorm_112 - lv_bnorm_112 ) / ( lv_max_112 - lv_min_112 ) + 360
EndIf
ElseIf lv_max_112 = lv_gnorm_112 Then
lv_hue_112 = 60 * ( lv_bnorm_112 - lv_rnorm_112 ) / ( lv_max_112 - lv_min_112 ) + 120
Else
lv_hue_112 = 60 * ( lv_rnorm_112 - lv_gnorm_112 ) / ( lv_max_112 - lv_min_112 ) + 240
EndIf
If lv_max_112 = 0 Then
lv_sat_112 = 0
Else
lv_sat_112 = 1 - lv_min_112 / lv_max_112
EndIf
lv_value_112 = lv_max_112
lv_rgbgrey_112 = ( lv_valueblanco_112 + lv_valuenegro_112 ) / 2
If lv_rnorm_112 + lv_gnorm_112 + lv_bnorm_112 <= 3 Then
lv_color_112 = 0
Else
If lv_sat_112 < 0.4 Then
If lv_value_112 > lv_rgbgrey_112 Then
lv_color_112 = 6
Else
lv_color_112 = 1
EndIf
Else
If lv_hue_112 >= 0 And lv_hue_112 < lv_red_112 Then
lv_color_112 = 5
ElseIf lv_hue_112 >= lv_red_112 And lv_hue_112 < lv_yellow_112 Then
lv_color_112 = 4
ElseIf lv_hue_112 >= lv_yellow_112 And lv_hue_112 < lv_green_112 Then
lv_color_112 = 3
ElseIf lv_hue_112 >= lv_green_112 And lv_hue_112 < lv_blue_112 Then
lv_color_112 = 2
Else
lv_color_112 = 5
EndIf
EndIf
EndIf
LCD.Write ( 33 , 20 , "R: " + lv_rraw_112 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_112 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_112 )
LCD.Write ( 33 , 70 , "Color: " + lv_color_112 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_112 )
lv_color_122 = lv_color_112
f_leercolor_1 ()
EndSub
Sub f_rgbdetect4_2
Sensor.SetMode ( 4 , 4 )
lv_red_113 = 15
lv_yellow_113 = 60
lv_green_113 = 170
lv_blue_113 = 330
lv_valuenegro_113 = 10
lv_valueblanco_113 = 100
lv_rwhite_113 = 147
lv_gwhite_113 = 143
lv_bwhite_113 = 160
lv_hue_113 = 0
lv_sat_113 = 0
lv_value_113 = 0
lv_color_113 = 0
lv_rnorma_113 [ 0 ] = 0
lv_gnorma_113 [ 0 ] = 0
lv_bnorma_113 [ 0 ] = 0
lv_maxa_113 [ 0 ] = 0
LCD.Clear ()
For lv_j_113 = 1 To lv_reps_113 Step 1
lv_rgb_113 = Sensor.ReadRaw ( 4 , 3 )
lv_rraw_113 = lv_rgb_113 [ 0 ]
lv_graw_113 = lv_rgb_113 [ 1 ]
lv_braw_113 = lv_rgb_113 [ 2 ]
lv_rnorma_113 [ lv_j_113 ] = Math.Round ( lv_rraw_113 / lv_rwhite_113 * 255 )
lv_gnorma_113 [ lv_j_113 ] = Math.Round ( lv_graw_113 / lv_gwhite_113 * 255 )
lv_bnorma_113 [ lv_j_113 ] = Math.Round ( lv_braw_113 / lv_bwhite_113 * 255 )
lv_maxa_113 [ lv_j_113 ] = Math.Max ( Math.Max ( lv_rnorma_113 [ lv_j_113 ] , lv_gnorma_113 [ lv_j_113 ] ) , lv_bnorma_113 [ lv_j_113 ] )
Program.Delay ( 5 )
EndFor
For lv_j_113 = 1 To lv_reps_113 Step 2
lv_rnorm_113 = lv_rnorma_113 [ lv_j_113 ] + lv_rnorma_113 [ lv_j_113 + 1 ]
lv_gnorm_113 = lv_gnorma_113 [ lv_j_113 ] + lv_gnorma_113 [ lv_j_113 + 1 ]
lv_bnorm_113 = lv_bnorma_113 [ lv_j_113 ] + lv_bnorma_113 [ lv_j_113 + 1 ]
lv_max_113 = lv_maxa_113 [ lv_j_113 ] + lv_maxa_113 [ lv_j_113 + 1 ]
EndFor
lv_rnorm_113 = lv_rnorm_113 / lv_reps_113
lv_gnorm_113 = lv_gnorm_113 / lv_reps_113
lv_bnorm_113 = lv_bnorm_113 / lv_reps_113
lv_max_113 = lv_max_113 / lv_reps_113
lv_min_113 = Math.Min ( Math.Min ( lv_rnorm_113 , lv_gnorm_113 ) , lv_bnorm_113 )
If lv_max_113 = lv_min_113 Then
lv_hue_113 = 0
ElseIf lv_max_113 = lv_rnorm_113 Then
If lv_gnorm_113 >= lv_bnorm_113 Then
lv_hue_113 = 60 * ( lv_gnorm_113 - lv_bnorm_113 ) / ( lv_max_113 - lv_min_113 )
Else
lv_hue_113 = 60 * ( lv_gnorm_113 - lv_bnorm_113 ) / ( lv_max_113 - lv_min_113 ) + 360
EndIf
ElseIf lv_max_113 = lv_gnorm_113 Then
lv_hue_113 = 60 * ( lv_bnorm_113 - lv_rnorm_113 ) / ( lv_max_113 - lv_min_113 ) + 120
Else
lv_hue_113 = 60 * ( lv_rnorm_113 - lv_gnorm_113 ) / ( lv_max_113 - lv_min_113 ) + 240
EndIf
If lv_max_113 = 0 Then
lv_sat_113 = 0
Else
lv_sat_113 = 1 - lv_min_113 / lv_max_113
EndIf
lv_value_113 = lv_max_113
lv_rgbgrey_113 = ( lv_valueblanco_113 + lv_valuenegro_113 ) / 2
If lv_rnorm_113 + lv_gnorm_113 + lv_bnorm_113 <= 3 Then
lv_color_113 = 0
Else
If lv_sat_113 < 0.4 Then
If lv_value_113 > lv_rgbgrey_113 Then
lv_color_113 = 6
Else
lv_color_113 = 1
EndIf
Else
If lv_hue_113 >= 0 And lv_hue_113 < lv_red_113 Then
lv_color_113 = 5
ElseIf lv_hue_113 >= lv_red_113 And lv_hue_113 < lv_yellow_113 Then
lv_color_113 = 4
ElseIf lv_hue_113 >= lv_yellow_113 And lv_hue_113 < lv_green_113 Then
lv_color_113 = 3
ElseIf lv_hue_113 >= lv_green_113 And lv_hue_113 < lv_blue_113 Then
lv_color_113 = 2
Else
lv_color_113 = 5
EndIf
EndIf
EndIf
LCD.Write ( 33 , 20 , "R: " + lv_rraw_113 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_113 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_113 )
LCD.Write ( 33 , 70 , "Color: " + lv_color_113 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_113 )
lv_color_122 = lv_color_113
f_leercolor_1 ()
EndSub
Sub f_leercolor_1
If lv_color_122 = 0 Then
Speaker.Play ( 100 , "WRO2023/Zero" )
ElseIf lv_color_122 = 1 Then
Speaker.Play ( 100 , "WRO2023/Black" )
ElseIf lv_color_122 = 2 Then
Speaker.Play ( 100 , "WRO2023/Blue" )
ElseIf lv_color_122 = 3 Then
Speaker.Play ( 100 , "WRO2023/Green" )
ElseIf lv_color_122 = 4 Then
Speaker.Play ( 100 , "WRO2023/Yellow" )
ElseIf lv_color_122 = 5 Then
Speaker.Play ( 100 , "WRO2023/Red" )
ElseIf lv_color_122 = 6 Then
Speaker.Play ( 100 , "WRO2023/White" )
ElseIf lv_color_122 = 7 Then
Speaker.Play ( 100 , "WRO2023/Brown" )
EndIf
EndSub
Sub f_lectura_1
lv_v_95 = 30
lv_aenc_95 = - 650
f_bmovea_2 ()
lv_reps_111 = 5
f_rgbdetect2_2 ()
lv_read_126 = lv_color_111
lv_color_122 = lv_read_126
f_leercolor_1 ()
EndSub
Sub f_traspmatvect3x3_2
lv_s_127 = Vector.Init ( 3 * 3 , 0 )
lv_s_127 [ 0 ] = lv_m_127 [ 0 ]
lv_s_127 [ 1 ] = lv_m_127 [ 3 ]
lv_s_127 [ 2 ] = lv_m_127 [ 6 ]
lv_s_127 [ 3 ] = lv_m_127 [ 1 ]
lv_s_127 [ 4 ] = lv_m_127 [ 4 ]
lv_s_127 [ 5 ] = lv_m_127 [ 7 ]
lv_s_127 [ 6 ] = lv_m_127 [ 2 ]
lv_s_127 [ 7 ] = lv_m_127 [ 5 ]
lv_s_127 [ 8 ] = lv_m_127 [ 8 ]
EndSub
Sub f_invmatvect3x3_2
lv_determinante_128 = lv_m_128 [ 0 ] * ( lv_m_128 [ 4 ] * lv_m_128 [ 8 ] - lv_m_128 [ 5 ] * lv_m_128 [ 7 ] ) - lv_m_128 [ 1 ] * ( lv_m_128 [ 3 ] * lv_m_128 [ 8 ] - lv_m_128 [ 5 ] * lv_m_128 [ 6 ] ) + lv_m_128 [ 2 ] * ( lv_m_128 [ 3 ] * lv_m_128 [ 7 ] - lv_m_128 [ 4 ] * lv_m_128 [ 6 ] )
If lv_determinante_128 <> 0 Then
lv_s_128 [ 0 ] = ( lv_m_128 [ 4 ] * lv_m_128 [ 8 ] - lv_m_128 [ 5 ] * lv_m_128 [ 7 ] ) / lv_determinante_128
lv_s_128 [ 1 ] = ( lv_m_128 [ 3 ] * lv_m_128 [ 8 ] - lv_m_128 [ 5 ] * lv_m_128 [ 6 ] ) / lv_determinante_128
lv_s_128 [ 2 ] = ( lv_m_128 [ 3 ] * lv_m_128 [ 7 ] - lv_m_128 [ 4 ] * lv_m_128 [ 6 ] ) / lv_determinante_128
lv_s_128 [ 3 ] = ( lv_m_128 [ 1 ] * lv_m_128 [ 8 ] - lv_m_128 [ 2 ] * lv_m_128 [ 7 ] ) / lv_determinante_128
lv_s_128 [ 4 ] = ( lv_m_128 [ 0 ] * lv_m_128 [ 8 ] - lv_m_128 [ 2 ] * lv_m_128 [ 6 ] ) / lv_determinante_128
lv_s_128 [ 5 ] = ( lv_m_128 [ 0 ] * lv_m_128 [ 7 ] - lv_m_128 [ 1 ] * lv_m_128 [ 6 ] ) / lv_determinante_128
lv_s_128 [ 6 ] = ( lv_m_128 [ 1 ] * lv_m_128 [ 5 ] - lv_m_128 [ 2 ] * lv_m_128 [ 4 ] ) / lv_determinante_128
lv_s_128 [ 7 ] = ( lv_m_128 [ 0 ] * lv_m_128 [ 5 ] - lv_m_128 [ 2 ] * lv_m_128 [ 3 ] ) / lv_determinante_128
lv_s_128 [ 8 ] = ( lv_m_128 [ 0 ] * lv_m_128 [ 4 ] - lv_m_128 [ 1 ] * lv_m_128 [ 3 ] ) / lv_determinante_128
EndIf
EndSub
Sub f_multimatrizcoef_3
lv_i_129 = 0
While lv_m_129 [ lv_i_129 ] <> 0
lv_s_129 [ lv_i_129 ] = lv_k_129 * lv_m_129 [ lv_i_129 ]
lv_i_129 = lv_i_129 + 1
EndWhile
EndSub
