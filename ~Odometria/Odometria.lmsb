DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEGREES_PER_SECOND_A_7
DATAF VLV_DEGREES_PER_SECOND_D_7
DATAF VLV_DEGREES_A_7
DATAF VLV_DEGREES_D_7
DATAF VLV_DEGREES_PER_SECOND_9
DATAF VLV_VELOCIDAD_1
DATAF VLV_X_1
DATAF VLV_Y_1
DATAF VLV_THETA_1
DATAF VLV_DEGREES_PER_SECOND_6
DATAF VLV_DEGREES_6
DATAF VLV_DEGREES_PER_SECOND_4
DATAF VLV_DEGREES_4
DATAF VLV_DEGREES_PER_SECOND_8
DATAF VGV_CENTRO
DATAF VGV_XTIME
DATAF VGV_YTIME
DATAF VGV_THETATIME
DATAF VGV_XTCORRECT
DATAF VGV_YTCORRECT
DATAF VGV_THETATCORRECT
DATAF VGV_SENTIDO_D
DATAF VGV_ANGULO
DATAF VGV_ANGLE_A
DATAF VGV_ANGLE_D
ARRAY16 VGV_ALPHA_L 2
ARRAY16 VGV_ALPHA_R 2
DATAF VGV_OLDB
DATAF VGV_OLDC
ARRAY16 VGV_XT 2
ARRAY16 VGV_YT 2
ARRAY16 VGV_THETAT 2
DATAF VGV_I
DATAF VGV_DW
DATAF VGV_DIAMETER
DATAF VGV_D_L
DATAF VGV_D_R
DATAF VGV_D
DATAF VGV_DELTA_THETA
DATAF VGV_KP_A
DATAF VGV_KI_A
DATAF VGV_KD_A
DATAF VGV_KP_D
DATAF VGV_KI_D
DATAF VGV_KD_D
DATAF VGV_ERROR_A
DATAF VGV_ERROR_D
DATAF VGV_ERRSUM_A
DATAF VGV_ERRSUM_D
DATAF VGV_OLDERROR_A
DATAF VGV_OLDERROR_D
DATAF VGV_U_A
DATAF VGV_U_D
DATAS VLV_I_1 252
DATAS VLV_D_1 252
DATAF VLV_G1_1
DATAF VLV_SIGNO_1
DATAF VLV_DIFF_X_1
DATAF VLV_DIFF_Y_1
DATAF VLV_DIFF_THETA_1
DATAF VLV_ANGULO_GIRO_INICIAL_1
DATAF VLV_V1_1
DATAF VLV_V2_1
DATAF VLV_VMIN_1
DATAF VLV_VMAX_1
DATAF VLV_ENCODR_1
DATAF VLV_DISTANCIA_1
DATAF VLV_ENC_1
DATAF VLV_ANGULO_GIRO_FINAL_1
DATAF VLV_ROTATION_4
DATAF VLV_SIGN_4
DATAF VLV_PROGRESS_4
DATAF VLV_DEGREES_PER_INTERVAL_4
DATAF VLV_ROTATION_6
DATAF VLV_SIGN_6
DATAF VLV_PROGRESS_6
DATAF VLV_DEGREES_PER_INTERVAL_6
DATAF VLV_DEGREES_8
DATAF VLV_ROTATION_8
DATAF VLV_SIGN_8
DATAF VLV_PROGRESS_8
DATAF VLV_DEGREES_PER_INTERVAL_8
DATAF VLV_DEGREES_9
DATAF VLV_ROTATION_9
DATAF VLV_SIGN_9
DATAF VLV_PROGRESS_9
DATAF VLV_DEGREES_PER_INTERVAL_9
DATA32 RUNCOUNTER_F_PIDCONTROL_AD_0
DATA32 RUNCOUNTER_F_ODOMETRY_0
DATA32 RUNCOUNTER_F_DISPLAY_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_7
    MOVEF_F 0.0 VLV_DEGREES_A_7
    MOVEF_F 0.0 VLV_DEGREES_D_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_9
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_X_1
    MOVEF_F 0.0 VLV_Y_1
    MOVEF_F 0.0 VLV_THETA_1
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_6
    MOVEF_F 0.0 VLV_DEGREES_6
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F 0.0 VLV_DEGREES_4
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_8
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_ANGULO
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_L
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYCREATE_FLOAT VGV_XT
    CALL ARRAYCREATE_FLOAT VGV_YT
    CALL ARRAYCREATE_FLOAT VGV_THETAT
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_L
    MOVEF_F 0.0 VGV_D_R
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_DELTA_THETA
    MOVEF_F 0.0 VGV_KP_A
    MOVEF_F 0.0 VGV_KI_A
    MOVEF_F 0.0 VGV_KD_A
    MOVEF_F 0.0 VGV_KP_D
    MOVEF_F 0.0 VGV_KI_D
    MOVEF_F 0.0 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    STRINGS DUPLICATE '' VLV_I_1
    STRINGS DUPLICATE '' VLV_D_1
    MOVEF_F 0.0 VLV_G1_1
    MOVEF_F 0.0 VLV_SIGNO_1
    MOVEF_F 0.0 VLV_DIFF_X_1
    MOVEF_F 0.0 VLV_DIFF_Y_1
    MOVEF_F 0.0 VLV_DIFF_THETA_1
    MOVEF_F 0.0 VLV_ANGULO_GIRO_INICIAL_1
    MOVEF_F 0.0 VLV_V1_1
    MOVEF_F 0.0 VLV_V2_1
    MOVEF_F 0.0 VLV_VMIN_1
    MOVEF_F 0.0 VLV_VMAX_1
    MOVEF_F 0.0 VLV_ENCODR_1
    MOVEF_F 0.0 VLV_DISTANCIA_1
    MOVEF_F 0.0 VLV_ENC_1
    MOVEF_F 0.0 VLV_ANGULO_GIRO_FINAL_1
    MOVEF_F 0.0 VLV_ROTATION_4
    MOVEF_F 0.0 VLV_SIGN_4
    MOVEF_F 0.0 VLV_PROGRESS_4
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_4
    MOVEF_F 0.0 VLV_ROTATION_6
    MOVEF_F 0.0 VLV_SIGN_6
    MOVEF_F 0.0 VLV_PROGRESS_6
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_6
    MOVEF_F 0.0 VLV_DEGREES_8
    MOVEF_F 0.0 VLV_ROTATION_8
    MOVEF_F 0.0 VLV_SIGN_8
    MOVEF_F 0.0 VLV_PROGRESS_8
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_8
    MOVEF_F 0.0 VLV_DEGREES_9
    MOVEF_F 0.0 VLV_ROTATION_9
    MOVEF_F 0.0 VLV_SIGN_9
    MOVEF_F 0.0 VLV_PROGRESS_9
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_9
    MOVE32_32 0 RUNCOUNTER_F_PIDCONTROL_AD_0
    MOVE32_32 0 RUNCOUNTER_F_ODOMETRY_0
    MOVE32_32 0 RUNCOUNTER_F_DISPLAY_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_PIDCONTROL_AD_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_PIDCONTROL_AD_0 0
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 -1 RUNCOUNTER_F_PIDCONTROL_AD_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_ODOMETRY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_ODOMETRY_0 1
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 -1 RUNCOUNTER_F_ODOMETRY_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_DISPLAY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_DISPLAY_0 2
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 -1 RUNCOUNTER_F_DISPLAY_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_PIDCONTROL_AD_0
subcall PROGRAM_F_ODOMETRY_0
subcall PROGRAM_F_DISPLAY_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    DATAF F.6
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch342
    WRITE32 ENDSUB_F_PIDCONTROL_AD_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_PIDCONTROL_AD_0
  dispatch342:
    JR_NEQ32 SUBPROGRAM 1 dispatch343
    WRITE32 ENDSUB_F_ODOMETRY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ODOMETRY_0
  dispatch343:
    JR_NEQ32 SUBPROGRAM 2 dispatch344
    WRITE32 ENDSUB_F_DISPLAY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DISPLAY_0
  dispatch344:
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_7
    MOVEF_F 0.0 VLV_DEGREES_A_7
    MOVEF_F 0.0 VLV_DEGREES_D_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_9
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_X_1
    MOVEF_F 0.0 VLV_Y_1
    MOVEF_F 0.0 VLV_THETA_1
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_6
    MOVEF_F 0.0 VLV_DEGREES_6
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F 0.0 VLV_DEGREES_4
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_8
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_ANGULO
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 1.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_ANGULO
    WRITE32 ENDSUB_F_STARTARM_0:CALLSUB0 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STARTARM_0
CALLSUB0:
    DATA32 tmp1
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 1  RUNCOUNTER_F_PIDCONTROL_AD_0 tmp1
    JR_NEQ32 0 tmp1 alreadylaunched1
    OBJECT_START TF_PIDCONTROL_AD_0
  alreadylaunched1:
    DATA32 tmp2
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 1  RUNCOUNTER_F_ODOMETRY_0 tmp2
    JR_NEQ32 0 tmp2 alreadylaunched2
    OBJECT_START TF_ODOMETRY_0
  alreadylaunched2:
    DATA32 tmp3
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 1  RUNCOUNTER_F_DISPLAY_0 tmp3
    JR_NEQ32 0 tmp3 alreadylaunched3
    OBJECT_START TF_DISPLAY_0
  alreadylaunched3:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB4 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB4:
    DATA32 milliseconds5
	MOVEF_32 20000.0 milliseconds5
	DATA32 timer5
	TIMER_WAIT milliseconds5 timer5
	TIMER_READY timer5
ENDTHREAD:
    RETURN
SUB_F_STARTARM_0:
    MOVEF_F 200.0 VLV_DEGREES_PER_SECOND_A_7
    MOVEF_F 200.0 VLV_DEGREES_PER_SECOND_D_7
    MOVEF_F -200.0 VLV_DEGREES_A_7
    MOVEF_F 200.0 VLV_DEGREES_D_7
    WRITE32 ENDSUB_F_BMOVEAD_4:CALLSUB6 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD_4
CALLSUB6:
    DATA32 milliseconds7
	MOVEF_32 1000.0 milliseconds7
	DATA32 timer7
	TIMER_WAIT milliseconds7 timer7
	TIMER_READY timer7
    CALL MOTOR.RESETCOUNT 'A'
    CALL MOTOR.RESETCOUNT 'D'
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    TIMER_READ timeMC1
  while11:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 500.0 endwhile11
  whilebody11:
    ADDF VGV_ANGLE_D 1.0 VGV_ANGLE_D
    DATA32 milliseconds14
	MOVEF_32 5.0 milliseconds14
	DATA32 timer14
	TIMER_WAIT milliseconds14 timer14
	TIMER_READY timer14
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 500.0 whilebody11
  endwhile11:
    CALL MOTOR.GETCOUNT 'D' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 60.0 else16_1
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_9
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB19 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB19:
    MOVEF_F 1.0 VGV_SENTIDO_D
    JR endif16
  else16_1:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_9
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB20 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB20:
    MOVEF_F -1.0 VGV_SENTIDO_D
  else16_2:
  endif16:
    DATA32 milliseconds21
	MOVEF_32 100.0 milliseconds21
	DATA32 timer21
	TIMER_WAIT milliseconds21 timer21
	TIMER_READY timer21
RETSUB_F_STARTARM_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STARTARM_0:
SUB_F_ODOMETRY_0:
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_XT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_YT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_THETAT
    MOVEF_F 0.0 VGV_I
  while27:
  whilebody27:
    MOVEF_F 84.5 VGV_DW
    MOVEF_F 56.0 VGV_DIAMETER
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.2
    DIVF F.2 57.295779513082 F.1
    MULF F.1 -1.0 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_L
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.2
    DIVF F.2 57.295779513082 F.1
    MULF F.1 -1.0 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_R
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_L
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_L
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf41
    DATA8 flag41
    DIVF F.0 2.0 tmpf41
    CP_EQF 0.0 2.0 flag41
    SELECTF flag41 0.0 tmpf41 VGV_D_L

    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_R
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_R
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf47
    DATA8 flag47
    DIVF F.0 2.0 tmpf47
    CP_EQF 0.0 2.0 flag47
    SELECTF flag47 0.0 tmpf47 VGV_D_R

    ADDF VGV_D_L VGV_D_R F.0
    DATAF tmpf49
    DATA8 flag49
    DIVF F.0 2.0 tmpf49
    CP_EQF 0.0 2.0 flag49
    SELECTF flag49 0.0 tmpf49 VGV_D

    SUBF VGV_D_L VGV_D_R F.0
    MULF 2.0 VGV_DW F.1
    DATAF tmpf52
    DATA8 flag52
    DIVF F.0 F.1 tmpf52
    CP_EQF 0.0 F.1 flag52
    SELECTF flag52 0.0 tmpf52 VGV_DELTA_THETA

    JR_EQF VGV_XTCORRECT 0.0 else53_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_XTCORRECT VGV_XT
    MOVEF_F 0.0 VGV_XTCORRECT
    JR endif53
  else53_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.5 VGV_THETAT
    DATAF tmpf58
    DATA8 flag58
    DIVF VGV_DELTA_THETA 2.0 tmpf58
    CP_EQF 0.0 2.0 flag58
    SELECTF flag58 0.0 tmpf58 F.6

    ADDF F.5 F.6 F.4
    DATAF tmpf60
	MULF F.4 57.295779513082  tmpf60
	MATH SIN  tmpf60 F.3
    MULF VGV_D F.3 F.2
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_XT
    ADDF F.2 F.3 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_XT
  else53_2:
  endif53:
    JR_EQF VGV_YTCORRECT 0.0 else65_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_YTCORRECT VGV_YT
    MOVEF_F 0.0 VGV_YTCORRECT
    JR endif65
  else65_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.5 VGV_THETAT
    DATAF tmpf70
    DATA8 flag70
    DIVF VGV_DELTA_THETA 2.0 tmpf70
    CP_EQF 0.0 2.0 flag70
    SELECTF flag70 0.0 tmpf70 F.6

    ADDF F.5 F.6 F.4
    DATAF tmpf72
	MULF F.4 57.295779513082 tmpf72
	MATH COS tmpf72 F.3
    MULF VGV_D F.3 F.2
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_YT
    ADDF F.2 F.3 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_YT
  else65_2:
  endif65:
    JR_EQF VGV_THETATCORRECT 0.0 else77_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_THETATCORRECT VGV_THETAT
    MOVEF_F 0.0 VGV_THETATCORRECT
    JR endif77
  else77_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_THETAT
    ADDF F.2 VGV_DELTA_THETA F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_THETAT
  else77_2:
  endif77:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_XTIME VGV_XT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_YTIME VGV_YT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_THETATIME VGV_THETAT
    ADDF VGV_I 1.0 VGV_I
    DATA32 milliseconds91
	MOVEF_32 10.0 milliseconds91
	DATA32 timer91
	TIMER_WAIT milliseconds91 timer91
	TIMER_READY timer91
    JR whilebody27
  endwhile27:
RETSUB_F_ODOMETRY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ODOMETRY_0:
SUB_F_PIDCONTROL_AD_0:
    MOVEF_F 0.5 VGV_KP_A
    MOVEF_F 0.0001 VGV_KI_A
    MOVEF_F 0.1 VGV_KD_A
    MOVEF_F 0.5 VGV_KP_D
    MOVEF_F 0.0001 VGV_KI_D
    MOVEF_F 0.1 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
  while92:
  whilebody92:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    SUBF VGV_ANGLE_A F.0 VGV_ERROR_A
    ADDF VGV_ERRSUM_A VGV_ERROR_A VGV_ERRSUM_A
    MULF VGV_ERROR_A VGV_KP_A F.1
    MULF VGV_ERRSUM_A VGV_KI_A F.3
    DATAF tmpf98
    DATA8 flag98
    DIVF F.3 1.0 tmpf98
    CP_EQF 0.0 1.0 flag98
    SELECTF flag98 0.0 tmpf98 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_A VGV_OLDERROR_A F.2
    MULF F.2 VGV_KD_A F.1
    ADDF F.0 F.1 VGV_U_A
    MOVEF_8 VGV_U_A setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    SUBF VGV_ANGLE_D F.0 VGV_ERROR_D
    ADDF VGV_ERRSUM_D VGV_ERROR_D VGV_ERRSUM_D
    MULF VGV_ERROR_D VGV_KP_D F.1
    MULF VGV_ERRSUM_D VGV_KI_D F.3
    DATAF tmpf109
    DATA8 flag109
    DIVF F.3 1.0 tmpf109
    CP_EQF 0.0 1.0 flag109
    SELECTF flag109 0.0 tmpf109 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_D VGV_OLDERROR_D F.3
    MULF F.3 VGV_KD_D F.2
    MULF F.2 VGV_SENTIDO_D F.1
    ADDF F.0 F.1 VGV_U_D
    MOVEF_8 VGV_U_D setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    JR whilebody92
  endwhile92:
RETSUB_F_PIDCONTROL_AD_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_PIDCONTROL_AD_0:
SUB_F_DISPLAY_0:
  while116:
  whilebody116:
    MOVE32_32 1 STOPLCDUPDATE
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_XT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
    DATAF tmpf122
    DATA8 flag122
    DIVF F.1 100.0 tmpf122
    CP_EQF 0.0 100.0 flag122
    SELECTF flag122 0.0 tmpf122 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'xt: ' S.1 S.0
    CALL LCD.WRITE 5.0 5.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_YT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
    DATAF tmpf129
    DATA8 flag129
    DIVF F.1 100.0 tmpf129
    CP_EQF 0.0 100.0 flag129
    SELECTF flag129 0.0 tmpf129 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'yt: ' S.1 S.0
    CALL LCD.WRITE 5.0 15.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.1 VGV_THETAT
    MULF F.1 57.295779513082 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'thetat: ' S.1 S.0
    CALL LCD.WRITE 5.0 25.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGULO '%g' 99 S.1
    CALL TEXT.APPEND 'angulo: ' S.1 S.0
    CALL LCD.WRITE 5.0 35.0 S.0
    STRINGS VALUE_FORMATTED VGV_CENTRO '%g' 99 S.1
    CALL TEXT.APPEND 'centro: ' S.1 S.0
    CALL LCD.WRITE 5.0 45.0 S.0
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Angulo de A:  ' S.1 S.0
    CALL LCD.WRITE 5.0 65.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGLE_A '%g' 99 S.1
    CALL TEXT.APPEND 'Obj de A:  ' S.1 S.0
    CALL LCD.WRITE 5.0 75.0 S.0
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Angulo de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 85.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGLE_D '%g' 99 S.1
    CALL TEXT.APPEND 'Obj de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 95.0 S.0
    MOVE32_32 0 STOPLCDUPDATE
	UI_DRAW UPDATE
    DATA32 milliseconds159
	MOVEF_32 100.0 milliseconds159
	DATA32 timer159
	TIMER_WAIT milliseconds159 timer159
	TIMER_READY timer159
    JR whilebody116
  endwhile116:
RETSUB_F_DISPLAY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DISPLAY_0:
SUB_F_MAIN_0:
    MOVEF_F 50.0 VLV_VELOCIDAD_1
    MOVEF_F -300.0 VLV_X_1
    MOVEF_F 500.0 VLV_Y_1
    MOVEF_F 90.0 VLV_THETA_1
    WRITE32 ENDSUB_F_TOXY_BASIC_4:CALLSUB160 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOXY_BASIC_4
CALLSUB160:
    MOVEF_F 50.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_X_1
    MOVEF_F 0.0 VLV_Y_1
    MOVEF_F 0.0 VLV_THETA_1
    WRITE32 ENDSUB_F_TOXY_BASIC_4:CALLSUB161 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOXY_BASIC_4
CALLSUB161:
    MOVEF_F 30.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_X_1
    MOVEF_F 0.0 VLV_Y_1
    MOVEF_F 0.0 VLV_THETA_1
    WRITE32 ENDSUB_F_TOXY_BASIC_4:CALLSUB162 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOXY_BASIC_4
CALLSUB162:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_TOXY_BASIC_4:
    STRINGS DUPLICATE 'B' VLV_I_1
    STRINGS DUPLICATE 'C' VLV_D_1
    MOVEF_F 3.05555555555556 VLV_G1_1
    MOVEF_F -1.0 VLV_SIGNO_1
    SUBF VLV_X_1 VGV_XTIME VLV_DIFF_X_1
    SUBF VLV_Y_1 VGV_YTIME VLV_DIFF_Y_1
    SUBF VLV_THETA_1 VGV_THETATIME VLV_DIFF_THETA_1
    SUBF VLV_X_1 VGV_XTIME F.2
    SUBF VLV_Y_1 VGV_YTIME F.3
    DATAF tmpf168
    DATA8 flag168
    DIVF F.2 F.3 tmpf168
    CP_EQF 0.0 F.3 flag168
    SELECTF flag168 0.0 tmpf168 F.1

    DATAF tmpf169
	MATH ATAN F.1 tmpf169
	DIVF tmpf169 57.295779513082 F.0
    MULF F.0 57.295779513082 VLV_ANGULO_GIRO_INICIAL_1
    MOVEF_F VLV_ANGULO_GIRO_INICIAL_1 VGV_ANGULO
    JR_GTEQF VLV_DIFF_X_1 0.0 else171_1
    SUBF 0.0 VGV_THETATIME F.0
    SUBF F.0 VLV_ANGULO_GIRO_INICIAL_1 VLV_ANGULO_GIRO_INICIAL_1
  else171_1:
  endif171:
    JR_LTEQF VLV_ANGULO_GIRO_INICIAL_1 0.0 else174_1
    MOVEF_F VLV_VELOCIDAD_1 VLV_V1_1
    MULF VLV_VELOCIDAD_1 -1.0 VLV_V2_1
    JR endif174
  else174_1:
    MULF VLV_VELOCIDAD_1 -1.0 VLV_V1_1
    MOVEF_F VLV_VELOCIDAD_1 VLV_V2_1
  else174_2:
  endif174:
    MATH ABS VLV_V1_1 F.0
    MATH ABS VLV_V2_1 F.1
    DATA8 flag179
	CP_LTF F.0 F.1 flag179
	SELECTF flag179 F.0 F.1 VLV_VMIN_1
    MATH ABS VLV_V1_1 F.0
    MATH ABS VLV_V2_1 F.1
    DATA8 flag182
	CP_GTF F.0 F.1 flag182
	SELECTF flag182 F.0 F.1 VLV_VMAX_1
    DATAF tmpf183
    DATA8 flag183
    DIVF VLV_VMIN_1 VLV_VMAX_1 tmpf183
    CP_EQF 0.0 VLV_VMAX_1 flag183
    SELECTF flag183 0.0 tmpf183 F.3

    MULF -8.5 F.3 F.2
    MULF F.2 VLV_SIGNO_1 F.1
    SUBF F.1 8.5 F.0
    DATAF tmpf187
    DATA8 flag187
    DIVF VLV_VMIN_1 VLV_VMAX_1 tmpf187
    CP_EQF 0.0 VLV_VMAX_1 flag187
    SELECTF flag187 0.0 tmpf187 F.3

    MULF F.3 VLV_SIGNO_1 F.2
    SUBF F.2 1.0 F.1
    DATAF tmpf190
    DATA8 flag190
    DIVF F.0 F.1 tmpf190
    CP_EQF 0.0 F.1 flag190
    SELECTF flag190 0.0 tmpf190 VGV_CENTRO

    MULF VLV_ANGULO_GIRO_INICIAL_1 VLV_G1_1 F.0
    MULF VLV_SIGNO_1 VLV_VMIN_1 F.4
    DATAF tmpf193
    DATA8 flag193
    DIVF F.4 VLV_VMAX_1 tmpf193
    CP_EQF 0.0 VLV_VMAX_1 flag193
    SELECTF flag193 0.0 tmpf193 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf195
    DATA8 flag195
    DIVF -2.0 F.2 tmpf195
    CP_EQF 0.0 F.2 flag195
    SELECTF flag195 0.0 tmpf195 F.1

    MULF F.0 F.1 VLV_ENCODR_1
    CALL TEXT.APPEND VLV_I_1 VLV_D_1 S.0
    MATH NEGATE VLV_V1_1 F.1
    DATAF tmpf199
    DATA8 flag199
    DIVF F.1 2.0 tmpf199
    CP_EQF 0.0 2.0 flag199
    SELECTF flag199 0.0 tmpf199 F.0

    MATH NEGATE VLV_V2_1 F.2
    DATAF tmpf201
    DATA8 flag201
    DIVF F.2 2.0 tmpf201
    CP_EQF 0.0 2.0 flag201
    SELECTF flag201 0.0 tmpf201 F.1

    CALL MOTOR.SCHEDULESYNC S.0 F.0 F.1 VLV_ENCODR_1 'True'

	DATA8 layer202
	DATA8 nos202
	DATA8 busy202
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer202 nos202
	JR_EQ8 0 nos202 motornotbusy202
  motorwaiting202:
	OUTPUT_TEST layer202 nos202 busy202
	JR_EQ8 busy202 0 motornotbusy202
	SLEEP
	JR motorwaiting202
  motornotbusy202:
    DATA32 milliseconds203
	MOVEF_32 10000.0 milliseconds203
	DATA32 timer203
	TIMER_WAIT milliseconds203 timer203
	TIMER_READY timer203
    MULF VLV_DIFF_X_1 VLV_DIFF_X_1 F.1
    MULF VLV_DIFF_Y_1 VLV_DIFF_Y_1 F.2
    ADDF F.1 F.2 F.0
    MATH SQRT F.0 VLV_DISTANCIA_1
    MULF VLV_DISTANCIA_1 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf210
    DATA8 flag210
    DIVF F.1 F.2 tmpf210
    CP_EQF 0.0 F.2 flag210
    SELECTF flag210 0.0 tmpf210 F.0

    DATAF tmpf211
    DATA8 flag211
    DIVF F.0 VGV_DIAMETER tmpf211
    CP_EQF 0.0 VGV_DIAMETER flag211
    SELECTF flag211 0.0 tmpf211 VLV_ENC_1

    MATH NEGATE VLV_VELOCIDAD_1 F.0
    CALL MOTOR.SCHEDULE 'BC' F.0 0.0 VLV_ENC_1 0.0 'True' 

	DATA8 layer213
	DATA8 nos213
	DATA8 busy213
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer213 nos213
	JR_EQ8 0 nos213 motornotbusy213
  motorwaiting213:
	OUTPUT_TEST layer213 nos213 busy213
	JR_EQ8 busy213 0 motornotbusy213
	SLEEP
	JR motorwaiting213
  motornotbusy213:
    DATA32 milliseconds214
	MOVEF_32 100.0 milliseconds214
	DATA32 timer214
	TIMER_WAIT milliseconds214 timer214
	TIMER_READY timer214
    MULF VGV_THETATIME 57.295779513082 F.0
    SUBF VLV_THETA_1 F.0 VLV_ANGULO_GIRO_FINAL_1
    JR_LTEQF VLV_ANGULO_GIRO_FINAL_1 0.0 else217_1
    MOVEF_F VLV_VELOCIDAD_1 VLV_V1_1
    MULF VLV_VELOCIDAD_1 -1.0 VLV_V2_1
    JR endif217
  else217_1:
    MULF VLV_VELOCIDAD_1 -1.0 VLV_V1_1
    MOVEF_F VLV_VELOCIDAD_1 VLV_V2_1
  else217_2:
  endif217:
    MATH ABS VLV_V1_1 F.0
    MATH ABS VLV_V2_1 F.1
    DATA8 flag222
	CP_LTF F.0 F.1 flag222
	SELECTF flag222 F.0 F.1 VLV_VMIN_1
    MATH ABS VLV_V1_1 F.0
    MATH ABS VLV_V2_1 F.1
    DATA8 flag225
	CP_GTF F.0 F.1 flag225
	SELECTF flag225 F.0 F.1 VLV_VMAX_1
    DATAF tmpf226
    DATA8 flag226
    DIVF VLV_VMIN_1 VLV_VMAX_1 tmpf226
    CP_EQF 0.0 VLV_VMAX_1 flag226
    SELECTF flag226 0.0 tmpf226 F.3

    MULF -8.5 F.3 F.2
    MULF F.2 VLV_SIGNO_1 F.1
    SUBF F.1 8.5 F.0
    DATAF tmpf230
    DATA8 flag230
    DIVF VLV_VMIN_1 VLV_VMAX_1 tmpf230
    CP_EQF 0.0 VLV_VMAX_1 flag230
    SELECTF flag230 0.0 tmpf230 F.3

    MULF F.3 VLV_SIGNO_1 F.2
    SUBF F.2 1.0 F.1
    DATAF tmpf233
    DATA8 flag233
    DIVF F.0 F.1 tmpf233
    CP_EQF 0.0 F.1 flag233
    SELECTF flag233 0.0 tmpf233 VGV_CENTRO

    MULF VLV_ANGULO_GIRO_FINAL_1 VLV_G1_1 F.1
    MULF VLV_SIGNO_1 VLV_VMIN_1 F.5
    DATAF tmpf236
    DATA8 flag236
    DIVF F.5 VLV_VMAX_1 tmpf236
    CP_EQF 0.0 VLV_VMAX_1 flag236
    SELECTF flag236 0.0 tmpf236 F.4

    SUBF F.4 1.0 F.3
    DATAF tmpf238
    DATA8 flag238
    DIVF -2.0 F.3 tmpf238
    CP_EQF 0.0 F.3 flag238
    SELECTF flag238 0.0 tmpf238 F.2

    MULF F.1 F.2 F.0
    MATH ABS F.0 VLV_ENCODR_1
    CALL TEXT.APPEND VLV_I_1 VLV_D_1 S.0
    MATH NEGATE VLV_V1_1 F.1
    DATAF tmpf243
    DATA8 flag243
    DIVF F.1 2.0 tmpf243
    CP_EQF 0.0 2.0 flag243
    SELECTF flag243 0.0 tmpf243 F.0

    MATH NEGATE VLV_V2_1 F.2
    DATAF tmpf245
    DATA8 flag245
    DIVF F.2 2.0 tmpf245
    CP_EQF 0.0 2.0 flag245
    SELECTF flag245 0.0 tmpf245 F.1

    CALL MOTOR.SCHEDULESYNC S.0 F.0 F.1 VLV_ENCODR_1 'True'

	DATA8 layer246
	DATA8 nos246
	DATA8 busy246
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer246 nos246
	JR_EQ8 0 nos246 motornotbusy246
  motorwaiting246:
	OUTPUT_TEST layer246 nos246 busy246
	JR_EQ8 busy246 0 motornotbusy246
	SLEEP
	JR motorwaiting246
  motornotbusy246:
    MOVEF_F VLV_X_1 VGV_XTCORRECT
    MOVEF_F VLV_Y_1 VGV_YTCORRECT
    DIVF VLV_THETA_1 57.295779513082 VGV_THETATCORRECT
    DATA32 milliseconds248
	MOVEF_32 100.0 milliseconds248
	DATA32 timer248
	TIMER_WAIT milliseconds248 timer248
	TIMER_READY timer248
RETSUB_F_TOXY_BASIC_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TOXY_BASIC_4:
SUB_F_BMOVEA_2:
    SUBF VLV_DEGREES_4 VGV_ANGLE_A VLV_ROTATION_4
    MATH ABS VLV_ROTATION_4 F.0
    DATAF tmpf251
    DATA8 flag251
    DIVF F.0 VLV_ROTATION_4 tmpf251
    CP_EQF 0.0 VLV_ROTATION_4 flag251
    SELECTF flag251 0.0 tmpf251 VLV_SIGN_4

    MOVEF_F 0.0 VLV_PROGRESS_4
    MULF VLV_DEGREES_PER_SECOND_4 VLV_SIGN_4 F.0
    DATAF tmpf253
    DATA8 flag253
    DIVF F.0 50.0 tmpf253
    CP_EQF 0.0 50.0 flag253
    SELECTF flag253 0.0 tmpf253 VLV_DEGREES_PER_INTERVAL_4

  while254:
    SUBF VLV_ROTATION_4 VLV_PROGRESS_4 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile254
  whilebody254:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_4 VGV_ANGLE_A
    ADDF VLV_PROGRESS_4 VLV_DEGREES_PER_INTERVAL_4 VLV_PROGRESS_4
    DATA32 milliseconds259
	MOVEF_32 1.0 milliseconds259
	DATA32 timer259
	TIMER_WAIT milliseconds259 timer259
	TIMER_READY timer259
    SUBF VLV_ROTATION_4 VLV_PROGRESS_4 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody254
  endwhile254:
    MOVEF_F VLV_DEGREES_4 VGV_ANGLE_A
RETSUB_F_BMOVEA_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA_2:
SUB_F_BMOVED_2:
    SUBF VLV_DEGREES_6 VGV_ANGLE_D VLV_ROTATION_6
    MATH ABS VLV_ROTATION_6 F.0
    DATAF tmpf264
    DATA8 flag264
    DIVF F.0 VLV_ROTATION_6 tmpf264
    CP_EQF 0.0 VLV_ROTATION_6 flag264
    SELECTF flag264 0.0 tmpf264 VLV_SIGN_6

    MOVEF_F 0.0 VLV_PROGRESS_6
    MULF VLV_DEGREES_PER_SECOND_6 VLV_SIGN_6 F.0
    DATAF tmpf266
    DATA8 flag266
    DIVF F.0 50.0 tmpf266
    CP_EQF 0.0 50.0 flag266
    SELECTF flag266 0.0 tmpf266 VLV_DEGREES_PER_INTERVAL_6

  while267:
    SUBF VLV_ROTATION_6 VLV_PROGRESS_6 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile267
  whilebody267:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_6 VGV_ANGLE_D
    ADDF VLV_PROGRESS_6 VLV_DEGREES_PER_INTERVAL_6 VLV_PROGRESS_6
    DATA32 milliseconds272
	MOVEF_32 1.0 milliseconds272
	DATA32 timer272
	TIMER_WAIT milliseconds272 timer272
	TIMER_READY timer272
    SUBF VLV_ROTATION_6 VLV_PROGRESS_6 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody267
  endwhile267:
    MOVEF_F VLV_DEGREES_6 VGV_ANGLE_D
RETSUB_F_BMOVED_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED_2:
SUB_F_BMOVEAD_4:
  while275:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_7 or276
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_7 endwhile275
  or276:
  whilebody275:
    MATH ROUND VGV_ANGLE_A F.0
    SUBF VLV_DEGREES_A_7 5.0 F.1
    JR_GTEQF F.0 F.1 else277_1
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_7 else277_1
    DATAF tmpf281
    DATA8 flag281
    DIVF VLV_DEGREES_PER_SECOND_A_7 2.0 tmpf281
    CP_EQF 0.0 2.0 flag281
    SELECTF flag281 0.0 tmpf281 F.3

    SUBF VLV_DEGREES_A_7 VGV_ANGLE_A F.5
    DATAF tmpf283
    DATA8 flag283
    DIVF F.5 10.0 tmpf283
    CP_EQF 0.0 10.0 flag283
    SELECTF flag283 0.0 tmpf283 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag285
	CP_LTF VLV_DEGREES_PER_SECOND_A_7 F.2 flag285
	SELECTF flag285 VLV_DEGREES_PER_SECOND_A_7 F.2 F.1
    DATAF tmpf286
    DATA8 flag286
    DIVF F.1 50.0 tmpf286
    CP_EQF 0.0 50.0 flag286
    SELECTF flag286 0.0 tmpf286 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif277
  else277_1:
    MATH ROUND VGV_ANGLE_A F.0
    ADDF VLV_DEGREES_A_7 5.0 F.1
    JR_LTEQF F.0 F.1 else277_2
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_7 else277_2
    DATAF tmpf291
    DATA8 flag291
    DIVF VLV_DEGREES_PER_SECOND_A_7 2.0 tmpf291
    CP_EQF 0.0 2.0 flag291
    SELECTF flag291 0.0 tmpf291 F.3

    SUBF VLV_DEGREES_A_7 VGV_ANGLE_A F.5
    DATAF tmpf293
    DATA8 flag293
    DIVF F.5 10.0 tmpf293
    CP_EQF 0.0 10.0 flag293
    SELECTF flag293 0.0 tmpf293 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag295
	CP_GTF VLV_DEGREES_PER_SECOND_A_7 F.2 flag295
	SELECTF flag295 VLV_DEGREES_PER_SECOND_A_7 F.2 F.1
    DATAF tmpf296
    DATA8 flag296
    DIVF F.1 50.0 tmpf296
    CP_EQF 0.0 50.0 flag296
    SELECTF flag296 0.0 tmpf296 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif277
  else277_2:
    MOVEF_F VLV_DEGREES_A_7 VGV_ANGLE_A
  else277_3:
  endif277:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_7 else298_1
    DATAF tmpf300
    DATA8 flag300
    DIVF VLV_DEGREES_PER_SECOND_D_7 2.0 tmpf300
    CP_EQF 0.0 2.0 flag300
    SELECTF flag300 0.0 tmpf300 F.3

    SUBF VLV_DEGREES_D_7 VGV_ANGLE_D F.5
    DATAF tmpf302
    DATA8 flag302
    DIVF F.5 10.0 tmpf302
    CP_EQF 0.0 10.0 flag302
    SELECTF flag302 0.0 tmpf302 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag304
	CP_LTF VLV_DEGREES_PER_SECOND_D_7 F.2 flag304
	SELECTF flag304 VLV_DEGREES_PER_SECOND_D_7 F.2 F.1
    DATAF tmpf305
    DATA8 flag305
    DIVF F.1 50.0 tmpf305
    CP_EQF 0.0 50.0 flag305
    SELECTF flag305 0.0 tmpf305 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif298
  else298_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_7 else298_2
    DATAF tmpf308
    DATA8 flag308
    DIVF VLV_DEGREES_PER_SECOND_D_7 2.0 tmpf308
    CP_EQF 0.0 2.0 flag308
    SELECTF flag308 0.0 tmpf308 F.3

    SUBF VLV_DEGREES_D_7 VGV_ANGLE_D F.5
    DATAF tmpf310
    DATA8 flag310
    DIVF F.5 10.0 tmpf310
    CP_EQF 0.0 10.0 flag310
    SELECTF flag310 0.0 tmpf310 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag312
	CP_GTF VLV_DEGREES_PER_SECOND_D_7 F.2 flag312
	SELECTF flag312 VLV_DEGREES_PER_SECOND_D_7 F.2 F.1
    DATAF tmpf313
    DATA8 flag313
    DIVF F.1 50.0 tmpf313
    CP_EQF 0.0 50.0 flag313
    SELECTF flag313 0.0 tmpf313 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif298
  else298_2:
    MOVEF_F VLV_DEGREES_D_7 VGV_ANGLE_D
  else298_3:
  endif298:
    DATA32 milliseconds315
	MOVEF_32 1.0 milliseconds315
	DATA32 timer315
	TIMER_WAIT milliseconds315 timer315
	TIMER_READY timer315
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_7 whilebody275
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_7 whilebody275
  endwhile275:
    MOVEF_F VLV_DEGREES_A_7 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_7 VGV_ANGLE_D
RETSUB_F_BMOVEAD_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD_4:
SUB_F_BMOVEA0_1:
    MOVEF_F 0.0 VLV_DEGREES_8
    SUBF VLV_DEGREES_8 VGV_ANGLE_A VLV_ROTATION_8
    MATH ABS VLV_ROTATION_8 F.0
    DATAF tmpf318
    DATA8 flag318
    DIVF F.0 VLV_ROTATION_8 tmpf318
    CP_EQF 0.0 VLV_ROTATION_8 flag318
    SELECTF flag318 0.0 tmpf318 VLV_SIGN_8

    MOVEF_F 0.0 VLV_PROGRESS_8
    MULF VLV_DEGREES_PER_SECOND_8 VLV_SIGN_8 F.0
    DATAF tmpf320
    DATA8 flag320
    DIVF F.0 50.0 tmpf320
    CP_EQF 0.0 50.0 flag320
    SELECTF flag320 0.0 tmpf320 VLV_DEGREES_PER_INTERVAL_8

  while321:
    SUBF VLV_ROTATION_8 VLV_PROGRESS_8 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile321
  whilebody321:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_8 VGV_ANGLE_A
    ADDF VLV_PROGRESS_8 VLV_DEGREES_PER_INTERVAL_8 VLV_PROGRESS_8
    DATA32 milliseconds326
	MOVEF_32 1.0 milliseconds326
	DATA32 timer326
	TIMER_WAIT milliseconds326 timer326
	TIMER_READY timer326
    SUBF VLV_ROTATION_8 VLV_PROGRESS_8 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody321
  endwhile321:
    MOVEF_F VLV_DEGREES_8 VGV_ANGLE_A
RETSUB_F_BMOVEA0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA0_1:
SUB_F_BMOVED0_1:
    MOVEF_F 0.0 VLV_DEGREES_9
    SUBF VLV_DEGREES_9 VGV_ANGLE_D VLV_ROTATION_9
    MATH ABS VLV_ROTATION_9 F.0
    DATAF tmpf331
    DATA8 flag331
    DIVF F.0 VLV_ROTATION_9 tmpf331
    CP_EQF 0.0 VLV_ROTATION_9 flag331
    SELECTF flag331 0.0 tmpf331 VLV_SIGN_9

    MOVEF_F 0.0 VLV_PROGRESS_9
    MULF VLV_DEGREES_PER_SECOND_9 VLV_SIGN_9 F.0
    DATAF tmpf333
    DATA8 flag333
    DIVF F.0 50.0 tmpf333
    CP_EQF 0.0 50.0 flag333
    SELECTF flag333 0.0 tmpf333 VLV_DEGREES_PER_INTERVAL_9

  while334:
    SUBF VLV_ROTATION_9 VLV_PROGRESS_9 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile334
  whilebody334:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_9 VGV_ANGLE_D
    ADDF VLV_PROGRESS_9 VLV_DEGREES_PER_INTERVAL_9 VLV_PROGRESS_9
    DATA32 milliseconds339
	MOVEF_32 1.0 milliseconds339
	DATA32 timer339
	TIMER_WAIT milliseconds339 timer339
	TIMER_READY timer339
    SUBF VLV_ROTATION_9 VLV_PROGRESS_9 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody334
  endwhile334:
    MOVEF_F VLV_DEGREES_9 VGV_ANGLE_D
RETSUB_F_BMOVED0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED0_1:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
