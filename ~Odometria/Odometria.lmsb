DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
<<<<<<< HEAD
DATAF VLV_DEGREES_PER_SECOND_4
DATAF VLV_DEGREES_4
DATAF VLV_DEGREES_PER_SECOND_9
DATAF VLV_DEGREES_PER_SECOND_6
DATAF VLV_DEGREES_6
DATAF VLV_DEGREES_PER_SECOND_8
DATAF VLV_V1_2
DATAF VLV_V2_2
DATAF VLV_ANGLE_2
DATAF VLV_DEGREES_PER_SECOND_A_7
DATAF VLV_DEGREES_PER_SECOND_D_7
DATAF VLV_DEGREES_A_7
DATAF VLV_DEGREES_D_7
DATAF VLV_DEGREES_PER_SECOND_A_10
DATAF VLV_DEGREES_PER_SECOND_D_10
=======
DATAF VLV_DEGREES_PER_SECOND_45
DATAF VLV_DEGREES_PER_SECOND_44
ARRAY16 VLV_VELI_K1_33 2
ARRAY16 VLV_VELD_K1_33 2
DATAF VLV_V1_35
DATAF VLV_V2_35
DATAF VLV_ANGLE_35
DATAF VLV_DEGREES_PER_SECOND_42
DATAF VLV_DEGREES_42
DATAF VLV_VELOCIDAD_19
DATAF VLV_DISTANCIA_19
DATAF VLV_DEGREES_PER_SECOND_40
DATAF VLV_DEGREES_40
DATAF VLV_DEGREES_PER_SECOND_A_43
DATAF VLV_DEGREES_PER_SECOND_D_43
DATAF VLV_DEGREES_A_43
DATAF VLV_DEGREES_D_43
DATAF VLV_DEGREES_PER_SECOND_A_46
DATAF VLV_DEGREES_PER_SECOND_D_46
DATAF VLV_V0_14
DATAF VLV_VMAX_14
DATAF VLV_KP_14
DATAF VLV_KI_14
DATAF VLV_KD_14
DATAF VLV_ACCELENCODER_14
ARRAY16 VLV_M_39 2
DATAF VLV_K_39
ARRAY16 VLV_S_39 2
ARRAY16 VLV_M_37 2
ARRAY16 VLV_S_37 2
ARRAY16 VLV_M_38 2
ARRAY16 VLV_S_38 2
ARRAY16 VLV_VELI_33 2
ARRAY16 VLV_VELD_33 2
ARRAY16 VLV_OMEGAI_K1_33 2
ARRAY16 VLV_OMEGAD_K1_33 2
ARRAY16 VLV_V_33 2
ARRAY16 VLV_DH_T_33 2
ARRAY16 VLV_S_INV_33 2
>>>>>>> main
DATAF VGV_CENTRO
DATAF VGV_XTIME
DATAF VGV_YTIME
DATAF VGV_THETATIME
DATAF VGV_XTCORRECT
DATAF VGV_YTCORRECT
DATAF VGV_THETATCORRECT
DATAF VGV_SENTIDO_D
<<<<<<< HEAD
DATAF VGV_ANGULO
=======
DATAF VGV_DW
DATAF VGV_DIAMETER
DATAF VGV_D_T
DATAF VGV_SENTIDO_MOTORES
ARRAY16 VGV_L 2
ARRAY16 VGV_R 2
>>>>>>> main
DATAF VGV_ANGLE_A
DATAF VGV_ANGLE_D
ARRAY16 VGV_ALPHA_L 2
ARRAY16 VGV_ALPHA_R 2
DATAF VGV_OLDB
DATAF VGV_OLDC
ARRAY16 VGV_XT 2
ARRAY16 VGV_YT 2
ARRAY16 VGV_THETAT 2
DATAF VGV_I
DATAF VGV_D_L
DATAF VGV_D_R
DATAF VGV_D
DATAF VGV_DELTA_THETA
DATAF VGV_KP_A
DATAF VGV_KI_A
DATAF VGV_KD_A
DATAF VGV_KP_D
DATAF VGV_KI_D
DATAF VGV_KD_D
DATAF VGV_ERROR_A
DATAF VGV_ERROR_D
DATAF VGV_ERRSUM_A
DATAF VGV_ERRSUM_D
DATAF VGV_OLDERROR_A
DATAF VGV_OLDERROR_D
DATAF VGV_U_A
DATAF VGV_U_D
<<<<<<< HEAD
DATAS VLV_I_2 252
DATAS VLV_D_2 252
DATAF VLV_G1_2
DATAF VLV_SIGNO_2
DATAF VLV_VMIN_2
DATAF VLV_VMAX_2
DATAF VLV_ENCODR_2
DATAF VLV_ROTATION_4
DATAF VLV_SIGN_4
DATAF VLV_PROGRESS_4
DATAF VLV_DEGREES_PER_INTERVAL_4
DATAF VLV_ROTATION_6
DATAF VLV_SIGN_6
DATAF VLV_PROGRESS_6
DATAF VLV_DEGREES_PER_INTERVAL_6
DATAF VLV_DEGREES_8
DATAF VLV_ROTATION_8
DATAF VLV_SIGN_8
DATAF VLV_PROGRESS_8
DATAF VLV_DEGREES_PER_INTERVAL_8
DATAF VLV_DEGREES_9
DATAF VLV_ROTATION_9
DATAF VLV_SIGN_9
DATAF VLV_PROGRESS_9
DATAF VLV_DEGREES_PER_INTERVAL_9
DATAF VLV_DEGREES_A_10
DATAF VLV_DEGREES_D_10
=======
DATAF VGV_OLD_B
DATAF VGV_OLD_C
DATAS VLV_I_14 252
DATAS VLV_D_14 252
DATAF VLV_U_14
DATAF VLV_ERROR_14
DATAF VLV_OLDERROR_14
DATAF VLV_ERRSUM_14
DATAF VLV_VEL_14
DATAF VLV_SENTIDO_14
DATAF VLV_DIAMETRO_19
DATAF VLV_ENC_19
DATAF VLV_START_B_19
DATAF VLV_START_C_19
DATAF VLV_ENCODER_C_19
DATAF VLV_ENCODER_B_19
DATAF VLV_ERROR_19
DATAF VLV_PROPORCIAL_19
DATAF VLV_ITREAL_33
DATAF VLV_RADIO_33
ARRAY16 VLV_I_33 2
ARRAY16 VLV_MINUS_1_33 2
ARRAY16 VLV_Q_K1_33 2
DATAF VLV_DELTA_T_33
DATAF VLV_OLD_T_33
DATAF VLV_OLD_I_33
DATAF VLV_OLD_D_33
DATAF VLV_LOG_FILE_33
ARRAY16 VLV_DF_K_33 2
ARRAY16 VLV_K_K1_33 2
ARRAY16 VLV_K1_K_33 2
ARRAY16 VLV_H_33 2
ARRAY16 VLV_DH_33 2
ARRAY16 VLV_R_33 2
ARRAY16 VLV_Z_33 2
ARRAY16 VLV_F_K_33 2
ARRAY16 VLV_U_33 2
ARRAY16 VLV_W_33 2
ARRAY16 VLV_P_K_K1_33 2
ARRAY16 VLV_MINUS_H_33 2
ARRAY16 VLV_Y_33 2
ARRAY16 VLV_S1_33 2
ARRAY16 VLV_S2_33 2
ARRAY16 VLV_S_33 2
ARRAY16 VLV_K1_33 2
ARRAY16 VLV_K_33 2
ARRAY16 VLV_KY_33 2
ARRAY16 VLV_KH_33 2
ARRAY16 VLV_MINUS_KH_33 2
ARRAY16 VLV_P1_33 2
ARRAY16 VLV_P_33 2
DATAS VLV_I_35 252
DATAS VLV_D_35 252
DATAF VLV_G1_35
DATAF VLV_SIGNO_35
DATAF VLV_VMIN_35
DATAF VLV_VMAX_35
DATAF VLV_ENCODR_35
DATAF VLV_DETERMINANTE_38
DATAF VLV_I_39
DATAF VLV_ROTATION_40
DATAF VLV_SIGN_40
DATAF VLV_PROGRESS_40
DATAF VLV_DEGREES_PER_INTERVAL_40
DATAF VLV_ROTATION_42
DATAF VLV_SIGN_42
DATAF VLV_PROGRESS_42
DATAF VLV_DEGREES_PER_INTERVAL_42
DATAF VLV_DEGREES_44
DATAF VLV_ROTATION_44
DATAF VLV_SIGN_44
DATAF VLV_PROGRESS_44
DATAF VLV_DEGREES_PER_INTERVAL_44
DATAF VLV_DEGREES_45
DATAF VLV_ROTATION_45
DATAF VLV_SIGN_45
DATAF VLV_PROGRESS_45
DATAF VLV_DEGREES_PER_INTERVAL_45
DATAF VLV_DEGREES_A_46
DATAF VLV_DEGREES_D_46
>>>>>>> main
DATA32 RUNCOUNTER_F_PIDCONTROL_AD_0
DATA32 RUNCOUNTER_F_ODOMETRY_0
DATA32 RUNCOUNTER_F_DISPLAY_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
<<<<<<< HEAD
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F 0.0 VLV_DEGREES_4
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_6
    MOVEF_F 0.0 VLV_DEGREES_6
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_8
    MOVEF_F 0.0 VLV_V1_2
    MOVEF_F 0.0 VLV_V2_2
    MOVEF_F 0.0 VLV_ANGLE_2
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_7
    MOVEF_F 0.0 VLV_DEGREES_A_7
    MOVEF_F 0.0 VLV_DEGREES_D_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_10
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_10
=======
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_45
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_44
    CALL ARRAYCREATE_FLOAT VLV_VELI_K1_33
    CALL ARRAYCREATE_FLOAT VLV_VELD_K1_33
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 0.0 VLV_ANGLE_35
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_42
    MOVEF_F 0.0 VLV_DEGREES_42
    MOVEF_F 0.0 VLV_VELOCIDAD_19
    MOVEF_F 0.0 VLV_DISTANCIA_19
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_40
    MOVEF_F 0.0 VLV_DEGREES_40
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_43
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_43
    MOVEF_F 0.0 VLV_DEGREES_A_43
    MOVEF_F 0.0 VLV_DEGREES_D_43
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_46
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_46
    MOVEF_F 0.0 VLV_V0_14
    MOVEF_F 0.0 VLV_VMAX_14
    MOVEF_F 0.0 VLV_KP_14
    MOVEF_F 0.0 VLV_KI_14
    MOVEF_F 0.0 VLV_KD_14
    MOVEF_F 0.0 VLV_ACCELENCODER_14
    CALL ARRAYCREATE_FLOAT VLV_M_39
    MOVEF_F 0.0 VLV_K_39
    CALL ARRAYCREATE_FLOAT VLV_S_39
    CALL ARRAYCREATE_FLOAT VLV_M_37
    CALL ARRAYCREATE_FLOAT VLV_S_37
    CALL ARRAYCREATE_FLOAT VLV_M_38
    CALL ARRAYCREATE_FLOAT VLV_S_38
    CALL ARRAYCREATE_FLOAT VLV_VELI_33
    CALL ARRAYCREATE_FLOAT VLV_VELD_33
    CALL ARRAYCREATE_FLOAT VLV_OMEGAI_K1_33
    CALL ARRAYCREATE_FLOAT VLV_OMEGAD_K1_33
    CALL ARRAYCREATE_FLOAT VLV_V_33
    CALL ARRAYCREATE_FLOAT VLV_DH_T_33
    CALL ARRAYCREATE_FLOAT VLV_S_INV_33
>>>>>>> main
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
<<<<<<< HEAD
    MOVEF_F 0.0 VGV_ANGULO
=======
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F 0.0 VGV_SENTIDO_MOTORES
    CALL ARRAYCREATE_FLOAT VGV_L
    CALL ARRAYCREATE_FLOAT VGV_R
>>>>>>> main
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_L
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYCREATE_FLOAT VGV_XT
    CALL ARRAYCREATE_FLOAT VGV_YT
    CALL ARRAYCREATE_FLOAT VGV_THETAT
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_D_L
    MOVEF_F 0.0 VGV_D_R
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_DELTA_THETA
    MOVEF_F 0.0 VGV_KP_A
    MOVEF_F 0.0 VGV_KI_A
    MOVEF_F 0.0 VGV_KD_A
    MOVEF_F 0.0 VGV_KP_D
    MOVEF_F 0.0 VGV_KI_D
    MOVEF_F 0.0 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
<<<<<<< HEAD
    STRINGS DUPLICATE '' VLV_I_2
    STRINGS DUPLICATE '' VLV_D_2
    MOVEF_F 0.0 VLV_G1_2
    MOVEF_F 0.0 VLV_SIGNO_2
    MOVEF_F 0.0 VLV_VMIN_2
    MOVEF_F 0.0 VLV_VMAX_2
    MOVEF_F 0.0 VLV_ENCODR_2
    MOVEF_F 0.0 VLV_ROTATION_4
    MOVEF_F 0.0 VLV_SIGN_4
    MOVEF_F 0.0 VLV_PROGRESS_4
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_4
    MOVEF_F 0.0 VLV_ROTATION_6
    MOVEF_F 0.0 VLV_SIGN_6
    MOVEF_F 0.0 VLV_PROGRESS_6
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_6
    MOVEF_F 0.0 VLV_DEGREES_8
    MOVEF_F 0.0 VLV_ROTATION_8
    MOVEF_F 0.0 VLV_SIGN_8
    MOVEF_F 0.0 VLV_PROGRESS_8
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_8
    MOVEF_F 0.0 VLV_DEGREES_9
    MOVEF_F 0.0 VLV_ROTATION_9
    MOVEF_F 0.0 VLV_SIGN_9
    MOVEF_F 0.0 VLV_PROGRESS_9
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_9
    MOVEF_F 0.0 VLV_DEGREES_A_10
    MOVEF_F 0.0 VLV_DEGREES_D_10
=======
    MOVEF_F 0.0 VGV_OLD_B
    MOVEF_F 0.0 VGV_OLD_C
    STRINGS DUPLICATE '' VLV_I_14
    STRINGS DUPLICATE '' VLV_D_14
    MOVEF_F 0.0 VLV_U_14
    MOVEF_F 0.0 VLV_ERROR_14
    MOVEF_F 0.0 VLV_OLDERROR_14
    MOVEF_F 0.0 VLV_ERRSUM_14
    MOVEF_F 0.0 VLV_VEL_14
    MOVEF_F 0.0 VLV_SENTIDO_14
    MOVEF_F 0.0 VLV_DIAMETRO_19
    MOVEF_F 0.0 VLV_ENC_19
    MOVEF_F 0.0 VLV_START_B_19
    MOVEF_F 0.0 VLV_START_C_19
    MOVEF_F 0.0 VLV_ENCODER_C_19
    MOVEF_F 0.0 VLV_ENCODER_B_19
    MOVEF_F 0.0 VLV_ERROR_19
    MOVEF_F 0.0 VLV_PROPORCIAL_19
    MOVEF_F 0.0 VLV_ITREAL_33
    MOVEF_F 0.0 VLV_RADIO_33
    CALL ARRAYCREATE_FLOAT VLV_I_33
    CALL ARRAYCREATE_FLOAT VLV_MINUS_1_33
    CALL ARRAYCREATE_FLOAT VLV_Q_K1_33
    MOVEF_F 0.0 VLV_DELTA_T_33
    MOVEF_F 0.0 VLV_OLD_T_33
    MOVEF_F 0.0 VLV_OLD_I_33
    MOVEF_F 0.0 VLV_OLD_D_33
    MOVEF_F 0.0 VLV_LOG_FILE_33
    CALL ARRAYCREATE_FLOAT VLV_DF_K_33
    CALL ARRAYCREATE_FLOAT VLV_K_K1_33
    CALL ARRAYCREATE_FLOAT VLV_K1_K_33
    CALL ARRAYCREATE_FLOAT VLV_H_33
    CALL ARRAYCREATE_FLOAT VLV_DH_33
    CALL ARRAYCREATE_FLOAT VLV_R_33
    CALL ARRAYCREATE_FLOAT VLV_Z_33
    CALL ARRAYCREATE_FLOAT VLV_F_K_33
    CALL ARRAYCREATE_FLOAT VLV_U_33
    CALL ARRAYCREATE_FLOAT VLV_W_33
    CALL ARRAYCREATE_FLOAT VLV_P_K_K1_33
    CALL ARRAYCREATE_FLOAT VLV_MINUS_H_33
    CALL ARRAYCREATE_FLOAT VLV_Y_33
    CALL ARRAYCREATE_FLOAT VLV_S1_33
    CALL ARRAYCREATE_FLOAT VLV_S2_33
    CALL ARRAYCREATE_FLOAT VLV_S_33
    CALL ARRAYCREATE_FLOAT VLV_K1_33
    CALL ARRAYCREATE_FLOAT VLV_K_33
    CALL ARRAYCREATE_FLOAT VLV_KY_33
    CALL ARRAYCREATE_FLOAT VLV_KH_33
    CALL ARRAYCREATE_FLOAT VLV_MINUS_KH_33
    CALL ARRAYCREATE_FLOAT VLV_P1_33
    CALL ARRAYCREATE_FLOAT VLV_P_33
    STRINGS DUPLICATE '' VLV_I_35
    STRINGS DUPLICATE '' VLV_D_35
    MOVEF_F 0.0 VLV_G1_35
    MOVEF_F 0.0 VLV_SIGNO_35
    MOVEF_F 0.0 VLV_VMIN_35
    MOVEF_F 0.0 VLV_VMAX_35
    MOVEF_F 0.0 VLV_ENCODR_35
    MOVEF_F 0.0 VLV_DETERMINANTE_38
    MOVEF_F 0.0 VLV_I_39
    MOVEF_F 0.0 VLV_ROTATION_40
    MOVEF_F 0.0 VLV_SIGN_40
    MOVEF_F 0.0 VLV_PROGRESS_40
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_40
    MOVEF_F 0.0 VLV_ROTATION_42
    MOVEF_F 0.0 VLV_SIGN_42
    MOVEF_F 0.0 VLV_PROGRESS_42
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_42
    MOVEF_F 0.0 VLV_DEGREES_44
    MOVEF_F 0.0 VLV_ROTATION_44
    MOVEF_F 0.0 VLV_SIGN_44
    MOVEF_F 0.0 VLV_PROGRESS_44
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_44
    MOVEF_F 0.0 VLV_DEGREES_45
    MOVEF_F 0.0 VLV_ROTATION_45
    MOVEF_F 0.0 VLV_SIGN_45
    MOVEF_F 0.0 VLV_PROGRESS_45
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_45
    MOVEF_F 0.0 VLV_DEGREES_A_46
    MOVEF_F 0.0 VLV_DEGREES_D_46
>>>>>>> main
    MOVE32_32 0 RUNCOUNTER_F_PIDCONTROL_AD_0
    MOVE32_32 0 RUNCOUNTER_F_ODOMETRY_0
    MOVE32_32 0 RUNCOUNTER_F_DISPLAY_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_PIDCONTROL_AD_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_PIDCONTROL_AD_0 0
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 -1 RUNCOUNTER_F_PIDCONTROL_AD_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_ODOMETRY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_ODOMETRY_0 1
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 -1 RUNCOUNTER_F_ODOMETRY_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_DISPLAY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_DISPLAY_0 2
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 -1 RUNCOUNTER_F_DISPLAY_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_PIDCONTROL_AD_0
subcall PROGRAM_F_ODOMETRY_0
subcall PROGRAM_F_DISPLAY_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    DATAF F.6
<<<<<<< HEAD
=======
    DATAF F.7
    DATAF F.8
    DATAF F.9
    DATAF F.10
    DATAF F.11
    DATAF F.12
>>>>>>> main
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    DATAS S.2 252
    MOVE8_8 0 STACKPOINTER
<<<<<<< HEAD
    JR_NEQ32 SUBPROGRAM 0 dispatch338
    WRITE32 ENDSUB_F_PIDCONTROL_AD_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_PIDCONTROL_AD_0
  dispatch338:
    JR_NEQ32 SUBPROGRAM 1 dispatch339
    WRITE32 ENDSUB_F_ODOMETRY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ODOMETRY_0
  dispatch339:
    JR_NEQ32 SUBPROGRAM 2 dispatch340
    WRITE32 ENDSUB_F_DISPLAY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DISPLAY_0
  dispatch340:
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F 0.0 VLV_DEGREES_4
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_6
    MOVEF_F 0.0 VLV_DEGREES_6
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_8
    MOVEF_F 0.0 VLV_V1_2
    MOVEF_F 0.0 VLV_V2_2
    MOVEF_F 0.0 VLV_ANGLE_2
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_7
    MOVEF_F 0.0 VLV_DEGREES_A_7
    MOVEF_F 0.0 VLV_DEGREES_D_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_10
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_10
=======
    JR_NEQ32 SUBPROGRAM 0 dispatch855
    WRITE32 ENDSUB_F_PIDCONTROL_AD_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_PIDCONTROL_AD_0
  dispatch855:
    JR_NEQ32 SUBPROGRAM 1 dispatch856
    WRITE32 ENDSUB_F_ODOMETRY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ODOMETRY_0
  dispatch856:
    JR_NEQ32 SUBPROGRAM 2 dispatch857
    WRITE32 ENDSUB_F_DISPLAY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DISPLAY_0
  dispatch857:
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_45
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_44
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_VELI_K1_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_VELD_K1_33
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 0.0 VLV_ANGLE_35
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_42
    MOVEF_F 0.0 VLV_DEGREES_42
    MOVEF_F 0.0 VLV_VELOCIDAD_19
    MOVEF_F 0.0 VLV_DISTANCIA_19
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_40
    MOVEF_F 0.0 VLV_DEGREES_40
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_43
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_43
    MOVEF_F 0.0 VLV_DEGREES_A_43
    MOVEF_F 0.0 VLV_DEGREES_D_43
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_46
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_46
    MOVEF_F 0.0 VLV_V0_14
    MOVEF_F 0.0 VLV_VMAX_14
    MOVEF_F 0.0 VLV_KP_14
    MOVEF_F 0.0 VLV_KI_14
    MOVEF_F 0.0 VLV_KD_14
    MOVEF_F 0.0 VLV_ACCELENCODER_14
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_M_39
    MOVEF_F 0.0 VLV_K_39
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_39
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_37
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_M_38
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_38
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_VELI_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_VELD_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_OMEGAI_K1_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_OMEGAD_K1_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_V_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_DH_T_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_INV_33
>>>>>>> main
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
<<<<<<< HEAD
    MOVEF_F 0.0 VGV_ANGULO
=======
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F 0.0 VGV_SENTIDO_MOTORES
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_R
>>>>>>> main
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 1.0 VGV_SENTIDO_D
<<<<<<< HEAD
    MOVEF_F 0.0 VGV_ANGULO
    DATA32 tmp0
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 1  RUNCOUNTER_F_PIDCONTROL_AD_0 tmp0
    JR_NEQ32 0 tmp0 alreadylaunched0
    OBJECT_START TF_PIDCONTROL_AD_0
  alreadylaunched0:
    DATA32 tmp1
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 1  RUNCOUNTER_F_ODOMETRY_0 tmp1
    JR_NEQ32 0 tmp1 alreadylaunched1
    OBJECT_START TF_ODOMETRY_0
  alreadylaunched1:
    DATA32 tmp2
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 1  RUNCOUNTER_F_DISPLAY_0 tmp2
    JR_NEQ32 0 tmp2 alreadylaunched2
    OBJECT_START TF_DISPLAY_0
  alreadylaunched2:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB3 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB3:
    DATA32 milliseconds4
	MOVEF_32 20000.0 milliseconds4
	DATA32 timer4
	TIMER_WAIT milliseconds4 timer4
	TIMER_READY timer4
ENDTHREAD:
    RETURN
SUB_F_STARTARM_0:
    CALL MOTOR.RESETCOUNT 'A'
    CALL MOTOR.RESETCOUNT 'D'
=======
    MOVEF_F 84.5 VGV_DW
    MOVEF_F 56.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F -1.0 VGV_SENTIDO_MOTORES
    MOVEF_F -1.0 VGV_SENTIDO_MOTORES
    DATA32 tmp17
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 1  RUNCOUNTER_F_PIDCONTROL_AD_0 tmp17
    JR_NEQ32 0 tmp17 alreadylaunched17
    OBJECT_START TF_PIDCONTROL_AD_0
  alreadylaunched17:
    DATA32 tmp18
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 1  RUNCOUNTER_F_ODOMETRY_0 tmp18
    JR_NEQ32 0 tmp18 alreadylaunched18
    OBJECT_START TF_ODOMETRY_0
  alreadylaunched18:
    DATA32 tmp19
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 1  RUNCOUNTER_F_DISPLAY_0 tmp19
    JR_NEQ32 0 tmp19 alreadylaunched19
    OBJECT_START TF_DISPLAY_0
  alreadylaunched19:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB20 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB20:
ENDTHREAD:
    RETURN
SUB_F_STARTARM_0:
>>>>>>> main
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    MOVEF_F 200.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F -180.0 VLV_DEGREES_4
    WRITE32 ENDSUB_F_BMOVEA_2:CALLSUB7 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA_2
CALLSUB7:
    TIMER_READ timeMC1
<<<<<<< HEAD
  while9:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 500.0 endwhile9
  whilebody9:
    ADDF VGV_ANGLE_D 1.0 VGV_ANGLE_D
    DATA32 milliseconds12
	MOVEF_32 5.0 milliseconds12
	DATA32 timer12
	TIMER_WAIT milliseconds12 timer12
	TIMER_READY timer12
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 500.0 whilebody9
  endwhile9:
    CALL MOTOR.GETCOUNT 'D' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 30.0 else14_1
    MOVEF_F -1.0 VGV_SENTIDO_D
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_9
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB17:
    JR endif14
  else14_1:
    MOVEF_F 1.0 VGV_SENTIDO_D
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_9
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB18 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB18:
  else14_2:
  endif14:
    DATA32 milliseconds19
	MOVEF_32 100.0 milliseconds19
	DATA32 timer19
	TIMER_WAIT milliseconds19 timer19
	TIMER_READY timer19
=======
  while22:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 500.0 endwhile22
  whilebody22:
    ADDF VGV_ANGLE_D 1.0 VGV_ANGLE_D
    DATA32 milliseconds25
	MOVEF_32 3.0 milliseconds25
	DATA32 timer25
	TIMER_WAIT milliseconds25 timer25
	TIMER_READY timer25
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 500.0 whilebody22
  endwhile22:
    DATA32 milliseconds27
	MOVEF_32 500.0 milliseconds27
	DATA32 timer27
	TIMER_WAIT milliseconds27 timer27
	TIMER_READY timer27
    CALL MOTOR.GETCOUNT 'D' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 60.0 else28_1
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_45
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB31 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB31:
    MOVEF_F -1.0 VGV_SENTIDO_D
    JR endif28
  else28_1:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_45
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB32 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB32:
    MOVEF_F 1.0 VGV_SENTIDO_D
  else28_2:
  endif28:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_44
    WRITE32 ENDSUB_F_BMOVEA0_1:CALLSUB33 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA0_1
CALLSUB33:
    DATA32 milliseconds34
	MOVEF_32 100.0 milliseconds34
	DATA32 timer34
	TIMER_WAIT milliseconds34 timer34
	TIMER_READY timer34
>>>>>>> main
RETSUB_F_STARTARM_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STARTARM_0:
SUB_F_ODOMETRY_0:
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_XT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_YT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_THETAT
    MOVEF_F 0.0 VGV_I
<<<<<<< HEAD
  while25:
  whilebody25:
    MOVEF_F 84.5 VGV_DW
    MOVEF_F 56.0 VGV_DIAMETER
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.2
    DIVF F.2 57.295779513082 F.1
    MULF F.1 -1.0 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_L
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.2
    DIVF F.2 57.295779513082 F.1
    MULF F.1 -1.0 F.0
=======
  while40:
  whilebody40:
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.2
    MULF F.2 -1.0 F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_L
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.2
    MULF F.2 -1.0 F.1
    DIVF F.1 57.295779513082 F.0
>>>>>>> main
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_R
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_L
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_L
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf54
    DATA8 flag54
    DIVF F.0 2.0 tmpf54
    CP_EQF 0.0 2.0 flag54
    SELECTF flag54 0.0 tmpf54 VGV_D_L

    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_R
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_R
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf60
    DATA8 flag60
    DIVF F.0 2.0 tmpf60
    CP_EQF 0.0 2.0 flag60
    SELECTF flag60 0.0 tmpf60 VGV_D_R

    ADDF VGV_D_L VGV_D_R F.0
    DATAF tmpf62
    DATA8 flag62
    DIVF F.0 2.0 tmpf62
    CP_EQF 0.0 2.0 flag62
    SELECTF flag62 0.0 tmpf62 VGV_D

    SUBF VGV_D_L VGV_D_R F.0
    MULF 2.0 VGV_DW F.1
    DATAF tmpf65
    DATA8 flag65
    DIVF F.0 F.1 tmpf65
    CP_EQF 0.0 F.1 flag65
    SELECTF flag65 0.0 tmpf65 VGV_DELTA_THETA

    ADDF VGV_I 1.0 F.0
<<<<<<< HEAD
    CALL ARRAYGET_FLOAT VGV_I F.5 VGV_THETAT
    DATAF tmpf56
    DATA8 flag56
    DIVF VGV_DELTA_THETA 2.0 tmpf56
    CP_EQF 0.0 2.0 flag56
    SELECTF flag56 0.0 tmpf56 F.6

    ADDF F.5 F.6 F.4
    DATAF tmpf58
	MULF F.4 57.295779513082  tmpf58
	MATH SIN  tmpf58 F.3
    MULF VGV_D F.3 F.2
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_XT
    ADDF F.2 F.3 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_XT
  else51_2:
  endif51:
    JR_EQF VGV_YTCORRECT 0.0 else63_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_YTCORRECT VGV_YT
    MOVEF_F 0.0 VGV_YTCORRECT
    JR endif63
  else63_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.5 VGV_THETAT
    DATAF tmpf68
    DATA8 flag68
    DIVF VGV_DELTA_THETA 2.0 tmpf68
    CP_EQF 0.0 2.0 flag68
    SELECTF flag68 0.0 tmpf68 F.6

    ADDF F.5 F.6 F.4
    DATAF tmpf70
	MULF F.4 57.295779513082 tmpf70
	MATH COS tmpf70 F.3
    MULF VGV_D F.3 F.2
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_YT
    ADDF F.2 F.3 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_YT
  else63_2:
  endif63:
    JR_EQF VGV_THETATCORRECT 0.0 else75_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_THETATCORRECT VGV_THETAT
    MOVEF_F 0.0 VGV_THETATCORRECT
    JR endif75
  else75_1:
=======
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf68
    DATA8 flag68
    DIVF VGV_DELTA_THETA 2.0 tmpf68
    CP_EQF 0.0 2.0 flag68
    SELECTF flag68 0.0 tmpf68 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf70
	MULF F.5 57.295779513082  tmpf70
	MATH SIN  tmpf70 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_XT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_XT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf78
    DATA8 flag78
    DIVF VGV_DELTA_THETA 2.0 tmpf78
    CP_EQF 0.0 2.0 flag78
    SELECTF flag78 0.0 tmpf78 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf80
	MULF F.5 57.295779513082 tmpf80
	MATH COS tmpf80 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_YT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_YT
>>>>>>> main
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_THETAT
    ADDF F.2 VGV_DELTA_THETA F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_THETAT
<<<<<<< HEAD
  else75_2:
  endif75:
=======
>>>>>>> main
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_XTIME VGV_XT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_YTIME VGV_YT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_THETATIME VGV_THETAT
    ADDF VGV_I 1.0 VGV_I
<<<<<<< HEAD
    DATA32 milliseconds89
	MOVEF_32 10.0 milliseconds89
	DATA32 timer89
	TIMER_WAIT milliseconds89 timer89
	TIMER_READY timer89
    JR whilebody25
  endwhile25:
=======
    DATA32 milliseconds97
	MOVEF_32 10.0 milliseconds97
	DATA32 timer97
	TIMER_WAIT milliseconds97 timer97
	TIMER_READY timer97
    JR whilebody40
  endwhile40:
>>>>>>> main
RETSUB_F_ODOMETRY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ODOMETRY_0:
SUB_F_PIDCONTROL_AD_0:
    MOVEF_F 1.5 VGV_KP_A
    MOVEF_F 0.0001 VGV_KI_A
    MOVEF_F 0.1 VGV_KD_A
    MOVEF_F 0.5 VGV_KP_D
    MOVEF_F 0.0001 VGV_KI_D
    MOVEF_F 0.1 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
<<<<<<< HEAD
  while90:
  whilebody90:
=======
  while98:
  whilebody98:
>>>>>>> main
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    SUBF VGV_ANGLE_A F.0 VGV_ERROR_A
    ADDF VGV_ERRSUM_A VGV_ERROR_A VGV_ERRSUM_A
    MULF VGV_ERROR_A VGV_KP_A F.1
    MULF VGV_ERRSUM_A VGV_KI_A F.3
<<<<<<< HEAD
    DATAF tmpf96
    DATA8 flag96
    DIVF F.3 1.0 tmpf96
    CP_EQF 0.0 1.0 flag96
    SELECTF flag96 0.0 tmpf96 F.2
=======
    DATAF tmpf104
    DATA8 flag104
    DIVF F.3 1.0 tmpf104
    CP_EQF 0.0 1.0 flag104
    SELECTF flag104 0.0 tmpf104 F.2
>>>>>>> main

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_A VGV_OLDERROR_A F.2
    MULF F.2 VGV_KD_A F.1
    ADDF F.0 F.1 VGV_U_A
    MOVEF_8 VGV_U_A setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    SUBF VGV_ANGLE_D F.0 VGV_ERROR_D
    ADDF VGV_ERRSUM_D VGV_ERROR_D VGV_ERRSUM_D
    MULF VGV_ERROR_D VGV_KP_D F.1
    MULF VGV_ERRSUM_D VGV_KI_D F.3
<<<<<<< HEAD
    DATAF tmpf107
    DATA8 flag107
    DIVF F.3 1.0 tmpf107
    CP_EQF 0.0 1.0 flag107
    SELECTF flag107 0.0 tmpf107 F.2
=======
    DATAF tmpf115
    DATA8 flag115
    DIVF F.3 1.0 tmpf115
    CP_EQF 0.0 1.0 flag115
    SELECTF flag115 0.0 tmpf115 F.2
>>>>>>> main

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_D VGV_OLDERROR_D F.3
    MULF F.3 VGV_KD_D F.2
    MULF F.2 VGV_SENTIDO_D F.1
    ADDF F.0 F.1 VGV_U_D
    MOVEF_8 VGV_U_D setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
<<<<<<< HEAD
    JR whilebody90
  endwhile90:
=======
    JR whilebody98
  endwhile98:
>>>>>>> main
RETSUB_F_PIDCONTROL_AD_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_PIDCONTROL_AD_0:
SUB_F_DISPLAY_0:
<<<<<<< HEAD
  while114:
  whilebody114:
=======
    MOVEF_F 0.0 VGV_OLD_B
    MOVEF_F 0.0 VGV_OLD_C
  while122:
  whilebody122:
>>>>>>> main
    MOVE32_32 1 STOPLCDUPDATE
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_XT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
<<<<<<< HEAD
    DATAF tmpf120
    DATA8 flag120
    DIVF F.1 100.0 tmpf120
    CP_EQF 0.0 100.0 flag120
    SELECTF flag120 0.0 tmpf120 F.0
=======
    DATAF tmpf128
    DATA8 flag128
    DIVF F.1 100.0 tmpf128
    CP_EQF 0.0 100.0 flag128
    SELECTF flag128 0.0 tmpf128 F.0
>>>>>>> main

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'xt: ' S.1 S.0
    CALL LCD.WRITE 5.0 5.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_YT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
<<<<<<< HEAD
    DATAF tmpf127
    DATA8 flag127
    DIVF F.1 100.0 tmpf127
    CP_EQF 0.0 100.0 flag127
    SELECTF flag127 0.0 tmpf127 F.0
=======
    DATAF tmpf135
    DATA8 flag135
    DIVF F.1 100.0 tmpf135
    CP_EQF 0.0 100.0 flag135
    SELECTF flag135 0.0 tmpf135 F.0
>>>>>>> main

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'yt: ' S.1 S.0
    CALL LCD.WRITE 5.0 15.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.1 VGV_THETAT
    MULF F.1 57.295779513082 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'thetat: ' S.1 S.0
    CALL LCD.WRITE 5.0 25.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGULO '%g' 99 S.1
    CALL TEXT.APPEND 'angulo: ' S.1 S.0
    CALL LCD.WRITE 5.0 35.0 S.0
    STRINGS VALUE_FORMATTED VGV_CENTRO '%g' 99 S.1
    CALL TEXT.APPEND 'centro: ' S.1 S.0
<<<<<<< HEAD
    CALL LCD.WRITE 5.0 45.0 S.0
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
=======
    CALL LCD.WRITE 5.0 35.0 S.0
    OUTPUT_READ 0 1 getSpeedB tmpTachoB
	MOVE8_F getSpeedB F.1
    MULF F.1 -1.0 F.0
>>>>>>> main
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Velocidad de B:  ' S.1 S.0
    CALL LCD.WRITE 5.0 45.0 S.0
    OUTPUT_READ 0 2 getSpeedC tmpTachoC
	MOVE8_F getSpeedC F.1
    MULF F.1 -1.0 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Velocidad de C:  ' S.1 S.0
    CALL LCD.WRITE 5.0 55.0 S.0
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.4
    SUBF F.4 VGV_OLD_B F.3
    DIVF F.3 57.295779513082 F.2
    DATAF tmpf160
    DATA8 flag160
    DIVF F.2 0.05 tmpf160
    CP_EQF 0.0 0.05 flag160
    SELECTF flag160 0.0 tmpf160 F.1

    MULF F.1 -1.0 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'rad/s de B:  ' S.1 S.0
    CALL LCD.WRITE 5.0 65.0 S.0
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.4
    SUBF F.4 VGV_OLD_C F.3
    DIVF F.3 57.295779513082 F.2
    DATAF tmpf168
    DATA8 flag168
    DIVF F.2 0.05 tmpf168
    CP_EQF 0.0 0.05 flag168
    SELECTF flag168 0.0 tmpf168 F.1

    MULF F.1 -1.0 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'rad/s de C:  ' S.1 S.0
    CALL LCD.WRITE 5.0 75.0 S.0
    STRINGS VALUE_FORMATTED VGV_D_T '%g' 99 S.1
    CALL TEXT.APPEND 'Delta T:  ' S.1 S.0
    CALL LCD.WRITE 5.0 85.0 S.0
<<<<<<< HEAD
    STRINGS VALUE_FORMATTED VGV_ANGLE_D '%g' 99 S.1
    CALL TEXT.APPEND 'Obj de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 95.0 S.0
    STRINGS VALUE_FORMATTED VGV_SENTIDO_D '%g' 99 S.1
    CALL TEXT.APPEND 'Sentido D: ' S.1 S.0
    CALL LCD.WRITE 5.0 105.0 S.0
    MOVE32_32 0 STOPLCDUPDATE
	UI_DRAW UPDATE
    DATA32 milliseconds160
	MOVEF_32 100.0 milliseconds160
	DATA32 timer160
	TIMER_WAIT milliseconds160 timer160
	TIMER_READY timer160
    JR whilebody114
  endwhile114:
=======
    MOVE32_32 0 STOPLCDUPDATE
	UI_DRAW UPDATE
    DATA32 milliseconds177
	MOVEF_32 50.0 milliseconds177
	DATA32 timer177
	TIMER_WAIT milliseconds177 timer177
	TIMER_READY timer177
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB VGV_OLD_B
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC VGV_OLD_C
    JR whilebody122
  endwhile122:
>>>>>>> main
RETSUB_F_DISPLAY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DISPLAY_0:
SUB_F_MAIN_0:
<<<<<<< HEAD
    WRITE32 ENDSUB_F_STARTARM_0:CALLSUB161 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STARTARM_0
CALLSUB161:
    MOVEF_F 100.0 VLV_DEGREES_PER_SECOND_6
    MOVEF_F 150.0 VLV_DEGREES_6
    WRITE32 ENDSUB_F_BMOVED_2:CALLSUB162 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED_2
CALLSUB162:
    DATA32 milliseconds163
	MOVEF_32 1000.0 milliseconds163
	DATA32 timer163
	TIMER_WAIT milliseconds163 timer163
	TIMER_READY timer163
    MOVEF_F 60.0 VLV_DEGREES_PER_SECOND_8
    WRITE32 ENDSUB_F_BMOVEA0_1:CALLSUB164 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA0_1
CALLSUB164:
    CALL MOTOR.SCHEDULE 'BC' -30.0 0.0 130.0 0.0 'True' 

	DATA8 layer165
	DATA8 nos165
	DATA8 busy165
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer165 nos165
	JR_EQ8 0 nos165 motornotbusy165
  motorwaiting165:
	OUTPUT_TEST layer165 nos165 busy165
	JR_EQ8 busy165 0 motornotbusy165
	SLEEP
	JR motorwaiting165
  motornotbusy165:
    MOVEF_F 100.0 VLV_DEGREES_PER_SECOND_9
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB166 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB166:
    DATA32 milliseconds167
	MOVEF_32 2000.0 milliseconds167
	DATA32 timer167
	TIMER_WAIT milliseconds167 timer167
	TIMER_READY timer167
    MOVEF_F -30.0 VLV_V1_2
    MOVEF_F 30.0 VLV_V2_2
    MOVEF_F 22.0 VLV_ANGLE_2
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB168 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB168:
    MOVEF_F 100.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F 180.0 VLV_DEGREES_4
    WRITE32 ENDSUB_F_BMOVEA_2:CALLSUB169 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA_2
CALLSUB169:
    DATA32 milliseconds170
	MOVEF_32 2000.0 milliseconds170
	DATA32 timer170
	TIMER_WAIT milliseconds170 timer170
	TIMER_READY timer170
    CALL MOTOR.SCHEDULE 'BC' 10.0 0.0 10.0 0.0 'True' 

	DATA8 layer171
	DATA8 nos171
	DATA8 busy171
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer171 nos171
	JR_EQ8 0 nos171 motornotbusy171
  motorwaiting171:
	OUTPUT_TEST layer171 nos171 busy171
	JR_EQ8 busy171 0 motornotbusy171
	SLEEP
	JR motorwaiting171
  motornotbusy171:
    MOVEF_F 150.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F 180.0 VLV_DEGREES_4
    WRITE32 ENDSUB_F_BMOVEA_2:CALLSUB172 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA_2
CALLSUB172:
    MOVEF_F 10.0 VLV_V1_2
    MOVEF_F -10.0 VLV_V2_2
    MOVEF_F 5.0 VLV_ANGLE_2
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB173 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB173:
    MOVEF_F 15.0 VLV_DEGREES_PER_SECOND_A_7
    MOVEF_F 40.0 VLV_DEGREES_PER_SECOND_D_7
    MOVEF_F 55.0 VLV_DEGREES_A_7
    MOVEF_F 150.0 VLV_DEGREES_D_7
    WRITE32 ENDSUB_F_BMOVEAD_4:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD_4
CALLSUB174:
    DATA32 milliseconds175
	MOVEF_32 2000.0 milliseconds175
	DATA32 timer175
	TIMER_WAIT milliseconds175 timer175
	TIMER_READY timer175
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 150.0 0.0 'True' 

	DATA8 layer176
	DATA8 nos176
	DATA8 busy176
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer176 nos176
	JR_EQ8 0 nos176 motornotbusy176
  motorwaiting176:
	OUTPUT_TEST layer176 nos176 busy176
	JR_EQ8 busy176 0 motornotbusy176
	SLEEP
	JR motorwaiting176
  motornotbusy176:
    MOVEF_F 100.0 VLV_DEGREES_PER_SECOND_A_10
    MOVEF_F 100.0 VLV_DEGREES_PER_SECOND_D_10
    WRITE32 ENDSUB_F_BMOVEAD0_2:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD0_2
CALLSUB177:
=======
    CALL VECTOR.INIT 100.0 50.0 VGV_L
    CALL VECTOR.INIT 100.0 50.0 VGV_R
    ARRAY COPY VGV_L VLV_VELI_K1_33
    ARRAY COPY VGV_R VLV_VELD_K1_33
    WRITE32 ENDSUB_F_KALMAN_FILTER_2:CALLSUB182 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_KALMAN_FILTER_2
CALLSUB182:
    PROGRAM_STOP -1
    WRITE32 ENDSUB_F_STARTARM_0:CALLSUB184 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STARTARM_0
CALLSUB184:
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 20.0 VLV_V2_35
    MOVEF_F 40.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB185 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB185:
    MOVEF_F 20.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 40.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB186 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB186:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_42
    MOVEF_F 140.0 VLV_DEGREES_42
    WRITE32 ENDSUB_F_BMOVED_2:CALLSUB187 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED_2
CALLSUB187:
    MOVEF_F 30.0 VLV_VELOCIDAD_19
    MOVEF_F 80.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB188 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB188:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_45
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB189:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_40
    MOVEF_F 180.0 VLV_DEGREES_40
    WRITE32 ENDSUB_F_BMOVEA_2:CALLSUB190 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA_2
CALLSUB190:
    MOVEF_F -30.0 VLV_VELOCIDAD_19
    MOVEF_F 30.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB191 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB191:
    MOVEF_F 20.0 VLV_V1_35
    MOVEF_F -20.0 VLV_V2_35
    MOVEF_F 60.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB192 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB192:
    MOVEF_F 30.0 VLV_VELOCIDAD_19
    MOVEF_F 60.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB193 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB193:
    MOVEF_F -20.0 VLV_V1_35
    MOVEF_F 20.0 VLV_V2_35
    MOVEF_F 55.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB194 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB194:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_A_43
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_D_43
    MOVEF_F 60.0 VLV_DEGREES_A_43
    MOVEF_F 160.0 VLV_DEGREES_D_43
    WRITE32 ENDSUB_F_BMOVEAD_4:CALLSUB195 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD_4
CALLSUB195:
    DATA32 milliseconds196
	MOVEF_32 1000.0 milliseconds196
	DATA32 timer196
	TIMER_WAIT milliseconds196 timer196
	TIMER_READY timer196
    MOVEF_F -30.0 VLV_VELOCIDAD_19
    MOVEF_F 200.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB197 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB197:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_A_46
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_D_46
    WRITE32 ENDSUB_F_BMOVEAD0_2:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD0_2
CALLSUB198:
>>>>>>> main
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
<<<<<<< HEAD
SUB_F_GUNIVENCMG_3:
    STRINGS DUPLICATE 'B' VLV_I_2
    STRINGS DUPLICATE 'C' VLV_D_2
    MOVEF_F 3.05555555555556 VLV_G1_2
    DATAF tmpf178
    DATA8 flag178
    DIVF VLV_V1_2 VLV_V2_2 tmpf178
    CP_EQF 0.0 VLV_V2_2 flag178
    SELECTF flag178 0.0 tmpf178 F.0

    DATAF tmpf179
    DATA8 flag179
    DIVF VLV_V1_2 VLV_V2_2 tmpf179
    CP_EQF 0.0 VLV_V2_2 flag179
    SELECTF flag179 0.0 tmpf179 F.2

    MATH ABS F.2 F.1
    DATAF tmpf181
    DATA8 flag181
    DIVF F.0 F.1 tmpf181
    CP_EQF 0.0 F.1 flag181
    SELECTF flag181 0.0 tmpf181 VLV_SIGNO_2

    MATH ABS VLV_V1_2 F.0
    MATH ABS VLV_V2_2 F.1
    DATA8 flag184
	CP_LTF F.0 F.1 flag184
	SELECTF flag184 F.0 F.1 VLV_VMIN_2
    MATH ABS VLV_V1_2 F.0
    MATH ABS VLV_V2_2 F.1
    DATA8 flag187
	CP_GTF F.0 F.1 flag187
	SELECTF flag187 F.0 F.1 VLV_VMAX_2
    DATAF tmpf188
    DATA8 flag188
    DIVF VLV_VMIN_2 VLV_VMAX_2 tmpf188
    CP_EQF 0.0 VLV_VMAX_2 flag188
    SELECTF flag188 0.0 tmpf188 F.3

    MULF -8.5 F.3 F.2
    MULF F.2 VLV_SIGNO_2 F.1
    SUBF F.1 8.5 F.0
    DATAF tmpf192
    DATA8 flag192
    DIVF VLV_VMIN_2 VLV_VMAX_2 tmpf192
    CP_EQF 0.0 VLV_VMAX_2 flag192
    SELECTF flag192 0.0 tmpf192 F.3

    MULF F.3 VLV_SIGNO_2 F.2
    SUBF F.2 1.0 F.1
    DATAF tmpf195
    DATA8 flag195
    DIVF F.0 F.1 tmpf195
    CP_EQF 0.0 F.1 flag195
    SELECTF flag195 0.0 tmpf195 VGV_CENTRO

    MULF VLV_ANGLE_2 VLV_G1_2 F.0
    MULF VLV_SIGNO_2 VLV_VMIN_2 F.4
    DATAF tmpf198
    DATA8 flag198
    DIVF F.4 VLV_VMAX_2 tmpf198
    CP_EQF 0.0 VLV_VMAX_2 flag198
    SELECTF flag198 0.0 tmpf198 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf200
    DATA8 flag200
    DIVF -2.0 F.2 tmpf200
    CP_EQF 0.0 F.2 flag200
    SELECTF flag200 0.0 tmpf200 F.1

    MULF F.0 F.1 VLV_ENCODR_2
    CALL TEXT.APPEND VLV_I_2 VLV_D_2 S.0
    MATH NEGATE VLV_V1_2 F.0
    MATH NEGATE VLV_V2_2 F.1
    CALL MOTOR.SCHEDULESYNC S.0 F.0 F.1 VLV_ENCODR_2 'True'

	DATA8 layer205
	DATA8 nos205
	DATA8 busy205
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer205 nos205
	JR_EQ8 0 nos205 motornotbusy205
  motorwaiting205:
	OUTPUT_TEST layer205 nos205 busy205
	JR_EQ8 busy205 0 motornotbusy205
	SLEEP
	JR motorwaiting205
  motornotbusy205:
RETSUB_F_GUNIVENCMG_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_GUNIVENCMG_3:
SUB_F_BMOVEA_2:
    SUBF VLV_DEGREES_4 VGV_ANGLE_A VLV_ROTATION_4
    MATH ABS VLV_ROTATION_4 F.0
    DATAF tmpf208
    DATA8 flag208
    DIVF F.0 VLV_ROTATION_4 tmpf208
    CP_EQF 0.0 VLV_ROTATION_4 flag208
    SELECTF flag208 0.0 tmpf208 VLV_SIGN_4

    MOVEF_F 0.0 VLV_PROGRESS_4
    MULF VLV_DEGREES_PER_SECOND_4 VLV_SIGN_4 F.0
    DATAF tmpf210
    DATA8 flag210
    DIVF F.0 50.0 tmpf210
    CP_EQF 0.0 50.0 flag210
    SELECTF flag210 0.0 tmpf210 VLV_DEGREES_PER_INTERVAL_4

  while211:
    SUBF VLV_ROTATION_4 VLV_PROGRESS_4 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile211
  whilebody211:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_4 VGV_ANGLE_A
    ADDF VLV_PROGRESS_4 VLV_DEGREES_PER_INTERVAL_4 VLV_PROGRESS_4
    DATA32 milliseconds216
	MOVEF_32 1.0 milliseconds216
	DATA32 timer216
	TIMER_WAIT milliseconds216 timer216
	TIMER_READY timer216
    SUBF VLV_ROTATION_4 VLV_PROGRESS_4 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody211
  endwhile211:
    MOVEF_F VLV_DEGREES_4 VGV_ANGLE_A
=======
SUB_F_SL14SICF_6:
    STRINGS DUPLICATE 'B' VLV_I_14
    STRINGS DUPLICATE 'C' VLV_D_14
    MOVEF_F 3.1415926535897932384 F.2
    MULF 56.0 F.2 F.1
    DATAF tmpf201
    DATA8 flag201
    DIVF VLV_ACCELENCODER_14 F.1 tmpf201
    CP_EQF 0.0 F.1 flag201
    SELECTF flag201 0.0 tmpf201 F.0

    MULF F.0 360.0 VLV_ACCELENCODER_14
    MOVEF_F 0.0 VLV_U_14
    MOVEF_F 0.0 VLV_ERROR_14
    MOVEF_F 0.0 VLV_OLDERROR_14
    MOVEF_F 0.0 VLV_ERRSUM_14
    CALL MOTOR.RESETCOUNT 'C'
  while204:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 15.0 or205
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 15.0 endwhile204
  or205:
  whilebody204:
    CALL MOTOR.GETCOUNT 'C' F.3
    DATAF tmpf209
    DATA8 flag209
    DIVF F.3 VLV_ACCELENCODER_14 tmpf209
    CP_EQF 0.0 VLV_ACCELENCODER_14 flag209
    SELECTF flag209 0.0 tmpf209 F.2

    MULF F.2 0.72 F.1
    ADDF VLV_VMAX_14 VLV_V0_14 F.2
    MULF F.1 F.2 F.0
    ADDF F.0 VLV_V0_14 VLV_VEL_14
    DATA8 flag214
	CP_LTF VLV_VEL_14 VLV_VMAX_14 flag214
	SELECTF flag214 VLV_VEL_14 VLV_VMAX_14 VLV_VEL_14
    MATH ABS VLV_VEL_14 F.0
    DATAF tmpf216
    DATA8 flag216
    DIVF VLV_VEL_14 F.0 tmpf216
    CP_EQF 0.0 F.0 flag216
    SELECTF flag216 0.0 tmpf216 VLV_SENTIDO_14

    CALL SENSOR.READPERCENT 1.0 F.1
    CALL SENSOR.READPERCENT 4.0 F.2
    SUBF F.1 F.2 F.0
    MULF F.0 VLV_SENTIDO_14 VLV_ERROR_14
    ADDF VLV_ERRSUM_14 VLV_ERROR_14 VLV_ERRSUM_14
    MULF VLV_ERROR_14 VLV_KP_14 F.1
    SUBF VLV_ERROR_14 VLV_OLDERROR_14 F.3
    MULF F.3 VLV_KD_14 F.2
    ADDF F.1 F.2 F.0
    MULF VLV_ERRSUM_14 VLV_KI_14 F.1
    ADDF F.0 F.1 VLV_U_14
    CALL TEXT.APPEND VLV_I_14 VLV_D_14 S.0
    ADDF VLV_VEL_14 VLV_U_14 F.1
    MULF F.1 VGV_SENTIDO_MOTORES F.0
    SUBF VLV_VEL_14 VLV_U_14 F.2
    MULF F.2 VGV_SENTIDO_MOTORES F.1
    CALL MOTOR.STARTSYNC S.0 F.0 F.1
    MOVEF_F VLV_ERROR_14 VLV_OLDERROR_14
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 15.0 whilebody204
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 15.0 whilebody204
  endwhile204:
    CALL TEXT.APPEND VLV_I_14 VLV_D_14 S.0
    CALL MOTOR.STOP S.0 'False'
RETSUB_F_SL14SICF_6:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SL14SICF_6:
SUB_F_ENCODERRECTOMG_2:
    MOVEF_F 56.0 VLV_DIAMETRO_19
    MULF VLV_DISTANCIA_19 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf240
    DATA8 flag240
    DIVF F.1 F.2 tmpf240
    CP_EQF 0.0 F.2 flag240
    SELECTF flag240 0.0 tmpf240 F.0

    DATAF tmpf241
    DATA8 flag241
    DIVF F.0 VLV_DIAMETRO_19 tmpf241
    CP_EQF 0.0 VLV_DIAMETRO_19 flag241
    SELECTF flag241 0.0 tmpf241 VLV_ENC_19

    CALL MOTOR.GETCOUNT 'B' VLV_START_B_19
    CALL MOTOR.GETCOUNT 'C' VLV_START_C_19
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_19 VLV_ENCODER_C_19
  while246:
    MATH ABS VLV_ENCODER_C_19 F.0
    JR_GTEQF F.0 VLV_ENC_19 endwhile246
  whilebody246:
    CALL MOTOR.GETCOUNT 'B' F.1
    SUBF F.1 VLV_START_B_19 F.0
    MULF F.0 VGV_SENTIDO_MOTORES VLV_ENCODER_B_19
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.1 VLV_START_C_19 F.0
    MULF F.0 VGV_SENTIDO_MOTORES VLV_ENCODER_C_19
    SUBF VLV_ENCODER_B_19 VLV_ENCODER_C_19 VLV_ERROR_19
    MULF VLV_ERROR_19 2.0 VLV_PROPORCIAL_19
    SUBF VLV_VELOCIDAD_19 VLV_PROPORCIAL_19 F.1
    MULF F.1 VGV_SENTIDO_MOTORES F.0
    ADDF VLV_VELOCIDAD_19 VLV_PROPORCIAL_19 F.2
    MULF F.2 VGV_SENTIDO_MOTORES F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    MATH ABS VLV_ENCODER_C_19 F.0
    JR_LTF F.0 VLV_ENC_19 whilebody246
  endwhile246:
    CALL MOTOR.STOP 'BC' 'True'
RETSUB_F_ENCODERRECTOMG_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ENCODERRECTOMG_2:
SUB_F_KALMAN_FILTER_2:
    MOVEF_F 0.0 VLV_ITREAL_33
    MOVEF_F 28.0 VLV_RADIO_33
    ARRAY COPY VLV_VELI_K1_33 VLV_M_39
    MOVEF_F -1.0 VLV_K_39
    WRITE32 ENDSUB_F_MULTIMATRIZCOEF_3:CALLSUB263 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MULTIMATRIZCOEF_3
CALLSUB263:
    ARRAY COPY VLV_S_39 VLV_VELI_33
    ARRAY COPY VLV_VELD_K1_33 VLV_M_39
    MOVEF_F -1.0 VLV_K_39
    WRITE32 ENDSUB_F_MULTIMATRIZCOEF_3:CALLSUB264 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MULTIMATRIZCOEF_3
CALLSUB264:
    ARRAY COPY VLV_S_39 VLV_VELD_33
    ARRAY COPY VLV_VELI_K1_33 VLV_M_39
    MOVEF_F 0.0178189593727726 VLV_K_39
    WRITE32 ENDSUB_F_MULTIMATRIZCOEF_3:CALLSUB265 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MULTIMATRIZCOEF_3
CALLSUB265:
    ARRAY COPY VLV_S_39 VLV_OMEGAI_K1_33
    ARRAY COPY VLV_VELD_K1_33 VLV_M_39
    MOVEF_F 0.0167000668002672 VLV_K_39
    WRITE32 ENDSUB_F_MULTIMATRIZCOEF_3:CALLSUB266 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MULTIMATRIZCOEF_3
CALLSUB266:
    ARRAY COPY VLV_S_39 VLV_OMEGAD_K1_33
    CALL VECTOR.DATA 9.0 '1 0 0  0 1 0  0 0 1' VLV_I_33
    CALL VECTOR.DATA 9.0 '-1 0 0 0 -1 0 0 0 -1' VLV_MINUS_1_33
    CALL VECTOR.DATA 9.0 '0.25 0 0  0 0.25 0 0 0 0.002' VLV_Q_K1_33
    CALL EV3.TIME VLV_DELTA_T_33
    MOVEF_F 0.0 VLV_OLD_T_33
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    MULF -1.0 F.0 VLV_OLD_I_33
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.0
    MULF -1.0 F.0 VLV_OLD_D_33
    CALL EV3FILE.OPENWRITE 'WRO2024/log.txt' VLV_LOG_FILE_33
  while276:
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_OMEGAI_K1_33
    JR_NEQF F.0 0.0 or277
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_OMEGAD_K1_33
    JR_EQF F.0 0.0 endwhile276
  or277:
  whilebody276:
    CALL VECTOR.INIT 9.0 0.0 VLV_DF_K_33
    CALL VECTOR.INIT 3.0 0.0 VLV_K_K1_33
    CALL VECTOR.INIT 3.0 0.0 VLV_K1_K_33
    CALL VECTOR.INIT 3.0 0.0 VLV_H_33
    CALL VECTOR.INIT 9.0 0.0 VLV_DH_33
    CALL VECTOR.DATA 9.0 '0.25 0 0  0 0.25 0 0 0 0.002' VLV_R_33
    CALL VECTOR.INIT 3.0 0.0 VLV_Z_33
    CALL EV3.TIME F.0
    SUBF F.0 VLV_OLD_T_33 VLV_DELTA_T_33
    CALL EV3.TIME VLV_OLD_T_33
    MOVEF_F VLV_DELTA_T_33 VGV_D_T
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_VELI_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.1 VLV_VELD_33
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL ARRAYGET_FLOAT 0.0 F.1 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.7 VLV_OMEGAI_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.8 VLV_OMEGAD_K1_33
    ADDF F.7 F.8 F.6
    MULF F.6 VLV_RADIO_33 F.5
    MULF F.5 VLV_DELTA_T_33 F.4
    DATAF tmpf299
    DATA8 flag299
    DIVF F.4 2.0 tmpf299
    CP_EQF 0.0 2.0 flag299
    SELECTF flag299 0.0 tmpf299 F.3

    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.11 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.12 VLV_OMEGAI_K1_33
    SUBF F.11 F.12 F.10
    MULF F.10 VLV_RADIO_33 F.9
    MULF F.9 VLV_DELTA_T_33 F.8
    MULF 4.0 VGV_DW F.9
    DATAF tmpf307
    DATA8 flag307
    DIVF F.8 F.9 tmpf307
    CP_EQF 0.0 F.9 flag307
    SELECTF flag307 0.0 tmpf307 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf309
	MULF F.5 57.295779513082 tmpf309
	MATH COS tmpf309 F.4
    MULF F.3 F.4 F.2
    ADDF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.1 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.7 VLV_OMEGAI_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.8 VLV_OMEGAD_K1_33
    ADDF F.7 F.8 F.6
    MULF F.6 VLV_RADIO_33 F.5
    MULF F.5 VLV_DELTA_T_33 F.4
    DATAF tmpf319
    DATA8 flag319
    DIVF F.4 2.0 tmpf319
    CP_EQF 0.0 2.0 flag319
    SELECTF flag319 0.0 tmpf319 F.3

    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.11 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.12 VLV_OMEGAI_K1_33
    SUBF F.11 F.12 F.10
    MULF F.10 VLV_RADIO_33 F.9
    MULF F.9 VLV_DELTA_T_33 F.8
    MULF 4.0 VGV_DW F.9
    DATAF tmpf327
    DATA8 flag327
    DIVF F.8 F.9 tmpf327
    CP_EQF 0.0 F.9 flag327
    SELECTF flag327 0.0 tmpf327 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf329
	MULF F.5 57.295779513082  tmpf329
	MATH SIN  tmpf329 F.4
    MULF F.3 F.4 F.2
    ADDF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.1 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.6 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.7 VLV_OMEGAI_K1_33
    SUBF F.6 F.7 F.5
    MULF F.5 VLV_RADIO_33 F.4
    MULF F.4 VLV_DELTA_T_33 F.3
    MULF 2.0 VGV_DW F.4
    DATAF tmpf340
    DATA8 flag340
    DIVF F.3 F.4 tmpf340
    CP_EQF 0.0 F.4 flag340
    SELECTF flag340 0.0 tmpf340 F.2

    ADDF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.6 VLV_OMEGAI_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.7 VLV_OMEGAD_K1_33
    ADDF F.6 F.7 F.5
    MULF F.5 VLV_RADIO_33 F.4
    MULF F.4 VLV_DELTA_T_33 F.3
    MULF -1.0 F.3 F.2
    DATAF tmpf349
    DATA8 flag349
    DIVF F.2 2.0 tmpf349
    CP_EQF 0.0 2.0 flag349
    SELECTF flag349 0.0 tmpf349 F.1

    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.9 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.10 VLV_OMEGAI_K1_33
    SUBF F.9 F.10 F.8
    MULF F.8 VLV_RADIO_33 F.7
    MULF F.7 VLV_DELTA_T_33 F.6
    MULF 4.0 VGV_DW F.7
    DATAF tmpf357
    DATA8 flag357
    DIVF F.6 F.7 tmpf357
    CP_EQF 0.0 F.7 flag357
    SELECTF flag357 0.0 tmpf357 F.5

    ADDF F.4 F.5 F.3
    DATAF tmpf359
	MULF F.3 57.295779513082  tmpf359
	MATH SIN  tmpf359 F.2
    MULF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DF_K_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.5 VLV_OMEGAI_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.6 VLV_OMEGAD_K1_33
    ADDF F.5 F.6 F.4
    MULF F.4 VLV_RADIO_33 F.3
    MULF F.3 VLV_DELTA_T_33 F.2
    DATAF tmpf367
    DATA8 flag367
    DIVF F.2 2.0 tmpf367
    CP_EQF 0.0 2.0 flag367
    SELECTF flag367 0.0 tmpf367 F.1

    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.9 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.10 VLV_OMEGAI_K1_33
    SUBF F.9 F.10 F.8
    MULF F.8 VLV_RADIO_33 F.7
    MULF F.7 VLV_DELTA_T_33 F.6
    MULF 4.0 VGV_DW F.7
    DATAF tmpf375
    DATA8 flag375
    DIVF F.6 F.7 tmpf375
    CP_EQF 0.0 F.7 flag375
    SELECTF flag375 0.0 tmpf375 F.5

    ADDF F.4 F.5 F.3
    DATAF tmpf377
	MULF F.3 57.295779513082 tmpf377
	MATH COS tmpf377 F.2
    MULF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DF_K_33
    CALL VECTOR.ADD 9.0 VLV_I_33 VLV_DF_K_33 VLV_F_K_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_F_K_33 VLV_I_33 VLV_U_33
    ARRAY COPY VLV_U_33 VLV_M_37
    WRITE32 ENDSUB_F_TRASPMATVECT3X3_2:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TRASPMATVECT3X3_2
CALLSUB382:
    ARRAY COPY VLV_S_37 VLV_V_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_U_33 VLV_V_33 VLV_W_33
    CALL VECTOR.ADD 9.0 VLV_W_33 VLV_Q_K1_33 VLV_P_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.2 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.3 VLV_K1_K_33
    SUBF F.2 F.3 F.1
    MULF F.1 VLV_DELTA_T_33 F.0
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_H_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH SQRT F.3 F.2
    CALL ARRAYGET_FLOAT 2.0 F.5 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K1_K_33
    SUBF F.5 F.6 F.4
    MULF VGV_DW F.4 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf405
    DATA8 flag405
    DIVF F.1 VLV_RADIO_33 tmpf405
    CP_EQF 0.0 VLV_RADIO_33 flag405
    SELECTF flag405 0.0 tmpf405 F.0

    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_H_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH SQRT F.3 F.2
    CALL ARRAYGET_FLOAT 2.0 F.5 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K1_K_33
    SUBF F.5 F.6 F.4
    MULF VGV_DW F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf422
    DATA8 flag422
    DIVF F.1 VLV_RADIO_33 tmpf422
    CP_EQF 0.0 VLV_RADIO_33 flag422
    SELECTF flag422 0.0 tmpf422 F.0

    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_H_33
    DATAF tmpf424
    DATA8 flag424
    DIVF 1.0 VLV_DELTA_T_33 tmpf424
    CP_EQF 0.0 VLV_DELTA_T_33 flag424
    SELECTF flag424 0.0 tmpf424 F.0

    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 0.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf440
    DATA8 flag440
    DIVF F.1 VLV_RADIO_33 tmpf440
    CP_EQF 0.0 VLV_RADIO_33 flag440
    SELECTF flag440 0.0 tmpf440 F.0

    CALL ARRAYSTORE_FLOAT 3.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf456
    DATA8 flag456
    DIVF F.1 VLV_RADIO_33 tmpf456
    CP_EQF 0.0 VLV_RADIO_33 flag456
    SELECTF flag456 0.0 tmpf456 F.0

    CALL ARRAYSTORE_FLOAT 4.0 F.0 VLV_DH_33
    MATH NEGATE VGV_DW F.1
    DATAF tmpf459
    DATA8 flag459
    DIVF F.1 VLV_RADIO_33 tmpf459
    CP_EQF 0.0 VLV_RADIO_33 flag459
    SELECTF flag459 0.0 tmpf459 F.0

    CALL ARRAYSTORE_FLOAT 5.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 0.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf475
    DATA8 flag475
    DIVF F.1 VLV_RADIO_33 tmpf475
    CP_EQF 0.0 VLV_RADIO_33 flag475
    SELECTF flag475 0.0 tmpf475 F.0

    CALL ARRAYSTORE_FLOAT 6.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf491
    DATA8 flag491
    DIVF F.1 VLV_RADIO_33 tmpf491
    CP_EQF 0.0 VLV_RADIO_33 flag491
    SELECTF flag491 0.0 tmpf491 F.0

    CALL ARRAYSTORE_FLOAT 7.0 F.0 VLV_DH_33
    DATAF tmpf493
    DATA8 flag493
    DIVF VGV_DW VLV_RADIO_33 tmpf493
    CP_EQF 0.0 VLV_RADIO_33 flag493
    SELECTF flag493 0.0 tmpf493 F.0

    CALL ARRAYSTORE_FLOAT 8.0 F.0 VLV_DH_33
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_Z_33
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.2
    MULF -1.0 F.2 F.1
    SUBF F.1 VLV_OLD_I_33 F.0
    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_Z_33
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.2
    MULF -1.0 F.2 F.1
    SUBF F.1 VLV_OLD_D_33 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_Z_33
    CALL VECTOR.MULTIPLY 1.0 3.0 3.0 VLV_H_33 VLV_MINUS_1_33 VLV_MINUS_H_33
    CALL VECTOR.ADD 3.0 VLV_Z_33 VLV_MINUS_H_33 VLV_Y_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_DH_33 VLV_P_K_K1_33 VLV_S1_33
    ARRAY COPY VLV_DH_33 VLV_M_37
    WRITE32 ENDSUB_F_TRASPMATVECT3X3_2:CALLSUB508 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TRASPMATVECT3X3_2
CALLSUB508:
    ARRAY COPY VLV_S_37 VLV_DH_T_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_S1_33 VLV_DH_T_33 VLV_S2_33
    CALL VECTOR.ADD 9.0 VLV_S2_33 VLV_R_33 VLV_S_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_P_K_K1_33 VLV_DH_T_33 VLV_K1_33
    ARRAY COPY VLV_S_33 VLV_M_38
    WRITE32 ENDSUB_F_INVMATVECT3X3_2:CALLSUB512 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_INVMATVECT3X3_2
CALLSUB512:
    ARRAY COPY VLV_S_38 VLV_S_INV_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_K1_33 VLV_S_INV_33 VLV_K_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_K_33 VLV_Y_33 VLV_KY_33
    CALL VECTOR.ADD 9.0 VLV_K_K1_33 VLV_KY_33 VLV_K1_K_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_K_33 VLV_DH_T_33 VLV_KH_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_KH_33 VLV_MINUS_1_33 VLV_MINUS_KH_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_I_33 VLV_MINUS_KH_33 VLV_P1_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_P1_33 VLV_P_K_K1_33 VLV_P_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_OMEGAI_K1_33
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Medidas de entrada Izq: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_OMEGAD_K1_33
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Medidas de entrada Dch: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    CALL ARRAYGET_FLOAT 0.0 F.0 VLV_Z_33
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Sensor color: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.1
    MULF F.1 -1.0 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Encoder I: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.1
    MULF F.1 -1.0 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Encoder D: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    STRINGS VALUE_FORMATTED VLV_ITREAL_33 '%g' 99 S.1
    CALL TEXT.APPEND 'Iteraci\363n: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    STRINGS VALUE_FORMATTED VLV_DELTA_T_33 '%g' 99 S.2
    CALL TEXT.APPEND 'Delta t: ' S.2 S.1
    CALL TEXT.APPEND S.1 ' ms' S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 '---------------'
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 ''
    ADDF VLV_ITREAL_33 1.0 VLV_ITREAL_33
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    MULF -1.0 F.0 VLV_OLD_I_33
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.0
    MULF -1.0 F.0 VLV_OLD_D_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_OMEGAI_K1_33
    JR_NEQF F.0 0.0 whilebody276
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_OMEGAD_K1_33
    JR_NEQF F.0 0.0 whilebody276
  endwhile276:
RETSUB_F_KALMAN_FILTER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_KALMAN_FILTER_2:
SUB_F_GUNIVENCMG_3:
    STRINGS DUPLICATE 'B' VLV_I_35
    STRINGS DUPLICATE 'C' VLV_D_35
    MOVEF_F 3.05555555555556 VLV_G1_35
    DATAF tmpf558
    DATA8 flag558
    DIVF VLV_V1_35 VLV_V2_35 tmpf558
    CP_EQF 0.0 VLV_V2_35 flag558
    SELECTF flag558 0.0 tmpf558 F.0

    DATAF tmpf559
    DATA8 flag559
    DIVF VLV_V1_35 VLV_V2_35 tmpf559
    CP_EQF 0.0 VLV_V2_35 flag559
    SELECTF flag559 0.0 tmpf559 F.2

    MATH ABS F.2 F.1
    DATAF tmpf561
    DATA8 flag561
    DIVF F.0 F.1 tmpf561
    CP_EQF 0.0 F.1 flag561
    SELECTF flag561 0.0 tmpf561 VLV_SIGNO_35

    MATH ABS VLV_V1_35 F.0
    MATH ABS VLV_V2_35 F.1
    DATA8 flag564
	CP_LTF F.0 F.1 flag564
	SELECTF flag564 F.0 F.1 VLV_VMIN_35
    MATH ABS VLV_V1_35 F.0
    MATH ABS VLV_V2_35 F.1
    DATA8 flag567
	CP_GTF F.0 F.1 flag567
	SELECTF flag567 F.0 F.1 VLV_VMAX_35
    DATAF tmpf568
    DATA8 flag568
    DIVF VLV_VMIN_35 VLV_VMAX_35 tmpf568
    CP_EQF 0.0 VLV_VMAX_35 flag568
    SELECTF flag568 0.0 tmpf568 F.3

    MULF -8.5 F.3 F.2
    MULF F.2 VLV_SIGNO_35 F.1
    SUBF F.1 8.5 F.0
    DATAF tmpf572
    DATA8 flag572
    DIVF VLV_VMIN_35 VLV_VMAX_35 tmpf572
    CP_EQF 0.0 VLV_VMAX_35 flag572
    SELECTF flag572 0.0 tmpf572 F.3

    MULF F.3 VLV_SIGNO_35 F.2
    SUBF F.2 1.0 F.1
    DATAF tmpf575
    DATA8 flag575
    DIVF F.0 F.1 tmpf575
    CP_EQF 0.0 F.1 flag575
    SELECTF flag575 0.0 tmpf575 VGV_CENTRO

    MULF VLV_ANGLE_35 VLV_G1_35 F.0
    MULF VLV_SIGNO_35 VLV_VMIN_35 F.4
    DATAF tmpf578
    DATA8 flag578
    DIVF F.4 VLV_VMAX_35 tmpf578
    CP_EQF 0.0 VLV_VMAX_35 flag578
    SELECTF flag578 0.0 tmpf578 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf580
    DATA8 flag580
    DIVF -2.0 F.2 tmpf580
    CP_EQF 0.0 F.2 flag580
    SELECTF flag580 0.0 tmpf580 F.1

    MULF F.0 F.1 VLV_ENCODR_35
    CALL TEXT.APPEND VLV_I_35 VLV_D_35 S.0
    MATH NEGATE VLV_V1_35 F.0
    MATH NEGATE VLV_V2_35 F.1
    CALL MOTOR.SCHEDULESYNC S.0 F.0 F.1 VLV_ENCODR_35 'True'

	DATA8 layer585
	DATA8 nos585
	DATA8 busy585
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer585 nos585
	JR_EQ8 0 nos585 motornotbusy585
  motorwaiting585:
	OUTPUT_TEST layer585 nos585 busy585
	JR_EQ8 busy585 0 motornotbusy585
	SLEEP
	JR motorwaiting585
  motornotbusy585:
RETSUB_F_GUNIVENCMG_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_GUNIVENCMG_3:
SUB_F_TRASPMATVECT3X3_2:
    CALL VECTOR.INIT 9.0 0.0 VLV_S_37
    CALL ARRAYGET_FLOAT 0.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 3.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 6.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 1.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 3.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 4.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 4.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 7.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 5.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 2.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 6.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 5.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 7.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 8.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 8.0 F.0 VLV_S_37
RETSUB_F_TRASPMATVECT3X3_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TRASPMATVECT3X3_2:
SUB_F_INVMATVECT3X3_2:
    CALL ARRAYGET_FLOAT 0.0 F.2 VLV_M_38
    CALL ARRAYGET_FLOAT 4.0 F.5 VLV_M_38
    CALL ARRAYGET_FLOAT 8.0 F.6 VLV_M_38
    MULF F.5 F.6 F.4
    CALL ARRAYGET_FLOAT 5.0 F.6 VLV_M_38
    CALL ARRAYGET_FLOAT 7.0 F.7 VLV_M_38
    MULF F.6 F.7 F.5
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    CALL ARRAYGET_FLOAT 1.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 3.0 F.6 VLV_M_38
    CALL ARRAYGET_FLOAT 8.0 F.7 VLV_M_38
    MULF F.6 F.7 F.5
    CALL ARRAYGET_FLOAT 5.0 F.7 VLV_M_38
    CALL ARRAYGET_FLOAT 6.0 F.8 VLV_M_38
    MULF F.7 F.8 F.6
    SUBF F.5 F.6 F.4
    MULF F.3 F.4 F.2
    SUBF F.1 F.2 F.0
    CALL ARRAYGET_FLOAT 2.0 F.2 VLV_M_38
    CALL ARRAYGET_FLOAT 3.0 F.5 VLV_M_38
    CALL ARRAYGET_FLOAT 7.0 F.6 VLV_M_38
    MULF F.5 F.6 F.4
    CALL ARRAYGET_FLOAT 4.0 F.6 VLV_M_38
    CALL ARRAYGET_FLOAT 6.0 F.7 VLV_M_38
    MULF F.6 F.7 F.5
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    ADDF F.0 F.1 VLV_DETERMINANTE_38
    JR_EQF VLV_DETERMINANTE_38 0.0 else634_1
    CALL ARRAYGET_FLOAT 4.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 7.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf642
    DATA8 flag642
    DIVF F.1 VLV_DETERMINANTE_38 tmpf642
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag642
    SELECTF flag642 0.0 tmpf642 F.0

    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 3.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf651
    DATA8 flag651
    DIVF F.1 VLV_DETERMINANTE_38 tmpf651
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag651
    SELECTF flag651 0.0 tmpf651 F.0

    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 3.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 7.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 4.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf660
    DATA8 flag660
    DIVF F.1 VLV_DETERMINANTE_38 tmpf660
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag660
    SELECTF flag660 0.0 tmpf660 F.0

    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 1.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 7.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf669
    DATA8 flag669
    DIVF F.1 VLV_DETERMINANTE_38 tmpf669
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag669
    SELECTF flag669 0.0 tmpf669 F.0

    CALL ARRAYSTORE_FLOAT 3.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf678
    DATA8 flag678
    DIVF F.1 VLV_DETERMINANTE_38 tmpf678
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag678
    SELECTF flag678 0.0 tmpf678 F.0

    CALL ARRAYSTORE_FLOAT 4.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 7.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf687
    DATA8 flag687
    DIVF F.1 VLV_DETERMINANTE_38 tmpf687
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag687
    SELECTF flag687 0.0 tmpf687 F.0

    CALL ARRAYSTORE_FLOAT 5.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 1.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 4.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf696
    DATA8 flag696
    DIVF F.1 VLV_DETERMINANTE_38 tmpf696
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag696
    SELECTF flag696 0.0 tmpf696 F.0

    CALL ARRAYSTORE_FLOAT 6.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 3.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf705
    DATA8 flag705
    DIVF F.1 VLV_DETERMINANTE_38 tmpf705
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag705
    SELECTF flag705 0.0 tmpf705 F.0

    CALL ARRAYSTORE_FLOAT 7.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 4.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 3.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf714
    DATA8 flag714
    DIVF F.1 VLV_DETERMINANTE_38 tmpf714
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag714
    SELECTF flag714 0.0 tmpf714 F.0

    CALL ARRAYSTORE_FLOAT 8.0 F.0 VLV_S_38
  else634_1:
  endif634:
RETSUB_F_INVMATVECT3X3_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_INVMATVECT3X3_2:
SUB_F_MULTIMATRIZCOEF_3:
    MOVEF_F 0.0 VLV_I_39
  while716:
    CALL ARRAYGET_FLOAT VLV_I_39 F.0 VLV_M_39
    JR_EQF F.0 0.0 endwhile716
  whilebody716:
    CALL ARRAYGET_FLOAT VLV_I_39 F.1 VLV_M_39
    MULF VLV_K_39 F.1 F.0
    CALL ARRAYSTORE_FLOAT VLV_I_39 F.0 VLV_S_39
    ADDF VLV_I_39 1.0 VLV_I_39
    CALL ARRAYGET_FLOAT VLV_I_39 F.0 VLV_M_39
    JR_NEQF F.0 0.0 whilebody716
  endwhile716:
RETSUB_F_MULTIMATRIZCOEF_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MULTIMATRIZCOEF_3:
SUB_F_BMOVEA_2:
    SUBF VLV_DEGREES_40 VGV_ANGLE_A VLV_ROTATION_40
    MATH ABS VLV_ROTATION_40 F.0
    DATAF tmpf725
    DATA8 flag725
    DIVF F.0 VLV_ROTATION_40 tmpf725
    CP_EQF 0.0 VLV_ROTATION_40 flag725
    SELECTF flag725 0.0 tmpf725 VLV_SIGN_40

    MOVEF_F 0.0 VLV_PROGRESS_40
    MULF VLV_DEGREES_PER_SECOND_40 VLV_SIGN_40 F.0
    DATAF tmpf727
    DATA8 flag727
    DIVF F.0 50.0 tmpf727
    CP_EQF 0.0 50.0 flag727
    SELECTF flag727 0.0 tmpf727 VLV_DEGREES_PER_INTERVAL_40

  while728:
    SUBF VLV_ROTATION_40 VLV_PROGRESS_40 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile728
  whilebody728:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_40 VGV_ANGLE_A
    ADDF VLV_PROGRESS_40 VLV_DEGREES_PER_INTERVAL_40 VLV_PROGRESS_40
    DATA32 milliseconds733
	MOVEF_32 1.0 milliseconds733
	DATA32 timer733
	TIMER_WAIT milliseconds733 timer733
	TIMER_READY timer733
    SUBF VLV_ROTATION_40 VLV_PROGRESS_40 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody728
  endwhile728:
    MOVEF_F VLV_DEGREES_40 VGV_ANGLE_A
>>>>>>> main
RETSUB_F_BMOVEA_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA_2:
SUB_F_BMOVED_2:
<<<<<<< HEAD
    MULF VLV_DEGREES_6 VGV_SENTIDO_D VLV_DEGREES_6
    SUBF VLV_DEGREES_6 VGV_ANGLE_D VLV_ROTATION_6
    MATH ABS VLV_ROTATION_6 F.0
    DATAF tmpf222
    DATA8 flag222
    DIVF F.0 VLV_ROTATION_6 tmpf222
    CP_EQF 0.0 VLV_ROTATION_6 flag222
    SELECTF flag222 0.0 tmpf222 VLV_SIGN_6

    MOVEF_F 0.0 VLV_PROGRESS_6
    MULF VLV_DEGREES_PER_SECOND_6 VLV_SIGN_6 F.0
    DATAF tmpf224
    DATA8 flag224
    DIVF F.0 50.0 tmpf224
    CP_EQF 0.0 50.0 flag224
    SELECTF flag224 0.0 tmpf224 VLV_DEGREES_PER_INTERVAL_6

  while225:
    SUBF VLV_ROTATION_6 VLV_PROGRESS_6 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile225
  whilebody225:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_6 VGV_ANGLE_D
    ADDF VLV_PROGRESS_6 VLV_DEGREES_PER_INTERVAL_6 VLV_PROGRESS_6
    DATA32 milliseconds230
	MOVEF_32 1.0 milliseconds230
	DATA32 timer230
	TIMER_WAIT milliseconds230 timer230
	TIMER_READY timer230
    SUBF VLV_ROTATION_6 VLV_PROGRESS_6 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody225
  endwhile225:
    MOVEF_F VLV_DEGREES_6 VGV_ANGLE_D
=======
    MULF VLV_DEGREES_42 VGV_SENTIDO_D VLV_DEGREES_42
    SUBF VLV_DEGREES_42 VGV_ANGLE_D VLV_ROTATION_42
    MATH ABS VLV_ROTATION_42 F.0
    DATAF tmpf739
    DATA8 flag739
    DIVF F.0 VLV_ROTATION_42 tmpf739
    CP_EQF 0.0 VLV_ROTATION_42 flag739
    SELECTF flag739 0.0 tmpf739 VLV_SIGN_42

    MOVEF_F 0.0 VLV_PROGRESS_42
    MULF VLV_DEGREES_PER_SECOND_42 VLV_SIGN_42 F.0
    DATAF tmpf741
    DATA8 flag741
    DIVF F.0 50.0 tmpf741
    CP_EQF 0.0 50.0 flag741
    SELECTF flag741 0.0 tmpf741 VLV_DEGREES_PER_INTERVAL_42

  while742:
    SUBF VLV_ROTATION_42 VLV_PROGRESS_42 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile742
  whilebody742:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_42 VGV_ANGLE_D
    ADDF VLV_PROGRESS_42 VLV_DEGREES_PER_INTERVAL_42 VLV_PROGRESS_42
    DATA32 milliseconds747
	MOVEF_32 1.0 milliseconds747
	DATA32 timer747
	TIMER_WAIT milliseconds747 timer747
	TIMER_READY timer747
    SUBF VLV_ROTATION_42 VLV_PROGRESS_42 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody742
  endwhile742:
    MOVEF_F VLV_DEGREES_42 VGV_ANGLE_D
>>>>>>> main
RETSUB_F_BMOVED_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED_2:
SUB_F_BMOVEAD_4:
<<<<<<< HEAD
    MULF VLV_DEGREES_D_7 VGV_SENTIDO_D VLV_DEGREES_D_7
  while234:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_7 or235
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_7 endwhile234
  or235:
  whilebody234:
    MATH ROUND VGV_ANGLE_A F.0
    SUBF VLV_DEGREES_A_7 5.0 F.1
    JR_GTEQF F.0 F.1 else236_1
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_7 else236_1
    DATAF tmpf240
    DATA8 flag240
    DIVF VLV_DEGREES_PER_SECOND_A_7 2.0 tmpf240
    CP_EQF 0.0 2.0 flag240
    SELECTF flag240 0.0 tmpf240 F.3

    SUBF VLV_DEGREES_A_7 VGV_ANGLE_A F.5
    DATAF tmpf242
    DATA8 flag242
    DIVF F.5 10.0 tmpf242
    CP_EQF 0.0 10.0 flag242
    SELECTF flag242 0.0 tmpf242 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag244
	CP_LTF VLV_DEGREES_PER_SECOND_A_7 F.2 flag244
	SELECTF flag244 VLV_DEGREES_PER_SECOND_A_7 F.2 F.1
    DATAF tmpf245
    DATA8 flag245
    DIVF F.1 50.0 tmpf245
    CP_EQF 0.0 50.0 flag245
    SELECTF flag245 0.0 tmpf245 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif236
  else236_1:
    MATH ROUND VGV_ANGLE_A F.0
    ADDF VLV_DEGREES_A_7 5.0 F.1
    JR_LTEQF F.0 F.1 else236_2
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_7 else236_2
    DATAF tmpf250
    DATA8 flag250
    DIVF VLV_DEGREES_PER_SECOND_A_7 2.0 tmpf250
    CP_EQF 0.0 2.0 flag250
    SELECTF flag250 0.0 tmpf250 F.3

    SUBF VLV_DEGREES_A_7 VGV_ANGLE_A F.5
    DATAF tmpf252
    DATA8 flag252
    DIVF F.5 10.0 tmpf252
    CP_EQF 0.0 10.0 flag252
    SELECTF flag252 0.0 tmpf252 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag254
	CP_GTF VLV_DEGREES_PER_SECOND_A_7 F.2 flag254
	SELECTF flag254 VLV_DEGREES_PER_SECOND_A_7 F.2 F.1
    DATAF tmpf255
    DATA8 flag255
    DIVF F.1 50.0 tmpf255
    CP_EQF 0.0 50.0 flag255
    SELECTF flag255 0.0 tmpf255 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif236
  else236_2:
    MOVEF_F VLV_DEGREES_A_7 VGV_ANGLE_A
  else236_3:
  endif236:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_7 else257_1
    DATAF tmpf259
    DATA8 flag259
    DIVF VLV_DEGREES_PER_SECOND_D_7 2.0 tmpf259
    CP_EQF 0.0 2.0 flag259
    SELECTF flag259 0.0 tmpf259 F.3

    SUBF VLV_DEGREES_D_7 VGV_ANGLE_D F.5
    DATAF tmpf261
    DATA8 flag261
    DIVF F.5 10.0 tmpf261
    CP_EQF 0.0 10.0 flag261
    SELECTF flag261 0.0 tmpf261 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag263
	CP_LTF VLV_DEGREES_PER_SECOND_D_7 F.2 flag263
	SELECTF flag263 VLV_DEGREES_PER_SECOND_D_7 F.2 F.1
    DATAF tmpf264
    DATA8 flag264
    DIVF F.1 50.0 tmpf264
    CP_EQF 0.0 50.0 flag264
    SELECTF flag264 0.0 tmpf264 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif257
  else257_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_7 else257_2
    DATAF tmpf267
    DATA8 flag267
    DIVF VLV_DEGREES_PER_SECOND_D_7 2.0 tmpf267
    CP_EQF 0.0 2.0 flag267
    SELECTF flag267 0.0 tmpf267 F.3

    SUBF VLV_DEGREES_D_7 VGV_ANGLE_D F.5
    DATAF tmpf269
    DATA8 flag269
    DIVF F.5 10.0 tmpf269
    CP_EQF 0.0 10.0 flag269
    SELECTF flag269 0.0 tmpf269 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag271
	CP_GTF VLV_DEGREES_PER_SECOND_D_7 F.2 flag271
	SELECTF flag271 VLV_DEGREES_PER_SECOND_D_7 F.2 F.1
    DATAF tmpf272
    DATA8 flag272
    DIVF F.1 50.0 tmpf272
    CP_EQF 0.0 50.0 flag272
    SELECTF flag272 0.0 tmpf272 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif257
  else257_2:
    MOVEF_F VLV_DEGREES_D_7 VGV_ANGLE_D
  else257_3:
  endif257:
    DATA32 milliseconds274
	MOVEF_32 1.0 milliseconds274
	DATA32 timer274
	TIMER_WAIT milliseconds274 timer274
	TIMER_READY timer274
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_7 whilebody234
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_7 whilebody234
  endwhile234:
    MOVEF_F VLV_DEGREES_A_7 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_7 VGV_ANGLE_D
=======
    MULF VLV_DEGREES_D_43 VGV_SENTIDO_D VLV_DEGREES_D_43
  while751:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_43 or752
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_43 endwhile751
  or752:
  whilebody751:
    MATH ROUND VGV_ANGLE_A F.0
    SUBF VLV_DEGREES_A_43 5.0 F.1
    JR_GTEQF F.0 F.1 else753_1
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_43 else753_1
    DATAF tmpf757
    DATA8 flag757
    DIVF VLV_DEGREES_PER_SECOND_A_43 2.0 tmpf757
    CP_EQF 0.0 2.0 flag757
    SELECTF flag757 0.0 tmpf757 F.3

    SUBF VLV_DEGREES_A_43 VGV_ANGLE_A F.5
    DATAF tmpf759
    DATA8 flag759
    DIVF F.5 10.0 tmpf759
    CP_EQF 0.0 10.0 flag759
    SELECTF flag759 0.0 tmpf759 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag761
	CP_LTF VLV_DEGREES_PER_SECOND_A_43 F.2 flag761
	SELECTF flag761 VLV_DEGREES_PER_SECOND_A_43 F.2 F.1
    DATAF tmpf762
    DATA8 flag762
    DIVF F.1 50.0 tmpf762
    CP_EQF 0.0 50.0 flag762
    SELECTF flag762 0.0 tmpf762 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif753
  else753_1:
    MATH ROUND VGV_ANGLE_A F.0
    ADDF VLV_DEGREES_A_43 5.0 F.1
    JR_LTEQF F.0 F.1 else753_2
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_43 else753_2
    DATAF tmpf767
    DATA8 flag767
    DIVF VLV_DEGREES_PER_SECOND_A_43 2.0 tmpf767
    CP_EQF 0.0 2.0 flag767
    SELECTF flag767 0.0 tmpf767 F.3

    SUBF VLV_DEGREES_A_43 VGV_ANGLE_A F.5
    DATAF tmpf769
    DATA8 flag769
    DIVF F.5 10.0 tmpf769
    CP_EQF 0.0 10.0 flag769
    SELECTF flag769 0.0 tmpf769 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag771
	CP_GTF VLV_DEGREES_PER_SECOND_A_43 F.2 flag771
	SELECTF flag771 VLV_DEGREES_PER_SECOND_A_43 F.2 F.1
    DATAF tmpf772
    DATA8 flag772
    DIVF F.1 50.0 tmpf772
    CP_EQF 0.0 50.0 flag772
    SELECTF flag772 0.0 tmpf772 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif753
  else753_2:
    MOVEF_F VLV_DEGREES_A_43 VGV_ANGLE_A
  else753_3:
  endif753:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_43 else774_1
    DATAF tmpf776
    DATA8 flag776
    DIVF VLV_DEGREES_PER_SECOND_D_43 2.0 tmpf776
    CP_EQF 0.0 2.0 flag776
    SELECTF flag776 0.0 tmpf776 F.3

    SUBF VLV_DEGREES_D_43 VGV_ANGLE_D F.5
    DATAF tmpf778
    DATA8 flag778
    DIVF F.5 10.0 tmpf778
    CP_EQF 0.0 10.0 flag778
    SELECTF flag778 0.0 tmpf778 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag780
	CP_LTF VLV_DEGREES_PER_SECOND_D_43 F.2 flag780
	SELECTF flag780 VLV_DEGREES_PER_SECOND_D_43 F.2 F.1
    DATAF tmpf781
    DATA8 flag781
    DIVF F.1 50.0 tmpf781
    CP_EQF 0.0 50.0 flag781
    SELECTF flag781 0.0 tmpf781 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif774
  else774_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_43 else774_2
    DATAF tmpf784
    DATA8 flag784
    DIVF VLV_DEGREES_PER_SECOND_D_43 2.0 tmpf784
    CP_EQF 0.0 2.0 flag784
    SELECTF flag784 0.0 tmpf784 F.3

    SUBF VLV_DEGREES_D_43 VGV_ANGLE_D F.5
    DATAF tmpf786
    DATA8 flag786
    DIVF F.5 10.0 tmpf786
    CP_EQF 0.0 10.0 flag786
    SELECTF flag786 0.0 tmpf786 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag788
	CP_GTF VLV_DEGREES_PER_SECOND_D_43 F.2 flag788
	SELECTF flag788 VLV_DEGREES_PER_SECOND_D_43 F.2 F.1
    DATAF tmpf789
    DATA8 flag789
    DIVF F.1 50.0 tmpf789
    CP_EQF 0.0 50.0 flag789
    SELECTF flag789 0.0 tmpf789 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif774
  else774_2:
    MOVEF_F VLV_DEGREES_D_43 VGV_ANGLE_D
  else774_3:
  endif774:
    DATA32 milliseconds791
	MOVEF_32 1.0 milliseconds791
	DATA32 timer791
	TIMER_WAIT milliseconds791 timer791
	TIMER_READY timer791
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_43 whilebody751
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_43 whilebody751
  endwhile751:
    MOVEF_F VLV_DEGREES_A_43 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_43 VGV_ANGLE_D
>>>>>>> main
RETSUB_F_BMOVEAD_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD_4:
SUB_F_BMOVEA0_1:
<<<<<<< HEAD
    MOVEF_F 0.0 VLV_DEGREES_8
    SUBF VLV_DEGREES_8 VGV_ANGLE_A VLV_ROTATION_8
    MATH ABS VLV_ROTATION_8 F.0
    DATAF tmpf277
    DATA8 flag277
    DIVF F.0 VLV_ROTATION_8 tmpf277
    CP_EQF 0.0 VLV_ROTATION_8 flag277
    SELECTF flag277 0.0 tmpf277 VLV_SIGN_8

    MOVEF_F 0.0 VLV_PROGRESS_8
    MULF VLV_DEGREES_PER_SECOND_8 VLV_SIGN_8 F.0
    DATAF tmpf279
    DATA8 flag279
    DIVF F.0 50.0 tmpf279
    CP_EQF 0.0 50.0 flag279
    SELECTF flag279 0.0 tmpf279 VLV_DEGREES_PER_INTERVAL_8

  while280:
    SUBF VLV_ROTATION_8 VLV_PROGRESS_8 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile280
  whilebody280:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_8 VGV_ANGLE_A
    ADDF VLV_PROGRESS_8 VLV_DEGREES_PER_INTERVAL_8 VLV_PROGRESS_8
    DATA32 milliseconds285
	MOVEF_32 1.0 milliseconds285
	DATA32 timer285
	TIMER_WAIT milliseconds285 timer285
	TIMER_READY timer285
    SUBF VLV_ROTATION_8 VLV_PROGRESS_8 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody280
  endwhile280:
    MOVEF_F VLV_DEGREES_8 VGV_ANGLE_A
=======
    MOVEF_F 0.0 VLV_DEGREES_44
    SUBF VLV_DEGREES_44 VGV_ANGLE_A VLV_ROTATION_44
    MATH ABS VLV_ROTATION_44 F.0
    DATAF tmpf794
    DATA8 flag794
    DIVF F.0 VLV_ROTATION_44 tmpf794
    CP_EQF 0.0 VLV_ROTATION_44 flag794
    SELECTF flag794 0.0 tmpf794 VLV_SIGN_44

    MOVEF_F 0.0 VLV_PROGRESS_44
    MULF VLV_DEGREES_PER_SECOND_44 VLV_SIGN_44 F.0
    DATAF tmpf796
    DATA8 flag796
    DIVF F.0 50.0 tmpf796
    CP_EQF 0.0 50.0 flag796
    SELECTF flag796 0.0 tmpf796 VLV_DEGREES_PER_INTERVAL_44

  while797:
    SUBF VLV_ROTATION_44 VLV_PROGRESS_44 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile797
  whilebody797:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_44 VGV_ANGLE_A
    ADDF VLV_PROGRESS_44 VLV_DEGREES_PER_INTERVAL_44 VLV_PROGRESS_44
    DATA32 milliseconds802
	MOVEF_32 1.0 milliseconds802
	DATA32 timer802
	TIMER_WAIT milliseconds802 timer802
	TIMER_READY timer802
    SUBF VLV_ROTATION_44 VLV_PROGRESS_44 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody797
  endwhile797:
    MOVEF_F VLV_DEGREES_44 VGV_ANGLE_A
>>>>>>> main
RETSUB_F_BMOVEA0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA0_1:
SUB_F_BMOVED0_1:
<<<<<<< HEAD
    MOVEF_F 0.0 VLV_DEGREES_9
    SUBF VLV_DEGREES_9 VGV_ANGLE_D VLV_ROTATION_9
    MATH ABS VLV_ROTATION_9 F.0
    DATAF tmpf290
    DATA8 flag290
    DIVF F.0 VLV_ROTATION_9 tmpf290
    CP_EQF 0.0 VLV_ROTATION_9 flag290
    SELECTF flag290 0.0 tmpf290 VLV_SIGN_9

    MOVEF_F 0.0 VLV_PROGRESS_9
    MULF VLV_DEGREES_PER_SECOND_9 VLV_SIGN_9 F.0
    DATAF tmpf292
    DATA8 flag292
    DIVF F.0 50.0 tmpf292
    CP_EQF 0.0 50.0 flag292
    SELECTF flag292 0.0 tmpf292 VLV_DEGREES_PER_INTERVAL_9

  while293:
    SUBF VLV_ROTATION_9 VLV_PROGRESS_9 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile293
  whilebody293:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_9 VGV_ANGLE_D
    ADDF VLV_PROGRESS_9 VLV_DEGREES_PER_INTERVAL_9 VLV_PROGRESS_9
    DATA32 milliseconds298
	MOVEF_32 1.0 milliseconds298
	DATA32 timer298
	TIMER_WAIT milliseconds298 timer298
	TIMER_READY timer298
    SUBF VLV_ROTATION_9 VLV_PROGRESS_9 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody293
  endwhile293:
    MOVEF_F VLV_DEGREES_9 VGV_ANGLE_D
=======
    MOVEF_F 0.0 VLV_DEGREES_45
    SUBF VLV_DEGREES_45 VGV_ANGLE_D VLV_ROTATION_45
    MATH ABS VLV_ROTATION_45 F.0
    DATAF tmpf807
    DATA8 flag807
    DIVF F.0 VLV_ROTATION_45 tmpf807
    CP_EQF 0.0 VLV_ROTATION_45 flag807
    SELECTF flag807 0.0 tmpf807 VLV_SIGN_45

    MOVEF_F 0.0 VLV_PROGRESS_45
    MULF VLV_DEGREES_PER_SECOND_45 VLV_SIGN_45 F.0
    DATAF tmpf809
    DATA8 flag809
    DIVF F.0 50.0 tmpf809
    CP_EQF 0.0 50.0 flag809
    SELECTF flag809 0.0 tmpf809 VLV_DEGREES_PER_INTERVAL_45

  while810:
    SUBF VLV_ROTATION_45 VLV_PROGRESS_45 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile810
  whilebody810:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_45 VGV_ANGLE_D
    ADDF VLV_PROGRESS_45 VLV_DEGREES_PER_INTERVAL_45 VLV_PROGRESS_45
    DATA32 milliseconds815
	MOVEF_32 1.0 milliseconds815
	DATA32 timer815
	TIMER_WAIT milliseconds815 timer815
	TIMER_READY timer815
    SUBF VLV_ROTATION_45 VLV_PROGRESS_45 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody810
  endwhile810:
    MOVEF_F VLV_DEGREES_45 VGV_ANGLE_D
>>>>>>> main
RETSUB_F_BMOVED0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED0_1:
SUB_F_BMOVEAD0_2:
<<<<<<< HEAD
    MOVEF_F 0.0 VLV_DEGREES_A_10
    MOVEF_F 0.0 VLV_DEGREES_D_10
  while301:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_10 or302
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_10 endwhile301
  or302:
  whilebody301:
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_10 else303_1
    DATAF tmpf305
    DATA8 flag305
    DIVF VLV_DEGREES_PER_SECOND_A_10 2.0 tmpf305
    CP_EQF 0.0 2.0 flag305
    SELECTF flag305 0.0 tmpf305 F.3

    SUBF VLV_DEGREES_A_10 VGV_ANGLE_A F.5
    DATAF tmpf307
    DATA8 flag307
    DIVF F.5 10.0 tmpf307
    CP_EQF 0.0 10.0 flag307
    SELECTF flag307 0.0 tmpf307 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag309
	CP_LTF VLV_DEGREES_PER_SECOND_A_10 F.2 flag309
	SELECTF flag309 VLV_DEGREES_PER_SECOND_A_10 F.2 F.1
    DATAF tmpf310
    DATA8 flag310
    DIVF F.1 50.0 tmpf310
    CP_EQF 0.0 50.0 flag310
    SELECTF flag310 0.0 tmpf310 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif303
  else303_1:
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_10 else303_2
    DATAF tmpf313
    DATA8 flag313
    DIVF VLV_DEGREES_PER_SECOND_A_10 2.0 tmpf313
    CP_EQF 0.0 2.0 flag313
    SELECTF flag313 0.0 tmpf313 F.3

    SUBF VLV_DEGREES_A_10 VGV_ANGLE_A F.5
    DATAF tmpf315
    DATA8 flag315
    DIVF F.5 10.0 tmpf315
    CP_EQF 0.0 10.0 flag315
    SELECTF flag315 0.0 tmpf315 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag317
	CP_GTF VLV_DEGREES_PER_SECOND_A_10 F.2 flag317
	SELECTF flag317 VLV_DEGREES_PER_SECOND_A_10 F.2 F.1
    DATAF tmpf318
    DATA8 flag318
    DIVF F.1 50.0 tmpf318
    CP_EQF 0.0 50.0 flag318
    SELECTF flag318 0.0 tmpf318 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif303
  else303_2:
    MOVEF_F VLV_DEGREES_A_10 VGV_ANGLE_A
  else303_3:
  endif303:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_10 else320_1
    DATAF tmpf322
    DATA8 flag322
    DIVF VLV_DEGREES_PER_SECOND_D_10 2.0 tmpf322
    CP_EQF 0.0 2.0 flag322
    SELECTF flag322 0.0 tmpf322 F.3

    SUBF VLV_DEGREES_D_10 VGV_ANGLE_D F.5
    DATAF tmpf324
    DATA8 flag324
    DIVF F.5 10.0 tmpf324
    CP_EQF 0.0 10.0 flag324
    SELECTF flag324 0.0 tmpf324 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag326
	CP_LTF VLV_DEGREES_PER_SECOND_D_10 F.2 flag326
	SELECTF flag326 VLV_DEGREES_PER_SECOND_D_10 F.2 F.1
    DATAF tmpf327
    DATA8 flag327
    DIVF F.1 50.0 tmpf327
    CP_EQF 0.0 50.0 flag327
    SELECTF flag327 0.0 tmpf327 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif320
  else320_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_10 else320_2
    DATAF tmpf330
    DATA8 flag330
    DIVF VLV_DEGREES_PER_SECOND_D_10 2.0 tmpf330
    CP_EQF 0.0 2.0 flag330
    SELECTF flag330 0.0 tmpf330 F.3

    SUBF VLV_DEGREES_D_10 VGV_ANGLE_D F.5
    DATAF tmpf332
    DATA8 flag332
    DIVF F.5 10.0 tmpf332
    CP_EQF 0.0 10.0 flag332
    SELECTF flag332 0.0 tmpf332 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag334
	CP_GTF VLV_DEGREES_PER_SECOND_D_10 F.2 flag334
	SELECTF flag334 VLV_DEGREES_PER_SECOND_D_10 F.2 F.1
    DATAF tmpf335
    DATA8 flag335
    DIVF F.1 50.0 tmpf335
    CP_EQF 0.0 50.0 flag335
    SELECTF flag335 0.0 tmpf335 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif320
  else320_2:
    MOVEF_F VLV_DEGREES_D_10 VGV_ANGLE_D
  else320_3:
  endif320:
    DATA32 milliseconds337
	MOVEF_32 1.0 milliseconds337
	DATA32 timer337
	TIMER_WAIT milliseconds337 timer337
	TIMER_READY timer337
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_10 whilebody301
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_10 whilebody301
  endwhile301:
    MOVEF_F VLV_DEGREES_A_10 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_10 VGV_ANGLE_D
=======
    MOVEF_F 0.0 VLV_DEGREES_A_46
    MOVEF_F 0.0 VLV_DEGREES_D_46
  while818:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_46 or819
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_46 endwhile818
  or819:
  whilebody818:
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_46 else820_1
    DATAF tmpf822
    DATA8 flag822
    DIVF VLV_DEGREES_PER_SECOND_A_46 2.0 tmpf822
    CP_EQF 0.0 2.0 flag822
    SELECTF flag822 0.0 tmpf822 F.3

    SUBF VLV_DEGREES_A_46 VGV_ANGLE_A F.5
    DATAF tmpf824
    DATA8 flag824
    DIVF F.5 10.0 tmpf824
    CP_EQF 0.0 10.0 flag824
    SELECTF flag824 0.0 tmpf824 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag826
	CP_LTF VLV_DEGREES_PER_SECOND_A_46 F.2 flag826
	SELECTF flag826 VLV_DEGREES_PER_SECOND_A_46 F.2 F.1
    DATAF tmpf827
    DATA8 flag827
    DIVF F.1 50.0 tmpf827
    CP_EQF 0.0 50.0 flag827
    SELECTF flag827 0.0 tmpf827 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif820
  else820_1:
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_46 else820_2
    DATAF tmpf830
    DATA8 flag830
    DIVF VLV_DEGREES_PER_SECOND_A_46 2.0 tmpf830
    CP_EQF 0.0 2.0 flag830
    SELECTF flag830 0.0 tmpf830 F.3

    SUBF VLV_DEGREES_A_46 VGV_ANGLE_A F.5
    DATAF tmpf832
    DATA8 flag832
    DIVF F.5 10.0 tmpf832
    CP_EQF 0.0 10.0 flag832
    SELECTF flag832 0.0 tmpf832 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag834
	CP_GTF VLV_DEGREES_PER_SECOND_A_46 F.2 flag834
	SELECTF flag834 VLV_DEGREES_PER_SECOND_A_46 F.2 F.1
    DATAF tmpf835
    DATA8 flag835
    DIVF F.1 50.0 tmpf835
    CP_EQF 0.0 50.0 flag835
    SELECTF flag835 0.0 tmpf835 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif820
  else820_2:
    MOVEF_F VLV_DEGREES_A_46 VGV_ANGLE_A
  else820_3:
  endif820:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_46 else837_1
    DATAF tmpf839
    DATA8 flag839
    DIVF VLV_DEGREES_PER_SECOND_D_46 2.0 tmpf839
    CP_EQF 0.0 2.0 flag839
    SELECTF flag839 0.0 tmpf839 F.3

    SUBF VLV_DEGREES_D_46 VGV_ANGLE_D F.5
    DATAF tmpf841
    DATA8 flag841
    DIVF F.5 10.0 tmpf841
    CP_EQF 0.0 10.0 flag841
    SELECTF flag841 0.0 tmpf841 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag843
	CP_LTF VLV_DEGREES_PER_SECOND_D_46 F.2 flag843
	SELECTF flag843 VLV_DEGREES_PER_SECOND_D_46 F.2 F.1
    DATAF tmpf844
    DATA8 flag844
    DIVF F.1 50.0 tmpf844
    CP_EQF 0.0 50.0 flag844
    SELECTF flag844 0.0 tmpf844 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif837
  else837_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_46 else837_2
    DATAF tmpf847
    DATA8 flag847
    DIVF VLV_DEGREES_PER_SECOND_D_46 2.0 tmpf847
    CP_EQF 0.0 2.0 flag847
    SELECTF flag847 0.0 tmpf847 F.3

    SUBF VLV_DEGREES_D_46 VGV_ANGLE_D F.5
    DATAF tmpf849
    DATA8 flag849
    DIVF F.5 10.0 tmpf849
    CP_EQF 0.0 10.0 flag849
    SELECTF flag849 0.0 tmpf849 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag851
	CP_GTF VLV_DEGREES_PER_SECOND_D_46 F.2 flag851
	SELECTF flag851 VLV_DEGREES_PER_SECOND_D_46 F.2 F.1
    DATAF tmpf852
    DATA8 flag852
    DIVF F.1 50.0 tmpf852
    CP_EQF 0.0 50.0 flag852
    SELECTF flag852 0.0 tmpf852 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif837
  else837_2:
    MOVEF_F VLV_DEGREES_D_46 VGV_ANGLE_D
  else837_3:
  endif837:
    DATA32 milliseconds854
	MOVEF_32 1.0 milliseconds854
	DATA32 timer854
	TIMER_WAIT milliseconds854 timer854
	TIMER_READY timer854
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_46 whilebody818
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_46 whilebody818
  endwhile818:
    MOVEF_F VLV_DEGREES_A_46 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_46 VGV_ANGLE_D
>>>>>>> main
RETSUB_F_BMOVEAD0_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD0_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
<<<<<<< HEAD
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
=======
subcall VECTOR.INIT       // FFA
>>>>>>> main
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
<<<<<<< HEAD
=======
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall VECTOR.DATA       // FSA
{
	IN_F size
	IN_S d 252
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty
	ARRAY RESIZE a size32
	ARRAY FILL a 0.0

	DATAS d0 127        // 8bit-addressable data range
	DATAS d1 129
	DATA32 filled
	DATAF value
	DATA8 readidx
	DATA8 writeidx
	DATA8 c

	STRINGS DUPLICATE d d0

	MOVE32_32 0 filled
	MOVE8_8 -127 readidx

skipspaces:
	READ8 d1 readidx c
	ADD8 readidx 1 readidx
	JR_EQ8 c 0 done
	JR_EQ8 c 32 skipspaces
	
	MOVE8_8 -127 writeidx
copypart:
	WRITE8 c writeidx d1
	ADD8 writeidx 1 writeidx
	READ8 d1 readidx c
	ADD8 readidx 1 readidx
	JR_EQ8 c 0 lastnumber
	JR_NEQ8 c 32 copypart

	WRITE8 0 writeidx d1
	STRINGS STRING_TO_VALUE d0 value
	ARRAY_WRITE a filled value

	ADD32 filled 1 filled
	JR_LT32 filled size32 skipspaces
	RETURN

lastnumber:
	WRITE8 0 writeidx d1
	STRINGS STRING_TO_VALUE d0 value
	ARRAY_WRITE a filled value
done:
	RETURN
empty:
    ARRAY RESIZE a 0
}
subcall EV3.TIME  // F
{
	OUT_F time
	
	DATA32 ms
	DATAF thousand
	
	TIMER_READ ms
	MOVE32_F ms time	
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall VECTOR.ADD        // FAAA
{
	IN_F size
	IN_16 a
	IN_16 b
	IN_16 c

	DATA32 sizea
	DATA32 sizeb
	ARRAY SIZE a sizea
	ARRAY SIZE b sizeb

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty
	ARRAY RESIZE c size32

	DATA32 i
	MOVE32_32 0 i
loop:
	DATAF sum
	DATAf tmp
	MOVEF_F 0.0 sum
	JR_GTEQ32 i sizea a_too_small
	ARRAY_READ a i sum
a_too_small:
	JR_GTEQ32 i sizeb b_too_small
	ARRAY_READ b i tmp
	ADDF sum tmp sum
b_too_small:
    ARRAY_WRITE c i sum

	ADD32 i 1 i
	JR_LT32 i size32 loop
loopend:
	RETURN

empty:
    ARRAY RESIZE c 0
}
subcall VECTOR.MULTIPLY    // FFFAAA
{
	IN_F _N        // number of rows in result matrix
	IN_F _M        // number of columns in result matrix
	IN_F _K        // second dimension of A and B
	IN_16 A        // matrix of N rows, K columns
	IN_16 B        // matrix of K rows, M columns
	IN_16 C        // result-matrix of N rows, M columns
	DATA32 N
	DATA32 M
	DATA32 K
	MOVEF_32 _N N
	MOVEF_32 _M M
	MOVEF_32 _K K

	// get input matrix sizes for quick retrieval
	DATA32 ALEN
	DATA32 BLEN
	ARRAY SIZE A ALEN
	ARRAY SIZE B BLEN

	// check if the numerical parameters make sense
	JR_LTEQ32 N 0 outputempty
	JR_LTEQ32 M 0 outputempty

	// compute number of elements to compute
	DATA32 MN
	DATA32 KM
	MUL32 M N MN
	MUL32 K M KM

	// check if the K value is at least 1 (otherwise can perform no multiplication)
	JR_GT32 K 0 notallzero
	ARRAY RESIZE C MN
	ARRAY FILL C 0.0
	RETURN
notallzero:

	// check if the output should be written into one of the input matrizes -
	// need to create temporary storage to hold data while computation runs
	DATA16 TARGET
	JR_EQ16 C A needtemporary
	JR_NEQ16 C B dontneedtemporary
needtemporary:
	// create computation target of correct size
	ARRAY CREATEF MN TARGET
	JR startcopy
dontneedtemporary:
	// set the result matrix to correct size
	ARRAY RESIZE C MN
	MOVE16_16 C TARGET

startcopy:
	DATA32 CIDX
	MOVE32_32 0 CIDX 
	DATA32 I
	MOVE32_32 0 I
loop_rows:	
	DATA32 J
	MOVE32_32 0 J
loop_columns:
    DATAF SUM
	MOVEF_F 0.0 SUM

    DATA32 AIDX 
	MUL32 I K AIDX
	DATA32 BIDX
	MOVE32_32 J BIDX
loop_scalarproduct:
	DATAF TMP
	DATAF PROD
	JR_GTEQ32 AIDX ALEN nosourceelements
	JR_GTEQ32 BIDX BLEN nosourceelements
	ARRAY_READ A AIDX PROD
	ARRAY_READ B BIDX TMP
    MULF PROD TMP PROD
	ADDF SUM PROD SUM
	ADD32 AIDX 1 AIDX
	ADD32 BIDX M BIDX
	JR_LT32 BIDX KM loop_scalarproduct
nosourceelements:

	ARRAY_WRITE TARGET CIDX SUM
	ADD32 CIDX 1 CIDX

	ADD32 J 1 J 
	JR_LT32 J M loop_columns
	ADD32 I 1 I
	JR_LT32 I N loop_rows

	// check if need to store temporay data to output
	JR_EQ16 C TARGET notemporary
	ARRAY COPY TARGET C
	ARRAY DELETE TARGET
notemporary:
	RETURN

outputempty:
	ARRAY RESIZE C 0
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
>>>>>>> main
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
