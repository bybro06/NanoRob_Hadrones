DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEGREES_PER_SECOND_4
DATAF VLV_DEGREES_4
DATAF VLV_DEGREES_PER_SECOND_9
DATAF VLV_DEGREES_PER_SECOND_6
DATAF VLV_DEGREES_6
DATAF VLV_DEGREES_PER_SECOND_8
DATAF VLV_V1_2
DATAF VLV_V2_2
DATAF VLV_ANGLE_2
DATAF VLV_DEGREES_PER_SECOND_A_7
DATAF VLV_DEGREES_PER_SECOND_D_7
DATAF VLV_DEGREES_A_7
DATAF VLV_DEGREES_D_7
DATAF VLV_DEGREES_PER_SECOND_A_10
DATAF VLV_DEGREES_PER_SECOND_D_10
DATAF VGV_CENTRO
DATAF VGV_XTIME
DATAF VGV_YTIME
DATAF VGV_THETATIME
DATAF VGV_XTCORRECT
DATAF VGV_YTCORRECT
DATAF VGV_THETATCORRECT
DATAF VGV_SENTIDO_D
DATAF VGV_ANGULO
DATAF VGV_ANGLE_A
DATAF VGV_ANGLE_D
ARRAY16 VGV_ALPHA_L 2
ARRAY16 VGV_ALPHA_R 2
DATAF VGV_OLDB
DATAF VGV_OLDC
ARRAY16 VGV_XT 2
ARRAY16 VGV_YT 2
ARRAY16 VGV_THETAT 2
DATAF VGV_I
DATAF VGV_DW
DATAF VGV_DIAMETER
DATAF VGV_D_L
DATAF VGV_D_R
DATAF VGV_D
DATAF VGV_DELTA_THETA
DATAF VGV_KP_A
DATAF VGV_KI_A
DATAF VGV_KD_A
DATAF VGV_KP_D
DATAF VGV_KI_D
DATAF VGV_KD_D
DATAF VGV_ERROR_A
DATAF VGV_ERROR_D
DATAF VGV_ERRSUM_A
DATAF VGV_ERRSUM_D
DATAF VGV_OLDERROR_A
DATAF VGV_OLDERROR_D
DATAF VGV_U_A
DATAF VGV_U_D
DATAS VLV_I_2 252
DATAS VLV_D_2 252
DATAF VLV_G1_2
DATAF VLV_SIGNO_2
DATAF VLV_VMIN_2
DATAF VLV_VMAX_2
DATAF VLV_ENCODR_2
DATAF VLV_ROTATION_4
DATAF VLV_SIGN_4
DATAF VLV_PROGRESS_4
DATAF VLV_DEGREES_PER_INTERVAL_4
DATAF VLV_ROTATION_6
DATAF VLV_SIGN_6
DATAF VLV_PROGRESS_6
DATAF VLV_DEGREES_PER_INTERVAL_6
DATAF VLV_DEGREES_8
DATAF VLV_ROTATION_8
DATAF VLV_SIGN_8
DATAF VLV_PROGRESS_8
DATAF VLV_DEGREES_PER_INTERVAL_8
DATAF VLV_DEGREES_9
DATAF VLV_ROTATION_9
DATAF VLV_SIGN_9
DATAF VLV_PROGRESS_9
DATAF VLV_DEGREES_PER_INTERVAL_9
DATAF VLV_DEGREES_A_10
DATAF VLV_DEGREES_D_10
DATA32 RUNCOUNTER_F_PIDCONTROL_AD_0
DATA32 RUNCOUNTER_F_ODOMETRY_0
DATA32 RUNCOUNTER_F_DISPLAY_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F 0.0 VLV_DEGREES_4
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_6
    MOVEF_F 0.0 VLV_DEGREES_6
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_8
    MOVEF_F 0.0 VLV_V1_2
    MOVEF_F 0.0 VLV_V2_2
    MOVEF_F 0.0 VLV_ANGLE_2
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_7
    MOVEF_F 0.0 VLV_DEGREES_A_7
    MOVEF_F 0.0 VLV_DEGREES_D_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_10
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_10
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_ANGULO
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_L
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYCREATE_FLOAT VGV_XT
    CALL ARRAYCREATE_FLOAT VGV_YT
    CALL ARRAYCREATE_FLOAT VGV_THETAT
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_L
    MOVEF_F 0.0 VGV_D_R
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_DELTA_THETA
    MOVEF_F 0.0 VGV_KP_A
    MOVEF_F 0.0 VGV_KI_A
    MOVEF_F 0.0 VGV_KD_A
    MOVEF_F 0.0 VGV_KP_D
    MOVEF_F 0.0 VGV_KI_D
    MOVEF_F 0.0 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    STRINGS DUPLICATE '' VLV_I_2
    STRINGS DUPLICATE '' VLV_D_2
    MOVEF_F 0.0 VLV_G1_2
    MOVEF_F 0.0 VLV_SIGNO_2
    MOVEF_F 0.0 VLV_VMIN_2
    MOVEF_F 0.0 VLV_VMAX_2
    MOVEF_F 0.0 VLV_ENCODR_2
    MOVEF_F 0.0 VLV_ROTATION_4
    MOVEF_F 0.0 VLV_SIGN_4
    MOVEF_F 0.0 VLV_PROGRESS_4
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_4
    MOVEF_F 0.0 VLV_ROTATION_6
    MOVEF_F 0.0 VLV_SIGN_6
    MOVEF_F 0.0 VLV_PROGRESS_6
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_6
    MOVEF_F 0.0 VLV_DEGREES_8
    MOVEF_F 0.0 VLV_ROTATION_8
    MOVEF_F 0.0 VLV_SIGN_8
    MOVEF_F 0.0 VLV_PROGRESS_8
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_8
    MOVEF_F 0.0 VLV_DEGREES_9
    MOVEF_F 0.0 VLV_ROTATION_9
    MOVEF_F 0.0 VLV_SIGN_9
    MOVEF_F 0.0 VLV_PROGRESS_9
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_9
    MOVEF_F 0.0 VLV_DEGREES_A_10
    MOVEF_F 0.0 VLV_DEGREES_D_10
    MOVE32_32 0 RUNCOUNTER_F_PIDCONTROL_AD_0
    MOVE32_32 0 RUNCOUNTER_F_ODOMETRY_0
    MOVE32_32 0 RUNCOUNTER_F_DISPLAY_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_PIDCONTROL_AD_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_PIDCONTROL_AD_0 0
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 -1 RUNCOUNTER_F_PIDCONTROL_AD_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_ODOMETRY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_ODOMETRY_0 1
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 -1 RUNCOUNTER_F_ODOMETRY_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_DISPLAY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_DISPLAY_0 2
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 -1 RUNCOUNTER_F_DISPLAY_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_PIDCONTROL_AD_0
subcall PROGRAM_F_ODOMETRY_0
subcall PROGRAM_F_DISPLAY_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    DATAF F.6
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch338
    WRITE32 ENDSUB_F_PIDCONTROL_AD_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_PIDCONTROL_AD_0
  dispatch338:
    JR_NEQ32 SUBPROGRAM 1 dispatch339
    WRITE32 ENDSUB_F_ODOMETRY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ODOMETRY_0
  dispatch339:
    JR_NEQ32 SUBPROGRAM 2 dispatch340
    WRITE32 ENDSUB_F_DISPLAY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DISPLAY_0
  dispatch340:
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F 0.0 VLV_DEGREES_4
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_6
    MOVEF_F 0.0 VLV_DEGREES_6
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_8
    MOVEF_F 0.0 VLV_V1_2
    MOVEF_F 0.0 VLV_V2_2
    MOVEF_F 0.0 VLV_ANGLE_2
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_7
    MOVEF_F 0.0 VLV_DEGREES_A_7
    MOVEF_F 0.0 VLV_DEGREES_D_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_10
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_10
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_ANGULO
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 1.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_ANGULO
    DATA32 tmp0
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 1  RUNCOUNTER_F_PIDCONTROL_AD_0 tmp0
    JR_NEQ32 0 tmp0 alreadylaunched0
    OBJECT_START TF_PIDCONTROL_AD_0
  alreadylaunched0:
    DATA32 tmp1
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 1  RUNCOUNTER_F_ODOMETRY_0 tmp1
    JR_NEQ32 0 tmp1 alreadylaunched1
    OBJECT_START TF_ODOMETRY_0
  alreadylaunched1:
    DATA32 tmp2
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 1  RUNCOUNTER_F_DISPLAY_0 tmp2
    JR_NEQ32 0 tmp2 alreadylaunched2
    OBJECT_START TF_DISPLAY_0
  alreadylaunched2:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB3 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB3:
    DATA32 milliseconds4
	MOVEF_32 20000.0 milliseconds4
	DATA32 timer4
	TIMER_WAIT milliseconds4 timer4
	TIMER_READY timer4
ENDTHREAD:
    RETURN
SUB_F_STARTARM_0:
    CALL MOTOR.RESETCOUNT 'A'
    CALL MOTOR.RESETCOUNT 'D'
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    MOVEF_F 200.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F -180.0 VLV_DEGREES_4
    WRITE32 ENDSUB_F_BMOVEA_2:CALLSUB7 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA_2
CALLSUB7:
    TIMER_READ timeMC1
  while9:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 500.0 endwhile9
  whilebody9:
    ADDF VGV_ANGLE_D 1.0 VGV_ANGLE_D
    DATA32 milliseconds12
	MOVEF_32 5.0 milliseconds12
	DATA32 timer12
	TIMER_WAIT milliseconds12 timer12
	TIMER_READY timer12
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 500.0 whilebody9
  endwhile9:
    CALL MOTOR.GETCOUNT 'D' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 30.0 else14_1
    MOVEF_F -1.0 VGV_SENTIDO_D
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_9
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB17:
    JR endif14
  else14_1:
    MOVEF_F 1.0 VGV_SENTIDO_D
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_9
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB18 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB18:
  else14_2:
  endif14:
    DATA32 milliseconds19
	MOVEF_32 100.0 milliseconds19
	DATA32 timer19
	TIMER_WAIT milliseconds19 timer19
	TIMER_READY timer19
RETSUB_F_STARTARM_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STARTARM_0:
SUB_F_ODOMETRY_0:
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_XT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_YT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_THETAT
    MOVEF_F 0.0 VGV_I
  while25:
  whilebody25:
    MOVEF_F 84.5 VGV_DW
    MOVEF_F 56.0 VGV_DIAMETER
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.2
    DIVF F.2 57.295779513082 F.1
    MULF F.1 -1.0 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_L
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.2
    DIVF F.2 57.295779513082 F.1
    MULF F.1 -1.0 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_R
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_L
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_L
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf39
    DATA8 flag39
    DIVF F.0 2.0 tmpf39
    CP_EQF 0.0 2.0 flag39
    SELECTF flag39 0.0 tmpf39 VGV_D_L

    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_R
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_R
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf45
    DATA8 flag45
    DIVF F.0 2.0 tmpf45
    CP_EQF 0.0 2.0 flag45
    SELECTF flag45 0.0 tmpf45 VGV_D_R

    ADDF VGV_D_L VGV_D_R F.0
    DATAF tmpf47
    DATA8 flag47
    DIVF F.0 2.0 tmpf47
    CP_EQF 0.0 2.0 flag47
    SELECTF flag47 0.0 tmpf47 VGV_D

    SUBF VGV_D_L VGV_D_R F.0
    MULF 2.0 VGV_DW F.1
    DATAF tmpf50
    DATA8 flag50
    DIVF F.0 F.1 tmpf50
    CP_EQF 0.0 F.1 flag50
    SELECTF flag50 0.0 tmpf50 VGV_DELTA_THETA

    JR_EQF VGV_XTCORRECT 0.0 else51_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_XTCORRECT VGV_XT
    MOVEF_F 0.0 VGV_XTCORRECT
    JR endif51
  else51_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.5 VGV_THETAT
    DATAF tmpf56
    DATA8 flag56
    DIVF VGV_DELTA_THETA 2.0 tmpf56
    CP_EQF 0.0 2.0 flag56
    SELECTF flag56 0.0 tmpf56 F.6

    ADDF F.5 F.6 F.4
    DATAF tmpf58
	MULF F.4 57.295779513082  tmpf58
	MATH SIN  tmpf58 F.3
    MULF VGV_D F.3 F.2
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_XT
    ADDF F.2 F.3 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_XT
  else51_2:
  endif51:
    JR_EQF VGV_YTCORRECT 0.0 else63_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_YTCORRECT VGV_YT
    MOVEF_F 0.0 VGV_YTCORRECT
    JR endif63
  else63_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.5 VGV_THETAT
    DATAF tmpf68
    DATA8 flag68
    DIVF VGV_DELTA_THETA 2.0 tmpf68
    CP_EQF 0.0 2.0 flag68
    SELECTF flag68 0.0 tmpf68 F.6

    ADDF F.5 F.6 F.4
    DATAF tmpf70
	MULF F.4 57.295779513082 tmpf70
	MATH COS tmpf70 F.3
    MULF VGV_D F.3 F.2
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_YT
    ADDF F.2 F.3 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_YT
  else63_2:
  endif63:
    JR_EQF VGV_THETATCORRECT 0.0 else75_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_THETATCORRECT VGV_THETAT
    MOVEF_F 0.0 VGV_THETATCORRECT
    JR endif75
  else75_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_THETAT
    ADDF F.2 VGV_DELTA_THETA F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_THETAT
  else75_2:
  endif75:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_XTIME VGV_XT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_YTIME VGV_YT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_THETATIME VGV_THETAT
    ADDF VGV_I 1.0 VGV_I
    DATA32 milliseconds89
	MOVEF_32 10.0 milliseconds89
	DATA32 timer89
	TIMER_WAIT milliseconds89 timer89
	TIMER_READY timer89
    JR whilebody25
  endwhile25:
RETSUB_F_ODOMETRY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ODOMETRY_0:
SUB_F_PIDCONTROL_AD_0:
    MOVEF_F 1.5 VGV_KP_A
    MOVEF_F 0.0001 VGV_KI_A
    MOVEF_F 0.1 VGV_KD_A
    MOVEF_F 0.5 VGV_KP_D
    MOVEF_F 0.0001 VGV_KI_D
    MOVEF_F 0.1 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
  while90:
  whilebody90:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    SUBF VGV_ANGLE_A F.0 VGV_ERROR_A
    ADDF VGV_ERRSUM_A VGV_ERROR_A VGV_ERRSUM_A
    MULF VGV_ERROR_A VGV_KP_A F.1
    MULF VGV_ERRSUM_A VGV_KI_A F.3
    DATAF tmpf96
    DATA8 flag96
    DIVF F.3 1.0 tmpf96
    CP_EQF 0.0 1.0 flag96
    SELECTF flag96 0.0 tmpf96 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_A VGV_OLDERROR_A F.2
    MULF F.2 VGV_KD_A F.1
    ADDF F.0 F.1 VGV_U_A
    MOVEF_8 VGV_U_A setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    SUBF VGV_ANGLE_D F.0 VGV_ERROR_D
    ADDF VGV_ERRSUM_D VGV_ERROR_D VGV_ERRSUM_D
    MULF VGV_ERROR_D VGV_KP_D F.1
    MULF VGV_ERRSUM_D VGV_KI_D F.3
    DATAF tmpf107
    DATA8 flag107
    DIVF F.3 1.0 tmpf107
    CP_EQF 0.0 1.0 flag107
    SELECTF flag107 0.0 tmpf107 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_D VGV_OLDERROR_D F.3
    MULF F.3 VGV_KD_D F.2
    MULF F.2 VGV_SENTIDO_D F.1
    ADDF F.0 F.1 VGV_U_D
    MOVEF_8 VGV_U_D setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    JR whilebody90
  endwhile90:
RETSUB_F_PIDCONTROL_AD_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_PIDCONTROL_AD_0:
SUB_F_DISPLAY_0:
  while114:
  whilebody114:
    MOVE32_32 1 STOPLCDUPDATE
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_XT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
    DATAF tmpf120
    DATA8 flag120
    DIVF F.1 100.0 tmpf120
    CP_EQF 0.0 100.0 flag120
    SELECTF flag120 0.0 tmpf120 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'xt: ' S.1 S.0
    CALL LCD.WRITE 5.0 5.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_YT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
    DATAF tmpf127
    DATA8 flag127
    DIVF F.1 100.0 tmpf127
    CP_EQF 0.0 100.0 flag127
    SELECTF flag127 0.0 tmpf127 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'yt: ' S.1 S.0
    CALL LCD.WRITE 5.0 15.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.1 VGV_THETAT
    MULF F.1 57.295779513082 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'thetat: ' S.1 S.0
    CALL LCD.WRITE 5.0 25.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGULO '%g' 99 S.1
    CALL TEXT.APPEND 'angulo: ' S.1 S.0
    CALL LCD.WRITE 5.0 35.0 S.0
    STRINGS VALUE_FORMATTED VGV_CENTRO '%g' 99 S.1
    CALL TEXT.APPEND 'centro: ' S.1 S.0
    CALL LCD.WRITE 5.0 45.0 S.0
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Angulo de A:  ' S.1 S.0
    CALL LCD.WRITE 5.0 65.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGLE_A '%g' 99 S.1
    CALL TEXT.APPEND 'Obj de A:  ' S.1 S.0
    CALL LCD.WRITE 5.0 75.0 S.0
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Angulo de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 85.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGLE_D '%g' 99 S.1
    CALL TEXT.APPEND 'Obj de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 95.0 S.0
    STRINGS VALUE_FORMATTED VGV_SENTIDO_D '%g' 99 S.1
    CALL TEXT.APPEND 'Sentido D: ' S.1 S.0
    CALL LCD.WRITE 5.0 105.0 S.0
    MOVE32_32 0 STOPLCDUPDATE
	UI_DRAW UPDATE
    DATA32 milliseconds160
	MOVEF_32 100.0 milliseconds160
	DATA32 timer160
	TIMER_WAIT milliseconds160 timer160
	TIMER_READY timer160
    JR whilebody114
  endwhile114:
RETSUB_F_DISPLAY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DISPLAY_0:
SUB_F_MAIN_0:
    WRITE32 ENDSUB_F_STARTARM_0:CALLSUB161 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STARTARM_0
CALLSUB161:
    MOVEF_F 100.0 VLV_DEGREES_PER_SECOND_6
    MOVEF_F 150.0 VLV_DEGREES_6
    WRITE32 ENDSUB_F_BMOVED_2:CALLSUB162 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED_2
CALLSUB162:
    DATA32 milliseconds163
	MOVEF_32 1000.0 milliseconds163
	DATA32 timer163
	TIMER_WAIT milliseconds163 timer163
	TIMER_READY timer163
    MOVEF_F 60.0 VLV_DEGREES_PER_SECOND_8
    WRITE32 ENDSUB_F_BMOVEA0_1:CALLSUB164 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA0_1
CALLSUB164:
    CALL MOTOR.SCHEDULE 'BC' -30.0 0.0 130.0 0.0 'True' 

	DATA8 layer165
	DATA8 nos165
	DATA8 busy165
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer165 nos165
	JR_EQ8 0 nos165 motornotbusy165
  motorwaiting165:
	OUTPUT_TEST layer165 nos165 busy165
	JR_EQ8 busy165 0 motornotbusy165
	SLEEP
	JR motorwaiting165
  motornotbusy165:
    MOVEF_F 100.0 VLV_DEGREES_PER_SECOND_9
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB166 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB166:
    DATA32 milliseconds167
	MOVEF_32 2000.0 milliseconds167
	DATA32 timer167
	TIMER_WAIT milliseconds167 timer167
	TIMER_READY timer167
    MOVEF_F -30.0 VLV_V1_2
    MOVEF_F 30.0 VLV_V2_2
    MOVEF_F 22.0 VLV_ANGLE_2
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB168 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB168:
    MOVEF_F 100.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F 180.0 VLV_DEGREES_4
    WRITE32 ENDSUB_F_BMOVEA_2:CALLSUB169 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA_2
CALLSUB169:
    DATA32 milliseconds170
	MOVEF_32 2000.0 milliseconds170
	DATA32 timer170
	TIMER_WAIT milliseconds170 timer170
	TIMER_READY timer170
    CALL MOTOR.SCHEDULE 'BC' 10.0 0.0 10.0 0.0 'True' 

	DATA8 layer171
	DATA8 nos171
	DATA8 busy171
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer171 nos171
	JR_EQ8 0 nos171 motornotbusy171
  motorwaiting171:
	OUTPUT_TEST layer171 nos171 busy171
	JR_EQ8 busy171 0 motornotbusy171
	SLEEP
	JR motorwaiting171
  motornotbusy171:
    MOVEF_F 150.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F 180.0 VLV_DEGREES_4
    WRITE32 ENDSUB_F_BMOVEA_2:CALLSUB172 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA_2
CALLSUB172:
    MOVEF_F 10.0 VLV_V1_2
    MOVEF_F -10.0 VLV_V2_2
    MOVEF_F 5.0 VLV_ANGLE_2
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB173 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB173:
    MOVEF_F 15.0 VLV_DEGREES_PER_SECOND_A_7
    MOVEF_F 40.0 VLV_DEGREES_PER_SECOND_D_7
    MOVEF_F 55.0 VLV_DEGREES_A_7
    MOVEF_F 150.0 VLV_DEGREES_D_7
    WRITE32 ENDSUB_F_BMOVEAD_4:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD_4
CALLSUB174:
    DATA32 milliseconds175
	MOVEF_32 2000.0 milliseconds175
	DATA32 timer175
	TIMER_WAIT milliseconds175 timer175
	TIMER_READY timer175
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 150.0 0.0 'True' 

	DATA8 layer176
	DATA8 nos176
	DATA8 busy176
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer176 nos176
	JR_EQ8 0 nos176 motornotbusy176
  motorwaiting176:
	OUTPUT_TEST layer176 nos176 busy176
	JR_EQ8 busy176 0 motornotbusy176
	SLEEP
	JR motorwaiting176
  motornotbusy176:
    MOVEF_F 100.0 VLV_DEGREES_PER_SECOND_A_10
    MOVEF_F 100.0 VLV_DEGREES_PER_SECOND_D_10
    WRITE32 ENDSUB_F_BMOVEAD0_2:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD0_2
CALLSUB177:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_GUNIVENCMG_3:
    STRINGS DUPLICATE 'B' VLV_I_2
    STRINGS DUPLICATE 'C' VLV_D_2
    MOVEF_F 3.05555555555556 VLV_G1_2
    DATAF tmpf178
    DATA8 flag178
    DIVF VLV_V1_2 VLV_V2_2 tmpf178
    CP_EQF 0.0 VLV_V2_2 flag178
    SELECTF flag178 0.0 tmpf178 F.0

    DATAF tmpf179
    DATA8 flag179
    DIVF VLV_V1_2 VLV_V2_2 tmpf179
    CP_EQF 0.0 VLV_V2_2 flag179
    SELECTF flag179 0.0 tmpf179 F.2

    MATH ABS F.2 F.1
    DATAF tmpf181
    DATA8 flag181
    DIVF F.0 F.1 tmpf181
    CP_EQF 0.0 F.1 flag181
    SELECTF flag181 0.0 tmpf181 VLV_SIGNO_2

    MATH ABS VLV_V1_2 F.0
    MATH ABS VLV_V2_2 F.1
    DATA8 flag184
	CP_LTF F.0 F.1 flag184
	SELECTF flag184 F.0 F.1 VLV_VMIN_2
    MATH ABS VLV_V1_2 F.0
    MATH ABS VLV_V2_2 F.1
    DATA8 flag187
	CP_GTF F.0 F.1 flag187
	SELECTF flag187 F.0 F.1 VLV_VMAX_2
    DATAF tmpf188
    DATA8 flag188
    DIVF VLV_VMIN_2 VLV_VMAX_2 tmpf188
    CP_EQF 0.0 VLV_VMAX_2 flag188
    SELECTF flag188 0.0 tmpf188 F.3

    MULF -8.5 F.3 F.2
    MULF F.2 VLV_SIGNO_2 F.1
    SUBF F.1 8.5 F.0
    DATAF tmpf192
    DATA8 flag192
    DIVF VLV_VMIN_2 VLV_VMAX_2 tmpf192
    CP_EQF 0.0 VLV_VMAX_2 flag192
    SELECTF flag192 0.0 tmpf192 F.3

    MULF F.3 VLV_SIGNO_2 F.2
    SUBF F.2 1.0 F.1
    DATAF tmpf195
    DATA8 flag195
    DIVF F.0 F.1 tmpf195
    CP_EQF 0.0 F.1 flag195
    SELECTF flag195 0.0 tmpf195 VGV_CENTRO

    MULF VLV_ANGLE_2 VLV_G1_2 F.0
    MULF VLV_SIGNO_2 VLV_VMIN_2 F.4
    DATAF tmpf198
    DATA8 flag198
    DIVF F.4 VLV_VMAX_2 tmpf198
    CP_EQF 0.0 VLV_VMAX_2 flag198
    SELECTF flag198 0.0 tmpf198 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf200
    DATA8 flag200
    DIVF -2.0 F.2 tmpf200
    CP_EQF 0.0 F.2 flag200
    SELECTF flag200 0.0 tmpf200 F.1

    MULF F.0 F.1 VLV_ENCODR_2
    CALL TEXT.APPEND VLV_I_2 VLV_D_2 S.0
    MATH NEGATE VLV_V1_2 F.0
    MATH NEGATE VLV_V2_2 F.1
    CALL MOTOR.SCHEDULESYNC S.0 F.0 F.1 VLV_ENCODR_2 'True'

	DATA8 layer205
	DATA8 nos205
	DATA8 busy205
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer205 nos205
	JR_EQ8 0 nos205 motornotbusy205
  motorwaiting205:
	OUTPUT_TEST layer205 nos205 busy205
	JR_EQ8 busy205 0 motornotbusy205
	SLEEP
	JR motorwaiting205
  motornotbusy205:
RETSUB_F_GUNIVENCMG_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_GUNIVENCMG_3:
SUB_F_BMOVEA_2:
    SUBF VLV_DEGREES_4 VGV_ANGLE_A VLV_ROTATION_4
    MATH ABS VLV_ROTATION_4 F.0
    DATAF tmpf208
    DATA8 flag208
    DIVF F.0 VLV_ROTATION_4 tmpf208
    CP_EQF 0.0 VLV_ROTATION_4 flag208
    SELECTF flag208 0.0 tmpf208 VLV_SIGN_4

    MOVEF_F 0.0 VLV_PROGRESS_4
    MULF VLV_DEGREES_PER_SECOND_4 VLV_SIGN_4 F.0
    DATAF tmpf210
    DATA8 flag210
    DIVF F.0 50.0 tmpf210
    CP_EQF 0.0 50.0 flag210
    SELECTF flag210 0.0 tmpf210 VLV_DEGREES_PER_INTERVAL_4

  while211:
    SUBF VLV_ROTATION_4 VLV_PROGRESS_4 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile211
  whilebody211:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_4 VGV_ANGLE_A
    ADDF VLV_PROGRESS_4 VLV_DEGREES_PER_INTERVAL_4 VLV_PROGRESS_4
    DATA32 milliseconds216
	MOVEF_32 1.0 milliseconds216
	DATA32 timer216
	TIMER_WAIT milliseconds216 timer216
	TIMER_READY timer216
    SUBF VLV_ROTATION_4 VLV_PROGRESS_4 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody211
  endwhile211:
    MOVEF_F VLV_DEGREES_4 VGV_ANGLE_A
RETSUB_F_BMOVEA_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA_2:
SUB_F_BMOVED_2:
    MULF VLV_DEGREES_6 VGV_SENTIDO_D VLV_DEGREES_6
    SUBF VLV_DEGREES_6 VGV_ANGLE_D VLV_ROTATION_6
    MATH ABS VLV_ROTATION_6 F.0
    DATAF tmpf222
    DATA8 flag222
    DIVF F.0 VLV_ROTATION_6 tmpf222
    CP_EQF 0.0 VLV_ROTATION_6 flag222
    SELECTF flag222 0.0 tmpf222 VLV_SIGN_6

    MOVEF_F 0.0 VLV_PROGRESS_6
    MULF VLV_DEGREES_PER_SECOND_6 VLV_SIGN_6 F.0
    DATAF tmpf224
    DATA8 flag224
    DIVF F.0 50.0 tmpf224
    CP_EQF 0.0 50.0 flag224
    SELECTF flag224 0.0 tmpf224 VLV_DEGREES_PER_INTERVAL_6

  while225:
    SUBF VLV_ROTATION_6 VLV_PROGRESS_6 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile225
  whilebody225:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_6 VGV_ANGLE_D
    ADDF VLV_PROGRESS_6 VLV_DEGREES_PER_INTERVAL_6 VLV_PROGRESS_6
    DATA32 milliseconds230
	MOVEF_32 1.0 milliseconds230
	DATA32 timer230
	TIMER_WAIT milliseconds230 timer230
	TIMER_READY timer230
    SUBF VLV_ROTATION_6 VLV_PROGRESS_6 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody225
  endwhile225:
    MOVEF_F VLV_DEGREES_6 VGV_ANGLE_D
RETSUB_F_BMOVED_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED_2:
SUB_F_BMOVEAD_4:
    MULF VLV_DEGREES_D_7 VGV_SENTIDO_D VLV_DEGREES_D_7
  while234:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_7 or235
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_7 endwhile234
  or235:
  whilebody234:
    MATH ROUND VGV_ANGLE_A F.0
    SUBF VLV_DEGREES_A_7 5.0 F.1
    JR_GTEQF F.0 F.1 else236_1
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_7 else236_1
    DATAF tmpf240
    DATA8 flag240
    DIVF VLV_DEGREES_PER_SECOND_A_7 2.0 tmpf240
    CP_EQF 0.0 2.0 flag240
    SELECTF flag240 0.0 tmpf240 F.3

    SUBF VLV_DEGREES_A_7 VGV_ANGLE_A F.5
    DATAF tmpf242
    DATA8 flag242
    DIVF F.5 10.0 tmpf242
    CP_EQF 0.0 10.0 flag242
    SELECTF flag242 0.0 tmpf242 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag244
	CP_LTF VLV_DEGREES_PER_SECOND_A_7 F.2 flag244
	SELECTF flag244 VLV_DEGREES_PER_SECOND_A_7 F.2 F.1
    DATAF tmpf245
    DATA8 flag245
    DIVF F.1 50.0 tmpf245
    CP_EQF 0.0 50.0 flag245
    SELECTF flag245 0.0 tmpf245 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif236
  else236_1:
    MATH ROUND VGV_ANGLE_A F.0
    ADDF VLV_DEGREES_A_7 5.0 F.1
    JR_LTEQF F.0 F.1 else236_2
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_7 else236_2
    DATAF tmpf250
    DATA8 flag250
    DIVF VLV_DEGREES_PER_SECOND_A_7 2.0 tmpf250
    CP_EQF 0.0 2.0 flag250
    SELECTF flag250 0.0 tmpf250 F.3

    SUBF VLV_DEGREES_A_7 VGV_ANGLE_A F.5
    DATAF tmpf252
    DATA8 flag252
    DIVF F.5 10.0 tmpf252
    CP_EQF 0.0 10.0 flag252
    SELECTF flag252 0.0 tmpf252 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag254
	CP_GTF VLV_DEGREES_PER_SECOND_A_7 F.2 flag254
	SELECTF flag254 VLV_DEGREES_PER_SECOND_A_7 F.2 F.1
    DATAF tmpf255
    DATA8 flag255
    DIVF F.1 50.0 tmpf255
    CP_EQF 0.0 50.0 flag255
    SELECTF flag255 0.0 tmpf255 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif236
  else236_2:
    MOVEF_F VLV_DEGREES_A_7 VGV_ANGLE_A
  else236_3:
  endif236:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_7 else257_1
    DATAF tmpf259
    DATA8 flag259
    DIVF VLV_DEGREES_PER_SECOND_D_7 2.0 tmpf259
    CP_EQF 0.0 2.0 flag259
    SELECTF flag259 0.0 tmpf259 F.3

    SUBF VLV_DEGREES_D_7 VGV_ANGLE_D F.5
    DATAF tmpf261
    DATA8 flag261
    DIVF F.5 10.0 tmpf261
    CP_EQF 0.0 10.0 flag261
    SELECTF flag261 0.0 tmpf261 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag263
	CP_LTF VLV_DEGREES_PER_SECOND_D_7 F.2 flag263
	SELECTF flag263 VLV_DEGREES_PER_SECOND_D_7 F.2 F.1
    DATAF tmpf264
    DATA8 flag264
    DIVF F.1 50.0 tmpf264
    CP_EQF 0.0 50.0 flag264
    SELECTF flag264 0.0 tmpf264 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif257
  else257_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_7 else257_2
    DATAF tmpf267
    DATA8 flag267
    DIVF VLV_DEGREES_PER_SECOND_D_7 2.0 tmpf267
    CP_EQF 0.0 2.0 flag267
    SELECTF flag267 0.0 tmpf267 F.3

    SUBF VLV_DEGREES_D_7 VGV_ANGLE_D F.5
    DATAF tmpf269
    DATA8 flag269
    DIVF F.5 10.0 tmpf269
    CP_EQF 0.0 10.0 flag269
    SELECTF flag269 0.0 tmpf269 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag271
	CP_GTF VLV_DEGREES_PER_SECOND_D_7 F.2 flag271
	SELECTF flag271 VLV_DEGREES_PER_SECOND_D_7 F.2 F.1
    DATAF tmpf272
    DATA8 flag272
    DIVF F.1 50.0 tmpf272
    CP_EQF 0.0 50.0 flag272
    SELECTF flag272 0.0 tmpf272 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif257
  else257_2:
    MOVEF_F VLV_DEGREES_D_7 VGV_ANGLE_D
  else257_3:
  endif257:
    DATA32 milliseconds274
	MOVEF_32 1.0 milliseconds274
	DATA32 timer274
	TIMER_WAIT milliseconds274 timer274
	TIMER_READY timer274
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_7 whilebody234
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_7 whilebody234
  endwhile234:
    MOVEF_F VLV_DEGREES_A_7 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_7 VGV_ANGLE_D
RETSUB_F_BMOVEAD_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD_4:
SUB_F_BMOVEA0_1:
    MOVEF_F 0.0 VLV_DEGREES_8
    SUBF VLV_DEGREES_8 VGV_ANGLE_A VLV_ROTATION_8
    MATH ABS VLV_ROTATION_8 F.0
    DATAF tmpf277
    DATA8 flag277
    DIVF F.0 VLV_ROTATION_8 tmpf277
    CP_EQF 0.0 VLV_ROTATION_8 flag277
    SELECTF flag277 0.0 tmpf277 VLV_SIGN_8

    MOVEF_F 0.0 VLV_PROGRESS_8
    MULF VLV_DEGREES_PER_SECOND_8 VLV_SIGN_8 F.0
    DATAF tmpf279
    DATA8 flag279
    DIVF F.0 50.0 tmpf279
    CP_EQF 0.0 50.0 flag279
    SELECTF flag279 0.0 tmpf279 VLV_DEGREES_PER_INTERVAL_8

  while280:
    SUBF VLV_ROTATION_8 VLV_PROGRESS_8 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile280
  whilebody280:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_8 VGV_ANGLE_A
    ADDF VLV_PROGRESS_8 VLV_DEGREES_PER_INTERVAL_8 VLV_PROGRESS_8
    DATA32 milliseconds285
	MOVEF_32 1.0 milliseconds285
	DATA32 timer285
	TIMER_WAIT milliseconds285 timer285
	TIMER_READY timer285
    SUBF VLV_ROTATION_8 VLV_PROGRESS_8 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody280
  endwhile280:
    MOVEF_F VLV_DEGREES_8 VGV_ANGLE_A
RETSUB_F_BMOVEA0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA0_1:
SUB_F_BMOVED0_1:
    MOVEF_F 0.0 VLV_DEGREES_9
    SUBF VLV_DEGREES_9 VGV_ANGLE_D VLV_ROTATION_9
    MATH ABS VLV_ROTATION_9 F.0
    DATAF tmpf290
    DATA8 flag290
    DIVF F.0 VLV_ROTATION_9 tmpf290
    CP_EQF 0.0 VLV_ROTATION_9 flag290
    SELECTF flag290 0.0 tmpf290 VLV_SIGN_9

    MOVEF_F 0.0 VLV_PROGRESS_9
    MULF VLV_DEGREES_PER_SECOND_9 VLV_SIGN_9 F.0
    DATAF tmpf292
    DATA8 flag292
    DIVF F.0 50.0 tmpf292
    CP_EQF 0.0 50.0 flag292
    SELECTF flag292 0.0 tmpf292 VLV_DEGREES_PER_INTERVAL_9

  while293:
    SUBF VLV_ROTATION_9 VLV_PROGRESS_9 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile293
  whilebody293:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_9 VGV_ANGLE_D
    ADDF VLV_PROGRESS_9 VLV_DEGREES_PER_INTERVAL_9 VLV_PROGRESS_9
    DATA32 milliseconds298
	MOVEF_32 1.0 milliseconds298
	DATA32 timer298
	TIMER_WAIT milliseconds298 timer298
	TIMER_READY timer298
    SUBF VLV_ROTATION_9 VLV_PROGRESS_9 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody293
  endwhile293:
    MOVEF_F VLV_DEGREES_9 VGV_ANGLE_D
RETSUB_F_BMOVED0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED0_1:
SUB_F_BMOVEAD0_2:
    MOVEF_F 0.0 VLV_DEGREES_A_10
    MOVEF_F 0.0 VLV_DEGREES_D_10
  while301:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_10 or302
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_10 endwhile301
  or302:
  whilebody301:
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_10 else303_1
    DATAF tmpf305
    DATA8 flag305
    DIVF VLV_DEGREES_PER_SECOND_A_10 2.0 tmpf305
    CP_EQF 0.0 2.0 flag305
    SELECTF flag305 0.0 tmpf305 F.3

    SUBF VLV_DEGREES_A_10 VGV_ANGLE_A F.5
    DATAF tmpf307
    DATA8 flag307
    DIVF F.5 10.0 tmpf307
    CP_EQF 0.0 10.0 flag307
    SELECTF flag307 0.0 tmpf307 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag309
	CP_LTF VLV_DEGREES_PER_SECOND_A_10 F.2 flag309
	SELECTF flag309 VLV_DEGREES_PER_SECOND_A_10 F.2 F.1
    DATAF tmpf310
    DATA8 flag310
    DIVF F.1 50.0 tmpf310
    CP_EQF 0.0 50.0 flag310
    SELECTF flag310 0.0 tmpf310 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif303
  else303_1:
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_10 else303_2
    DATAF tmpf313
    DATA8 flag313
    DIVF VLV_DEGREES_PER_SECOND_A_10 2.0 tmpf313
    CP_EQF 0.0 2.0 flag313
    SELECTF flag313 0.0 tmpf313 F.3

    SUBF VLV_DEGREES_A_10 VGV_ANGLE_A F.5
    DATAF tmpf315
    DATA8 flag315
    DIVF F.5 10.0 tmpf315
    CP_EQF 0.0 10.0 flag315
    SELECTF flag315 0.0 tmpf315 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag317
	CP_GTF VLV_DEGREES_PER_SECOND_A_10 F.2 flag317
	SELECTF flag317 VLV_DEGREES_PER_SECOND_A_10 F.2 F.1
    DATAF tmpf318
    DATA8 flag318
    DIVF F.1 50.0 tmpf318
    CP_EQF 0.0 50.0 flag318
    SELECTF flag318 0.0 tmpf318 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif303
  else303_2:
    MOVEF_F VLV_DEGREES_A_10 VGV_ANGLE_A
  else303_3:
  endif303:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_10 else320_1
    DATAF tmpf322
    DATA8 flag322
    DIVF VLV_DEGREES_PER_SECOND_D_10 2.0 tmpf322
    CP_EQF 0.0 2.0 flag322
    SELECTF flag322 0.0 tmpf322 F.3

    SUBF VLV_DEGREES_D_10 VGV_ANGLE_D F.5
    DATAF tmpf324
    DATA8 flag324
    DIVF F.5 10.0 tmpf324
    CP_EQF 0.0 10.0 flag324
    SELECTF flag324 0.0 tmpf324 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag326
	CP_LTF VLV_DEGREES_PER_SECOND_D_10 F.2 flag326
	SELECTF flag326 VLV_DEGREES_PER_SECOND_D_10 F.2 F.1
    DATAF tmpf327
    DATA8 flag327
    DIVF F.1 50.0 tmpf327
    CP_EQF 0.0 50.0 flag327
    SELECTF flag327 0.0 tmpf327 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif320
  else320_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_10 else320_2
    DATAF tmpf330
    DATA8 flag330
    DIVF VLV_DEGREES_PER_SECOND_D_10 2.0 tmpf330
    CP_EQF 0.0 2.0 flag330
    SELECTF flag330 0.0 tmpf330 F.3

    SUBF VLV_DEGREES_D_10 VGV_ANGLE_D F.5
    DATAF tmpf332
    DATA8 flag332
    DIVF F.5 10.0 tmpf332
    CP_EQF 0.0 10.0 flag332
    SELECTF flag332 0.0 tmpf332 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag334
	CP_GTF VLV_DEGREES_PER_SECOND_D_10 F.2 flag334
	SELECTF flag334 VLV_DEGREES_PER_SECOND_D_10 F.2 F.1
    DATAF tmpf335
    DATA8 flag335
    DIVF F.1 50.0 tmpf335
    CP_EQF 0.0 50.0 flag335
    SELECTF flag335 0.0 tmpf335 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif320
  else320_2:
    MOVEF_F VLV_DEGREES_D_10 VGV_ANGLE_D
  else320_3:
  endif320:
    DATA32 milliseconds337
	MOVEF_32 1.0 milliseconds337
	DATA32 timer337
	TIMER_WAIT milliseconds337 timer337
	TIMER_READY timer337
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_10 whilebody301
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_10 whilebody301
  endwhile301:
    MOVEF_F VLV_DEGREES_A_10 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_10 VGV_ANGLE_D
RETSUB_F_BMOVEAD0_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD0_2:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
