DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEGREES_PER_SECOND_45
DATAF VLV_DEGREES_PER_SECOND_44
ARRAY16 VLV_VELI_K1_33 2
ARRAY16 VLV_VELD_K1_33 2
DATAF VLV_V1_35
DATAF VLV_V2_35
DATAF VLV_ANGLE_35
DATAF VLV_DEGREES_PER_SECOND_42
DATAF VLV_DEGREES_42
DATAF VLV_VELOCIDAD_19
DATAF VLV_DISTANCIA_19
DATAF VLV_DEGREES_PER_SECOND_40
DATAF VLV_DEGREES_40
DATAF VLV_DEGREES_PER_SECOND_A_43
DATAF VLV_DEGREES_PER_SECOND_D_43
DATAF VLV_DEGREES_A_43
DATAF VLV_DEGREES_D_43
DATAF VLV_DEGREES_PER_SECOND_A_46
DATAF VLV_DEGREES_PER_SECOND_D_46
DATAF VLV_V0_14
DATAF VLV_VMAX_14
DATAF VLV_KP_14
DATAF VLV_KI_14
DATAF VLV_KD_14
DATAF VLV_ACCELENCODER_14
ARRAY16 VLV_M_39 2
DATAF VLV_K_39
ARRAY16 VLV_S_39 2
ARRAY16 VLV_M_37 2
ARRAY16 VLV_S_37 2
ARRAY16 VLV_M_38 2
ARRAY16 VLV_S_38 2
ARRAY16 VLV_VELI_33 2
ARRAY16 VLV_VELD_33 2
ARRAY16 VLV_OMEGAI_K1_33 2
ARRAY16 VLV_OMEGAD_K1_33 2
ARRAY16 VLV_V_33 2
ARRAY16 VLV_DH_T_33 2
ARRAY16 VLV_S_INV_33 2
DATAF VGV_CENTRO
DATAF VGV_XTIME
DATAF VGV_YTIME
DATAF VGV_THETATIME
DATAF VGV_XTCORRECT
DATAF VGV_YTCORRECT
DATAF VGV_THETATCORRECT
DATAF VGV_SENTIDO_D
DATAF VGV_DW
DATAF VGV_DIAMETER
DATAF VGV_D_T
DATAF VGV_SENTIDO_MOTORES
ARRAY16 VGV_L 2
ARRAY16 VGV_R 2
DATAF VGV_ANGLE_A
DATAF VGV_ANGLE_D
ARRAY16 VGV_ALPHA_L 2
ARRAY16 VGV_ALPHA_R 2
DATAF VGV_OLDB
DATAF VGV_OLDC
ARRAY16 VGV_XT 2
ARRAY16 VGV_YT 2
ARRAY16 VGV_THETAT 2
DATAF VGV_I
DATAF VGV_D_L
DATAF VGV_D_R
DATAF VGV_D
DATAF VGV_DELTA_THETA
DATAF VGV_KP_A
DATAF VGV_KI_A
DATAF VGV_KD_A
DATAF VGV_KP_D
DATAF VGV_KI_D
DATAF VGV_KD_D
DATAF VGV_ERROR_A
DATAF VGV_ERROR_D
DATAF VGV_ERRSUM_A
DATAF VGV_ERRSUM_D
DATAF VGV_OLDERROR_A
DATAF VGV_OLDERROR_D
DATAF VGV_U_A
DATAF VGV_U_D
DATAF VGV_OLD_B
DATAF VGV_OLD_C
DATAS VLV_I_14 252
DATAS VLV_D_14 252
DATAF VLV_U_14
DATAF VLV_ERROR_14
DATAF VLV_OLDERROR_14
DATAF VLV_ERRSUM_14
DATAF VLV_VEL_14
DATAF VLV_SENTIDO_14
DATAF VLV_DIAMETRO_19
DATAF VLV_ENC_19
DATAF VLV_START_B_19
DATAF VLV_START_C_19
DATAF VLV_ENCODER_C_19
DATAF VLV_ENCODER_B_19
DATAF VLV_ERROR_19
DATAF VLV_PROPORCIAL_19
DATAF VLV_ITREAL_33
DATAF VLV_RADIO_33
ARRAY16 VLV_I_33 2
ARRAY16 VLV_MINUS_1_33 2
ARRAY16 VLV_Q_K1_33 2
DATAF VLV_DELTA_T_33
DATAF VLV_OLD_T_33
DATAF VLV_OLD_I_33
DATAF VLV_OLD_D_33
DATAF VLV_LOG_FILE_33
ARRAY16 VLV_DF_K_33 2
ARRAY16 VLV_K_K1_33 2
ARRAY16 VLV_K1_K_33 2
ARRAY16 VLV_H_33 2
ARRAY16 VLV_DH_33 2
ARRAY16 VLV_R_33 2
ARRAY16 VLV_Z_33 2
ARRAY16 VLV_F_K_33 2
ARRAY16 VLV_U_33 2
ARRAY16 VLV_W_33 2
ARRAY16 VLV_P_K_K1_33 2
ARRAY16 VLV_MINUS_H_33 2
ARRAY16 VLV_Y_33 2
ARRAY16 VLV_S1_33 2
ARRAY16 VLV_S2_33 2
ARRAY16 VLV_S_33 2
ARRAY16 VLV_K1_33 2
ARRAY16 VLV_K_33 2
ARRAY16 VLV_KY_33 2
ARRAY16 VLV_KH_33 2
ARRAY16 VLV_MINUS_KH_33 2
ARRAY16 VLV_P1_33 2
ARRAY16 VLV_P_33 2
DATAF VLV_J_33
DATAS VLV_I_35 252
DATAS VLV_D_35 252
DATAF VLV_G1_35
DATAF VLV_SIGNO_35
DATAF VLV_VMIN_35
DATAF VLV_VMAX_35
DATAF VLV_ENCODR_35
DATAF VLV_DETERMINANTE_38
DATAF VLV_I_39
DATAF VLV_ROTATION_40
DATAF VLV_SIGN_40
DATAF VLV_PROGRESS_40
DATAF VLV_DEGREES_PER_INTERVAL_40
DATAF VLV_ROTATION_42
DATAF VLV_SIGN_42
DATAF VLV_PROGRESS_42
DATAF VLV_DEGREES_PER_INTERVAL_42
DATAF VLV_DEGREES_44
DATAF VLV_ROTATION_44
DATAF VLV_SIGN_44
DATAF VLV_PROGRESS_44
DATAF VLV_DEGREES_PER_INTERVAL_44
DATAF VLV_DEGREES_45
DATAF VLV_ROTATION_45
DATAF VLV_SIGN_45
DATAF VLV_PROGRESS_45
DATAF VLV_DEGREES_PER_INTERVAL_45
DATAF VLV_DEGREES_A_46
DATAF VLV_DEGREES_D_46
DATA32 RUNCOUNTER_F_PIDCONTROL_AD_0
DATA32 RUNCOUNTER_F_ODOMETRY_0
DATA32 RUNCOUNTER_F_DISPLAY_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_45
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_44
    CALL ARRAYCREATE_FLOAT VLV_VELI_K1_33
    CALL ARRAYCREATE_FLOAT VLV_VELD_K1_33
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 0.0 VLV_ANGLE_35
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_42
    MOVEF_F 0.0 VLV_DEGREES_42
    MOVEF_F 0.0 VLV_VELOCIDAD_19
    MOVEF_F 0.0 VLV_DISTANCIA_19
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_40
    MOVEF_F 0.0 VLV_DEGREES_40
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_43
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_43
    MOVEF_F 0.0 VLV_DEGREES_A_43
    MOVEF_F 0.0 VLV_DEGREES_D_43
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_46
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_46
    MOVEF_F 0.0 VLV_V0_14
    MOVEF_F 0.0 VLV_VMAX_14
    MOVEF_F 0.0 VLV_KP_14
    MOVEF_F 0.0 VLV_KI_14
    MOVEF_F 0.0 VLV_KD_14
    MOVEF_F 0.0 VLV_ACCELENCODER_14
    CALL ARRAYCREATE_FLOAT VLV_M_39
    MOVEF_F 0.0 VLV_K_39
    CALL ARRAYCREATE_FLOAT VLV_S_39
    CALL ARRAYCREATE_FLOAT VLV_M_37
    CALL ARRAYCREATE_FLOAT VLV_S_37
    CALL ARRAYCREATE_FLOAT VLV_M_38
    CALL ARRAYCREATE_FLOAT VLV_S_38
    CALL ARRAYCREATE_FLOAT VLV_VELI_33
    CALL ARRAYCREATE_FLOAT VLV_VELD_33
    CALL ARRAYCREATE_FLOAT VLV_OMEGAI_K1_33
    CALL ARRAYCREATE_FLOAT VLV_OMEGAD_K1_33
    CALL ARRAYCREATE_FLOAT VLV_V_33
    CALL ARRAYCREATE_FLOAT VLV_DH_T_33
    CALL ARRAYCREATE_FLOAT VLV_S_INV_33
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F 0.0 VGV_SENTIDO_MOTORES
    CALL ARRAYCREATE_FLOAT VGV_L
    CALL ARRAYCREATE_FLOAT VGV_R
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_L
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYCREATE_FLOAT VGV_XT
    CALL ARRAYCREATE_FLOAT VGV_YT
    CALL ARRAYCREATE_FLOAT VGV_THETAT
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_D_L
    MOVEF_F 0.0 VGV_D_R
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_DELTA_THETA
    MOVEF_F 0.0 VGV_KP_A
    MOVEF_F 0.0 VGV_KI_A
    MOVEF_F 0.0 VGV_KD_A
    MOVEF_F 0.0 VGV_KP_D
    MOVEF_F 0.0 VGV_KI_D
    MOVEF_F 0.0 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    MOVEF_F 0.0 VGV_OLD_B
    MOVEF_F 0.0 VGV_OLD_C
    STRINGS DUPLICATE '' VLV_I_14
    STRINGS DUPLICATE '' VLV_D_14
    MOVEF_F 0.0 VLV_U_14
    MOVEF_F 0.0 VLV_ERROR_14
    MOVEF_F 0.0 VLV_OLDERROR_14
    MOVEF_F 0.0 VLV_ERRSUM_14
    MOVEF_F 0.0 VLV_VEL_14
    MOVEF_F 0.0 VLV_SENTIDO_14
    MOVEF_F 0.0 VLV_DIAMETRO_19
    MOVEF_F 0.0 VLV_ENC_19
    MOVEF_F 0.0 VLV_START_B_19
    MOVEF_F 0.0 VLV_START_C_19
    MOVEF_F 0.0 VLV_ENCODER_C_19
    MOVEF_F 0.0 VLV_ENCODER_B_19
    MOVEF_F 0.0 VLV_ERROR_19
    MOVEF_F 0.0 VLV_PROPORCIAL_19
    MOVEF_F 0.0 VLV_ITREAL_33
    MOVEF_F 0.0 VLV_RADIO_33
    CALL ARRAYCREATE_FLOAT VLV_I_33
    CALL ARRAYCREATE_FLOAT VLV_MINUS_1_33
    CALL ARRAYCREATE_FLOAT VLV_Q_K1_33
    MOVEF_F 0.0 VLV_DELTA_T_33
    MOVEF_F 0.0 VLV_OLD_T_33
    MOVEF_F 0.0 VLV_OLD_I_33
    MOVEF_F 0.0 VLV_OLD_D_33
    MOVEF_F 0.0 VLV_LOG_FILE_33
    CALL ARRAYCREATE_FLOAT VLV_DF_K_33
    CALL ARRAYCREATE_FLOAT VLV_K_K1_33
    CALL ARRAYCREATE_FLOAT VLV_K1_K_33
    CALL ARRAYCREATE_FLOAT VLV_H_33
    CALL ARRAYCREATE_FLOAT VLV_DH_33
    CALL ARRAYCREATE_FLOAT VLV_R_33
    CALL ARRAYCREATE_FLOAT VLV_Z_33
    CALL ARRAYCREATE_FLOAT VLV_F_K_33
    CALL ARRAYCREATE_FLOAT VLV_U_33
    CALL ARRAYCREATE_FLOAT VLV_W_33
    CALL ARRAYCREATE_FLOAT VLV_P_K_K1_33
    CALL ARRAYCREATE_FLOAT VLV_MINUS_H_33
    CALL ARRAYCREATE_FLOAT VLV_Y_33
    CALL ARRAYCREATE_FLOAT VLV_S1_33
    CALL ARRAYCREATE_FLOAT VLV_S2_33
    CALL ARRAYCREATE_FLOAT VLV_S_33
    CALL ARRAYCREATE_FLOAT VLV_K1_33
    CALL ARRAYCREATE_FLOAT VLV_K_33
    CALL ARRAYCREATE_FLOAT VLV_KY_33
    CALL ARRAYCREATE_FLOAT VLV_KH_33
    CALL ARRAYCREATE_FLOAT VLV_MINUS_KH_33
    CALL ARRAYCREATE_FLOAT VLV_P1_33
    CALL ARRAYCREATE_FLOAT VLV_P_33
    MOVEF_F 0.0 VLV_J_33
    STRINGS DUPLICATE '' VLV_I_35
    STRINGS DUPLICATE '' VLV_D_35
    MOVEF_F 0.0 VLV_G1_35
    MOVEF_F 0.0 VLV_SIGNO_35
    MOVEF_F 0.0 VLV_VMIN_35
    MOVEF_F 0.0 VLV_VMAX_35
    MOVEF_F 0.0 VLV_ENCODR_35
    MOVEF_F 0.0 VLV_DETERMINANTE_38
    MOVEF_F 0.0 VLV_I_39
    MOVEF_F 0.0 VLV_ROTATION_40
    MOVEF_F 0.0 VLV_SIGN_40
    MOVEF_F 0.0 VLV_PROGRESS_40
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_40
    MOVEF_F 0.0 VLV_ROTATION_42
    MOVEF_F 0.0 VLV_SIGN_42
    MOVEF_F 0.0 VLV_PROGRESS_42
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_42
    MOVEF_F 0.0 VLV_DEGREES_44
    MOVEF_F 0.0 VLV_ROTATION_44
    MOVEF_F 0.0 VLV_SIGN_44
    MOVEF_F 0.0 VLV_PROGRESS_44
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_44
    MOVEF_F 0.0 VLV_DEGREES_45
    MOVEF_F 0.0 VLV_ROTATION_45
    MOVEF_F 0.0 VLV_SIGN_45
    MOVEF_F 0.0 VLV_PROGRESS_45
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_45
    MOVEF_F 0.0 VLV_DEGREES_A_46
    MOVEF_F 0.0 VLV_DEGREES_D_46
    MOVE32_32 0 RUNCOUNTER_F_PIDCONTROL_AD_0
    MOVE32_32 0 RUNCOUNTER_F_ODOMETRY_0
    MOVE32_32 0 RUNCOUNTER_F_DISPLAY_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_PIDCONTROL_AD_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_PIDCONTROL_AD_0 0
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 -1 RUNCOUNTER_F_PIDCONTROL_AD_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_ODOMETRY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_ODOMETRY_0 1
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 -1 RUNCOUNTER_F_ODOMETRY_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_DISPLAY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_DISPLAY_0 2
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 -1 RUNCOUNTER_F_DISPLAY_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_PIDCONTROL_AD_0
subcall PROGRAM_F_ODOMETRY_0
subcall PROGRAM_F_DISPLAY_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    DATAF F.6
    DATAF F.7
    DATAF F.8
    DATAF F.9
    DATAF F.10
    DATAF F.11
    DATAF F.12
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    DATAS S.2 252
    DATAS S.3 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch857
    WRITE32 ENDSUB_F_PIDCONTROL_AD_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_PIDCONTROL_AD_0
  dispatch857:
    JR_NEQ32 SUBPROGRAM 1 dispatch858
    WRITE32 ENDSUB_F_ODOMETRY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ODOMETRY_0
  dispatch858:
    JR_NEQ32 SUBPROGRAM 2 dispatch859
    WRITE32 ENDSUB_F_DISPLAY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DISPLAY_0
  dispatch859:
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_45
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_44
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_VELI_K1_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_VELD_K1_33
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 0.0 VLV_ANGLE_35
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_42
    MOVEF_F 0.0 VLV_DEGREES_42
    MOVEF_F 0.0 VLV_VELOCIDAD_19
    MOVEF_F 0.0 VLV_DISTANCIA_19
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_40
    MOVEF_F 0.0 VLV_DEGREES_40
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_43
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_43
    MOVEF_F 0.0 VLV_DEGREES_A_43
    MOVEF_F 0.0 VLV_DEGREES_D_43
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_46
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_46
    MOVEF_F 0.0 VLV_V0_14
    MOVEF_F 0.0 VLV_VMAX_14
    MOVEF_F 0.0 VLV_KP_14
    MOVEF_F 0.0 VLV_KI_14
    MOVEF_F 0.0 VLV_KD_14
    MOVEF_F 0.0 VLV_ACCELENCODER_14
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_M_39
    MOVEF_F 0.0 VLV_K_39
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_39
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_37
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_M_38
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_38
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_VELI_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_VELD_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_OMEGAI_K1_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_OMEGAD_K1_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_V_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_DH_T_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_INV_33
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F 0.0 VGV_SENTIDO_MOTORES
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_R
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 1.0 VGV_SENTIDO_D
    MOVEF_F 84.5 VGV_DW
    MOVEF_F 56.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F -1.0 VGV_SENTIDO_MOTORES
    MOVEF_F -1.0 VGV_SENTIDO_MOTORES
    DATA32 tmp17
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 1  RUNCOUNTER_F_PIDCONTROL_AD_0 tmp17
    JR_NEQ32 0 tmp17 alreadylaunched17
    OBJECT_START TF_PIDCONTROL_AD_0
  alreadylaunched17:
    DATA32 tmp18
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 1  RUNCOUNTER_F_ODOMETRY_0 tmp18
    JR_NEQ32 0 tmp18 alreadylaunched18
    OBJECT_START TF_ODOMETRY_0
  alreadylaunched18:
    DATA32 tmp19
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 1  RUNCOUNTER_F_DISPLAY_0 tmp19
    JR_NEQ32 0 tmp19 alreadylaunched19
    OBJECT_START TF_DISPLAY_0
  alreadylaunched19:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB20 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB20:
ENDTHREAD:
    RETURN
SUB_F_STARTARM_0:
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    TIMER_READ timeMC1
  while22:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 500.0 endwhile22
  whilebody22:
    ADDF VGV_ANGLE_D 1.0 VGV_ANGLE_D
    DATA32 milliseconds25
	MOVEF_32 3.0 milliseconds25
	DATA32 timer25
	TIMER_WAIT milliseconds25 timer25
	TIMER_READY timer25
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 500.0 whilebody22
  endwhile22:
    DATA32 milliseconds27
	MOVEF_32 500.0 milliseconds27
	DATA32 timer27
	TIMER_WAIT milliseconds27 timer27
	TIMER_READY timer27
    CALL MOTOR.GETCOUNT 'D' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 60.0 else28_1
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_45
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB31 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB31:
    MOVEF_F -1.0 VGV_SENTIDO_D
    JR endif28
  else28_1:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_45
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB32 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB32:
    MOVEF_F 1.0 VGV_SENTIDO_D
  else28_2:
  endif28:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_44
    WRITE32 ENDSUB_F_BMOVEA0_1:CALLSUB33 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA0_1
CALLSUB33:
    DATA32 milliseconds34
	MOVEF_32 100.0 milliseconds34
	DATA32 timer34
	TIMER_WAIT milliseconds34 timer34
	TIMER_READY timer34
RETSUB_F_STARTARM_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STARTARM_0:
SUB_F_ODOMETRY_0:
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_XT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_YT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_THETAT
    MOVEF_F 0.0 VGV_I
  while40:
  whilebody40:
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.2
    MULF F.2 -1.0 F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_L
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.2
    MULF F.2 -1.0 F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_R
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_L
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_L
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf54
    DATA8 flag54
    DIVF F.0 2.0 tmpf54
    CP_EQF 0.0 2.0 flag54
    SELECTF flag54 0.0 tmpf54 VGV_D_L

    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_R
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_R
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf60
    DATA8 flag60
    DIVF F.0 2.0 tmpf60
    CP_EQF 0.0 2.0 flag60
    SELECTF flag60 0.0 tmpf60 VGV_D_R

    ADDF VGV_D_L VGV_D_R F.0
    DATAF tmpf62
    DATA8 flag62
    DIVF F.0 2.0 tmpf62
    CP_EQF 0.0 2.0 flag62
    SELECTF flag62 0.0 tmpf62 VGV_D

    SUBF VGV_D_R VGV_D_L F.0
    MULF 2.0 VGV_DW F.1
    DATAF tmpf65
    DATA8 flag65
    DIVF F.0 F.1 tmpf65
    CP_EQF 0.0 F.1 flag65
    SELECTF flag65 0.0 tmpf65 VGV_DELTA_THETA

    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf68
    DATA8 flag68
    DIVF VGV_DELTA_THETA 2.0 tmpf68
    CP_EQF 0.0 2.0 flag68
    SELECTF flag68 0.0 tmpf68 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf70
	MULF F.5 57.295779513082  tmpf70
	MATH SIN  tmpf70 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_XT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_XT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf78
    DATA8 flag78
    DIVF VGV_DELTA_THETA 2.0 tmpf78
    CP_EQF 0.0 2.0 flag78
    SELECTF flag78 0.0 tmpf78 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf80
	MULF F.5 57.295779513082 tmpf80
	MATH COS tmpf80 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_YT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_YT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_THETAT
    ADDF F.2 VGV_DELTA_THETA F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_THETAT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_XTIME VGV_XT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_YTIME VGV_YT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_THETATIME VGV_THETAT
    ADDF VGV_I 1.0 VGV_I
    DATA32 milliseconds97
	MOVEF_32 10.0 milliseconds97
	DATA32 timer97
	TIMER_WAIT milliseconds97 timer97
	TIMER_READY timer97
    JR whilebody40
  endwhile40:
RETSUB_F_ODOMETRY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ODOMETRY_0:
SUB_F_PIDCONTROL_AD_0:
    MOVEF_F 0.5 VGV_KP_A
    MOVEF_F 0.0001 VGV_KI_A
    MOVEF_F 0.1 VGV_KD_A
    MOVEF_F 0.5 VGV_KP_D
    MOVEF_F 0.0001 VGV_KI_D
    MOVEF_F 0.1 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
  while98:
  whilebody98:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    SUBF VGV_ANGLE_A F.0 VGV_ERROR_A
    ADDF VGV_ERRSUM_A VGV_ERROR_A VGV_ERRSUM_A
    MULF VGV_ERROR_A VGV_KP_A F.1
    MULF VGV_ERRSUM_A VGV_KI_A F.3
    DATAF tmpf104
    DATA8 flag104
    DIVF F.3 1.0 tmpf104
    CP_EQF 0.0 1.0 flag104
    SELECTF flag104 0.0 tmpf104 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_A VGV_OLDERROR_A F.2
    MULF F.2 VGV_KD_A F.1
    ADDF F.0 F.1 VGV_U_A
    MOVEF_8 VGV_U_A setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    SUBF VGV_ANGLE_D F.0 VGV_ERROR_D
    ADDF VGV_ERRSUM_D VGV_ERROR_D VGV_ERRSUM_D
    MULF VGV_ERROR_D VGV_KP_D F.1
    MULF VGV_ERRSUM_D VGV_KI_D F.3
    DATAF tmpf115
    DATA8 flag115
    DIVF F.3 1.0 tmpf115
    CP_EQF 0.0 1.0 flag115
    SELECTF flag115 0.0 tmpf115 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_D VGV_OLDERROR_D F.3
    MULF F.3 VGV_KD_D F.2
    MULF F.2 VGV_SENTIDO_D F.1
    ADDF F.0 F.1 VGV_U_D
    MOVEF_8 VGV_U_D setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    JR whilebody98
  endwhile98:
RETSUB_F_PIDCONTROL_AD_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_PIDCONTROL_AD_0:
SUB_F_DISPLAY_0:
    MOVEF_F 0.0 VGV_OLD_B
    MOVEF_F 0.0 VGV_OLD_C
  while122:
  whilebody122:
    MOVE32_32 1 STOPLCDUPDATE
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_XT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
    DATAF tmpf128
    DATA8 flag128
    DIVF F.1 100.0 tmpf128
    CP_EQF 0.0 100.0 flag128
    SELECTF flag128 0.0 tmpf128 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'xt: ' S.1 S.0
    CALL LCD.WRITE 5.0 5.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_YT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
    DATAF tmpf135
    DATA8 flag135
    DIVF F.1 100.0 tmpf135
    CP_EQF 0.0 100.0 flag135
    SELECTF flag135 0.0 tmpf135 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'yt: ' S.1 S.0
    CALL LCD.WRITE 5.0 15.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.1 VGV_THETAT
    MULF F.1 57.295779513082 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'thetat: ' S.1 S.0
    CALL LCD.WRITE 5.0 25.0 S.0
    STRINGS VALUE_FORMATTED VGV_CENTRO '%g' 99 S.1
    CALL TEXT.APPEND 'centro: ' S.1 S.0
    CALL LCD.WRITE 5.0 35.0 S.0
    OUTPUT_READ 0 1 getSpeedB tmpTachoB
	MOVE8_F getSpeedB F.1
    MULF F.1 -1.0 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Velocidad de B:  ' S.1 S.0
    CALL LCD.WRITE 5.0 45.0 S.0
    OUTPUT_READ 0 2 getSpeedC tmpTachoC
	MOVE8_F getSpeedC F.1
    MULF F.1 -1.0 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Velocidad de C:  ' S.1 S.0
    CALL LCD.WRITE 5.0 55.0 S.0
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.4
    SUBF F.4 VGV_OLD_B F.3
    DIVF F.3 57.295779513082 F.2
    DATAF tmpf160
    DATA8 flag160
    DIVF F.2 0.05 tmpf160
    CP_EQF 0.0 0.05 flag160
    SELECTF flag160 0.0 tmpf160 F.1

    MULF F.1 -1.0 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'rad/s de B:  ' S.1 S.0
    CALL LCD.WRITE 5.0 65.0 S.0
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.4
    SUBF F.4 VGV_OLD_C F.3
    DIVF F.3 57.295779513082 F.2
    DATAF tmpf168
    DATA8 flag168
    DIVF F.2 0.05 tmpf168
    CP_EQF 0.0 0.05 flag168
    SELECTF flag168 0.0 tmpf168 F.1

    MULF F.1 -1.0 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'rad/s de C:  ' S.1 S.0
    CALL LCD.WRITE 5.0 75.0 S.0
    STRINGS VALUE_FORMATTED VGV_D_T '%g' 99 S.1
    CALL TEXT.APPEND 'Delta T:  ' S.1 S.0
    CALL LCD.WRITE 5.0 85.0 S.0
    MOVE32_32 0 STOPLCDUPDATE
	UI_DRAW UPDATE
    DATA32 milliseconds177
	MOVEF_32 50.0 milliseconds177
	DATA32 timer177
	TIMER_WAIT milliseconds177 timer177
	TIMER_READY timer177
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB VGV_OLD_B
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC VGV_OLD_C
    JR whilebody122
  endwhile122:
RETSUB_F_DISPLAY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DISPLAY_0:
SUB_F_MAIN_0:
    CALL VECTOR.INIT 100.0 10.0 VGV_L
    CALL VECTOR.INIT 100.0 10.0 VGV_R
    ARRAY COPY VGV_L VLV_VELI_K1_33
    ARRAY COPY VGV_R VLV_VELD_K1_33
    WRITE32 ENDSUB_F_KALMAN_FILTER_2:CALLSUB182 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_KALMAN_FILTER_2
CALLSUB182:
    PROGRAM_STOP -1
    WRITE32 ENDSUB_F_STARTARM_0:CALLSUB184 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STARTARM_0
CALLSUB184:
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 20.0 VLV_V2_35
    MOVEF_F 40.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB185 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB185:
    MOVEF_F 20.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 40.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB186 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB186:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_42
    MOVEF_F 140.0 VLV_DEGREES_42
    WRITE32 ENDSUB_F_BMOVED_2:CALLSUB187 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED_2
CALLSUB187:
    MOVEF_F 30.0 VLV_VELOCIDAD_19
    MOVEF_F 80.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB188 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB188:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_45
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB189:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_40
    MOVEF_F 180.0 VLV_DEGREES_40
    WRITE32 ENDSUB_F_BMOVEA_2:CALLSUB190 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA_2
CALLSUB190:
    MOVEF_F -30.0 VLV_VELOCIDAD_19
    MOVEF_F 30.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB191 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB191:
    MOVEF_F 20.0 VLV_V1_35
    MOVEF_F -20.0 VLV_V2_35
    MOVEF_F 60.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB192 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB192:
    MOVEF_F 30.0 VLV_VELOCIDAD_19
    MOVEF_F 60.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB193 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB193:
    MOVEF_F -20.0 VLV_V1_35
    MOVEF_F 20.0 VLV_V2_35
    MOVEF_F 55.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB194 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB194:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_A_43
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_D_43
    MOVEF_F 60.0 VLV_DEGREES_A_43
    MOVEF_F 160.0 VLV_DEGREES_D_43
    WRITE32 ENDSUB_F_BMOVEAD_4:CALLSUB195 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD_4
CALLSUB195:
    DATA32 milliseconds196
	MOVEF_32 1000.0 milliseconds196
	DATA32 timer196
	TIMER_WAIT milliseconds196 timer196
	TIMER_READY timer196
    MOVEF_F -30.0 VLV_VELOCIDAD_19
    MOVEF_F 200.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB197 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB197:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_A_46
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_D_46
    WRITE32 ENDSUB_F_BMOVEAD0_2:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD0_2
CALLSUB198:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_SL14SICF_6:
    STRINGS DUPLICATE 'B' VLV_I_14
    STRINGS DUPLICATE 'C' VLV_D_14
    MOVEF_F 3.1415926535897932384 F.2
    MULF 56.0 F.2 F.1
    DATAF tmpf201
    DATA8 flag201
    DIVF VLV_ACCELENCODER_14 F.1 tmpf201
    CP_EQF 0.0 F.1 flag201
    SELECTF flag201 0.0 tmpf201 F.0

    MULF F.0 360.0 VLV_ACCELENCODER_14
    MOVEF_F 0.0 VLV_U_14
    MOVEF_F 0.0 VLV_ERROR_14
    MOVEF_F 0.0 VLV_OLDERROR_14
    MOVEF_F 0.0 VLV_ERRSUM_14
    CALL MOTOR.RESETCOUNT 'C'
  while204:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 15.0 or205
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 15.0 endwhile204
  or205:
  whilebody204:
    CALL MOTOR.GETCOUNT 'C' F.3
    DATAF tmpf209
    DATA8 flag209
    DIVF F.3 VLV_ACCELENCODER_14 tmpf209
    CP_EQF 0.0 VLV_ACCELENCODER_14 flag209
    SELECTF flag209 0.0 tmpf209 F.2

    MULF F.2 0.72 F.1
    ADDF VLV_VMAX_14 VLV_V0_14 F.2
    MULF F.1 F.2 F.0
    ADDF F.0 VLV_V0_14 VLV_VEL_14
    DATA8 flag214
	CP_LTF VLV_VEL_14 VLV_VMAX_14 flag214
	SELECTF flag214 VLV_VEL_14 VLV_VMAX_14 VLV_VEL_14
    MATH ABS VLV_VEL_14 F.0
    DATAF tmpf216
    DATA8 flag216
    DIVF VLV_VEL_14 F.0 tmpf216
    CP_EQF 0.0 F.0 flag216
    SELECTF flag216 0.0 tmpf216 VLV_SENTIDO_14

    CALL SENSOR.READPERCENT 1.0 F.1
    CALL SENSOR.READPERCENT 4.0 F.2
    SUBF F.1 F.2 F.0
    MULF F.0 VLV_SENTIDO_14 VLV_ERROR_14
    ADDF VLV_ERRSUM_14 VLV_ERROR_14 VLV_ERRSUM_14
    MULF VLV_ERROR_14 VLV_KP_14 F.1
    SUBF VLV_ERROR_14 VLV_OLDERROR_14 F.3
    MULF F.3 VLV_KD_14 F.2
    ADDF F.1 F.2 F.0
    MULF VLV_ERRSUM_14 VLV_KI_14 F.1
    ADDF F.0 F.1 VLV_U_14
    CALL TEXT.APPEND VLV_I_14 VLV_D_14 S.0
    ADDF VLV_VEL_14 VLV_U_14 F.1
    MULF F.1 VGV_SENTIDO_MOTORES F.0
    SUBF VLV_VEL_14 VLV_U_14 F.2
    MULF F.2 VGV_SENTIDO_MOTORES F.1
    CALL MOTOR.STARTSYNC S.0 F.0 F.1
    MOVEF_F VLV_ERROR_14 VLV_OLDERROR_14
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 15.0 whilebody204
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 15.0 whilebody204
  endwhile204:
    CALL TEXT.APPEND VLV_I_14 VLV_D_14 S.0
    CALL MOTOR.STOP S.0 'False'
RETSUB_F_SL14SICF_6:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SL14SICF_6:
SUB_F_ENCODERRECTOMG_2:
    MOVEF_F 56.0 VLV_DIAMETRO_19
    MULF VLV_DISTANCIA_19 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf240
    DATA8 flag240
    DIVF F.1 F.2 tmpf240
    CP_EQF 0.0 F.2 flag240
    SELECTF flag240 0.0 tmpf240 F.0

    DATAF tmpf241
    DATA8 flag241
    DIVF F.0 VLV_DIAMETRO_19 tmpf241
    CP_EQF 0.0 VLV_DIAMETRO_19 flag241
    SELECTF flag241 0.0 tmpf241 VLV_ENC_19

    CALL MOTOR.GETCOUNT 'B' VLV_START_B_19
    CALL MOTOR.GETCOUNT 'C' VLV_START_C_19
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_19 VLV_ENCODER_C_19
  while246:
    MATH ABS VLV_ENCODER_C_19 F.0
    JR_GTEQF F.0 VLV_ENC_19 endwhile246
  whilebody246:
    CALL MOTOR.GETCOUNT 'B' F.1
    SUBF F.1 VLV_START_B_19 F.0
    MULF F.0 VGV_SENTIDO_MOTORES VLV_ENCODER_B_19
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.1 VLV_START_C_19 F.0
    MULF F.0 VGV_SENTIDO_MOTORES VLV_ENCODER_C_19
    SUBF VLV_ENCODER_B_19 VLV_ENCODER_C_19 VLV_ERROR_19
    MULF VLV_ERROR_19 2.0 VLV_PROPORCIAL_19
    SUBF VLV_VELOCIDAD_19 VLV_PROPORCIAL_19 F.1
    MULF F.1 VGV_SENTIDO_MOTORES F.0
    ADDF VLV_VELOCIDAD_19 VLV_PROPORCIAL_19 F.2
    MULF F.2 VGV_SENTIDO_MOTORES F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    MATH ABS VLV_ENCODER_C_19 F.0
    JR_LTF F.0 VLV_ENC_19 whilebody246
  endwhile246:
    CALL MOTOR.STOP 'BC' 'True'
RETSUB_F_ENCODERRECTOMG_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ENCODERRECTOMG_2:
SUB_F_KALMAN_FILTER_2:
    MOVEF_F 0.0 VLV_ITREAL_33
    MOVEF_F 28.0 VLV_RADIO_33
    ARRAY COPY VLV_VELI_K1_33 VLV_M_39
    MOVEF_F -1.0 VLV_K_39
    WRITE32 ENDSUB_F_MULTIMATRIZCOEF_3:CALLSUB263 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MULTIMATRIZCOEF_3
CALLSUB263:
    ARRAY COPY VLV_S_39 VLV_VELI_33
    ARRAY COPY VLV_VELD_K1_33 VLV_M_39
    MOVEF_F -1.0 VLV_K_39
    WRITE32 ENDSUB_F_MULTIMATRIZCOEF_3:CALLSUB264 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MULTIMATRIZCOEF_3
CALLSUB264:
    ARRAY COPY VLV_S_39 VLV_VELD_33
    ARRAY COPY VLV_VELI_K1_33 VLV_M_39
    MOVEF_F 0.0178189593727726 VLV_K_39
    WRITE32 ENDSUB_F_MULTIMATRIZCOEF_3:CALLSUB265 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MULTIMATRIZCOEF_3
CALLSUB265:
    ARRAY COPY VLV_S_39 VLV_OMEGAI_K1_33
    ARRAY COPY VLV_VELD_K1_33 VLV_M_39
    MOVEF_F 0.0167000668002672 VLV_K_39
    WRITE32 ENDSUB_F_MULTIMATRIZCOEF_3:CALLSUB266 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MULTIMATRIZCOEF_3
CALLSUB266:
    ARRAY COPY VLV_S_39 VLV_OMEGAD_K1_33
    CALL VECTOR.DATA 9.0 '1 0 0  0 1 0  0 0 1' VLV_I_33
    CALL VECTOR.DATA 9.0 '-1 0 0 0 -1 0 0 0 -1' VLV_MINUS_1_33
    CALL VECTOR.DATA 9.0 '0.25 0 0  0 0.25 0 0 0 0.002' VLV_Q_K1_33
    CALL EV3.TIME VLV_DELTA_T_33
    MOVEF_F 0.0 VLV_OLD_T_33
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    MULF -1.0 F.0 VLV_OLD_I_33
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.0
    MULF -1.0 F.0 VLV_OLD_D_33
    CALL EV3FILE.OPENWRITE 'WRO2024/log' VLV_LOG_FILE_33
  while276:
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_OMEGAI_K1_33
    JR_NEQF F.0 0.0 or277
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_OMEGAD_K1_33
    JR_EQF F.0 0.0 endwhile276
  or277:
  whilebody276:
    CALL VECTOR.INIT 9.0 0.0 VLV_DF_K_33
    CALL VECTOR.INIT 3.0 0.0 VLV_K_K1_33
    CALL VECTOR.INIT 3.0 0.0 VLV_K1_K_33
    CALL VECTOR.INIT 3.0 0.0 VLV_H_33
    CALL VECTOR.INIT 9.0 0.0 VLV_DH_33
    CALL VECTOR.DATA 9.0 '0.25 0 0  0 0.25 0 0 0 0.002' VLV_R_33
    CALL VECTOR.INIT 3.0 0.0 VLV_Z_33
    CALL EV3.TIME F.0
    SUBF F.0 VLV_OLD_T_33 VLV_DELTA_T_33
    CALL EV3.TIME VLV_OLD_T_33
    MOVEF_F VLV_DELTA_T_33 VGV_D_T
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_VELI_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.1 VLV_VELD_33
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL ARRAYGET_FLOAT 0.0 F.1 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.7 VLV_OMEGAI_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.8 VLV_OMEGAD_K1_33
    ADDF F.7 F.8 F.6
    MULF F.6 VLV_RADIO_33 F.5
    MULF F.5 VLV_DELTA_T_33 F.4
    DATAF tmpf299
    DATA8 flag299
    DIVF F.4 2.0 tmpf299
    CP_EQF 0.0 2.0 flag299
    SELECTF flag299 0.0 tmpf299 F.3

    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.11 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.12 VLV_OMEGAI_K1_33
    SUBF F.11 F.12 F.10
    MULF F.10 VLV_RADIO_33 F.9
    MULF F.9 VLV_DELTA_T_33 F.8
    MULF 4.0 VGV_DW F.9
    DATAF tmpf307
    DATA8 flag307
    DIVF F.8 F.9 tmpf307
    CP_EQF 0.0 F.9 flag307
    SELECTF flag307 0.0 tmpf307 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf309
	MULF F.5 57.295779513082 tmpf309
	MATH COS tmpf309 F.4
    MULF F.3 F.4 F.2
    ADDF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.1 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.7 VLV_OMEGAI_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.8 VLV_OMEGAD_K1_33
    ADDF F.7 F.8 F.6
    MULF F.6 VLV_RADIO_33 F.5
    MULF F.5 VLV_DELTA_T_33 F.4
    DATAF tmpf319
    DATA8 flag319
    DIVF F.4 2.0 tmpf319
    CP_EQF 0.0 2.0 flag319
    SELECTF flag319 0.0 tmpf319 F.3

    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.11 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.12 VLV_OMEGAI_K1_33
    SUBF F.11 F.12 F.10
    MULF F.10 VLV_RADIO_33 F.9
    MULF F.9 VLV_DELTA_T_33 F.8
    MULF 4.0 VGV_DW F.9
    DATAF tmpf327
    DATA8 flag327
    DIVF F.8 F.9 tmpf327
    CP_EQF 0.0 F.9 flag327
    SELECTF flag327 0.0 tmpf327 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf329
	MULF F.5 57.295779513082  tmpf329
	MATH SIN  tmpf329 F.4
    MULF F.3 F.4 F.2
    ADDF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.1 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.6 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.7 VLV_OMEGAI_K1_33
    SUBF F.6 F.7 F.5
    MULF F.5 VLV_RADIO_33 F.4
    MULF F.4 VLV_DELTA_T_33 F.3
    MULF 2.0 VGV_DW F.4
    DATAF tmpf340
    DATA8 flag340
    DIVF F.3 F.4 tmpf340
    CP_EQF 0.0 F.4 flag340
    SELECTF flag340 0.0 tmpf340 F.2

    ADDF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.6 VLV_OMEGAI_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.7 VLV_OMEGAD_K1_33
    ADDF F.6 F.7 F.5
    MULF F.5 VLV_RADIO_33 F.4
    MULF F.4 VLV_DELTA_T_33 F.3
    MULF -1.0 F.3 F.2
    DATAF tmpf349
    DATA8 flag349
    DIVF F.2 2.0 tmpf349
    CP_EQF 0.0 2.0 flag349
    SELECTF flag349 0.0 tmpf349 F.1

    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.9 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.10 VLV_OMEGAI_K1_33
    SUBF F.9 F.10 F.8
    MULF F.8 VLV_RADIO_33 F.7
    MULF F.7 VLV_DELTA_T_33 F.6
    MULF 4.0 VGV_DW F.7
    DATAF tmpf357
    DATA8 flag357
    DIVF F.6 F.7 tmpf357
    CP_EQF 0.0 F.7 flag357
    SELECTF flag357 0.0 tmpf357 F.5

    ADDF F.4 F.5 F.3
    DATAF tmpf359
	MULF F.3 57.295779513082  tmpf359
	MATH SIN  tmpf359 F.2
    MULF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DF_K_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.5 VLV_OMEGAI_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.6 VLV_OMEGAD_K1_33
    ADDF F.5 F.6 F.4
    MULF F.4 VLV_RADIO_33 F.3
    MULF F.3 VLV_DELTA_T_33 F.2
    DATAF tmpf367
    DATA8 flag367
    DIVF F.2 2.0 tmpf367
    CP_EQF 0.0 2.0 flag367
    SELECTF flag367 0.0 tmpf367 F.1

    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.9 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.10 VLV_OMEGAI_K1_33
    SUBF F.9 F.10 F.8
    MULF F.8 VLV_RADIO_33 F.7
    MULF F.7 VLV_DELTA_T_33 F.6
    MULF 4.0 VGV_DW F.7
    DATAF tmpf375
    DATA8 flag375
    DIVF F.6 F.7 tmpf375
    CP_EQF 0.0 F.7 flag375
    SELECTF flag375 0.0 tmpf375 F.5

    ADDF F.4 F.5 F.3
    DATAF tmpf377
	MULF F.3 57.295779513082 tmpf377
	MATH COS tmpf377 F.2
    MULF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DF_K_33
    CALL VECTOR.ADD 9.0 VLV_I_33 VLV_DF_K_33 VLV_F_K_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_F_K_33 VLV_I_33 VLV_U_33
    ARRAY COPY VLV_U_33 VLV_M_37
    WRITE32 ENDSUB_F_TRASPMATVECT3X3_2:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TRASPMATVECT3X3_2
CALLSUB382:
    ARRAY COPY VLV_S_37 VLV_V_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_U_33 VLV_V_33 VLV_W_33
    CALL VECTOR.ADD 9.0 VLV_W_33 VLV_Q_K1_33 VLV_P_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.2 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.3 VLV_K1_K_33
    SUBF F.2 F.3 F.1
    MULF F.1 VLV_DELTA_T_33 F.0
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_H_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH SQRT F.3 F.2
    CALL ARRAYGET_FLOAT 2.0 F.5 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K1_K_33
    SUBF F.5 F.6 F.4
    MULF VGV_DW F.4 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf405
    DATA8 flag405
    DIVF F.1 VLV_RADIO_33 tmpf405
    CP_EQF 0.0 VLV_RADIO_33 flag405
    SELECTF flag405 0.0 tmpf405 F.0

    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_H_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH SQRT F.3 F.2
    CALL ARRAYGET_FLOAT 2.0 F.5 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K1_K_33
    SUBF F.5 F.6 F.4
    MULF VGV_DW F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf422
    DATA8 flag422
    DIVF F.1 VLV_RADIO_33 tmpf422
    CP_EQF 0.0 VLV_RADIO_33 flag422
    SELECTF flag422 0.0 tmpf422 F.0

    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_H_33
    DATAF tmpf424
    DATA8 flag424
    DIVF 1.0 VLV_DELTA_T_33 tmpf424
    CP_EQF 0.0 VLV_DELTA_T_33 flag424
    SELECTF flag424 0.0 tmpf424 F.0

    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 0.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf440
    DATA8 flag440
    DIVF F.1 VLV_RADIO_33 tmpf440
    CP_EQF 0.0 VLV_RADIO_33 flag440
    SELECTF flag440 0.0 tmpf440 F.0

    CALL ARRAYSTORE_FLOAT 3.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf456
    DATA8 flag456
    DIVF F.1 VLV_RADIO_33 tmpf456
    CP_EQF 0.0 VLV_RADIO_33 flag456
    SELECTF flag456 0.0 tmpf456 F.0

    CALL ARRAYSTORE_FLOAT 4.0 F.0 VLV_DH_33
    MATH NEGATE VGV_DW F.1
    DATAF tmpf459
    DATA8 flag459
    DIVF F.1 VLV_RADIO_33 tmpf459
    CP_EQF 0.0 VLV_RADIO_33 flag459
    SELECTF flag459 0.0 tmpf459 F.0

    CALL ARRAYSTORE_FLOAT 5.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 0.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf475
    DATA8 flag475
    DIVF F.1 VLV_RADIO_33 tmpf475
    CP_EQF 0.0 VLV_RADIO_33 flag475
    SELECTF flag475 0.0 tmpf475 F.0

    CALL ARRAYSTORE_FLOAT 6.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf491
    DATA8 flag491
    DIVF F.1 VLV_RADIO_33 tmpf491
    CP_EQF 0.0 VLV_RADIO_33 flag491
    SELECTF flag491 0.0 tmpf491 F.0

    CALL ARRAYSTORE_FLOAT 7.0 F.0 VLV_DH_33
    DATAF tmpf493
    DATA8 flag493
    DIVF VGV_DW VLV_RADIO_33 tmpf493
    CP_EQF 0.0 VLV_RADIO_33 flag493
    SELECTF flag493 0.0 tmpf493 F.0

    CALL ARRAYSTORE_FLOAT 8.0 F.0 VLV_DH_33
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_Z_33
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.2
    MULF -1.0 F.2 F.1
    SUBF F.1 VLV_OLD_I_33 F.0
    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_Z_33
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.2
    MULF -1.0 F.2 F.1
    SUBF F.1 VLV_OLD_D_33 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_Z_33
    CALL VECTOR.MULTIPLY 1.0 3.0 3.0 VLV_H_33 VLV_MINUS_1_33 VLV_MINUS_H_33
    CALL VECTOR.ADD 3.0 VLV_Z_33 VLV_MINUS_H_33 VLV_Y_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_DH_33 VLV_P_K_K1_33 VLV_S1_33
    ARRAY COPY VLV_DH_33 VLV_M_37
    WRITE32 ENDSUB_F_TRASPMATVECT3X3_2:CALLSUB508 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TRASPMATVECT3X3_2
CALLSUB508:
    ARRAY COPY VLV_S_37 VLV_DH_T_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_S1_33 VLV_DH_T_33 VLV_S2_33
    CALL VECTOR.ADD 9.0 VLV_S2_33 VLV_R_33 VLV_S_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_P_K_K1_33 VLV_DH_T_33 VLV_K1_33
    ARRAY COPY VLV_S_33 VLV_M_38
    WRITE32 ENDSUB_F_INVMATVECT3X3_2:CALLSUB512 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_INVMATVECT3X3_2
CALLSUB512:
    ARRAY COPY VLV_S_38 VLV_S_INV_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_K1_33 VLV_S_INV_33 VLV_K_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_K_33 VLV_Y_33 VLV_KY_33
    CALL VECTOR.ADD 9.0 VLV_K_K1_33 VLV_KY_33 VLV_K1_K_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_K_33 VLV_DH_T_33 VLV_KH_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_KH_33 VLV_MINUS_1_33 VLV_MINUS_KH_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_I_33 VLV_MINUS_KH_33 VLV_P1_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_P1_33 VLV_P_K_K1_33 VLV_P_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_OMEGAI_K1_33
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Medidas de entrada Izq: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_OMEGAD_K1_33
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Medidas de entrada Dch: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    CALL ARRAYGET_FLOAT 0.0 F.0 VLV_Z_33
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Sensor color: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    CALL ARRAYGET_FLOAT 1.0 F.0 VLV_Z_33
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Derivada Encoder I: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    CALL ARRAYGET_FLOAT 2.0 F.0 VLV_Z_33
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Derivada Encoder D: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    MOVEF_F 0.0 VLV_J_33
  for540:
    JR_GTF VLV_J_33 8.0 endfor540
  forbody540:
    STRINGS VALUE_FORMATTED VLV_J_33 '%g' 99 S.3
    CALL TEXT.APPEND 'Valor[' S.3 S.2
    CALL TEXT.APPEND S.2 '] de P: ' S.1
    CALL ARRAYGET_FLOAT VLV_J_33 F.0 VLV_P_33
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.2
    CALL TEXT.APPEND S.1 S.2 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    ADDF VLV_J_33 1.0 VLV_J_33
    JR_LTEQF VLV_J_33 8.0 forbody540
  endfor540:
    STRINGS VALUE_FORMATTED VLV_ITREAL_33 '%g' 99 S.1
    CALL TEXT.APPEND 'Iteraci\363n: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 '---------------'
    ADDF VLV_ITREAL_33 1.0 VLV_ITREAL_33
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    MULF -1.0 F.0 VLV_OLD_I_33
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.0
    MULF -1.0 F.0 VLV_OLD_D_33
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_OMEGAI_K1_33
    JR_NEQF F.0 0.0 whilebody276
    CALL ARRAYGET_FLOAT VLV_ITREAL_33 F.0 VLV_OMEGAD_K1_33
    JR_NEQF F.0 0.0 whilebody276
  endwhile276:
RETSUB_F_KALMAN_FILTER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_KALMAN_FILTER_2:
SUB_F_GUNIVENCMG_3:
    STRINGS DUPLICATE 'B' VLV_I_35
    STRINGS DUPLICATE 'C' VLV_D_35
    MOVEF_F 3.05555555555556 VLV_G1_35
    DATAF tmpf560
    DATA8 flag560
    DIVF VLV_V1_35 VLV_V2_35 tmpf560
    CP_EQF 0.0 VLV_V2_35 flag560
    SELECTF flag560 0.0 tmpf560 F.0

    DATAF tmpf561
    DATA8 flag561
    DIVF VLV_V1_35 VLV_V2_35 tmpf561
    CP_EQF 0.0 VLV_V2_35 flag561
    SELECTF flag561 0.0 tmpf561 F.2

    MATH ABS F.2 F.1
    DATAF tmpf563
    DATA8 flag563
    DIVF F.0 F.1 tmpf563
    CP_EQF 0.0 F.1 flag563
    SELECTF flag563 0.0 tmpf563 VLV_SIGNO_35

    MATH ABS VLV_V1_35 F.0
    MATH ABS VLV_V2_35 F.1
    DATA8 flag566
	CP_LTF F.0 F.1 flag566
	SELECTF flag566 F.0 F.1 VLV_VMIN_35
    MATH ABS VLV_V1_35 F.0
    MATH ABS VLV_V2_35 F.1
    DATA8 flag569
	CP_GTF F.0 F.1 flag569
	SELECTF flag569 F.0 F.1 VLV_VMAX_35
    DATAF tmpf570
    DATA8 flag570
    DIVF VLV_VMIN_35 VLV_VMAX_35 tmpf570
    CP_EQF 0.0 VLV_VMAX_35 flag570
    SELECTF flag570 0.0 tmpf570 F.3

    MULF -8.5 F.3 F.2
    MULF F.2 VLV_SIGNO_35 F.1
    SUBF F.1 8.5 F.0
    DATAF tmpf574
    DATA8 flag574
    DIVF VLV_VMIN_35 VLV_VMAX_35 tmpf574
    CP_EQF 0.0 VLV_VMAX_35 flag574
    SELECTF flag574 0.0 tmpf574 F.3

    MULF F.3 VLV_SIGNO_35 F.2
    SUBF F.2 1.0 F.1
    DATAF tmpf577
    DATA8 flag577
    DIVF F.0 F.1 tmpf577
    CP_EQF 0.0 F.1 flag577
    SELECTF flag577 0.0 tmpf577 VGV_CENTRO

    MULF VLV_ANGLE_35 VLV_G1_35 F.0
    MULF VLV_SIGNO_35 VLV_VMIN_35 F.4
    DATAF tmpf580
    DATA8 flag580
    DIVF F.4 VLV_VMAX_35 tmpf580
    CP_EQF 0.0 VLV_VMAX_35 flag580
    SELECTF flag580 0.0 tmpf580 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf582
    DATA8 flag582
    DIVF -2.0 F.2 tmpf582
    CP_EQF 0.0 F.2 flag582
    SELECTF flag582 0.0 tmpf582 F.1

    MULF F.0 F.1 VLV_ENCODR_35
    CALL TEXT.APPEND VLV_I_35 VLV_D_35 S.0
    MATH NEGATE VLV_V1_35 F.0
    MATH NEGATE VLV_V2_35 F.1
    CALL MOTOR.SCHEDULESYNC S.0 F.0 F.1 VLV_ENCODR_35 'True'

	DATA8 layer587
	DATA8 nos587
	DATA8 busy587
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer587 nos587
	JR_EQ8 0 nos587 motornotbusy587
  motorwaiting587:
	OUTPUT_TEST layer587 nos587 busy587
	JR_EQ8 busy587 0 motornotbusy587
	SLEEP
	JR motorwaiting587
  motornotbusy587:
RETSUB_F_GUNIVENCMG_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_GUNIVENCMG_3:
SUB_F_TRASPMATVECT3X3_2:
    CALL VECTOR.INIT 9.0 0.0 VLV_S_37
    CALL ARRAYGET_FLOAT 0.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 3.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 6.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 1.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 3.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 4.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 4.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 7.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 5.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 2.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 6.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 5.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 7.0 F.0 VLV_S_37
    CALL ARRAYGET_FLOAT 8.0 F.0 VLV_M_37
    CALL ARRAYSTORE_FLOAT 8.0 F.0 VLV_S_37
RETSUB_F_TRASPMATVECT3X3_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TRASPMATVECT3X3_2:
SUB_F_INVMATVECT3X3_2:
    CALL ARRAYGET_FLOAT 0.0 F.2 VLV_M_38
    CALL ARRAYGET_FLOAT 4.0 F.5 VLV_M_38
    CALL ARRAYGET_FLOAT 8.0 F.6 VLV_M_38
    MULF F.5 F.6 F.4
    CALL ARRAYGET_FLOAT 5.0 F.6 VLV_M_38
    CALL ARRAYGET_FLOAT 7.0 F.7 VLV_M_38
    MULF F.6 F.7 F.5
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    CALL ARRAYGET_FLOAT 1.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 3.0 F.6 VLV_M_38
    CALL ARRAYGET_FLOAT 8.0 F.7 VLV_M_38
    MULF F.6 F.7 F.5
    CALL ARRAYGET_FLOAT 5.0 F.7 VLV_M_38
    CALL ARRAYGET_FLOAT 6.0 F.8 VLV_M_38
    MULF F.7 F.8 F.6
    SUBF F.5 F.6 F.4
    MULF F.3 F.4 F.2
    SUBF F.1 F.2 F.0
    CALL ARRAYGET_FLOAT 2.0 F.2 VLV_M_38
    CALL ARRAYGET_FLOAT 3.0 F.5 VLV_M_38
    CALL ARRAYGET_FLOAT 7.0 F.6 VLV_M_38
    MULF F.5 F.6 F.4
    CALL ARRAYGET_FLOAT 4.0 F.6 VLV_M_38
    CALL ARRAYGET_FLOAT 6.0 F.7 VLV_M_38
    MULF F.6 F.7 F.5
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    ADDF F.0 F.1 VLV_DETERMINANTE_38
    JR_EQF VLV_DETERMINANTE_38 0.0 else636_1
    CALL ARRAYGET_FLOAT 4.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 7.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf644
    DATA8 flag644
    DIVF F.1 VLV_DETERMINANTE_38 tmpf644
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag644
    SELECTF flag644 0.0 tmpf644 F.0

    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 3.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf653
    DATA8 flag653
    DIVF F.1 VLV_DETERMINANTE_38 tmpf653
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag653
    SELECTF flag653 0.0 tmpf653 F.0

    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 3.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 7.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 4.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf662
    DATA8 flag662
    DIVF F.1 VLV_DETERMINANTE_38 tmpf662
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag662
    SELECTF flag662 0.0 tmpf662 F.0

    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 1.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 7.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf671
    DATA8 flag671
    DIVF F.1 VLV_DETERMINANTE_38 tmpf671
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag671
    SELECTF flag671 0.0 tmpf671 F.0

    CALL ARRAYSTORE_FLOAT 3.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf680
    DATA8 flag680
    DIVF F.1 VLV_DETERMINANTE_38 tmpf680
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag680
    SELECTF flag680 0.0 tmpf680 F.0

    CALL ARRAYSTORE_FLOAT 4.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 7.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf689
    DATA8 flag689
    DIVF F.1 VLV_DETERMINANTE_38 tmpf689
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag689
    SELECTF flag689 0.0 tmpf689 F.0

    CALL ARRAYSTORE_FLOAT 5.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 1.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 4.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf698
    DATA8 flag698
    DIVF F.1 VLV_DETERMINANTE_38 tmpf698
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag698
    SELECTF flag698 0.0 tmpf698 F.0

    CALL ARRAYSTORE_FLOAT 6.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 3.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf707
    DATA8 flag707
    DIVF F.1 VLV_DETERMINANTE_38 tmpf707
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag707
    SELECTF flag707 0.0 tmpf707 F.0

    CALL ARRAYSTORE_FLOAT 7.0 F.0 VLV_S_38
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_38
    CALL ARRAYGET_FLOAT 4.0 F.4 VLV_M_38
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_M_38
    CALL ARRAYGET_FLOAT 3.0 F.5 VLV_M_38
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf716
    DATA8 flag716
    DIVF F.1 VLV_DETERMINANTE_38 tmpf716
    CP_EQF 0.0 VLV_DETERMINANTE_38 flag716
    SELECTF flag716 0.0 tmpf716 F.0

    CALL ARRAYSTORE_FLOAT 8.0 F.0 VLV_S_38
  else636_1:
  endif636:
RETSUB_F_INVMATVECT3X3_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_INVMATVECT3X3_2:
SUB_F_MULTIMATRIZCOEF_3:
    MOVEF_F 0.0 VLV_I_39
  while718:
    CALL ARRAYGET_FLOAT VLV_I_39 F.0 VLV_M_39
    JR_EQF F.0 0.0 endwhile718
  whilebody718:
    CALL ARRAYGET_FLOAT VLV_I_39 F.1 VLV_M_39
    MULF VLV_K_39 F.1 F.0
    CALL ARRAYSTORE_FLOAT VLV_I_39 F.0 VLV_S_39
    ADDF VLV_I_39 1.0 VLV_I_39
    CALL ARRAYGET_FLOAT VLV_I_39 F.0 VLV_M_39
    JR_NEQF F.0 0.0 whilebody718
  endwhile718:
RETSUB_F_MULTIMATRIZCOEF_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MULTIMATRIZCOEF_3:
SUB_F_BMOVEA_2:
    SUBF VLV_DEGREES_40 VGV_ANGLE_A VLV_ROTATION_40
    MATH ABS VLV_ROTATION_40 F.0
    DATAF tmpf727
    DATA8 flag727
    DIVF F.0 VLV_ROTATION_40 tmpf727
    CP_EQF 0.0 VLV_ROTATION_40 flag727
    SELECTF flag727 0.0 tmpf727 VLV_SIGN_40

    MOVEF_F 0.0 VLV_PROGRESS_40
    MULF VLV_DEGREES_PER_SECOND_40 VLV_SIGN_40 F.0
    DATAF tmpf729
    DATA8 flag729
    DIVF F.0 50.0 tmpf729
    CP_EQF 0.0 50.0 flag729
    SELECTF flag729 0.0 tmpf729 VLV_DEGREES_PER_INTERVAL_40

  while730:
    SUBF VLV_ROTATION_40 VLV_PROGRESS_40 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile730
  whilebody730:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_40 VGV_ANGLE_A
    ADDF VLV_PROGRESS_40 VLV_DEGREES_PER_INTERVAL_40 VLV_PROGRESS_40
    DATA32 milliseconds735
	MOVEF_32 1.0 milliseconds735
	DATA32 timer735
	TIMER_WAIT milliseconds735 timer735
	TIMER_READY timer735
    SUBF VLV_ROTATION_40 VLV_PROGRESS_40 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody730
  endwhile730:
    MOVEF_F VLV_DEGREES_40 VGV_ANGLE_A
RETSUB_F_BMOVEA_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA_2:
SUB_F_BMOVED_2:
    MULF VLV_DEGREES_42 VGV_SENTIDO_D VLV_DEGREES_42
    SUBF VLV_DEGREES_42 VGV_ANGLE_D VLV_ROTATION_42
    MATH ABS VLV_ROTATION_42 F.0
    DATAF tmpf741
    DATA8 flag741
    DIVF F.0 VLV_ROTATION_42 tmpf741
    CP_EQF 0.0 VLV_ROTATION_42 flag741
    SELECTF flag741 0.0 tmpf741 VLV_SIGN_42

    MOVEF_F 0.0 VLV_PROGRESS_42
    MULF VLV_DEGREES_PER_SECOND_42 VLV_SIGN_42 F.0
    DATAF tmpf743
    DATA8 flag743
    DIVF F.0 50.0 tmpf743
    CP_EQF 0.0 50.0 flag743
    SELECTF flag743 0.0 tmpf743 VLV_DEGREES_PER_INTERVAL_42

  while744:
    SUBF VLV_ROTATION_42 VLV_PROGRESS_42 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile744
  whilebody744:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_42 VGV_ANGLE_D
    ADDF VLV_PROGRESS_42 VLV_DEGREES_PER_INTERVAL_42 VLV_PROGRESS_42
    DATA32 milliseconds749
	MOVEF_32 1.0 milliseconds749
	DATA32 timer749
	TIMER_WAIT milliseconds749 timer749
	TIMER_READY timer749
    SUBF VLV_ROTATION_42 VLV_PROGRESS_42 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody744
  endwhile744:
    MOVEF_F VLV_DEGREES_42 VGV_ANGLE_D
RETSUB_F_BMOVED_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED_2:
SUB_F_BMOVEAD_4:
    MULF VLV_DEGREES_D_43 VGV_SENTIDO_D VLV_DEGREES_D_43
  while753:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_43 or754
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_43 endwhile753
  or754:
  whilebody753:
    MATH ROUND VGV_ANGLE_A F.0
    SUBF VLV_DEGREES_A_43 5.0 F.1
    JR_GTEQF F.0 F.1 else755_1
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_43 else755_1
    DATAF tmpf759
    DATA8 flag759
    DIVF VLV_DEGREES_PER_SECOND_A_43 2.0 tmpf759
    CP_EQF 0.0 2.0 flag759
    SELECTF flag759 0.0 tmpf759 F.3

    SUBF VLV_DEGREES_A_43 VGV_ANGLE_A F.5
    DATAF tmpf761
    DATA8 flag761
    DIVF F.5 10.0 tmpf761
    CP_EQF 0.0 10.0 flag761
    SELECTF flag761 0.0 tmpf761 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag763
	CP_LTF VLV_DEGREES_PER_SECOND_A_43 F.2 flag763
	SELECTF flag763 VLV_DEGREES_PER_SECOND_A_43 F.2 F.1
    DATAF tmpf764
    DATA8 flag764
    DIVF F.1 50.0 tmpf764
    CP_EQF 0.0 50.0 flag764
    SELECTF flag764 0.0 tmpf764 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif755
  else755_1:
    MATH ROUND VGV_ANGLE_A F.0
    ADDF VLV_DEGREES_A_43 5.0 F.1
    JR_LTEQF F.0 F.1 else755_2
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_43 else755_2
    DATAF tmpf769
    DATA8 flag769
    DIVF VLV_DEGREES_PER_SECOND_A_43 2.0 tmpf769
    CP_EQF 0.0 2.0 flag769
    SELECTF flag769 0.0 tmpf769 F.3

    SUBF VLV_DEGREES_A_43 VGV_ANGLE_A F.5
    DATAF tmpf771
    DATA8 flag771
    DIVF F.5 10.0 tmpf771
    CP_EQF 0.0 10.0 flag771
    SELECTF flag771 0.0 tmpf771 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag773
	CP_GTF VLV_DEGREES_PER_SECOND_A_43 F.2 flag773
	SELECTF flag773 VLV_DEGREES_PER_SECOND_A_43 F.2 F.1
    DATAF tmpf774
    DATA8 flag774
    DIVF F.1 50.0 tmpf774
    CP_EQF 0.0 50.0 flag774
    SELECTF flag774 0.0 tmpf774 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif755
  else755_2:
    MOVEF_F VLV_DEGREES_A_43 VGV_ANGLE_A
  else755_3:
  endif755:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_43 else776_1
    DATAF tmpf778
    DATA8 flag778
    DIVF VLV_DEGREES_PER_SECOND_D_43 2.0 tmpf778
    CP_EQF 0.0 2.0 flag778
    SELECTF flag778 0.0 tmpf778 F.3

    SUBF VLV_DEGREES_D_43 VGV_ANGLE_D F.5
    DATAF tmpf780
    DATA8 flag780
    DIVF F.5 10.0 tmpf780
    CP_EQF 0.0 10.0 flag780
    SELECTF flag780 0.0 tmpf780 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag782
	CP_LTF VLV_DEGREES_PER_SECOND_D_43 F.2 flag782
	SELECTF flag782 VLV_DEGREES_PER_SECOND_D_43 F.2 F.1
    DATAF tmpf783
    DATA8 flag783
    DIVF F.1 50.0 tmpf783
    CP_EQF 0.0 50.0 flag783
    SELECTF flag783 0.0 tmpf783 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif776
  else776_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_43 else776_2
    DATAF tmpf786
    DATA8 flag786
    DIVF VLV_DEGREES_PER_SECOND_D_43 2.0 tmpf786
    CP_EQF 0.0 2.0 flag786
    SELECTF flag786 0.0 tmpf786 F.3

    SUBF VLV_DEGREES_D_43 VGV_ANGLE_D F.5
    DATAF tmpf788
    DATA8 flag788
    DIVF F.5 10.0 tmpf788
    CP_EQF 0.0 10.0 flag788
    SELECTF flag788 0.0 tmpf788 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag790
	CP_GTF VLV_DEGREES_PER_SECOND_D_43 F.2 flag790
	SELECTF flag790 VLV_DEGREES_PER_SECOND_D_43 F.2 F.1
    DATAF tmpf791
    DATA8 flag791
    DIVF F.1 50.0 tmpf791
    CP_EQF 0.0 50.0 flag791
    SELECTF flag791 0.0 tmpf791 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif776
  else776_2:
    MOVEF_F VLV_DEGREES_D_43 VGV_ANGLE_D
  else776_3:
  endif776:
    DATA32 milliseconds793
	MOVEF_32 1.0 milliseconds793
	DATA32 timer793
	TIMER_WAIT milliseconds793 timer793
	TIMER_READY timer793
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_43 whilebody753
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_43 whilebody753
  endwhile753:
    MOVEF_F VLV_DEGREES_A_43 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_43 VGV_ANGLE_D
RETSUB_F_BMOVEAD_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD_4:
SUB_F_BMOVEA0_1:
    MOVEF_F 0.0 VLV_DEGREES_44
    SUBF VLV_DEGREES_44 VGV_ANGLE_A VLV_ROTATION_44
    MATH ABS VLV_ROTATION_44 F.0
    DATAF tmpf796
    DATA8 flag796
    DIVF F.0 VLV_ROTATION_44 tmpf796
    CP_EQF 0.0 VLV_ROTATION_44 flag796
    SELECTF flag796 0.0 tmpf796 VLV_SIGN_44

    MOVEF_F 0.0 VLV_PROGRESS_44
    MULF VLV_DEGREES_PER_SECOND_44 VLV_SIGN_44 F.0
    DATAF tmpf798
    DATA8 flag798
    DIVF F.0 50.0 tmpf798
    CP_EQF 0.0 50.0 flag798
    SELECTF flag798 0.0 tmpf798 VLV_DEGREES_PER_INTERVAL_44

  while799:
    SUBF VLV_ROTATION_44 VLV_PROGRESS_44 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile799
  whilebody799:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_44 VGV_ANGLE_A
    ADDF VLV_PROGRESS_44 VLV_DEGREES_PER_INTERVAL_44 VLV_PROGRESS_44
    DATA32 milliseconds804
	MOVEF_32 1.0 milliseconds804
	DATA32 timer804
	TIMER_WAIT milliseconds804 timer804
	TIMER_READY timer804
    SUBF VLV_ROTATION_44 VLV_PROGRESS_44 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody799
  endwhile799:
    MOVEF_F VLV_DEGREES_44 VGV_ANGLE_A
RETSUB_F_BMOVEA0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA0_1:
SUB_F_BMOVED0_1:
    MOVEF_F 0.0 VLV_DEGREES_45
    SUBF VLV_DEGREES_45 VGV_ANGLE_D VLV_ROTATION_45
    MATH ABS VLV_ROTATION_45 F.0
    DATAF tmpf809
    DATA8 flag809
    DIVF F.0 VLV_ROTATION_45 tmpf809
    CP_EQF 0.0 VLV_ROTATION_45 flag809
    SELECTF flag809 0.0 tmpf809 VLV_SIGN_45

    MOVEF_F 0.0 VLV_PROGRESS_45
    MULF VLV_DEGREES_PER_SECOND_45 VLV_SIGN_45 F.0
    DATAF tmpf811
    DATA8 flag811
    DIVF F.0 50.0 tmpf811
    CP_EQF 0.0 50.0 flag811
    SELECTF flag811 0.0 tmpf811 VLV_DEGREES_PER_INTERVAL_45

  while812:
    SUBF VLV_ROTATION_45 VLV_PROGRESS_45 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile812
  whilebody812:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_45 VGV_ANGLE_D
    ADDF VLV_PROGRESS_45 VLV_DEGREES_PER_INTERVAL_45 VLV_PROGRESS_45
    DATA32 milliseconds817
	MOVEF_32 1.0 milliseconds817
	DATA32 timer817
	TIMER_WAIT milliseconds817 timer817
	TIMER_READY timer817
    SUBF VLV_ROTATION_45 VLV_PROGRESS_45 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody812
  endwhile812:
    MOVEF_F VLV_DEGREES_45 VGV_ANGLE_D
RETSUB_F_BMOVED0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED0_1:
SUB_F_BMOVEAD0_2:
    MOVEF_F 0.0 VLV_DEGREES_A_46
    MOVEF_F 0.0 VLV_DEGREES_D_46
  while820:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_46 or821
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_46 endwhile820
  or821:
  whilebody820:
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_46 else822_1
    DATAF tmpf824
    DATA8 flag824
    DIVF VLV_DEGREES_PER_SECOND_A_46 2.0 tmpf824
    CP_EQF 0.0 2.0 flag824
    SELECTF flag824 0.0 tmpf824 F.3

    SUBF VLV_DEGREES_A_46 VGV_ANGLE_A F.5
    DATAF tmpf826
    DATA8 flag826
    DIVF F.5 10.0 tmpf826
    CP_EQF 0.0 10.0 flag826
    SELECTF flag826 0.0 tmpf826 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag828
	CP_LTF VLV_DEGREES_PER_SECOND_A_46 F.2 flag828
	SELECTF flag828 VLV_DEGREES_PER_SECOND_A_46 F.2 F.1
    DATAF tmpf829
    DATA8 flag829
    DIVF F.1 50.0 tmpf829
    CP_EQF 0.0 50.0 flag829
    SELECTF flag829 0.0 tmpf829 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif822
  else822_1:
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_46 else822_2
    DATAF tmpf832
    DATA8 flag832
    DIVF VLV_DEGREES_PER_SECOND_A_46 2.0 tmpf832
    CP_EQF 0.0 2.0 flag832
    SELECTF flag832 0.0 tmpf832 F.3

    SUBF VLV_DEGREES_A_46 VGV_ANGLE_A F.5
    DATAF tmpf834
    DATA8 flag834
    DIVF F.5 10.0 tmpf834
    CP_EQF 0.0 10.0 flag834
    SELECTF flag834 0.0 tmpf834 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag836
	CP_GTF VLV_DEGREES_PER_SECOND_A_46 F.2 flag836
	SELECTF flag836 VLV_DEGREES_PER_SECOND_A_46 F.2 F.1
    DATAF tmpf837
    DATA8 flag837
    DIVF F.1 50.0 tmpf837
    CP_EQF 0.0 50.0 flag837
    SELECTF flag837 0.0 tmpf837 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif822
  else822_2:
    MOVEF_F VLV_DEGREES_A_46 VGV_ANGLE_A
  else822_3:
  endif822:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_46 else839_1
    DATAF tmpf841
    DATA8 flag841
    DIVF VLV_DEGREES_PER_SECOND_D_46 2.0 tmpf841
    CP_EQF 0.0 2.0 flag841
    SELECTF flag841 0.0 tmpf841 F.3

    SUBF VLV_DEGREES_D_46 VGV_ANGLE_D F.5
    DATAF tmpf843
    DATA8 flag843
    DIVF F.5 10.0 tmpf843
    CP_EQF 0.0 10.0 flag843
    SELECTF flag843 0.0 tmpf843 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag845
	CP_LTF VLV_DEGREES_PER_SECOND_D_46 F.2 flag845
	SELECTF flag845 VLV_DEGREES_PER_SECOND_D_46 F.2 F.1
    DATAF tmpf846
    DATA8 flag846
    DIVF F.1 50.0 tmpf846
    CP_EQF 0.0 50.0 flag846
    SELECTF flag846 0.0 tmpf846 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif839
  else839_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_46 else839_2
    DATAF tmpf849
    DATA8 flag849
    DIVF VLV_DEGREES_PER_SECOND_D_46 2.0 tmpf849
    CP_EQF 0.0 2.0 flag849
    SELECTF flag849 0.0 tmpf849 F.3

    SUBF VLV_DEGREES_D_46 VGV_ANGLE_D F.5
    DATAF tmpf851
    DATA8 flag851
    DIVF F.5 10.0 tmpf851
    CP_EQF 0.0 10.0 flag851
    SELECTF flag851 0.0 tmpf851 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag853
	CP_GTF VLV_DEGREES_PER_SECOND_D_46 F.2 flag853
	SELECTF flag853 VLV_DEGREES_PER_SECOND_D_46 F.2 F.1
    DATAF tmpf854
    DATA8 flag854
    DIVF F.1 50.0 tmpf854
    CP_EQF 0.0 50.0 flag854
    SELECTF flag854 0.0 tmpf854 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif839
  else839_2:
    MOVEF_F VLV_DEGREES_D_46 VGV_ANGLE_D
  else839_3:
  endif839:
    DATA32 milliseconds856
	MOVEF_32 1.0 milliseconds856
	DATA32 timer856
	TIMER_WAIT milliseconds856 timer856
	TIMER_READY timer856
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_46 whilebody820
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_46 whilebody820
  endwhile820:
    MOVEF_F VLV_DEGREES_A_46 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_46 VGV_ANGLE_D
RETSUB_F_BMOVEAD0_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD0_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall VECTOR.DATA       // FSA
{
	IN_F size
	IN_S d 252
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty
	ARRAY RESIZE a size32
	ARRAY FILL a 0.0

	DATAS d0 127        // 8bit-addressable data range
	DATAS d1 129
	DATA32 filled
	DATAF value
	DATA8 readidx
	DATA8 writeidx
	DATA8 c

	STRINGS DUPLICATE d d0

	MOVE32_32 0 filled
	MOVE8_8 -127 readidx

skipspaces:
	READ8 d1 readidx c
	ADD8 readidx 1 readidx
	JR_EQ8 c 0 done
	JR_EQ8 c 32 skipspaces
	
	MOVE8_8 -127 writeidx
copypart:
	WRITE8 c writeidx d1
	ADD8 writeidx 1 writeidx
	READ8 d1 readidx c
	ADD8 readidx 1 readidx
	JR_EQ8 c 0 lastnumber
	JR_NEQ8 c 32 copypart

	WRITE8 0 writeidx d1
	STRINGS STRING_TO_VALUE d0 value
	ARRAY_WRITE a filled value

	ADD32 filled 1 filled
	JR_LT32 filled size32 skipspaces
	RETURN

lastnumber:
	WRITE8 0 writeidx d1
	STRINGS STRING_TO_VALUE d0 value
	ARRAY_WRITE a filled value
done:
	RETURN
empty:
    ARRAY RESIZE a 0
}
subcall EV3.TIME  // F
{
	OUT_F time
	
	DATA32 ms
	DATAF thousand
	
	TIMER_READ ms
	MOVE32_F ms time	
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall VECTOR.ADD        // FAAA
{
	IN_F size
	IN_16 a
	IN_16 b
	IN_16 c

	DATA32 sizea
	DATA32 sizeb
	ARRAY SIZE a sizea
	ARRAY SIZE b sizeb

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty
	ARRAY RESIZE c size32

	DATA32 i
	MOVE32_32 0 i
loop:
	DATAF sum
	DATAf tmp
	MOVEF_F 0.0 sum
	JR_GTEQ32 i sizea a_too_small
	ARRAY_READ a i sum
a_too_small:
	JR_GTEQ32 i sizeb b_too_small
	ARRAY_READ b i tmp
	ADDF sum tmp sum
b_too_small:
    ARRAY_WRITE c i sum

	ADD32 i 1 i
	JR_LT32 i size32 loop
loopend:
	RETURN

empty:
    ARRAY RESIZE c 0
}
subcall VECTOR.MULTIPLY    // FFFAAA
{
	IN_F _N        // number of rows in result matrix
	IN_F _M        // number of columns in result matrix
	IN_F _K        // second dimension of A and B
	IN_16 A        // matrix of N rows, K columns
	IN_16 B        // matrix of K rows, M columns
	IN_16 C        // result-matrix of N rows, M columns
	DATA32 N
	DATA32 M
	DATA32 K
	MOVEF_32 _N N
	MOVEF_32 _M M
	MOVEF_32 _K K

	// get input matrix sizes for quick retrieval
	DATA32 ALEN
	DATA32 BLEN
	ARRAY SIZE A ALEN
	ARRAY SIZE B BLEN

	// check if the numerical parameters make sense
	JR_LTEQ32 N 0 outputempty
	JR_LTEQ32 M 0 outputempty

	// compute number of elements to compute
	DATA32 MN
	DATA32 KM
	MUL32 M N MN
	MUL32 K M KM

	// check if the K value is at least 1 (otherwise can perform no multiplication)
	JR_GT32 K 0 notallzero
	ARRAY RESIZE C MN
	ARRAY FILL C 0.0
	RETURN
notallzero:

	// check if the output should be written into one of the input matrizes -
	// need to create temporary storage to hold data while computation runs
	DATA16 TARGET
	JR_EQ16 C A needtemporary
	JR_NEQ16 C B dontneedtemporary
needtemporary:
	// create computation target of correct size
	ARRAY CREATEF MN TARGET
	JR startcopy
dontneedtemporary:
	// set the result matrix to correct size
	ARRAY RESIZE C MN
	MOVE16_16 C TARGET

startcopy:
	DATA32 CIDX
	MOVE32_32 0 CIDX 
	DATA32 I
	MOVE32_32 0 I
loop_rows:	
	DATA32 J
	MOVE32_32 0 J
loop_columns:
    DATAF SUM
	MOVEF_F 0.0 SUM

    DATA32 AIDX 
	MUL32 I K AIDX
	DATA32 BIDX
	MOVE32_32 J BIDX
loop_scalarproduct:
	DATAF TMP
	DATAF PROD
	JR_GTEQ32 AIDX ALEN nosourceelements
	JR_GTEQ32 BIDX BLEN nosourceelements
	ARRAY_READ A AIDX PROD
	ARRAY_READ B BIDX TMP
    MULF PROD TMP PROD
	ADDF SUM PROD SUM
	ADD32 AIDX 1 AIDX
	ADD32 BIDX M BIDX
	JR_LT32 BIDX KM loop_scalarproduct
nosourceelements:

	ARRAY_WRITE TARGET CIDX SUM
	ADD32 CIDX 1 CIDX

	ADD32 J 1 J 
	JR_LT32 J M loop_columns
	ADD32 I 1 I
	JR_LT32 I N loop_rows

	// check if need to store temporay data to output
	JR_EQ16 C TARGET notemporary
	ARRAY COPY TARGET C
	ARRAY DELETE TARGET
notemporary:
	RETURN

outputempty:
	ARRAY RESIZE C 0
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
