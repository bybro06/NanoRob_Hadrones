DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEGREES_PER_SECOND_A_7
DATAF VLV_DEGREES_PER_SECOND_D_7
DATAF VLV_DEGREES_A_7
DATAF VLV_DEGREES_D_7
DATAF VLV_DEGREES_PER_SECOND_9
DATAF VLV_DEGREES_PER_SECOND_6
DATAF VLV_DEGREES_6
DATAF VLV_DEGREES_PER_SECOND_4
DATAF VLV_DEGREES_4
DATAF VLV_DEGREES_PER_SECOND_8
DATAF VGV_CENTRO
DATAF VGV_XTIME
DATAF VGV_YTIME
DATAF VGV_THETATIME
DATAF VGV_SENTIDO_D
DATAF VGV_ANGLE_A
DATAF VGV_ANGLE_D
ARRAY16 VGV_ALPHA_L 2
ARRAY16 VGV_ALPHA_R 2
DATAF VGV_OLDB
DATAF VGV_OLDC
ARRAY16 VGV_XT 2
ARRAY16 VGV_YT 2
ARRAY16 VGV_THETAT 2
DATAF VGV_I
DATAF VGV_DW
DATAF VGV_DIAMETER
DATAF VGV_D_L
DATAF VGV_D_R
DATAF VGV_D
DATAF VGV_DELTA_THETA
DATAF VGV_KP_A
DATAF VGV_KI_A
DATAF VGV_KD_A
DATAF VGV_KP_D
DATAF VGV_KI_D
DATAF VGV_KD_D
DATAF VGV_ERROR_A
DATAF VGV_ERROR_D
DATAF VGV_ERRSUM_A
DATAF VGV_ERRSUM_D
DATAF VGV_OLDERROR_A
DATAF VGV_OLDERROR_D
DATAF VGV_U_A
DATAF VGV_U_D
DATAF VLV_ROTATION_4
DATAF VLV_SIGN_4
DATAF VLV_PROGRESS_4
DATAF VLV_DEGREES_PER_INTERVAL_4
DATAF VLV_ROTATION_6
DATAF VLV_SIGN_6
DATAF VLV_PROGRESS_6
DATAF VLV_DEGREES_PER_INTERVAL_6
DATAF VLV_DEGREES_8
DATAF VLV_ROTATION_8
DATAF VLV_SIGN_8
DATAF VLV_PROGRESS_8
DATAF VLV_DEGREES_PER_INTERVAL_8
DATAF VLV_DEGREES_9
DATAF VLV_ROTATION_9
DATAF VLV_SIGN_9
DATAF VLV_PROGRESS_9
DATAF VLV_DEGREES_PER_INTERVAL_9
DATA32 RUNCOUNTER_F_PIDCONTROL_AD_0
DATA32 RUNCOUNTER_F_ODOMETRY_0
DATA32 RUNCOUNTER_F_DISPLAY_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_7
    MOVEF_F 0.0 VLV_DEGREES_A_7
    MOVEF_F 0.0 VLV_DEGREES_D_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_6
    MOVEF_F 0.0 VLV_DEGREES_6
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F 0.0 VLV_DEGREES_4
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_8
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_L
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYCREATE_FLOAT VGV_XT
    CALL ARRAYCREATE_FLOAT VGV_YT
    CALL ARRAYCREATE_FLOAT VGV_THETAT
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_L
    MOVEF_F 0.0 VGV_D_R
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_DELTA_THETA
    MOVEF_F 0.0 VGV_KP_A
    MOVEF_F 0.0 VGV_KI_A
    MOVEF_F 0.0 VGV_KD_A
    MOVEF_F 0.0 VGV_KP_D
    MOVEF_F 0.0 VGV_KI_D
    MOVEF_F 0.0 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    MOVEF_F 0.0 VLV_ROTATION_4
    MOVEF_F 0.0 VLV_SIGN_4
    MOVEF_F 0.0 VLV_PROGRESS_4
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_4
    MOVEF_F 0.0 VLV_ROTATION_6
    MOVEF_F 0.0 VLV_SIGN_6
    MOVEF_F 0.0 VLV_PROGRESS_6
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_6
    MOVEF_F 0.0 VLV_DEGREES_8
    MOVEF_F 0.0 VLV_ROTATION_8
    MOVEF_F 0.0 VLV_SIGN_8
    MOVEF_F 0.0 VLV_PROGRESS_8
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_8
    MOVEF_F 0.0 VLV_DEGREES_9
    MOVEF_F 0.0 VLV_ROTATION_9
    MOVEF_F 0.0 VLV_SIGN_9
    MOVEF_F 0.0 VLV_PROGRESS_9
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_9
    MOVE32_32 0 RUNCOUNTER_F_PIDCONTROL_AD_0
    MOVE32_32 0 RUNCOUNTER_F_ODOMETRY_0
    MOVE32_32 0 RUNCOUNTER_F_DISPLAY_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_PIDCONTROL_AD_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_PIDCONTROL_AD_0 0
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 -1 RUNCOUNTER_F_PIDCONTROL_AD_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_ODOMETRY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_ODOMETRY_0 1
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 -1 RUNCOUNTER_F_ODOMETRY_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_DISPLAY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_DISPLAY_0 2
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 -1 RUNCOUNTER_F_DISPLAY_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_PIDCONTROL_AD_0
subcall PROGRAM_F_ODOMETRY_0
subcall PROGRAM_F_DISPLAY_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    DATAF F.6
    DATAF F.7
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch234
    WRITE32 ENDSUB_F_PIDCONTROL_AD_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_PIDCONTROL_AD_0
  dispatch234:
    JR_NEQ32 SUBPROGRAM 1 dispatch235
    WRITE32 ENDSUB_F_ODOMETRY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ODOMETRY_0
  dispatch235:
    JR_NEQ32 SUBPROGRAM 2 dispatch236
    WRITE32 ENDSUB_F_DISPLAY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DISPLAY_0
  dispatch236:
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_7
    MOVEF_F 0.0 VLV_DEGREES_A_7
    MOVEF_F 0.0 VLV_DEGREES_D_7
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_6
    MOVEF_F 0.0 VLV_DEGREES_6
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F 0.0 VLV_DEGREES_4
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_8
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 1.0 VGV_SENTIDO_D
    WRITE32 ENDSUB_F_STARTARM_0:CALLSUB0 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STARTARM_0
CALLSUB0:
    DATA32 tmp1
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 1  RUNCOUNTER_F_PIDCONTROL_AD_0 tmp1
    JR_NEQ32 0 tmp1 alreadylaunched1
    OBJECT_START TF_PIDCONTROL_AD_0
  alreadylaunched1:
    DATA32 tmp2
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 1  RUNCOUNTER_F_ODOMETRY_0 tmp2
    JR_NEQ32 0 tmp2 alreadylaunched2
    OBJECT_START TF_ODOMETRY_0
  alreadylaunched2:
    DATA32 tmp3
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 1  RUNCOUNTER_F_DISPLAY_0 tmp3
    JR_NEQ32 0 tmp3 alreadylaunched3
    OBJECT_START TF_DISPLAY_0
  alreadylaunched3:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB4 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB4:
    DATA32 milliseconds5
	MOVEF_32 10000.0 milliseconds5
	DATA32 timer5
	TIMER_WAIT milliseconds5 timer5
	TIMER_READY timer5
ENDTHREAD:
    RETURN
SUB_F_STARTARM_0:
    MOVEF_F 200.0 VLV_DEGREES_PER_SECOND_A_7
    MOVEF_F 200.0 VLV_DEGREES_PER_SECOND_D_7
    MOVEF_F -200.0 VLV_DEGREES_A_7
    MOVEF_F 200.0 VLV_DEGREES_D_7
    WRITE32 ENDSUB_F_BMOVEAD_4:CALLSUB6 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD_4
CALLSUB6:
    DATA32 milliseconds7
	MOVEF_32 1000.0 milliseconds7
	DATA32 timer7
	TIMER_WAIT milliseconds7 timer7
	TIMER_READY timer7
    CALL MOTOR.RESETCOUNT 'A'
    CALL MOTOR.RESETCOUNT 'D'
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    TIMER_READ timeMC1
  while11:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 500.0 endwhile11
  whilebody11:
    ADDF VGV_ANGLE_D 1.0 VGV_ANGLE_D
    DATA32 milliseconds14
	MOVEF_32 5.0 milliseconds14
	DATA32 timer14
	TIMER_WAIT milliseconds14 timer14
	TIMER_READY timer14
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 500.0 whilebody11
  endwhile11:
    CALL MOTOR.GETCOUNT 'D' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 60.0 else16_1
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_9
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB19 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB19:
    MOVEF_F 1.0 VGV_SENTIDO_D
    JR endif16
  else16_1:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_9
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB20 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB20:
    MOVEF_F -1.0 VGV_SENTIDO_D
  else16_2:
  endif16:
    DATA32 milliseconds21
	MOVEF_32 100.0 milliseconds21
	DATA32 timer21
	TIMER_WAIT milliseconds21 timer21
	TIMER_READY timer21
RETSUB_F_STARTARM_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STARTARM_0:
SUB_F_ODOMETRY_0:
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_XT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_YT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_THETAT
    MOVEF_F 0.0 VGV_I
  while27:
  whilebody27:
    MOVEF_F 84.5 VGV_DW
    MOVEF_F 56.0 VGV_DIAMETER
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_L
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_R
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_L
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_L
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf39
    DATA8 flag39
    DIVF F.0 2.0 tmpf39
    CP_EQF 0.0 2.0 flag39
    SELECTF flag39 0.0 tmpf39 VGV_D_L

    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_R
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_R
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf45
    DATA8 flag45
    DIVF F.0 2.0 tmpf45
    CP_EQF 0.0 2.0 flag45
    SELECTF flag45 0.0 tmpf45 VGV_D_R

    ADDF VGV_D_L VGV_D_R F.0
    DATAF tmpf47
    DATA8 flag47
    DIVF F.0 2.0 tmpf47
    CP_EQF 0.0 2.0 flag47
    SELECTF flag47 0.0 tmpf47 VGV_D

    SUBF VGV_D_R VGV_D_L F.0
    MULF 2.0 VGV_DW F.1
    DATAF tmpf50
    DATA8 flag50
    DIVF F.0 F.1 tmpf50
    CP_EQF 0.0 F.1 flag50
    SELECTF flag50 0.0 tmpf50 VGV_DELTA_THETA

    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf53
    DATA8 flag53
    DIVF VGV_DELTA_THETA 2.0 tmpf53
    CP_EQF 0.0 2.0 flag53
    SELECTF flag53 0.0 tmpf53 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf55
	MULF F.5 57.295779513082  tmpf55
	MATH SIN  tmpf55 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_XT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_XT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf63
    DATA8 flag63
    DIVF VGV_DELTA_THETA 2.0 tmpf63
    CP_EQF 0.0 2.0 flag63
    SELECTF flag63 0.0 tmpf63 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf65
	MULF F.5 57.295779513082 tmpf65
	MATH COS tmpf65 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_YT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_YT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_THETAT
    ADDF F.2 VGV_DELTA_THETA F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_THETAT
    CALL ARRAYGET_FLOAT VGV_I VGV_XTIME VGV_XT
    CALL ARRAYGET_FLOAT VGV_I VGV_YTIME VGV_YT
    CALL ARRAYGET_FLOAT VGV_I VGV_THETATIME VGV_THETAT
    ADDF VGV_I 1.0 VGV_I
    DATA32 milliseconds79
	MOVEF_32 10.0 milliseconds79
	DATA32 timer79
	TIMER_WAIT milliseconds79 timer79
	TIMER_READY timer79
    JR whilebody27
  endwhile27:
RETSUB_F_ODOMETRY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ODOMETRY_0:
SUB_F_PIDCONTROL_AD_0:
    MOVEF_F 0.5 VGV_KP_A
    MOVEF_F 0.0001 VGV_KI_A
    MOVEF_F 0.1 VGV_KD_A
    MOVEF_F 0.5 VGV_KP_D
    MOVEF_F 0.0001 VGV_KI_D
    MOVEF_F 0.1 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
  while80:
  whilebody80:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    SUBF VGV_ANGLE_A F.0 VGV_ERROR_A
    ADDF VGV_ERRSUM_A VGV_ERROR_A VGV_ERRSUM_A
    MULF VGV_ERROR_A VGV_KP_A F.1
    MULF VGV_ERRSUM_A VGV_KI_A F.3
    DATAF tmpf86
    DATA8 flag86
    DIVF F.3 1.0 tmpf86
    CP_EQF 0.0 1.0 flag86
    SELECTF flag86 0.0 tmpf86 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_A VGV_OLDERROR_A F.2
    MULF F.2 VGV_KD_A F.1
    ADDF F.0 F.1 VGV_U_A
    MOVEF_8 VGV_U_A setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    SUBF VGV_ANGLE_D F.0 VGV_ERROR_D
    ADDF VGV_ERRSUM_D VGV_ERROR_D VGV_ERRSUM_D
    MULF VGV_ERROR_D VGV_KP_D F.1
    MULF VGV_ERRSUM_D VGV_KI_D F.3
    DATAF tmpf97
    DATA8 flag97
    DIVF F.3 1.0 tmpf97
    CP_EQF 0.0 1.0 flag97
    SELECTF flag97 0.0 tmpf97 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_D VGV_OLDERROR_D F.3
    MULF F.3 VGV_KD_D F.2
    MULF F.2 VGV_SENTIDO_D F.1
    ADDF F.0 F.1 VGV_U_D
    MOVEF_8 VGV_U_D setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    JR whilebody80
  endwhile80:
RETSUB_F_PIDCONTROL_AD_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_PIDCONTROL_AD_0:
SUB_F_DISPLAY_0:
    MOVE32_32 1 STOPLCDUPDATE
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VGV_I F.0 VGV_XT
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'xt: ' S.1 S.0
    CALL LCD.WRITE 5.0 5.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.0 VGV_YT
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'yt: ' S.1 S.0
    CALL LCD.WRITE 5.0 15.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.1 VGV_THETAT
    MULF F.1 57.295779513082 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'thetat: ' S.1 S.0
    CALL LCD.WRITE 5.0 25.0 S.0
    STRINGS VALUE_FORMATTED VGV_CENTRO '%g' 99 S.1
    CALL TEXT.APPEND 'centro: ' S.1 S.0
    CALL LCD.WRITE 5.0 35.0 S.0
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Angulo de A:  ' S.1 S.0
    CALL LCD.WRITE 5.0 65.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGLE_A '%g' 99 S.1
    CALL TEXT.APPEND 'Obj de A:  ' S.1 S.0
    CALL LCD.WRITE 5.0 75.0 S.0
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Angulo de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 85.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGLE_D '%g' 99 S.1
    CALL TEXT.APPEND 'Obj de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 95.0 S.0
    MOVE32_32 0 STOPLCDUPDATE
	UI_DRAW UPDATE
RETSUB_F_DISPLAY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DISPLAY_0:
SUB_F_MAIN_0:
    MOVEF_F 180.0 VLV_DEGREES_PER_SECOND_6
    MOVEF_F 160.0 VLV_DEGREES_6
    WRITE32 ENDSUB_F_BMOVED_2:CALLSUB137 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED_2
CALLSUB137:
    MOVEF_F 360.0 VLV_DEGREES_PER_SECOND_4
    MOVEF_F 180.0 VLV_DEGREES_4
    WRITE32 ENDSUB_F_BMOVEA_2:CALLSUB138 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA_2
CALLSUB138:
    DATA32 milliseconds139
	MOVEF_32 3000.0 milliseconds139
	DATA32 timer139
	TIMER_WAIT milliseconds139 timer139
	TIMER_READY timer139
    MOVEF_F 180.0 VLV_DEGREES_PER_SECOND_8
    WRITE32 ENDSUB_F_BMOVEA0_1:CALLSUB140 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA0_1
CALLSUB140:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_BMOVEA_2:
    SUBF VLV_DEGREES_4 VGV_ANGLE_A VLV_ROTATION_4
    MATH ABS VLV_ROTATION_4 F.0
    DATAF tmpf143
    DATA8 flag143
    DIVF F.0 VLV_ROTATION_4 tmpf143
    CP_EQF 0.0 VLV_ROTATION_4 flag143
    SELECTF flag143 0.0 tmpf143 VLV_SIGN_4

    MOVEF_F 0.0 VLV_PROGRESS_4
    MULF VLV_DEGREES_PER_SECOND_4 VLV_SIGN_4 F.0
    DATAF tmpf145
    DATA8 flag145
    DIVF F.0 50.0 tmpf145
    CP_EQF 0.0 50.0 flag145
    SELECTF flag145 0.0 tmpf145 VLV_DEGREES_PER_INTERVAL_4

  while146:
    SUBF VLV_ROTATION_4 VLV_PROGRESS_4 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile146
  whilebody146:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_4 VGV_ANGLE_A
    ADDF VLV_PROGRESS_4 VLV_DEGREES_PER_INTERVAL_4 VLV_PROGRESS_4
    DATA32 milliseconds151
	MOVEF_32 1.0 milliseconds151
	DATA32 timer151
	TIMER_WAIT milliseconds151 timer151
	TIMER_READY timer151
    SUBF VLV_ROTATION_4 VLV_PROGRESS_4 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody146
  endwhile146:
    MOVEF_F VLV_DEGREES_4 VGV_ANGLE_A
RETSUB_F_BMOVEA_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA_2:
SUB_F_BMOVED_2:
    SUBF VLV_DEGREES_6 VGV_ANGLE_D VLV_ROTATION_6
    MATH ABS VLV_ROTATION_6 F.0
    DATAF tmpf156
    DATA8 flag156
    DIVF F.0 VLV_ROTATION_6 tmpf156
    CP_EQF 0.0 VLV_ROTATION_6 flag156
    SELECTF flag156 0.0 tmpf156 VLV_SIGN_6

    MOVEF_F 0.0 VLV_PROGRESS_6
    MULF VLV_DEGREES_PER_SECOND_6 VLV_SIGN_6 F.0
    DATAF tmpf158
    DATA8 flag158
    DIVF F.0 50.0 tmpf158
    CP_EQF 0.0 50.0 flag158
    SELECTF flag158 0.0 tmpf158 VLV_DEGREES_PER_INTERVAL_6

  while159:
    SUBF VLV_ROTATION_6 VLV_PROGRESS_6 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile159
  whilebody159:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_6 VGV_ANGLE_D
    ADDF VLV_PROGRESS_6 VLV_DEGREES_PER_INTERVAL_6 VLV_PROGRESS_6
    DATA32 milliseconds164
	MOVEF_32 1.0 milliseconds164
	DATA32 timer164
	TIMER_WAIT milliseconds164 timer164
	TIMER_READY timer164
    SUBF VLV_ROTATION_6 VLV_PROGRESS_6 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody159
  endwhile159:
    MOVEF_F VLV_DEGREES_6 VGV_ANGLE_D
RETSUB_F_BMOVED_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED_2:
SUB_F_BMOVEAD_4:
  while167:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_7 or168
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_7 endwhile167
  or168:
  whilebody167:
    MATH ROUND VGV_ANGLE_A F.0
    SUBF VLV_DEGREES_A_7 5.0 F.1
    JR_GTEQF F.0 F.1 else169_1
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_7 else169_1
    DATAF tmpf173
    DATA8 flag173
    DIVF VLV_DEGREES_PER_SECOND_A_7 2.0 tmpf173
    CP_EQF 0.0 2.0 flag173
    SELECTF flag173 0.0 tmpf173 F.3

    SUBF VLV_DEGREES_A_7 VGV_ANGLE_A F.5
    DATAF tmpf175
    DATA8 flag175
    DIVF F.5 10.0 tmpf175
    CP_EQF 0.0 10.0 flag175
    SELECTF flag175 0.0 tmpf175 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag177
	CP_LTF VLV_DEGREES_PER_SECOND_A_7 F.2 flag177
	SELECTF flag177 VLV_DEGREES_PER_SECOND_A_7 F.2 F.1
    DATAF tmpf178
    DATA8 flag178
    DIVF F.1 50.0 tmpf178
    CP_EQF 0.0 50.0 flag178
    SELECTF flag178 0.0 tmpf178 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif169
  else169_1:
    MATH ROUND VGV_ANGLE_A F.0
    ADDF VLV_DEGREES_A_7 5.0 F.1
    JR_LTEQF F.0 F.1 else169_2
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_7 else169_2
    DATAF tmpf183
    DATA8 flag183
    DIVF VLV_DEGREES_PER_SECOND_A_7 2.0 tmpf183
    CP_EQF 0.0 2.0 flag183
    SELECTF flag183 0.0 tmpf183 F.3

    SUBF VLV_DEGREES_A_7 VGV_ANGLE_A F.5
    DATAF tmpf185
    DATA8 flag185
    DIVF F.5 10.0 tmpf185
    CP_EQF 0.0 10.0 flag185
    SELECTF flag185 0.0 tmpf185 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag187
	CP_GTF VLV_DEGREES_PER_SECOND_A_7 F.2 flag187
	SELECTF flag187 VLV_DEGREES_PER_SECOND_A_7 F.2 F.1
    DATAF tmpf188
    DATA8 flag188
    DIVF F.1 50.0 tmpf188
    CP_EQF 0.0 50.0 flag188
    SELECTF flag188 0.0 tmpf188 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif169
  else169_2:
    MOVEF_F VLV_DEGREES_A_7 VGV_ANGLE_A
  else169_3:
  endif169:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_7 else190_1
    DATAF tmpf192
    DATA8 flag192
    DIVF VLV_DEGREES_PER_SECOND_D_7 2.0 tmpf192
    CP_EQF 0.0 2.0 flag192
    SELECTF flag192 0.0 tmpf192 F.3

    SUBF VLV_DEGREES_D_7 VGV_ANGLE_D F.5
    DATAF tmpf194
    DATA8 flag194
    DIVF F.5 10.0 tmpf194
    CP_EQF 0.0 10.0 flag194
    SELECTF flag194 0.0 tmpf194 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag196
	CP_LTF VLV_DEGREES_PER_SECOND_D_7 F.2 flag196
	SELECTF flag196 VLV_DEGREES_PER_SECOND_D_7 F.2 F.1
    DATAF tmpf197
    DATA8 flag197
    DIVF F.1 50.0 tmpf197
    CP_EQF 0.0 50.0 flag197
    SELECTF flag197 0.0 tmpf197 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif190
  else190_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_7 else190_2
    DATAF tmpf200
    DATA8 flag200
    DIVF VLV_DEGREES_PER_SECOND_D_7 2.0 tmpf200
    CP_EQF 0.0 2.0 flag200
    SELECTF flag200 0.0 tmpf200 F.3

    SUBF VLV_DEGREES_D_7 VGV_ANGLE_D F.5
    DATAF tmpf202
    DATA8 flag202
    DIVF F.5 10.0 tmpf202
    CP_EQF 0.0 10.0 flag202
    SELECTF flag202 0.0 tmpf202 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag204
	CP_GTF VLV_DEGREES_PER_SECOND_D_7 F.2 flag204
	SELECTF flag204 VLV_DEGREES_PER_SECOND_D_7 F.2 F.1
    DATAF tmpf205
    DATA8 flag205
    DIVF F.1 50.0 tmpf205
    CP_EQF 0.0 50.0 flag205
    SELECTF flag205 0.0 tmpf205 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif190
  else190_2:
    MOVEF_F VLV_DEGREES_D_7 VGV_ANGLE_D
  else190_3:
  endif190:
    DATA32 milliseconds207
	MOVEF_32 1.0 milliseconds207
	DATA32 timer207
	TIMER_WAIT milliseconds207 timer207
	TIMER_READY timer207
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_7 whilebody167
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_7 whilebody167
  endwhile167:
    MOVEF_F VLV_DEGREES_A_7 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_7 VGV_ANGLE_D
RETSUB_F_BMOVEAD_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD_4:
SUB_F_BMOVEA0_1:
    MOVEF_F 0.0 VLV_DEGREES_8
    SUBF VLV_DEGREES_8 VGV_ANGLE_A VLV_ROTATION_8
    MATH ABS VLV_ROTATION_8 F.0
    DATAF tmpf210
    DATA8 flag210
    DIVF F.0 VLV_ROTATION_8 tmpf210
    CP_EQF 0.0 VLV_ROTATION_8 flag210
    SELECTF flag210 0.0 tmpf210 VLV_SIGN_8

    MOVEF_F 0.0 VLV_PROGRESS_8
    MULF VLV_DEGREES_PER_SECOND_8 VLV_SIGN_8 F.0
    DATAF tmpf212
    DATA8 flag212
    DIVF F.0 50.0 tmpf212
    CP_EQF 0.0 50.0 flag212
    SELECTF flag212 0.0 tmpf212 VLV_DEGREES_PER_INTERVAL_8

  while213:
    SUBF VLV_ROTATION_8 VLV_PROGRESS_8 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile213
  whilebody213:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_8 VGV_ANGLE_A
    ADDF VLV_PROGRESS_8 VLV_DEGREES_PER_INTERVAL_8 VLV_PROGRESS_8
    DATA32 milliseconds218
	MOVEF_32 1.0 milliseconds218
	DATA32 timer218
	TIMER_WAIT milliseconds218 timer218
	TIMER_READY timer218
    SUBF VLV_ROTATION_8 VLV_PROGRESS_8 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody213
  endwhile213:
    MOVEF_F VLV_DEGREES_8 VGV_ANGLE_A
RETSUB_F_BMOVEA0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA0_1:
SUB_F_BMOVED0_1:
    MOVEF_F 0.0 VLV_DEGREES_9
    SUBF VLV_DEGREES_9 VGV_ANGLE_D VLV_ROTATION_9
    MATH ABS VLV_ROTATION_9 F.0
    DATAF tmpf223
    DATA8 flag223
    DIVF F.0 VLV_ROTATION_9 tmpf223
    CP_EQF 0.0 VLV_ROTATION_9 flag223
    SELECTF flag223 0.0 tmpf223 VLV_SIGN_9

    MOVEF_F 0.0 VLV_PROGRESS_9
    MULF VLV_DEGREES_PER_SECOND_9 VLV_SIGN_9 F.0
    DATAF tmpf225
    DATA8 flag225
    DIVF F.0 50.0 tmpf225
    CP_EQF 0.0 50.0 flag225
    SELECTF flag225 0.0 tmpf225 VLV_DEGREES_PER_INTERVAL_9

  while226:
    SUBF VLV_ROTATION_9 VLV_PROGRESS_9 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile226
  whilebody226:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_9 VGV_ANGLE_D
    ADDF VLV_PROGRESS_9 VLV_DEGREES_PER_INTERVAL_9 VLV_PROGRESS_9
    DATA32 milliseconds231
	MOVEF_32 1.0 milliseconds231
	DATA32 timer231
	TIMER_WAIT milliseconds231 timer231
	TIMER_READY timer231
    SUBF VLV_ROTATION_9 VLV_PROGRESS_9 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody226
  endwhile226:
    MOVEF_F VLV_DEGREES_9 VGV_ANGLE_D
RETSUB_F_BMOVED0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED0_1:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
