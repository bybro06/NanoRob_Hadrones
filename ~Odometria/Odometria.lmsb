DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_VELOCIDAD_1
DATAF VLV_X_1
DATAF VLV_Y_1
DATAF VLV_THETA_1
DATAF VGV_CENTRO
DATAF VGV_XTIME
DATAF VGV_YTIME
DATAF VGV_THETATIME
ARRAY16 VGV_ALPHA_L 2
ARRAY16 VGV_ALPHA_R 2
DATAF VGV_OLDB
DATAF VGV_OLDC
ARRAY16 VGV_XT 2
ARRAY16 VGV_YT 2
ARRAY16 VGV_THETAT 2
DATAF VGV_I
DATAF VGV_DW
DATAF VGV_DIAMETER
DATAF VGV_D_L
DATAF VGV_D_R
DATAF VGV_D
DATAF VGV_DELTA_THETA
DATAS VLV_I_1 252
DATAS VLV_D_1 252
DATAF VLV_G1_1
DATAF VLV_SIGNO_1
DATAF VLV_DIFF_X_1
DATAF VLV_DIFF_Y_1
DATAF VLV_ANGULO_GIRO_INICIAL_1
DATAF VLV_V1_1
DATAF VLV_V2_1
DATAF VLV_VMIN_1
DATAF VLV_VMAX_1
DATAF VLV_ENCODR_1
DATAF VLV_DISTANCIA_1
DATAF VLV_ENC_1
DATAF VLV_ANGULO_GIRO_FINAL_1
DATA32 RUNCOUNTER_F_ODOMETRY_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_X_1
    MOVEF_F 0.0 VLV_Y_1
    MOVEF_F 0.0 VLV_THETA_1
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_L
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYCREATE_FLOAT VGV_XT
    CALL ARRAYCREATE_FLOAT VGV_YT
    CALL ARRAYCREATE_FLOAT VGV_THETAT
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_L
    MOVEF_F 0.0 VGV_D_R
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_DELTA_THETA
    STRINGS DUPLICATE '' VLV_I_1
    STRINGS DUPLICATE '' VLV_D_1
    MOVEF_F 0.0 VLV_G1_1
    MOVEF_F 0.0 VLV_SIGNO_1
    MOVEF_F 0.0 VLV_DIFF_X_1
    MOVEF_F 0.0 VLV_DIFF_Y_1
    MOVEF_F 0.0 VLV_ANGULO_GIRO_INICIAL_1
    MOVEF_F 0.0 VLV_V1_1
    MOVEF_F 0.0 VLV_V2_1
    MOVEF_F 0.0 VLV_VMIN_1
    MOVEF_F 0.0 VLV_VMAX_1
    MOVEF_F 0.0 VLV_ENCODR_1
    MOVEF_F 0.0 VLV_DISTANCIA_1
    MOVEF_F 0.0 VLV_ENC_1
    MOVEF_F 0.0 VLV_ANGULO_GIRO_FINAL_1
    MOVE32_32 0 RUNCOUNTER_F_ODOMETRY_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_ODOMETRY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_ODOMETRY_0 0
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 -1 RUNCOUNTER_F_ODOMETRY_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_ODOMETRY_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    DATAF F.6
    DATAF F.7
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch157
    WRITE32 ENDSUB_F_ODOMETRY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ODOMETRY_0
  dispatch157:
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_X_1
    MOVEF_F 0.0 VLV_Y_1
    MOVEF_F 0.0 VLV_THETA_1
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    DATA32 tmp0
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 1  RUNCOUNTER_F_ODOMETRY_0 tmp0
    JR_NEQ32 0 tmp0 alreadylaunched0
    OBJECT_START TF_ODOMETRY_0
  alreadylaunched0:
    MOVEF_F 40.0 VLV_VELOCIDAD_1
    MOVEF_F -100.0 VLV_X_1
    MOVEF_F 300.0 VLV_Y_1
    MOVEF_F 90.0 VLV_THETA_1
    WRITE32 ENDSUB_F_TOXY_4:CALLSUB1 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOXY_4
CALLSUB1:
    DATA32 milliseconds2
	MOVEF_32 30000.0 milliseconds2
	DATA32 timer2
	TIMER_WAIT milliseconds2 timer2
	TIMER_READY timer2
ENDTHREAD:
    RETURN
SUB_F_ODOMETRY_0:
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_XT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_YT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_THETAT
    MOVEF_F 0.0 VGV_I
  while8:
  whilebody8:
    MOVEF_F 84.5 VGV_DW
    MOVEF_F 56.0 VGV_DIAMETER
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_L
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_R
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_L
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_L
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf20
    DATA8 flag20
    DIVF F.0 2.0 tmpf20
    CP_EQF 0.0 2.0 flag20
    SELECTF flag20 0.0 tmpf20 VGV_D_L

    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_R
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_R
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf26
    DATA8 flag26
    DIVF F.0 2.0 tmpf26
    CP_EQF 0.0 2.0 flag26
    SELECTF flag26 0.0 tmpf26 VGV_D_R

    ADDF VGV_D_L VGV_D_R F.0
    DATAF tmpf28
    DATA8 flag28
    DIVF F.0 2.0 tmpf28
    CP_EQF 0.0 2.0 flag28
    SELECTF flag28 0.0 tmpf28 VGV_D

    SUBF VGV_D_R VGV_D_L F.0
    MULF 2.0 VGV_DW F.1
    DATAF tmpf31
    DATA8 flag31
    DIVF F.0 F.1 tmpf31
    CP_EQF 0.0 F.1 flag31
    SELECTF flag31 0.0 tmpf31 VGV_DELTA_THETA

    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf34
    DATA8 flag34
    DIVF VGV_DELTA_THETA 2.0 tmpf34
    CP_EQF 0.0 2.0 flag34
    SELECTF flag34 0.0 tmpf34 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf36
	MULF F.5 57.295779513082  tmpf36
	MATH SIN  tmpf36 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_XT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_XT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf44
    DATA8 flag44
    DIVF VGV_DELTA_THETA 2.0 tmpf44
    CP_EQF 0.0 2.0 flag44
    SELECTF flag44 0.0 tmpf44 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf46
	MULF F.5 57.295779513082 tmpf46
	MATH COS tmpf46 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_YT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_YT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_THETAT
    ADDF F.2 VGV_DELTA_THETA F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_THETAT
    CALL ARRAYGET_FLOAT VGV_I VGV_XTIME VGV_XT
    CALL ARRAYGET_FLOAT VGV_I VGV_YTIME VGV_YT
    CALL ARRAYGET_FLOAT VGV_I VGV_THETATIME VGV_THETAT
    ADDF VGV_I 1.0 VGV_I
    MOVE32_32 1 STOPLCDUPDATE
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VGV_I F.0 VGV_XT
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'xt: ' S.1 S.0
    CALL LCD.WRITE 5.0 5.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.0 VGV_YT
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'yt: ' S.1 S.0
    CALL LCD.WRITE 5.0 15.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.1 VGV_THETAT
    MULF F.1 57.295779513082 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'thetat: ' S.1 S.0
    CALL LCD.WRITE 5.0 25.0 S.0
    STRINGS VALUE_FORMATTED VGV_CENTRO '%g' 99 S.1
    CALL TEXT.APPEND 'centro: ' S.1 S.0
    CALL LCD.WRITE 5.0 35.0 S.0
    MOVE32_32 0 STOPLCDUPDATE
	UI_DRAW UPDATE
    DATA32 milliseconds79
	MOVEF_32 10.0 milliseconds79
	DATA32 timer79
	TIMER_WAIT milliseconds79 timer79
	TIMER_READY timer79
    JR whilebody8
  endwhile8:
RETSUB_F_ODOMETRY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ODOMETRY_0:
SUB_F_TOXY_4:
    STRINGS DUPLICATE 'B' VLV_I_1
    STRINGS DUPLICATE 'C' VLV_D_1
    MOVEF_F 3.05555555555556 VLV_G1_1
    MOVEF_F -1.0 VLV_SIGNO_1
    SUBF VLV_X_1 VGV_XTIME VLV_DIFF_X_1
    SUBF VLV_Y_1 VGV_YTIME VLV_DIFF_Y_1
    SUBF VLV_X_1 VGV_XTIME F.2
    SUBF VLV_Y_1 VGV_YTIME F.3
    DATAF tmpf84
    DATA8 flag84
    DIVF F.2 F.3 tmpf84
    CP_EQF 0.0 F.3 flag84
    SELECTF flag84 0.0 tmpf84 F.1

    DATAF tmpf85
	MATH ATAN F.1 tmpf85
	DIVF tmpf85 57.295779513082 F.0
    MULF F.0 57.295779513082 VLV_ANGULO_GIRO_INICIAL_1
    JR_LTEQF VLV_ANGULO_GIRO_INICIAL_1 0.0 else87_1
    MOVEF_F VLV_VELOCIDAD_1 VLV_V1_1
    MULF VLV_VELOCIDAD_1 -1.0 VLV_V2_1
    JR endif87
  else87_1:
    MULF VLV_VELOCIDAD_1 -1.0 VLV_V1_1
    MOVEF_F VLV_VELOCIDAD_1 VLV_V2_1
  else87_2:
  endif87:
    MATH ABS VLV_V1_1 F.0
    MATH ABS VLV_V2_1 F.1
    DATA8 flag92
	CP_LTF F.0 F.1 flag92
	SELECTF flag92 F.0 F.1 VLV_VMIN_1
    MATH ABS VLV_V1_1 F.0
    MATH ABS VLV_V2_1 F.1
    DATA8 flag95
	CP_GTF F.0 F.1 flag95
	SELECTF flag95 F.0 F.1 VLV_VMAX_1
    DATAF tmpf96
    DATA8 flag96
    DIVF VLV_VMIN_1 VLV_VMAX_1 tmpf96
    CP_EQF 0.0 VLV_VMAX_1 flag96
    SELECTF flag96 0.0 tmpf96 F.3

    MULF -8.5 F.3 F.2
    MULF F.2 VLV_SIGNO_1 F.1
    SUBF F.1 8.5 F.0
    DATAF tmpf100
    DATA8 flag100
    DIVF VLV_VMIN_1 VLV_VMAX_1 tmpf100
    CP_EQF 0.0 VLV_VMAX_1 flag100
    SELECTF flag100 0.0 tmpf100 F.3

    MULF F.3 VLV_SIGNO_1 F.2
    SUBF F.2 1.0 F.1
    DATAF tmpf103
    DATA8 flag103
    DIVF F.0 F.1 tmpf103
    CP_EQF 0.0 F.1 flag103
    SELECTF flag103 0.0 tmpf103 VGV_CENTRO

    MULF VLV_ANGULO_GIRO_INICIAL_1 VLV_G1_1 F.0
    MULF VLV_SIGNO_1 VLV_VMIN_1 F.4
    DATAF tmpf106
    DATA8 flag106
    DIVF F.4 VLV_VMAX_1 tmpf106
    CP_EQF 0.0 VLV_VMAX_1 flag106
    SELECTF flag106 0.0 tmpf106 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf108
    DATA8 flag108
    DIVF -2.0 F.2 tmpf108
    CP_EQF 0.0 F.2 flag108
    SELECTF flag108 0.0 tmpf108 F.1

    MULF F.0 F.1 VLV_ENCODR_1
    CALL TEXT.APPEND VLV_I_1 VLV_D_1 S.0
    MATH NEGATE VLV_V1_1 F.1
    DATAF tmpf112
    DATA8 flag112
    DIVF F.1 3.0 tmpf112
    CP_EQF 0.0 3.0 flag112
    SELECTF flag112 0.0 tmpf112 F.0

    MATH NEGATE VLV_V2_1 F.2
    DATAF tmpf114
    DATA8 flag114
    DIVF F.2 3.0 tmpf114
    CP_EQF 0.0 3.0 flag114
    SELECTF flag114 0.0 tmpf114 F.1

    CALL MOTOR.SCHEDULESYNC S.0 F.0 F.1 VLV_ENCODR_1 'True'

	DATA8 layer115
	DATA8 nos115
	DATA8 busy115
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer115 nos115
	JR_EQ8 0 nos115 motornotbusy115
  motorwaiting115:
	OUTPUT_TEST layer115 nos115 busy115
	JR_EQ8 busy115 0 motornotbusy115
	SLEEP
	JR motorwaiting115
  motornotbusy115:
    MULF VLV_DIFF_X_1 VLV_DIFF_X_1 F.1
    MULF VLV_DIFF_Y_1 VLV_DIFF_Y_1 F.2
    ADDF F.1 F.2 F.0
    MATH SQRT F.0 VLV_DISTANCIA_1
    MULF VLV_DISTANCIA_1 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf122
    DATA8 flag122
    DIVF F.1 F.2 tmpf122
    CP_EQF 0.0 F.2 flag122
    SELECTF flag122 0.0 tmpf122 F.0

    DATAF tmpf123
    DATA8 flag123
    DIVF F.0 VGV_DIAMETER tmpf123
    CP_EQF 0.0 VGV_DIAMETER flag123
    SELECTF flag123 0.0 tmpf123 VLV_ENC_1

    MATH NEGATE VLV_VELOCIDAD_1 F.0
    CALL MOTOR.SCHEDULE 'BC' F.0 0.0 VLV_ENC_1 0.0 'True' 

	DATA8 layer125
	DATA8 nos125
	DATA8 busy125
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer125 nos125
	JR_EQ8 0 nos125 motornotbusy125
  motorwaiting125:
	OUTPUT_TEST layer125 nos125 busy125
	JR_EQ8 busy125 0 motornotbusy125
	SLEEP
	JR motorwaiting125
  motornotbusy125:
    MULF VGV_THETATIME 57.295779513082 F.0
    SUBF VLV_THETA_1 F.0 VLV_ANGULO_GIRO_FINAL_1
    JR_LTEQF VLV_ANGULO_GIRO_FINAL_1 0.0 else128_1
    MOVEF_F VLV_VELOCIDAD_1 VLV_V1_1
    MULF VLV_VELOCIDAD_1 -1.0 VLV_V2_1
    JR endif128
  else128_1:
    MULF VLV_VELOCIDAD_1 -1.0 VLV_V1_1
    MOVEF_F VLV_VELOCIDAD_1 VLV_V2_1
  else128_2:
  endif128:
    MATH ABS VLV_V1_1 F.0
    MATH ABS VLV_V2_1 F.1
    DATA8 flag133
	CP_LTF F.0 F.1 flag133
	SELECTF flag133 F.0 F.1 VLV_VMIN_1
    MATH ABS VLV_V1_1 F.0
    MATH ABS VLV_V2_1 F.1
    DATA8 flag136
	CP_GTF F.0 F.1 flag136
	SELECTF flag136 F.0 F.1 VLV_VMAX_1
    DATAF tmpf137
    DATA8 flag137
    DIVF VLV_VMIN_1 VLV_VMAX_1 tmpf137
    CP_EQF 0.0 VLV_VMAX_1 flag137
    SELECTF flag137 0.0 tmpf137 F.3

    MULF -8.5 F.3 F.2
    MULF F.2 VLV_SIGNO_1 F.1
    SUBF F.1 8.5 F.0
    DATAF tmpf141
    DATA8 flag141
    DIVF VLV_VMIN_1 VLV_VMAX_1 tmpf141
    CP_EQF 0.0 VLV_VMAX_1 flag141
    SELECTF flag141 0.0 tmpf141 F.3

    MULF F.3 VLV_SIGNO_1 F.2
    SUBF F.2 1.0 F.1
    DATAF tmpf144
    DATA8 flag144
    DIVF F.0 F.1 tmpf144
    CP_EQF 0.0 F.1 flag144
    SELECTF flag144 0.0 tmpf144 VGV_CENTRO

    MULF VLV_ANGULO_GIRO_FINAL_1 VLV_G1_1 F.0
    MULF VLV_SIGNO_1 VLV_VMIN_1 F.4
    DATAF tmpf147
    DATA8 flag147
    DIVF F.4 VLV_VMAX_1 tmpf147
    CP_EQF 0.0 VLV_VMAX_1 flag147
    SELECTF flag147 0.0 tmpf147 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf149
    DATA8 flag149
    DIVF -2.0 F.2 tmpf149
    CP_EQF 0.0 F.2 flag149
    SELECTF flag149 0.0 tmpf149 F.1

    MULF F.0 F.1 VLV_ENCODR_1
    CALL TEXT.APPEND VLV_I_1 VLV_D_1 S.0
    MATH NEGATE VLV_V1_1 F.1
    DATAF tmpf153
    DATA8 flag153
    DIVF F.1 2.0 tmpf153
    CP_EQF 0.0 2.0 flag153
    SELECTF flag153 0.0 tmpf153 F.0

    MATH NEGATE VLV_V2_1 F.2
    DATAF tmpf155
    DATA8 flag155
    DIVF F.2 2.0 tmpf155
    CP_EQF 0.0 2.0 flag155
    SELECTF flag155 0.0 tmpf155 F.1

    CALL MOTOR.SCHEDULESYNC S.0 F.0 F.1 VLV_ENCODR_1 'True'

	DATA8 layer156
	DATA8 nos156
	DATA8 busy156
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer156 nos156
	JR_EQ8 0 nos156 motornotbusy156
  motorwaiting156:
	OUTPUT_TEST layer156 nos156 busy156
	JR_EQ8 busy156 0 motornotbusy156
	SLEEP
	JR motorwaiting156
  motornotbusy156:
RETSUB_F_TOXY_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TOXY_4:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
