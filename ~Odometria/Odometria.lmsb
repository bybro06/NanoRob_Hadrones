DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEGREES_PER_SECOND_48
DATAF VLV_DEGREES_PER_SECOND_47
DATAF VLV_OMEGAI_K1_33
DATAF VLV_OMEGAD_K1_33
DATAF VLV_V1_35
DATAF VLV_V2_35
DATAF VLV_ANGLE_35
DATAF VLV_DEGREES_PER_SECOND_45
DATAF VLV_DEGREES_45
DATAF VLV_VELOCIDAD_19
DATAF VLV_DISTANCIA_19
DATAF VLV_DEGREES_PER_SECOND_43
DATAF VLV_DEGREES_43
DATAF VLV_DEGREES_PER_SECOND_A_46
DATAF VLV_DEGREES_PER_SECOND_D_46
DATAF VLV_DEGREES_A_46
DATAF VLV_DEGREES_D_46
DATAF VLV_DEGREES_PER_SECOND_A_49
DATAF VLV_DEGREES_PER_SECOND_D_49
DATAF VLV_V0_14
DATAF VLV_VMAX_14
DATAF VLV_KP_14
DATAF VLV_KI_14
DATAF VLV_KD_14
DATAF VLV_ACCELENCODER_14
ARRAY16 VLV_M_39 2
ARRAY16 VLV_S_39 2
ARRAY16 VLV_M_42 2
ARRAY16 VLV_S_42 2
ARRAY16 VLV_V_33 2
ARRAY16 VLV_DH_T_33 2
ARRAY16 VLV_S_INV_33 2
DATAF VGV_CENTRO
DATAF VGV_XTIME
DATAF VGV_YTIME
DATAF VGV_THETATIME
DATAF VGV_XTCORRECT
DATAF VGV_YTCORRECT
DATAF VGV_THETATCORRECT
DATAF VGV_SENTIDO_D
DATAF VGV_DW
DATAF VGV_DIAMETER
DATAF VGV_D_T
DATAF VGV_SENTIDO_MOTORES
DATAF VGV_ANGLE_A
DATAF VGV_ANGLE_D
ARRAY16 VGV_ALPHA_L 2
ARRAY16 VGV_ALPHA_R 2
DATAF VGV_OLDB
DATAF VGV_OLDC
ARRAY16 VGV_XT 2
ARRAY16 VGV_YT 2
ARRAY16 VGV_THETAT 2
DATAF VGV_I
DATAF VGV_D_L
DATAF VGV_D_R
DATAF VGV_D
DATAF VGV_DELTA_THETA
DATAF VGV_KP_A
DATAF VGV_KI_A
DATAF VGV_KD_A
DATAF VGV_KP_D
DATAF VGV_KI_D
DATAF VGV_KD_D
DATAF VGV_ERROR_A
DATAF VGV_ERROR_D
DATAF VGV_ERRSUM_A
DATAF VGV_ERRSUM_D
DATAF VGV_OLDERROR_A
DATAF VGV_OLDERROR_D
DATAF VGV_U_A
DATAF VGV_U_D
DATAS VLV_I_14 252
DATAS VLV_D_14 252
DATAF VLV_U_14
DATAF VLV_ERROR_14
DATAF VLV_OLDERROR_14
DATAF VLV_ERRSUM_14
DATAF VLV_VEL_14
DATAF VLV_SENTIDO_14
DATAF VLV_DIAMETRO_19
DATAF VLV_ENC_19
DATAF VLV_START_B_19
DATAF VLV_START_C_19
DATAF VLV_ENCODER_C_19
DATAF VLV_ENCODER_B_19
DATAF VLV_ERROR_19
DATAF VLV_PROPORCIAL_19
DATAF VLV_RADIO_33
ARRAY16 VLV_I_33 2
ARRAY16 VLV_DF_K_33 2
ARRAY16 VLV_K_K1_33 2
ARRAY16 VLV_K1_K_33 2
DATAF VLV_DELTA_T_33
DATAF VLV_OLD_T_33
DATAF VLV_OLD_I_33
DATAF VLV_OLD_D_33
ARRAY16 VLV_F_K_33 2
ARRAY16 VLV_Q_K1_33 2
ARRAY16 VLV_U_33 2
ARRAY16 VLV_W_33 2
ARRAY16 VLV_P_K_K1_33 2
ARRAY16 VLV_H_33 2
ARRAY16 VLV_DH_33 2
ARRAY16 VLV_R_33 2
ARRAY16 VLV_Z_33 2
ARRAY16 VLV_MINUS_1_33 2
ARRAY16 VLV_MINUS_H_33 2
ARRAY16 VLV_Y_33 2
ARRAY16 VLV_S1_33 2
ARRAY16 VLV_S2_33 2
ARRAY16 VLV_S_33 2
ARRAY16 VLV_K1_33 2
ARRAY16 VLV_K_33 2
ARRAY16 VLV_KY_33 2
ARRAY16 VLV_KH_33 2
ARRAY16 VLV_MINUS_KH_33 2
ARRAY16 VLV_P1_33 2
ARRAY16 VLV_P_33 2
DATAS VLV_I_35 252
DATAS VLV_D_35 252
DATAF VLV_G1_35
DATAF VLV_SIGNO_35
DATAF VLV_VMIN_35
DATAF VLV_VMAX_35
DATAF VLV_ENCODR_35
DATAF VLV_DETERMINANTE_42
DATAF VLV_ROTATION_43
DATAF VLV_SIGN_43
DATAF VLV_PROGRESS_43
DATAF VLV_DEGREES_PER_INTERVAL_43
DATAF VLV_ROTATION_45
DATAF VLV_SIGN_45
DATAF VLV_PROGRESS_45
DATAF VLV_DEGREES_PER_INTERVAL_45
DATAF VLV_DEGREES_47
DATAF VLV_ROTATION_47
DATAF VLV_SIGN_47
DATAF VLV_PROGRESS_47
DATAF VLV_DEGREES_PER_INTERVAL_47
DATAF VLV_DEGREES_48
DATAF VLV_ROTATION_48
DATAF VLV_SIGN_48
DATAF VLV_PROGRESS_48
DATAF VLV_DEGREES_PER_INTERVAL_48
DATAF VLV_DEGREES_A_49
DATAF VLV_DEGREES_D_49
DATA32 RUNCOUNTER_F_PIDCONTROL_AD_0
DATA32 RUNCOUNTER_F_ODOMETRY_0
DATA32 RUNCOUNTER_F_DISPLAY_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_48
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_47
    MOVEF_F 0.0 VLV_OMEGAI_K1_33
    MOVEF_F 0.0 VLV_OMEGAD_K1_33
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 0.0 VLV_ANGLE_35
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_45
    MOVEF_F 0.0 VLV_DEGREES_45
    MOVEF_F 0.0 VLV_VELOCIDAD_19
    MOVEF_F 0.0 VLV_DISTANCIA_19
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_43
    MOVEF_F 0.0 VLV_DEGREES_43
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_46
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_46
    MOVEF_F 0.0 VLV_DEGREES_A_46
    MOVEF_F 0.0 VLV_DEGREES_D_46
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_49
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_49
    MOVEF_F 0.0 VLV_V0_14
    MOVEF_F 0.0 VLV_VMAX_14
    MOVEF_F 0.0 VLV_KP_14
    MOVEF_F 0.0 VLV_KI_14
    MOVEF_F 0.0 VLV_KD_14
    MOVEF_F 0.0 VLV_ACCELENCODER_14
    CALL ARRAYCREATE_FLOAT VLV_M_39
    CALL ARRAYCREATE_FLOAT VLV_S_39
    CALL ARRAYCREATE_FLOAT VLV_M_42
    CALL ARRAYCREATE_FLOAT VLV_S_42
    CALL ARRAYCREATE_FLOAT VLV_V_33
    CALL ARRAYCREATE_FLOAT VLV_DH_T_33
    CALL ARRAYCREATE_FLOAT VLV_S_INV_33
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F 0.0 VGV_SENTIDO_MOTORES
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_L
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYCREATE_FLOAT VGV_XT
    CALL ARRAYCREATE_FLOAT VGV_YT
    CALL ARRAYCREATE_FLOAT VGV_THETAT
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_D_L
    MOVEF_F 0.0 VGV_D_R
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_DELTA_THETA
    MOVEF_F 0.0 VGV_KP_A
    MOVEF_F 0.0 VGV_KI_A
    MOVEF_F 0.0 VGV_KD_A
    MOVEF_F 0.0 VGV_KP_D
    MOVEF_F 0.0 VGV_KI_D
    MOVEF_F 0.0 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    STRINGS DUPLICATE '' VLV_I_14
    STRINGS DUPLICATE '' VLV_D_14
    MOVEF_F 0.0 VLV_U_14
    MOVEF_F 0.0 VLV_ERROR_14
    MOVEF_F 0.0 VLV_OLDERROR_14
    MOVEF_F 0.0 VLV_ERRSUM_14
    MOVEF_F 0.0 VLV_VEL_14
    MOVEF_F 0.0 VLV_SENTIDO_14
    MOVEF_F 0.0 VLV_DIAMETRO_19
    MOVEF_F 0.0 VLV_ENC_19
    MOVEF_F 0.0 VLV_START_B_19
    MOVEF_F 0.0 VLV_START_C_19
    MOVEF_F 0.0 VLV_ENCODER_C_19
    MOVEF_F 0.0 VLV_ENCODER_B_19
    MOVEF_F 0.0 VLV_ERROR_19
    MOVEF_F 0.0 VLV_PROPORCIAL_19
    MOVEF_F 0.0 VLV_RADIO_33
    CALL ARRAYCREATE_FLOAT VLV_I_33
    CALL ARRAYCREATE_FLOAT VLV_DF_K_33
    CALL ARRAYCREATE_FLOAT VLV_K_K1_33
    CALL ARRAYCREATE_FLOAT VLV_K1_K_33
    MOVEF_F 0.0 VLV_DELTA_T_33
    MOVEF_F 0.0 VLV_OLD_T_33
    MOVEF_F 0.0 VLV_OLD_I_33
    MOVEF_F 0.0 VLV_OLD_D_33
    CALL ARRAYCREATE_FLOAT VLV_F_K_33
    CALL ARRAYCREATE_FLOAT VLV_Q_K1_33
    CALL ARRAYCREATE_FLOAT VLV_U_33
    CALL ARRAYCREATE_FLOAT VLV_W_33
    CALL ARRAYCREATE_FLOAT VLV_P_K_K1_33
    CALL ARRAYCREATE_FLOAT VLV_H_33
    CALL ARRAYCREATE_FLOAT VLV_DH_33
    CALL ARRAYCREATE_FLOAT VLV_R_33
    CALL ARRAYCREATE_FLOAT VLV_Z_33
    CALL ARRAYCREATE_FLOAT VLV_MINUS_1_33
    CALL ARRAYCREATE_FLOAT VLV_MINUS_H_33
    CALL ARRAYCREATE_FLOAT VLV_Y_33
    CALL ARRAYCREATE_FLOAT VLV_S1_33
    CALL ARRAYCREATE_FLOAT VLV_S2_33
    CALL ARRAYCREATE_FLOAT VLV_S_33
    CALL ARRAYCREATE_FLOAT VLV_K1_33
    CALL ARRAYCREATE_FLOAT VLV_K_33
    CALL ARRAYCREATE_FLOAT VLV_KY_33
    CALL ARRAYCREATE_FLOAT VLV_KH_33
    CALL ARRAYCREATE_FLOAT VLV_MINUS_KH_33
    CALL ARRAYCREATE_FLOAT VLV_P1_33
    CALL ARRAYCREATE_FLOAT VLV_P_33
    STRINGS DUPLICATE '' VLV_I_35
    STRINGS DUPLICATE '' VLV_D_35
    MOVEF_F 0.0 VLV_G1_35
    MOVEF_F 0.0 VLV_SIGNO_35
    MOVEF_F 0.0 VLV_VMIN_35
    MOVEF_F 0.0 VLV_VMAX_35
    MOVEF_F 0.0 VLV_ENCODR_35
    MOVEF_F 0.0 VLV_DETERMINANTE_42
    MOVEF_F 0.0 VLV_ROTATION_43
    MOVEF_F 0.0 VLV_SIGN_43
    MOVEF_F 0.0 VLV_PROGRESS_43
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_43
    MOVEF_F 0.0 VLV_ROTATION_45
    MOVEF_F 0.0 VLV_SIGN_45
    MOVEF_F 0.0 VLV_PROGRESS_45
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_45
    MOVEF_F 0.0 VLV_DEGREES_47
    MOVEF_F 0.0 VLV_ROTATION_47
    MOVEF_F 0.0 VLV_SIGN_47
    MOVEF_F 0.0 VLV_PROGRESS_47
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_47
    MOVEF_F 0.0 VLV_DEGREES_48
    MOVEF_F 0.0 VLV_ROTATION_48
    MOVEF_F 0.0 VLV_SIGN_48
    MOVEF_F 0.0 VLV_PROGRESS_48
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_48
    MOVEF_F 0.0 VLV_DEGREES_A_49
    MOVEF_F 0.0 VLV_DEGREES_D_49
    MOVE32_32 0 RUNCOUNTER_F_PIDCONTROL_AD_0
    MOVE32_32 0 RUNCOUNTER_F_ODOMETRY_0
    MOVE32_32 0 RUNCOUNTER_F_DISPLAY_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_PIDCONTROL_AD_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_PIDCONTROL_AD_0 0
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 -1 RUNCOUNTER_F_PIDCONTROL_AD_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_ODOMETRY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_ODOMETRY_0 1
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 -1 RUNCOUNTER_F_ODOMETRY_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_DISPLAY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_DISPLAY_0 2
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 -1 RUNCOUNTER_F_DISPLAY_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_PIDCONTROL_AD_0
subcall PROGRAM_F_ODOMETRY_0
subcall PROGRAM_F_DISPLAY_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    DATAF F.6
    DATAF F.7
    DATAF F.8
    DATAF F.9
    DATAF F.10
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch772
    WRITE32 ENDSUB_F_PIDCONTROL_AD_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_PIDCONTROL_AD_0
  dispatch772:
    JR_NEQ32 SUBPROGRAM 1 dispatch773
    WRITE32 ENDSUB_F_ODOMETRY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ODOMETRY_0
  dispatch773:
    JR_NEQ32 SUBPROGRAM 2 dispatch774
    WRITE32 ENDSUB_F_DISPLAY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DISPLAY_0
  dispatch774:
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_48
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_47
    MOVEF_F 0.0 VLV_OMEGAI_K1_33
    MOVEF_F 0.0 VLV_OMEGAD_K1_33
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 0.0 VLV_ANGLE_35
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_45
    MOVEF_F 0.0 VLV_DEGREES_45
    MOVEF_F 0.0 VLV_VELOCIDAD_19
    MOVEF_F 0.0 VLV_DISTANCIA_19
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_43
    MOVEF_F 0.0 VLV_DEGREES_43
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_46
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_46
    MOVEF_F 0.0 VLV_DEGREES_A_46
    MOVEF_F 0.0 VLV_DEGREES_D_46
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_49
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_49
    MOVEF_F 0.0 VLV_V0_14
    MOVEF_F 0.0 VLV_VMAX_14
    MOVEF_F 0.0 VLV_KP_14
    MOVEF_F 0.0 VLV_KI_14
    MOVEF_F 0.0 VLV_KD_14
    MOVEF_F 0.0 VLV_ACCELENCODER_14
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_39
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_M_42
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_42
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_V_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_DH_T_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_INV_33
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F 0.0 VGV_SENTIDO_MOTORES
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 1.0 VGV_SENTIDO_D
    MOVEF_F 84.5 VGV_DW
    MOVEF_F 56.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F -1.0 VGV_SENTIDO_MOTORES
    MOVEF_F -1.0 VGV_SENTIDO_MOTORES
    DATA8 layer7
	DATA8 no7
	DATA8 mode87
	
	MOVEF_8 1.0 no7
	SUB8 no7 1 no7
	DIV8 no7 4 layer7
	MATH MOD8 no7 4 no7

	MOVEF_8 0.0 mode87
	
	INPUT_DEVICE READY_RAW layer7 no7 0 mode87 0
    DATA8 layer8
	DATA8 no8
	DATA8 mode88
	
	MOVEF_8 2.0 no8
	SUB8 no8 1 no8
	DIV8 no8 4 layer8
	MATH MOD8 no8 4 no8

	MOVEF_8 1.0 mode88
	
	INPUT_DEVICE READY_RAW layer8 no8 0 mode88 0
    DATA8 layer9
	DATA8 no9	
	MOVEF_8 2.0 no9
	SUB8 no9 1 no9
	DIV8 no9 4 layer9
	MATH MOD8 no9 4 no9 
	INPUT_READY layer9 no9
    DATA32 tmp10
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 1  RUNCOUNTER_F_PIDCONTROL_AD_0 tmp10
    JR_NEQ32 0 tmp10 alreadylaunched10
    OBJECT_START TF_PIDCONTROL_AD_0
  alreadylaunched10:
    DATA32 tmp11
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 1  RUNCOUNTER_F_ODOMETRY_0 tmp11
    JR_NEQ32 0 tmp11 alreadylaunched11
    OBJECT_START TF_ODOMETRY_0
  alreadylaunched11:
    DATA32 tmp12
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 1  RUNCOUNTER_F_DISPLAY_0 tmp12
    JR_NEQ32 0 tmp12 alreadylaunched12
    OBJECT_START TF_DISPLAY_0
  alreadylaunched12:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB13 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB13:
    DATA32 milliseconds14
	MOVEF_32 10000.0 milliseconds14
	DATA32 timer14
	TIMER_WAIT milliseconds14 timer14
	TIMER_READY timer14
ENDTHREAD:
    RETURN
SUB_F_STARTARM_0:
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    TIMER_READ timeMC1
  while16:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 500.0 endwhile16
  whilebody16:
    ADDF VGV_ANGLE_D 1.0 VGV_ANGLE_D
    DATA32 milliseconds19
	MOVEF_32 3.0 milliseconds19
	DATA32 timer19
	TIMER_WAIT milliseconds19 timer19
	TIMER_READY timer19
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 500.0 whilebody16
  endwhile16:
    DATA32 milliseconds21
	MOVEF_32 500.0 milliseconds21
	DATA32 timer21
	TIMER_WAIT milliseconds21 timer21
	TIMER_READY timer21
    CALL MOTOR.GETCOUNT 'D' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 60.0 else22_1
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_48
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB25 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB25:
    MOVEF_F -1.0 VGV_SENTIDO_D
    JR endif22
  else22_1:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_48
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB26 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB26:
    MOVEF_F 1.0 VGV_SENTIDO_D
  else22_2:
  endif22:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_47
    WRITE32 ENDSUB_F_BMOVEA0_1:CALLSUB27 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA0_1
CALLSUB27:
    DATA32 milliseconds28
	MOVEF_32 100.0 milliseconds28
	DATA32 timer28
	TIMER_WAIT milliseconds28 timer28
	TIMER_READY timer28
RETSUB_F_STARTARM_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STARTARM_0:
SUB_F_ODOMETRY_0:
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_XT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_YT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_THETAT
    MOVEF_F 0.0 VGV_I
  while34:
  whilebody34:
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_L
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_R
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_L
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_L
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf46
    DATA8 flag46
    DIVF F.0 2.0 tmpf46
    CP_EQF 0.0 2.0 flag46
    SELECTF flag46 0.0 tmpf46 VGV_D_L

    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_R
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_R
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf52
    DATA8 flag52
    DIVF F.0 2.0 tmpf52
    CP_EQF 0.0 2.0 flag52
    SELECTF flag52 0.0 tmpf52 VGV_D_R

    ADDF VGV_D_L VGV_D_R F.0
    DATAF tmpf54
    DATA8 flag54
    DIVF F.0 2.0 tmpf54
    CP_EQF 0.0 2.0 flag54
    SELECTF flag54 0.0 tmpf54 VGV_D

    SUBF VGV_D_R VGV_D_L F.0
    MULF 2.0 VGV_DW F.1
    DATAF tmpf57
    DATA8 flag57
    DIVF F.0 F.1 tmpf57
    CP_EQF 0.0 F.1 flag57
    SELECTF flag57 0.0 tmpf57 VGV_DELTA_THETA

    JR_EQF VGV_XTCORRECT 0.0 else58_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_XTCORRECT VGV_XT
    MOVEF_F 0.0 VGV_XTCORRECT
    JR endif58
  else58_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf63
    DATA8 flag63
    DIVF VGV_DELTA_THETA 2.0 tmpf63
    CP_EQF 0.0 2.0 flag63
    SELECTF flag63 0.0 tmpf63 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf65
	MULF F.5 57.295779513082  tmpf65
	MATH SIN  tmpf65 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_XT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_XT
  else58_2:
  endif58:
    JR_EQF VGV_YTCORRECT 0.0 else71_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_YTCORRECT VGV_YT
    MOVEF_F 0.0 VGV_YTCORRECT
    JR endif71
  else71_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf76
    DATA8 flag76
    DIVF VGV_DELTA_THETA 2.0 tmpf76
    CP_EQF 0.0 2.0 flag76
    SELECTF flag76 0.0 tmpf76 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf78
	MULF F.5 57.295779513082 tmpf78
	MATH COS tmpf78 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_YT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_YT
  else71_2:
  endif71:
    JR_EQF VGV_THETATCORRECT 0.0 else84_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_THETATCORRECT VGV_THETAT
    MOVEF_F 0.0 VGV_THETATCORRECT
    JR endif84
  else84_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_THETAT
    ADDF F.2 VGV_DELTA_THETA F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_THETAT
  else84_2:
  endif84:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_XTIME VGV_XT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_YTIME VGV_YT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_THETATIME VGV_THETAT
    ADDF VGV_I 1.0 VGV_I
    DATA32 milliseconds98
	MOVEF_32 10.0 milliseconds98
	DATA32 timer98
	TIMER_WAIT milliseconds98 timer98
	TIMER_READY timer98
    JR whilebody34
  endwhile34:
RETSUB_F_ODOMETRY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ODOMETRY_0:
SUB_F_PIDCONTROL_AD_0:
    MOVEF_F 0.5 VGV_KP_A
    MOVEF_F 0.0001 VGV_KI_A
    MOVEF_F 0.1 VGV_KD_A
    MOVEF_F 0.5 VGV_KP_D
    MOVEF_F 0.0001 VGV_KI_D
    MOVEF_F 0.1 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
  while99:
  whilebody99:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    SUBF VGV_ANGLE_A F.0 VGV_ERROR_A
    ADDF VGV_ERRSUM_A VGV_ERROR_A VGV_ERRSUM_A
    MULF VGV_ERROR_A VGV_KP_A F.1
    MULF VGV_ERRSUM_A VGV_KI_A F.3
    DATAF tmpf105
    DATA8 flag105
    DIVF F.3 1.0 tmpf105
    CP_EQF 0.0 1.0 flag105
    SELECTF flag105 0.0 tmpf105 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_A VGV_OLDERROR_A F.2
    MULF F.2 VGV_KD_A F.1
    ADDF F.0 F.1 VGV_U_A
    MOVEF_8 VGV_U_A setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    SUBF VGV_ANGLE_D F.0 VGV_ERROR_D
    ADDF VGV_ERRSUM_D VGV_ERROR_D VGV_ERRSUM_D
    MULF VGV_ERROR_D VGV_KP_D F.1
    MULF VGV_ERRSUM_D VGV_KI_D F.3
    DATAF tmpf116
    DATA8 flag116
    DIVF F.3 1.0 tmpf116
    CP_EQF 0.0 1.0 flag116
    SELECTF flag116 0.0 tmpf116 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_D VGV_OLDERROR_D F.3
    MULF F.3 VGV_KD_D F.2
    MULF F.2 VGV_SENTIDO_D F.1
    ADDF F.0 F.1 VGV_U_D
    MOVEF_8 VGV_U_D setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    JR whilebody99
  endwhile99:
RETSUB_F_PIDCONTROL_AD_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_PIDCONTROL_AD_0:
SUB_F_DISPLAY_0:
  while123:
  whilebody123:
    MOVE32_32 1 STOPLCDUPDATE
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_XT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
    DATAF tmpf129
    DATA8 flag129
    DIVF F.1 100.0 tmpf129
    CP_EQF 0.0 100.0 flag129
    SELECTF flag129 0.0 tmpf129 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'xt: ' S.1 S.0
    CALL LCD.WRITE 5.0 5.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_YT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
    DATAF tmpf136
    DATA8 flag136
    DIVF F.1 100.0 tmpf136
    CP_EQF 0.0 100.0 flag136
    SELECTF flag136 0.0 tmpf136 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'yt: ' S.1 S.0
    CALL LCD.WRITE 5.0 15.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.1 VGV_THETAT
    MULF F.1 57.295779513082 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'thetat: ' S.1 S.0
    CALL LCD.WRITE 5.0 25.0 S.0
    STRINGS VALUE_FORMATTED VGV_CENTRO '%g' 99 S.1
    CALL TEXT.APPEND 'centro: ' S.1 S.0
    CALL LCD.WRITE 5.0 35.0 S.0
    STRINGS VALUE_FORMATTED VGV_D_T '%g' 99 S.1
    CALL TEXT.APPEND 'Delta T:  ' S.1 S.0
    CALL LCD.WRITE 5.0 45.0 S.0
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Angulo de A:  ' S.1 S.0
    CALL LCD.WRITE 5.0 75.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGLE_A '%g' 99 S.1
    CALL TEXT.APPEND 'Obj de A:  ' S.1 S.0
    CALL LCD.WRITE 5.0 85.0 S.0
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Angulo de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 95.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGLE_D '%g' 99 S.1
    CALL TEXT.APPEND 'Obj de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 105.0 S.0
    STRINGS VALUE_FORMATTED VGV_SENTIDO_D '%g' 99 S.1
    CALL TEXT.APPEND 'Sentido de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 115.0 S.0
    MOVE32_32 0 STOPLCDUPDATE
	UI_DRAW UPDATE
    DATA32 milliseconds169
	MOVEF_32 50.0 milliseconds169
	DATA32 timer169
	TIMER_WAIT milliseconds169 timer169
	TIMER_READY timer169
    JR whilebody123
  endwhile123:
RETSUB_F_DISPLAY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DISPLAY_0:
SUB_F_MAIN_0:
    MOVEF_F 1.0 VLV_OMEGAI_K1_33
    MOVEF_F 1.0 VLV_OMEGAD_K1_33
    WRITE32 ENDSUB_F_KALMAN_FILTER_2:CALLSUB170 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_KALMAN_FILTER_2
CALLSUB170:
    WRITE32 ENDSUB_F_STARTARM_0:CALLSUB171 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STARTARM_0
CALLSUB171:
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 20.0 VLV_V2_35
    MOVEF_F 40.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB172 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB172:
    MOVEF_F 20.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 40.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB173 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB173:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_45
    MOVEF_F 140.0 VLV_DEGREES_45
    WRITE32 ENDSUB_F_BMOVED_2:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED_2
CALLSUB174:
    MOVEF_F 30.0 VLV_VELOCIDAD_19
    MOVEF_F 80.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB175 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB175:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_48
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB176 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB176:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_43
    MOVEF_F 180.0 VLV_DEGREES_43
    WRITE32 ENDSUB_F_BMOVEA_2:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA_2
CALLSUB177:
    MOVEF_F -30.0 VLV_VELOCIDAD_19
    MOVEF_F 30.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB178:
    MOVEF_F 20.0 VLV_V1_35
    MOVEF_F -20.0 VLV_V2_35
    MOVEF_F 60.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB179 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB179:
    MOVEF_F 30.0 VLV_VELOCIDAD_19
    MOVEF_F 60.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB180 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB180:
    MOVEF_F -20.0 VLV_V1_35
    MOVEF_F 20.0 VLV_V2_35
    MOVEF_F 55.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB181 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB181:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_A_46
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_D_46
    MOVEF_F 60.0 VLV_DEGREES_A_46
    MOVEF_F 160.0 VLV_DEGREES_D_46
    WRITE32 ENDSUB_F_BMOVEAD_4:CALLSUB182 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD_4
CALLSUB182:
    DATA32 milliseconds183
	MOVEF_32 1000.0 milliseconds183
	DATA32 timer183
	TIMER_WAIT milliseconds183 timer183
	TIMER_READY timer183
    MOVEF_F -30.0 VLV_VELOCIDAD_19
    MOVEF_F 200.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB184 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB184:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_A_49
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_D_49
    WRITE32 ENDSUB_F_BMOVEAD0_2:CALLSUB185 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD0_2
CALLSUB185:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_SL14SICF_6:
    STRINGS DUPLICATE 'B' VLV_I_14
    STRINGS DUPLICATE 'C' VLV_D_14
    MOVEF_F 3.1415926535897932384 F.2
    MULF 56.0 F.2 F.1
    DATAF tmpf188
    DATA8 flag188
    DIVF VLV_ACCELENCODER_14 F.1 tmpf188
    CP_EQF 0.0 F.1 flag188
    SELECTF flag188 0.0 tmpf188 F.0

    MULF F.0 360.0 VLV_ACCELENCODER_14
    MOVEF_F 0.0 VLV_U_14
    MOVEF_F 0.0 VLV_ERROR_14
    MOVEF_F 0.0 VLV_OLDERROR_14
    MOVEF_F 0.0 VLV_ERRSUM_14
    CALL MOTOR.RESETCOUNT 'C'
  while191:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 15.0 or192
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 15.0 endwhile191
  or192:
  whilebody191:
    CALL MOTOR.GETCOUNT 'C' F.3
    DATAF tmpf196
    DATA8 flag196
    DIVF F.3 VLV_ACCELENCODER_14 tmpf196
    CP_EQF 0.0 VLV_ACCELENCODER_14 flag196
    SELECTF flag196 0.0 tmpf196 F.2

    MULF F.2 0.72 F.1
    ADDF VLV_VMAX_14 VLV_V0_14 F.2
    MULF F.1 F.2 F.0
    ADDF F.0 VLV_V0_14 VLV_VEL_14
    DATA8 flag201
	CP_LTF VLV_VEL_14 VLV_VMAX_14 flag201
	SELECTF flag201 VLV_VEL_14 VLV_VMAX_14 VLV_VEL_14
    MATH ABS VLV_VEL_14 F.0
    DATAF tmpf203
    DATA8 flag203
    DIVF VLV_VEL_14 F.0 tmpf203
    CP_EQF 0.0 F.0 flag203
    SELECTF flag203 0.0 tmpf203 VLV_SENTIDO_14

    CALL SENSOR.READPERCENT 1.0 F.1
    CALL SENSOR.READPERCENT 4.0 F.2
    SUBF F.1 F.2 F.0
    MULF F.0 VLV_SENTIDO_14 VLV_ERROR_14
    ADDF VLV_ERRSUM_14 VLV_ERROR_14 VLV_ERRSUM_14
    MULF VLV_ERROR_14 VLV_KP_14 F.1
    SUBF VLV_ERROR_14 VLV_OLDERROR_14 F.3
    MULF F.3 VLV_KD_14 F.2
    ADDF F.1 F.2 F.0
    MULF VLV_ERRSUM_14 VLV_KI_14 F.1
    ADDF F.0 F.1 VLV_U_14
    CALL TEXT.APPEND VLV_I_14 VLV_D_14 S.0
    ADDF VLV_VEL_14 VLV_U_14 F.1
    MULF F.1 VGV_SENTIDO_MOTORES F.0
    SUBF VLV_VEL_14 VLV_U_14 F.2
    MULF F.2 VGV_SENTIDO_MOTORES F.1
    CALL MOTOR.STARTSYNC S.0 F.0 F.1
    MOVEF_F VLV_ERROR_14 VLV_OLDERROR_14
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 15.0 whilebody191
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 15.0 whilebody191
  endwhile191:
    CALL TEXT.APPEND VLV_I_14 VLV_D_14 S.0
    CALL MOTOR.STOP S.0 'False'
RETSUB_F_SL14SICF_6:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SL14SICF_6:
SUB_F_ENCODERRECTOMG_2:
    MOVEF_F 56.0 VLV_DIAMETRO_19
    MULF VLV_DISTANCIA_19 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf227
    DATA8 flag227
    DIVF F.1 F.2 tmpf227
    CP_EQF 0.0 F.2 flag227
    SELECTF flag227 0.0 tmpf227 F.0

    DATAF tmpf228
    DATA8 flag228
    DIVF F.0 VLV_DIAMETRO_19 tmpf228
    CP_EQF 0.0 VLV_DIAMETRO_19 flag228
    SELECTF flag228 0.0 tmpf228 VLV_ENC_19

    CALL MOTOR.GETCOUNT 'B' VLV_START_B_19
    CALL MOTOR.GETCOUNT 'C' VLV_START_C_19
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_19 VLV_ENCODER_C_19
  while233:
    MATH ABS VLV_ENCODER_C_19 F.0
    JR_GTEQF F.0 VLV_ENC_19 endwhile233
  whilebody233:
    CALL MOTOR.GETCOUNT 'B' F.1
    SUBF F.1 VLV_START_B_19 F.0
    MULF F.0 VGV_SENTIDO_MOTORES VLV_ENCODER_B_19
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.1 VLV_START_C_19 F.0
    MULF F.0 VGV_SENTIDO_MOTORES VLV_ENCODER_C_19
    SUBF VLV_ENCODER_B_19 VLV_ENCODER_C_19 VLV_ERROR_19
    MULF VLV_ERROR_19 2.0 VLV_PROPORCIAL_19
    SUBF VLV_VELOCIDAD_19 VLV_PROPORCIAL_19 F.1
    MULF F.1 VGV_SENTIDO_MOTORES F.0
    ADDF VLV_VELOCIDAD_19 VLV_PROPORCIAL_19 F.2
    MULF F.2 VGV_SENTIDO_MOTORES F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    MATH ABS VLV_ENCODER_C_19 F.0
    JR_LTF F.0 VLV_ENC_19 whilebody233
  endwhile233:
    CALL MOTOR.STOP 'BC' 'True'
RETSUB_F_ENCODERRECTOMG_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ENCODERRECTOMG_2:
SUB_F_KALMAN_FILTER_2:
    MOVEF_F 28.0 VLV_RADIO_33
    CALL VECTOR.DATA 9.0 '1 0 0  0 1 0  0 0 1' VLV_I_33
    CALL VECTOR.INIT 9.0 0.0 VLV_DF_K_33
    CALL VECTOR.INIT 3.0 0.0 VLV_K_K1_33
    CALL VECTOR.INIT 3.0 0.0 VLV_K1_K_33
    CALL EV3.TIME VLV_DELTA_T_33
    MOVEF_F 0.0 VLV_OLD_T_33
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    MULF -1.0 F.0 VLV_OLD_I_33
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.0
    MULF -1.0 F.0 VLV_OLD_D_33
  while259:
  whilebody259:
    CALL EV3.TIME F.0
    SUBF F.0 VLV_OLD_T_33 VLV_DELTA_T_33
    CALL EV3.TIME VLV_OLD_T_33
    MOVEF_F VLV_DELTA_T_33 VGV_D_T
    CALL ARRAYGET_FLOAT 0.0 F.1 VLV_K_K1_33
    ADDF VLV_OMEGAI_K1_33 VLV_OMEGAD_K1_33 F.6
    MULF F.6 VLV_RADIO_33 F.5
    MULF F.5 VLV_DELTA_T_33 F.4
    DATAF tmpf267
    DATA8 flag267
    DIVF F.4 2.0 tmpf267
    CP_EQF 0.0 2.0 flag267
    SELECTF flag267 0.0 tmpf267 F.3

    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K_K1_33
    SUBF VLV_OMEGAD_K1_33 VLV_OMEGAI_K1_33 F.10
    MULF F.10 VLV_RADIO_33 F.9
    MULF F.9 VLV_DELTA_T_33 F.8
    MULF 4.0 VGV_DW F.9
    DATAF tmpf273
    DATA8 flag273
    DIVF F.8 F.9 tmpf273
    CP_EQF 0.0 F.9 flag273
    SELECTF flag273 0.0 tmpf273 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf275
	MULF F.5 57.295779513082 tmpf275
	MATH COS tmpf275 F.4
    MULF F.3 F.4 F.2
    ADDF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.1 VLV_K_K1_33
    ADDF VLV_OMEGAI_K1_33 VLV_OMEGAD_K1_33 F.6
    MULF F.6 VLV_RADIO_33 F.5
    MULF F.5 VLV_DELTA_T_33 F.4
    DATAF tmpf283
    DATA8 flag283
    DIVF F.4 2.0 tmpf283
    CP_EQF 0.0 2.0 flag283
    SELECTF flag283 0.0 tmpf283 F.3

    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K_K1_33
    SUBF VLV_OMEGAD_K1_33 VLV_OMEGAI_K1_33 F.10
    MULF F.10 VLV_RADIO_33 F.9
    MULF F.9 VLV_DELTA_T_33 F.8
    MULF 4.0 VGV_DW F.9
    DATAF tmpf289
    DATA8 flag289
    DIVF F.8 F.9 tmpf289
    CP_EQF 0.0 F.9 flag289
    SELECTF flag289 0.0 tmpf289 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf291
	MULF F.5 57.295779513082  tmpf291
	MATH SIN  tmpf291 F.4
    MULF F.3 F.4 F.2
    ADDF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.1 VLV_K_K1_33
    SUBF VLV_OMEGAD_K1_33 VLV_OMEGAI_K1_33 F.5
    MULF F.5 VLV_RADIO_33 F.4
    MULF F.4 VLV_DELTA_T_33 F.3
    MULF 2.0 VGV_DW F.4
    DATAF tmpf300
    DATA8 flag300
    DIVF F.3 F.4 tmpf300
    CP_EQF 0.0 F.4 flag300
    SELECTF flag300 0.0 tmpf300 F.2

    ADDF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_K_K1_33
    ADDF VLV_OMEGAI_K1_33 VLV_OMEGAD_K1_33 F.5
    MULF F.5 VLV_RADIO_33 F.4
    MULF F.4 VLV_DELTA_T_33 F.3
    MULF -1.0 F.3 F.2
    DATAF tmpf307
    DATA8 flag307
    DIVF F.2 2.0 tmpf307
    CP_EQF 0.0 2.0 flag307
    SELECTF flag307 0.0 tmpf307 F.1

    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_K_K1_33
    SUBF VLV_OMEGAD_K1_33 VLV_OMEGAI_K1_33 F.8
    MULF F.8 VLV_RADIO_33 F.7
    MULF F.7 VLV_DELTA_T_33 F.6
    MULF 4.0 VGV_DW F.7
    DATAF tmpf313
    DATA8 flag313
    DIVF F.6 F.7 tmpf313
    CP_EQF 0.0 F.7 flag313
    SELECTF flag313 0.0 tmpf313 F.5

    ADDF F.4 F.5 F.3
    DATAF tmpf315
	MULF F.3 57.295779513082  tmpf315
	MATH SIN  tmpf315 F.2
    MULF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DF_K_33
    ADDF VLV_OMEGAI_K1_33 VLV_OMEGAD_K1_33 F.4
    MULF F.4 VLV_RADIO_33 F.3
    MULF F.3 VLV_DELTA_T_33 F.2
    DATAF tmpf321
    DATA8 flag321
    DIVF F.2 2.0 tmpf321
    CP_EQF 0.0 2.0 flag321
    SELECTF flag321 0.0 tmpf321 F.1

    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_K_K1_33
    SUBF VLV_OMEGAD_K1_33 VLV_OMEGAI_K1_33 F.8
    MULF F.8 VLV_RADIO_33 F.7
    MULF F.7 VLV_DELTA_T_33 F.6
    MULF 4.0 VGV_DW F.7
    DATAF tmpf327
    DATA8 flag327
    DIVF F.6 F.7 tmpf327
    CP_EQF 0.0 F.7 flag327
    SELECTF flag327 0.0 tmpf327 F.5

    ADDF F.4 F.5 F.3
    DATAF tmpf329
	MULF F.3 57.295779513082 tmpf329
	MATH COS tmpf329 F.2
    MULF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DF_K_33
    CALL VECTOR.ADD 9.0 VLV_I_33 VLV_DF_K_33 VLV_F_K_33
    CALL VECTOR.DATA 9.0 '0.25 0 0  0 0.25 0 0 0 0.002' VLV_Q_K1_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_F_K_33 VLV_I_33 VLV_U_33
    ARRAY COPY VLV_U_33 VLV_M_39
    WRITE32 ENDSUB_F_TRASPMATVECT3X3_2:CALLSUB335 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TRASPMATVECT3X3_2
CALLSUB335:
    ARRAY COPY VLV_S_39 VLV_V_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_U_33 VLV_V_33 VLV_W_33
    CALL VECTOR.ADD 9.0 VLV_W_33 VLV_Q_K1_33 VLV_P_K_K1_33
    CALL VECTOR.INIT 3.0 0.0 VLV_H_33
    CALL ARRAYGET_FLOAT 2.0 F.2 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.3 VLV_K1_K_33
    SUBF F.2 F.3 F.1
    MULF F.1 VLV_DELTA_T_33 F.0
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_H_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH SQRT F.3 F.2
    CALL ARRAYGET_FLOAT 2.0 F.5 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K1_K_33
    SUBF F.5 F.6 F.4
    MULF VGV_DW F.4 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf359
    DATA8 flag359
    DIVF F.1 VLV_RADIO_33 tmpf359
    CP_EQF 0.0 VLV_RADIO_33 flag359
    SELECTF flag359 0.0 tmpf359 F.0

    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_H_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH SQRT F.3 F.2
    CALL ARRAYGET_FLOAT 2.0 F.5 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K1_K_33
    SUBF F.5 F.6 F.4
    MULF VGV_DW F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf376
    DATA8 flag376
    DIVF F.1 VLV_RADIO_33 tmpf376
    CP_EQF 0.0 VLV_RADIO_33 flag376
    SELECTF flag376 0.0 tmpf376 F.0

    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_H_33
    CALL VECTOR.INIT 9.0 0.0 VLV_DH_33
    DATAF tmpf379
    DATA8 flag379
    DIVF 1.0 VLV_DELTA_T_33 tmpf379
    CP_EQF 0.0 VLV_DELTA_T_33 flag379
    SELECTF flag379 0.0 tmpf379 F.0

    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 0.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf395
    DATA8 flag395
    DIVF F.1 VLV_RADIO_33 tmpf395
    CP_EQF 0.0 VLV_RADIO_33 flag395
    SELECTF flag395 0.0 tmpf395 F.0

    CALL ARRAYSTORE_FLOAT 3.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf411
    DATA8 flag411
    DIVF F.1 VLV_RADIO_33 tmpf411
    CP_EQF 0.0 VLV_RADIO_33 flag411
    SELECTF flag411 0.0 tmpf411 F.0

    CALL ARRAYSTORE_FLOAT 4.0 F.0 VLV_DH_33
    MATH NEGATE VGV_DW F.1
    DATAF tmpf414
    DATA8 flag414
    DIVF F.1 VLV_RADIO_33 tmpf414
    CP_EQF 0.0 VLV_RADIO_33 flag414
    SELECTF flag414 0.0 tmpf414 F.0

    CALL ARRAYSTORE_FLOAT 5.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 0.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf430
    DATA8 flag430
    DIVF F.1 VLV_RADIO_33 tmpf430
    CP_EQF 0.0 VLV_RADIO_33 flag430
    SELECTF flag430 0.0 tmpf430 F.0

    CALL ARRAYSTORE_FLOAT 6.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf446
    DATA8 flag446
    DIVF F.1 VLV_RADIO_33 tmpf446
    CP_EQF 0.0 VLV_RADIO_33 flag446
    SELECTF flag446 0.0 tmpf446 F.0

    CALL ARRAYSTORE_FLOAT 7.0 F.0 VLV_DH_33
    DATAF tmpf448
    DATA8 flag448
    DIVF VGV_DW VLV_RADIO_33 tmpf448
    CP_EQF 0.0 VLV_RADIO_33 flag448
    SELECTF flag448 0.0 tmpf448 F.0

    CALL ARRAYSTORE_FLOAT 8.0 F.0 VLV_DH_33
    CALL VECTOR.DATA 9.0 '0.25 0 0  0 0.25 0 0 0 0.002' VLV_R_33
    CALL VECTOR.INIT 3.0 0.0 VLV_Z_33
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_Z_33
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.2
    MULF -1.0 F.2 F.1
    SUBF F.1 VLV_OLD_I_33 F.0
    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_Z_33
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.2
    MULF -1.0 F.2 F.1
    SUBF F.1 VLV_OLD_D_33 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_Z_33
    CALL VECTOR.DATA 9.0 '-1 0 0 0 -1 0 0 0 -1' VLV_MINUS_1_33
    CALL VECTOR.MULTIPLY 1.0 3.0 3.0 VLV_H_33 VLV_MINUS_1_33 VLV_MINUS_H_33
    CALL VECTOR.ADD 3.0 VLV_Z_33 VLV_MINUS_H_33 VLV_Y_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_DH_33 VLV_P_K_K1_33 VLV_S1_33
    ARRAY COPY VLV_DH_33 VLV_M_39
    WRITE32 ENDSUB_F_TRASPMATVECT3X3_2:CALLSUB466 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TRASPMATVECT3X3_2
CALLSUB466:
    ARRAY COPY VLV_S_39 VLV_DH_T_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_S1_33 VLV_DH_T_33 VLV_S2_33
    CALL VECTOR.ADD 9.0 VLV_S2_33 VLV_R_33 VLV_S_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_P_K_K1_33 VLV_DH_T_33 VLV_K1_33
    ARRAY COPY VLV_S_33 VLV_M_42
    WRITE32 ENDSUB_F_INVMATVECT3X3_2:CALLSUB470 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_INVMATVECT3X3_2
CALLSUB470:
    ARRAY COPY VLV_S_42 VLV_S_INV_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_K1_33 VLV_S_INV_33 VLV_K_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_K_33 VLV_Y_33 VLV_KY_33
    CALL VECTOR.ADD 9.0 VLV_K_K1_33 VLV_KY_33 VLV_K1_K_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_K_33 VLV_DH_T_33 VLV_KH_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_KH_33 VLV_MINUS_1_33 VLV_MINUS_KH_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_I_33 VLV_MINUS_KH_33 VLV_P1_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_P1_33 VLV_P_K_K1_33 VLV_P_33
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    MULF -1.0 F.0 VLV_OLD_I_33
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.0
    MULF -1.0 F.0 VLV_OLD_D_33
    JR whilebody259
  endwhile259:
RETSUB_F_KALMAN_FILTER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_KALMAN_FILTER_2:
SUB_F_GUNIVENCMG_3:
    STRINGS DUPLICATE 'B' VLV_I_35
    STRINGS DUPLICATE 'C' VLV_D_35
    MOVEF_F 3.05555555555556 VLV_G1_35
    DATAF tmpf482
    DATA8 flag482
    DIVF VLV_V1_35 VLV_V2_35 tmpf482
    CP_EQF 0.0 VLV_V2_35 flag482
    SELECTF flag482 0.0 tmpf482 F.0

    DATAF tmpf483
    DATA8 flag483
    DIVF VLV_V1_35 VLV_V2_35 tmpf483
    CP_EQF 0.0 VLV_V2_35 flag483
    SELECTF flag483 0.0 tmpf483 F.2

    MATH ABS F.2 F.1
    DATAF tmpf485
    DATA8 flag485
    DIVF F.0 F.1 tmpf485
    CP_EQF 0.0 F.1 flag485
    SELECTF flag485 0.0 tmpf485 VLV_SIGNO_35

    MATH ABS VLV_V1_35 F.0
    MATH ABS VLV_V2_35 F.1
    DATA8 flag488
	CP_LTF F.0 F.1 flag488
	SELECTF flag488 F.0 F.1 VLV_VMIN_35
    MATH ABS VLV_V1_35 F.0
    MATH ABS VLV_V2_35 F.1
    DATA8 flag491
	CP_GTF F.0 F.1 flag491
	SELECTF flag491 F.0 F.1 VLV_VMAX_35
    DATAF tmpf492
    DATA8 flag492
    DIVF VLV_VMIN_35 VLV_VMAX_35 tmpf492
    CP_EQF 0.0 VLV_VMAX_35 flag492
    SELECTF flag492 0.0 tmpf492 F.3

    MULF -8.5 F.3 F.2
    MULF F.2 VLV_SIGNO_35 F.1
    SUBF F.1 8.5 F.0
    DATAF tmpf496
    DATA8 flag496
    DIVF VLV_VMIN_35 VLV_VMAX_35 tmpf496
    CP_EQF 0.0 VLV_VMAX_35 flag496
    SELECTF flag496 0.0 tmpf496 F.3

    MULF F.3 VLV_SIGNO_35 F.2
    SUBF F.2 1.0 F.1
    DATAF tmpf499
    DATA8 flag499
    DIVF F.0 F.1 tmpf499
    CP_EQF 0.0 F.1 flag499
    SELECTF flag499 0.0 tmpf499 VGV_CENTRO

    MULF VLV_ANGLE_35 VLV_G1_35 F.0
    MULF VLV_SIGNO_35 VLV_VMIN_35 F.4
    DATAF tmpf502
    DATA8 flag502
    DIVF F.4 VLV_VMAX_35 tmpf502
    CP_EQF 0.0 VLV_VMAX_35 flag502
    SELECTF flag502 0.0 tmpf502 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf504
    DATA8 flag504
    DIVF -2.0 F.2 tmpf504
    CP_EQF 0.0 F.2 flag504
    SELECTF flag504 0.0 tmpf504 F.1

    MULF F.0 F.1 VLV_ENCODR_35
    CALL TEXT.APPEND VLV_I_35 VLV_D_35 S.0
    MATH NEGATE VLV_V1_35 F.0
    MATH NEGATE VLV_V2_35 F.1
    CALL MOTOR.SCHEDULESYNC S.0 F.0 F.1 VLV_ENCODR_35 'True'

	DATA8 layer509
	DATA8 nos509
	DATA8 busy509
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer509 nos509
	JR_EQ8 0 nos509 motornotbusy509
  motorwaiting509:
	OUTPUT_TEST layer509 nos509 busy509
	JR_EQ8 busy509 0 motornotbusy509
	SLEEP
	JR motorwaiting509
  motornotbusy509:
RETSUB_F_GUNIVENCMG_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_GUNIVENCMG_3:
SUB_F_TRASPMATVECT3X3_2:
    CALL VECTOR.INIT 9.0 0.0 VLV_S_39
    CALL ARRAYGET_FLOAT 0.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 3.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 6.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 1.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 3.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 4.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 4.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 7.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 5.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 2.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 6.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 5.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 7.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 8.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 8.0 F.0 VLV_S_39
RETSUB_F_TRASPMATVECT3X3_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TRASPMATVECT3X3_2:
SUB_F_INVMATVECT3X3_2:
    CALL ARRAYGET_FLOAT 0.0 F.2 VLV_M_42
    CALL ARRAYGET_FLOAT 4.0 F.5 VLV_M_42
    CALL ARRAYGET_FLOAT 8.0 F.6 VLV_M_42
    MULF F.5 F.6 F.4
    CALL ARRAYGET_FLOAT 5.0 F.6 VLV_M_42
    CALL ARRAYGET_FLOAT 7.0 F.7 VLV_M_42
    MULF F.6 F.7 F.5
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    CALL ARRAYGET_FLOAT 1.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 3.0 F.6 VLV_M_42
    CALL ARRAYGET_FLOAT 8.0 F.7 VLV_M_42
    MULF F.6 F.7 F.5
    CALL ARRAYGET_FLOAT 5.0 F.7 VLV_M_42
    CALL ARRAYGET_FLOAT 6.0 F.8 VLV_M_42
    MULF F.7 F.8 F.6
    SUBF F.5 F.6 F.4
    MULF F.3 F.4 F.2
    SUBF F.1 F.2 F.0
    CALL ARRAYGET_FLOAT 2.0 F.2 VLV_M_42
    CALL ARRAYGET_FLOAT 3.0 F.5 VLV_M_42
    CALL ARRAYGET_FLOAT 7.0 F.6 VLV_M_42
    MULF F.5 F.6 F.4
    CALL ARRAYGET_FLOAT 4.0 F.6 VLV_M_42
    CALL ARRAYGET_FLOAT 6.0 F.7 VLV_M_42
    MULF F.6 F.7 F.5
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    ADDF F.0 F.1 VLV_DETERMINANTE_42
    JR_EQF VLV_DETERMINANTE_42 0.0 else558_1
    CALL ARRAYGET_FLOAT 4.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 7.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf566
    DATA8 flag566
    DIVF F.1 VLV_DETERMINANTE_42 tmpf566
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag566
    SELECTF flag566 0.0 tmpf566 F.0

    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 3.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf575
    DATA8 flag575
    DIVF F.1 VLV_DETERMINANTE_42 tmpf575
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag575
    SELECTF flag575 0.0 tmpf575 F.0

    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 3.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 7.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 4.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf584
    DATA8 flag584
    DIVF F.1 VLV_DETERMINANTE_42 tmpf584
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag584
    SELECTF flag584 0.0 tmpf584 F.0

    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 1.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 7.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf593
    DATA8 flag593
    DIVF F.1 VLV_DETERMINANTE_42 tmpf593
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag593
    SELECTF flag593 0.0 tmpf593 F.0

    CALL ARRAYSTORE_FLOAT 3.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf602
    DATA8 flag602
    DIVF F.1 VLV_DETERMINANTE_42 tmpf602
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag602
    SELECTF flag602 0.0 tmpf602 F.0

    CALL ARRAYSTORE_FLOAT 4.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 7.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf611
    DATA8 flag611
    DIVF F.1 VLV_DETERMINANTE_42 tmpf611
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag611
    SELECTF flag611 0.0 tmpf611 F.0

    CALL ARRAYSTORE_FLOAT 5.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 1.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 4.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf620
    DATA8 flag620
    DIVF F.1 VLV_DETERMINANTE_42 tmpf620
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag620
    SELECTF flag620 0.0 tmpf620 F.0

    CALL ARRAYSTORE_FLOAT 6.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 3.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf629
    DATA8 flag629
    DIVF F.1 VLV_DETERMINANTE_42 tmpf629
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag629
    SELECTF flag629 0.0 tmpf629 F.0

    CALL ARRAYSTORE_FLOAT 7.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 4.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 3.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf638
    DATA8 flag638
    DIVF F.1 VLV_DETERMINANTE_42 tmpf638
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag638
    SELECTF flag638 0.0 tmpf638 F.0

    CALL ARRAYSTORE_FLOAT 8.0 F.0 VLV_S_42
  else558_1:
  endif558:
RETSUB_F_INVMATVECT3X3_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_INVMATVECT3X3_2:
SUB_F_BMOVEA_2:
    SUBF VLV_DEGREES_43 VGV_ANGLE_A VLV_ROTATION_43
    MATH ABS VLV_ROTATION_43 F.0
    DATAF tmpf642
    DATA8 flag642
    DIVF F.0 VLV_ROTATION_43 tmpf642
    CP_EQF 0.0 VLV_ROTATION_43 flag642
    SELECTF flag642 0.0 tmpf642 VLV_SIGN_43

    MOVEF_F 0.0 VLV_PROGRESS_43
    MULF VLV_DEGREES_PER_SECOND_43 VLV_SIGN_43 F.0
    DATAF tmpf644
    DATA8 flag644
    DIVF F.0 50.0 tmpf644
    CP_EQF 0.0 50.0 flag644
    SELECTF flag644 0.0 tmpf644 VLV_DEGREES_PER_INTERVAL_43

  while645:
    SUBF VLV_ROTATION_43 VLV_PROGRESS_43 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile645
  whilebody645:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_43 VGV_ANGLE_A
    ADDF VLV_PROGRESS_43 VLV_DEGREES_PER_INTERVAL_43 VLV_PROGRESS_43
    DATA32 milliseconds650
	MOVEF_32 1.0 milliseconds650
	DATA32 timer650
	TIMER_WAIT milliseconds650 timer650
	TIMER_READY timer650
    SUBF VLV_ROTATION_43 VLV_PROGRESS_43 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody645
  endwhile645:
    MOVEF_F VLV_DEGREES_43 VGV_ANGLE_A
RETSUB_F_BMOVEA_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA_2:
SUB_F_BMOVED_2:
    MULF VLV_DEGREES_45 VGV_SENTIDO_D VLV_DEGREES_45
    SUBF VLV_DEGREES_45 VGV_ANGLE_D VLV_ROTATION_45
    MATH ABS VLV_ROTATION_45 F.0
    DATAF tmpf656
    DATA8 flag656
    DIVF F.0 VLV_ROTATION_45 tmpf656
    CP_EQF 0.0 VLV_ROTATION_45 flag656
    SELECTF flag656 0.0 tmpf656 VLV_SIGN_45

    MOVEF_F 0.0 VLV_PROGRESS_45
    MULF VLV_DEGREES_PER_SECOND_45 VLV_SIGN_45 F.0
    DATAF tmpf658
    DATA8 flag658
    DIVF F.0 50.0 tmpf658
    CP_EQF 0.0 50.0 flag658
    SELECTF flag658 0.0 tmpf658 VLV_DEGREES_PER_INTERVAL_45

  while659:
    SUBF VLV_ROTATION_45 VLV_PROGRESS_45 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile659
  whilebody659:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_45 VGV_ANGLE_D
    ADDF VLV_PROGRESS_45 VLV_DEGREES_PER_INTERVAL_45 VLV_PROGRESS_45
    DATA32 milliseconds664
	MOVEF_32 1.0 milliseconds664
	DATA32 timer664
	TIMER_WAIT milliseconds664 timer664
	TIMER_READY timer664
    SUBF VLV_ROTATION_45 VLV_PROGRESS_45 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody659
  endwhile659:
    MOVEF_F VLV_DEGREES_45 VGV_ANGLE_D
RETSUB_F_BMOVED_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED_2:
SUB_F_BMOVEAD_4:
    MULF VLV_DEGREES_D_46 VGV_SENTIDO_D VLV_DEGREES_D_46
  while668:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_46 or669
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_46 endwhile668
  or669:
  whilebody668:
    MATH ROUND VGV_ANGLE_A F.0
    SUBF VLV_DEGREES_A_46 5.0 F.1
    JR_GTEQF F.0 F.1 else670_1
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_46 else670_1
    DATAF tmpf674
    DATA8 flag674
    DIVF VLV_DEGREES_PER_SECOND_A_46 2.0 tmpf674
    CP_EQF 0.0 2.0 flag674
    SELECTF flag674 0.0 tmpf674 F.3

    SUBF VLV_DEGREES_A_46 VGV_ANGLE_A F.5
    DATAF tmpf676
    DATA8 flag676
    DIVF F.5 10.0 tmpf676
    CP_EQF 0.0 10.0 flag676
    SELECTF flag676 0.0 tmpf676 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag678
	CP_LTF VLV_DEGREES_PER_SECOND_A_46 F.2 flag678
	SELECTF flag678 VLV_DEGREES_PER_SECOND_A_46 F.2 F.1
    DATAF tmpf679
    DATA8 flag679
    DIVF F.1 50.0 tmpf679
    CP_EQF 0.0 50.0 flag679
    SELECTF flag679 0.0 tmpf679 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif670
  else670_1:
    MATH ROUND VGV_ANGLE_A F.0
    ADDF VLV_DEGREES_A_46 5.0 F.1
    JR_LTEQF F.0 F.1 else670_2
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_46 else670_2
    DATAF tmpf684
    DATA8 flag684
    DIVF VLV_DEGREES_PER_SECOND_A_46 2.0 tmpf684
    CP_EQF 0.0 2.0 flag684
    SELECTF flag684 0.0 tmpf684 F.3

    SUBF VLV_DEGREES_A_46 VGV_ANGLE_A F.5
    DATAF tmpf686
    DATA8 flag686
    DIVF F.5 10.0 tmpf686
    CP_EQF 0.0 10.0 flag686
    SELECTF flag686 0.0 tmpf686 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag688
	CP_GTF VLV_DEGREES_PER_SECOND_A_46 F.2 flag688
	SELECTF flag688 VLV_DEGREES_PER_SECOND_A_46 F.2 F.1
    DATAF tmpf689
    DATA8 flag689
    DIVF F.1 50.0 tmpf689
    CP_EQF 0.0 50.0 flag689
    SELECTF flag689 0.0 tmpf689 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif670
  else670_2:
    MOVEF_F VLV_DEGREES_A_46 VGV_ANGLE_A
  else670_3:
  endif670:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_46 else691_1
    DATAF tmpf693
    DATA8 flag693
    DIVF VLV_DEGREES_PER_SECOND_D_46 2.0 tmpf693
    CP_EQF 0.0 2.0 flag693
    SELECTF flag693 0.0 tmpf693 F.3

    SUBF VLV_DEGREES_D_46 VGV_ANGLE_D F.5
    DATAF tmpf695
    DATA8 flag695
    DIVF F.5 10.0 tmpf695
    CP_EQF 0.0 10.0 flag695
    SELECTF flag695 0.0 tmpf695 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag697
	CP_LTF VLV_DEGREES_PER_SECOND_D_46 F.2 flag697
	SELECTF flag697 VLV_DEGREES_PER_SECOND_D_46 F.2 F.1
    DATAF tmpf698
    DATA8 flag698
    DIVF F.1 50.0 tmpf698
    CP_EQF 0.0 50.0 flag698
    SELECTF flag698 0.0 tmpf698 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif691
  else691_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_46 else691_2
    DATAF tmpf701
    DATA8 flag701
    DIVF VLV_DEGREES_PER_SECOND_D_46 2.0 tmpf701
    CP_EQF 0.0 2.0 flag701
    SELECTF flag701 0.0 tmpf701 F.3

    SUBF VLV_DEGREES_D_46 VGV_ANGLE_D F.5
    DATAF tmpf703
    DATA8 flag703
    DIVF F.5 10.0 tmpf703
    CP_EQF 0.0 10.0 flag703
    SELECTF flag703 0.0 tmpf703 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag705
	CP_GTF VLV_DEGREES_PER_SECOND_D_46 F.2 flag705
	SELECTF flag705 VLV_DEGREES_PER_SECOND_D_46 F.2 F.1
    DATAF tmpf706
    DATA8 flag706
    DIVF F.1 50.0 tmpf706
    CP_EQF 0.0 50.0 flag706
    SELECTF flag706 0.0 tmpf706 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif691
  else691_2:
    MOVEF_F VLV_DEGREES_D_46 VGV_ANGLE_D
  else691_3:
  endif691:
    DATA32 milliseconds708
	MOVEF_32 1.0 milliseconds708
	DATA32 timer708
	TIMER_WAIT milliseconds708 timer708
	TIMER_READY timer708
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_46 whilebody668
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_46 whilebody668
  endwhile668:
    MOVEF_F VLV_DEGREES_A_46 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_46 VGV_ANGLE_D
RETSUB_F_BMOVEAD_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD_4:
SUB_F_BMOVEA0_1:
    MOVEF_F 0.0 VLV_DEGREES_47
    SUBF VLV_DEGREES_47 VGV_ANGLE_A VLV_ROTATION_47
    MATH ABS VLV_ROTATION_47 F.0
    DATAF tmpf711
    DATA8 flag711
    DIVF F.0 VLV_ROTATION_47 tmpf711
    CP_EQF 0.0 VLV_ROTATION_47 flag711
    SELECTF flag711 0.0 tmpf711 VLV_SIGN_47

    MOVEF_F 0.0 VLV_PROGRESS_47
    MULF VLV_DEGREES_PER_SECOND_47 VLV_SIGN_47 F.0
    DATAF tmpf713
    DATA8 flag713
    DIVF F.0 50.0 tmpf713
    CP_EQF 0.0 50.0 flag713
    SELECTF flag713 0.0 tmpf713 VLV_DEGREES_PER_INTERVAL_47

  while714:
    SUBF VLV_ROTATION_47 VLV_PROGRESS_47 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile714
  whilebody714:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_47 VGV_ANGLE_A
    ADDF VLV_PROGRESS_47 VLV_DEGREES_PER_INTERVAL_47 VLV_PROGRESS_47
    DATA32 milliseconds719
	MOVEF_32 1.0 milliseconds719
	DATA32 timer719
	TIMER_WAIT milliseconds719 timer719
	TIMER_READY timer719
    SUBF VLV_ROTATION_47 VLV_PROGRESS_47 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody714
  endwhile714:
    MOVEF_F VLV_DEGREES_47 VGV_ANGLE_A
RETSUB_F_BMOVEA0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA0_1:
SUB_F_BMOVED0_1:
    MOVEF_F 0.0 VLV_DEGREES_48
    SUBF VLV_DEGREES_48 VGV_ANGLE_D VLV_ROTATION_48
    MATH ABS VLV_ROTATION_48 F.0
    DATAF tmpf724
    DATA8 flag724
    DIVF F.0 VLV_ROTATION_48 tmpf724
    CP_EQF 0.0 VLV_ROTATION_48 flag724
    SELECTF flag724 0.0 tmpf724 VLV_SIGN_48

    MOVEF_F 0.0 VLV_PROGRESS_48
    MULF VLV_DEGREES_PER_SECOND_48 VLV_SIGN_48 F.0
    DATAF tmpf726
    DATA8 flag726
    DIVF F.0 50.0 tmpf726
    CP_EQF 0.0 50.0 flag726
    SELECTF flag726 0.0 tmpf726 VLV_DEGREES_PER_INTERVAL_48

  while727:
    SUBF VLV_ROTATION_48 VLV_PROGRESS_48 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile727
  whilebody727:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_48 VGV_ANGLE_D
    ADDF VLV_PROGRESS_48 VLV_DEGREES_PER_INTERVAL_48 VLV_PROGRESS_48
    DATA32 milliseconds732
	MOVEF_32 1.0 milliseconds732
	DATA32 timer732
	TIMER_WAIT milliseconds732 timer732
	TIMER_READY timer732
    SUBF VLV_ROTATION_48 VLV_PROGRESS_48 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody727
  endwhile727:
    MOVEF_F VLV_DEGREES_48 VGV_ANGLE_D
RETSUB_F_BMOVED0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED0_1:
SUB_F_BMOVEAD0_2:
    MOVEF_F 0.0 VLV_DEGREES_A_49
    MOVEF_F 0.0 VLV_DEGREES_D_49
  while735:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_49 or736
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_49 endwhile735
  or736:
  whilebody735:
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_49 else737_1
    DATAF tmpf739
    DATA8 flag739
    DIVF VLV_DEGREES_PER_SECOND_A_49 2.0 tmpf739
    CP_EQF 0.0 2.0 flag739
    SELECTF flag739 0.0 tmpf739 F.3

    SUBF VLV_DEGREES_A_49 VGV_ANGLE_A F.5
    DATAF tmpf741
    DATA8 flag741
    DIVF F.5 10.0 tmpf741
    CP_EQF 0.0 10.0 flag741
    SELECTF flag741 0.0 tmpf741 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag743
	CP_LTF VLV_DEGREES_PER_SECOND_A_49 F.2 flag743
	SELECTF flag743 VLV_DEGREES_PER_SECOND_A_49 F.2 F.1
    DATAF tmpf744
    DATA8 flag744
    DIVF F.1 50.0 tmpf744
    CP_EQF 0.0 50.0 flag744
    SELECTF flag744 0.0 tmpf744 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif737
  else737_1:
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_49 else737_2
    DATAF tmpf747
    DATA8 flag747
    DIVF VLV_DEGREES_PER_SECOND_A_49 2.0 tmpf747
    CP_EQF 0.0 2.0 flag747
    SELECTF flag747 0.0 tmpf747 F.3

    SUBF VLV_DEGREES_A_49 VGV_ANGLE_A F.5
    DATAF tmpf749
    DATA8 flag749
    DIVF F.5 10.0 tmpf749
    CP_EQF 0.0 10.0 flag749
    SELECTF flag749 0.0 tmpf749 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag751
	CP_GTF VLV_DEGREES_PER_SECOND_A_49 F.2 flag751
	SELECTF flag751 VLV_DEGREES_PER_SECOND_A_49 F.2 F.1
    DATAF tmpf752
    DATA8 flag752
    DIVF F.1 50.0 tmpf752
    CP_EQF 0.0 50.0 flag752
    SELECTF flag752 0.0 tmpf752 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif737
  else737_2:
    MOVEF_F VLV_DEGREES_A_49 VGV_ANGLE_A
  else737_3:
  endif737:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_49 else754_1
    DATAF tmpf756
    DATA8 flag756
    DIVF VLV_DEGREES_PER_SECOND_D_49 2.0 tmpf756
    CP_EQF 0.0 2.0 flag756
    SELECTF flag756 0.0 tmpf756 F.3

    SUBF VLV_DEGREES_D_49 VGV_ANGLE_D F.5
    DATAF tmpf758
    DATA8 flag758
    DIVF F.5 10.0 tmpf758
    CP_EQF 0.0 10.0 flag758
    SELECTF flag758 0.0 tmpf758 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag760
	CP_LTF VLV_DEGREES_PER_SECOND_D_49 F.2 flag760
	SELECTF flag760 VLV_DEGREES_PER_SECOND_D_49 F.2 F.1
    DATAF tmpf761
    DATA8 flag761
    DIVF F.1 50.0 tmpf761
    CP_EQF 0.0 50.0 flag761
    SELECTF flag761 0.0 tmpf761 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif754
  else754_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_49 else754_2
    DATAF tmpf764
    DATA8 flag764
    DIVF VLV_DEGREES_PER_SECOND_D_49 2.0 tmpf764
    CP_EQF 0.0 2.0 flag764
    SELECTF flag764 0.0 tmpf764 F.3

    SUBF VLV_DEGREES_D_49 VGV_ANGLE_D F.5
    DATAF tmpf766
    DATA8 flag766
    DIVF F.5 10.0 tmpf766
    CP_EQF 0.0 10.0 flag766
    SELECTF flag766 0.0 tmpf766 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag768
	CP_GTF VLV_DEGREES_PER_SECOND_D_49 F.2 flag768
	SELECTF flag768 VLV_DEGREES_PER_SECOND_D_49 F.2 F.1
    DATAF tmpf769
    DATA8 flag769
    DIVF F.1 50.0 tmpf769
    CP_EQF 0.0 50.0 flag769
    SELECTF flag769 0.0 tmpf769 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif754
  else754_2:
    MOVEF_F VLV_DEGREES_D_49 VGV_ANGLE_D
  else754_3:
  endif754:
    DATA32 milliseconds771
	MOVEF_32 1.0 milliseconds771
	DATA32 timer771
	TIMER_WAIT milliseconds771 timer771
	TIMER_READY timer771
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_49 whilebody735
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_49 whilebody735
  endwhile735:
    MOVEF_F VLV_DEGREES_A_49 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_49 VGV_ANGLE_D
RETSUB_F_BMOVEAD0_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD0_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall VECTOR.DATA       // FSA
{
	IN_F size
	IN_S d 252
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty
	ARRAY RESIZE a size32
	ARRAY FILL a 0.0

	DATAS d0 127        // 8bit-addressable data range
	DATAS d1 129
	DATA32 filled
	DATAF value
	DATA8 readidx
	DATA8 writeidx
	DATA8 c

	STRINGS DUPLICATE d d0

	MOVE32_32 0 filled
	MOVE8_8 -127 readidx

skipspaces:
	READ8 d1 readidx c
	ADD8 readidx 1 readidx
	JR_EQ8 c 0 done
	JR_EQ8 c 32 skipspaces
	
	MOVE8_8 -127 writeidx
copypart:
	WRITE8 c writeidx d1
	ADD8 writeidx 1 writeidx
	READ8 d1 readidx c
	ADD8 readidx 1 readidx
	JR_EQ8 c 0 lastnumber
	JR_NEQ8 c 32 copypart

	WRITE8 0 writeidx d1
	STRINGS STRING_TO_VALUE d0 value
	ARRAY_WRITE a filled value

	ADD32 filled 1 filled
	JR_LT32 filled size32 skipspaces
	RETURN

lastnumber:
	WRITE8 0 writeidx d1
	STRINGS STRING_TO_VALUE d0 value
	ARRAY_WRITE a filled value
done:
	RETURN
empty:
    ARRAY RESIZE a 0
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall EV3.TIME  // F
{
	OUT_F time
	
	DATA32 ms
	DATAF thousand
	
	TIMER_READ ms
	MOVE32_F ms time	
}
subcall VECTOR.ADD        // FAAA
{
	IN_F size
	IN_16 a
	IN_16 b
	IN_16 c

	DATA32 sizea
	DATA32 sizeb
	ARRAY SIZE a sizea
	ARRAY SIZE b sizeb

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty
	ARRAY RESIZE c size32

	DATA32 i
	MOVE32_32 0 i
loop:
	DATAF sum
	DATAf tmp
	MOVEF_F 0.0 sum
	JR_GTEQ32 i sizea a_too_small
	ARRAY_READ a i sum
a_too_small:
	JR_GTEQ32 i sizeb b_too_small
	ARRAY_READ b i tmp
	ADDF sum tmp sum
b_too_small:
    ARRAY_WRITE c i sum

	ADD32 i 1 i
	JR_LT32 i size32 loop
loopend:
	RETURN

empty:
    ARRAY RESIZE c 0
}
subcall VECTOR.MULTIPLY    // FFFAAA
{
	IN_F _N        // number of rows in result matrix
	IN_F _M        // number of columns in result matrix
	IN_F _K        // second dimension of A and B
	IN_16 A        // matrix of N rows, K columns
	IN_16 B        // matrix of K rows, M columns
	IN_16 C        // result-matrix of N rows, M columns
	DATA32 N
	DATA32 M
	DATA32 K
	MOVEF_32 _N N
	MOVEF_32 _M M
	MOVEF_32 _K K

	// get input matrix sizes for quick retrieval
	DATA32 ALEN
	DATA32 BLEN
	ARRAY SIZE A ALEN
	ARRAY SIZE B BLEN

	// check if the numerical parameters make sense
	JR_LTEQ32 N 0 outputempty
	JR_LTEQ32 M 0 outputempty

	// compute number of elements to compute
	DATA32 MN
	DATA32 KM
	MUL32 M N MN
	MUL32 K M KM

	// check if the K value is at least 1 (otherwise can perform no multiplication)
	JR_GT32 K 0 notallzero
	ARRAY RESIZE C MN
	ARRAY FILL C 0.0
	RETURN
notallzero:

	// check if the output should be written into one of the input matrizes -
	// need to create temporary storage to hold data while computation runs
	DATA16 TARGET
	JR_EQ16 C A needtemporary
	JR_NEQ16 C B dontneedtemporary
needtemporary:
	// create computation target of correct size
	ARRAY CREATEF MN TARGET
	JR startcopy
dontneedtemporary:
	// set the result matrix to correct size
	ARRAY RESIZE C MN
	MOVE16_16 C TARGET

startcopy:
	DATA32 CIDX
	MOVE32_32 0 CIDX 
	DATA32 I
	MOVE32_32 0 I
loop_rows:	
	DATA32 J
	MOVE32_32 0 J
loop_columns:
    DATAF SUM
	MOVEF_F 0.0 SUM

    DATA32 AIDX 
	MUL32 I K AIDX
	DATA32 BIDX
	MOVE32_32 J BIDX
loop_scalarproduct:
	DATAF TMP
	DATAF PROD
	JR_GTEQ32 AIDX ALEN nosourceelements
	JR_GTEQ32 BIDX BLEN nosourceelements
	ARRAY_READ A AIDX PROD
	ARRAY_READ B BIDX TMP
    MULF PROD TMP PROD
	ADDF SUM PROD SUM
	ADD32 AIDX 1 AIDX
	ADD32 BIDX M BIDX
	JR_LT32 BIDX KM loop_scalarproduct
nosourceelements:

	ARRAY_WRITE TARGET CIDX SUM
	ADD32 CIDX 1 CIDX

	ADD32 J 1 J 
	JR_LT32 J M loop_columns
	ADD32 I 1 I
	JR_LT32 I N loop_rows

	// check if need to store temporay data to output
	JR_EQ16 C TARGET notemporary
	ARRAY COPY TARGET C
	ARRAY DELETE TARGET
notemporary:
	RETURN

outputempty:
	ARRAY RESIZE C 0
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
