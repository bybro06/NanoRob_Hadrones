DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEGREES_PER_SECOND_49
DATAF VLV_DEGREES_PER_SECOND_48
ARRAY16 VLV_VELI_K1_33 2
ARRAY16 VLV_VELD_K1_33 2
DATAF VLV_V1_35
DATAF VLV_V2_35
DATAF VLV_ANGLE_35
DATAF VLV_DEGREES_PER_SECOND_46
DATAF VLV_DEGREES_46
DATAF VLV_VELOCIDAD_19
DATAF VLV_DISTANCIA_19
DATAF VLV_DEGREES_PER_SECOND_44
DATAF VLV_DEGREES_44
DATAF VLV_DEGREES_PER_SECOND_A_47
DATAF VLV_DEGREES_PER_SECOND_D_47
DATAF VLV_DEGREES_A_47
DATAF VLV_DEGREES_D_47
DATAF VLV_DEGREES_PER_SECOND_A_50
DATAF VLV_DEGREES_PER_SECOND_D_50
DATAF VLV_V0_14
DATAF VLV_VMAX_14
DATAF VLV_KP_14
DATAF VLV_KI_14
DATAF VLV_KD_14
DATAF VLV_ACCELENCODER_14
ARRAY16 VLV_M_43 2
DATAF VLV_K_43
ARRAY16 VLV_S_43 2
ARRAY16 VLV_M_39 2
ARRAY16 VLV_S_39 2
ARRAY16 VLV_M_42 2
ARRAY16 VLV_S_42 2
ARRAY16 VLV_VELI_33 2
ARRAY16 VLV_VELD_33 2
ARRAY16 VLV_OMEGAI_K1_33 2
ARRAY16 VLV_OMEGAD_K1_33 2
ARRAY16 VLV_V_33 2
ARRAY16 VLV_DH_T_33 2
ARRAY16 VLV_S_INV_33 2
DATAF VGV_CENTRO
DATAF VGV_XTIME
DATAF VGV_YTIME
DATAF VGV_THETATIME
DATAF VGV_XTCORRECT
DATAF VGV_YTCORRECT
DATAF VGV_THETATCORRECT
DATAF VGV_SENTIDO_D
DATAF VGV_DW
DATAF VGV_DIAMETER
DATAF VGV_D_T
DATAF VGV_SENTIDO_MOTORES
ARRAY16 VGV_L 2
ARRAY16 VGV_R 2
DATAF VGV_ANGLE_A
DATAF VGV_ANGLE_D
ARRAY16 VGV_ALPHA_L 2
ARRAY16 VGV_ALPHA_R 2
DATAF VGV_OLDB
DATAF VGV_OLDC
ARRAY16 VGV_XT 2
ARRAY16 VGV_YT 2
ARRAY16 VGV_THETAT 2
DATAF VGV_I
DATAF VGV_D_L
DATAF VGV_D_R
DATAF VGV_D
DATAF VGV_DELTA_THETA
DATAF VGV_KP_A
DATAF VGV_KI_A
DATAF VGV_KD_A
DATAF VGV_KP_D
DATAF VGV_KI_D
DATAF VGV_KD_D
DATAF VGV_ERROR_A
DATAF VGV_ERROR_D
DATAF VGV_ERRSUM_A
DATAF VGV_ERRSUM_D
DATAF VGV_OLDERROR_A
DATAF VGV_OLDERROR_D
DATAF VGV_U_A
DATAF VGV_U_D
DATAF VGV_OLD_B
DATAF VGV_OLD_C
DATAF VGV_AGG_B
DATAF VGV_AGG_C
DATAF VGV_ITERACION
DATAF VGV_RADS_B
DATAF VGV_RADS_C
DATAF VGV_MEDIA_B
DATAF VGV_MEDIA_C
DATAS VLV_I_14 252
DATAS VLV_D_14 252
DATAF VLV_U_14
DATAF VLV_ERROR_14
DATAF VLV_OLDERROR_14
DATAF VLV_ERRSUM_14
DATAF VLV_VEL_14
DATAF VLV_SENTIDO_14
DATAF VLV_DIAMETRO_19
DATAF VLV_ENC_19
DATAF VLV_START_B_19
DATAF VLV_START_C_19
DATAF VLV_ENCODER_C_19
DATAF VLV_ENCODER_B_19
DATAF VLV_ERROR_19
DATAF VLV_PROPORCIAL_19
DATAF VLV_ITERACION_33
DATAF VLV_RADIO_33
ARRAY16 VLV_I_33 2
ARRAY16 VLV_MINUS_1_33 2
ARRAY16 VLV_DF_K_33 2
ARRAY16 VLV_K_K1_33 2
ARRAY16 VLV_K1_K_33 2
DATAF VLV_DELTA_T_33
DATAF VLV_OLD_T_33
DATAF VLV_OLD_I_33
DATAF VLV_OLD_D_33
DATAF VLV_LOG_FILE_33
ARRAY16 VLV_F_K_33 2
ARRAY16 VLV_Q_K1_33 2
ARRAY16 VLV_U_33 2
ARRAY16 VLV_W_33 2
ARRAY16 VLV_P_K_K1_33 2
ARRAY16 VLV_H_33 2
ARRAY16 VLV_DH_33 2
ARRAY16 VLV_R_33 2
ARRAY16 VLV_Z_33 2
ARRAY16 VLV_MINUS_H_33 2
ARRAY16 VLV_Y_33 2
ARRAY16 VLV_S1_33 2
ARRAY16 VLV_S2_33 2
ARRAY16 VLV_S_33 2
ARRAY16 VLV_K1_33 2
ARRAY16 VLV_K_33 2
ARRAY16 VLV_KY_33 2
ARRAY16 VLV_KH_33 2
ARRAY16 VLV_MINUS_KH_33 2
ARRAY16 VLV_P1_33 2
ARRAY16 VLV_P_33 2
DATAS VLV_I_35 252
DATAS VLV_D_35 252
DATAF VLV_G1_35
DATAF VLV_SIGNO_35
DATAF VLV_VMIN_35
DATAF VLV_VMAX_35
DATAF VLV_ENCODR_35
DATAF VLV_DETERMINANTE_42
DATAF VLV_I_43
DATAF VLV_ROTATION_44
DATAF VLV_SIGN_44
DATAF VLV_PROGRESS_44
DATAF VLV_DEGREES_PER_INTERVAL_44
DATAF VLV_ROTATION_46
DATAF VLV_SIGN_46
DATAF VLV_PROGRESS_46
DATAF VLV_DEGREES_PER_INTERVAL_46
DATAF VLV_DEGREES_48
DATAF VLV_ROTATION_48
DATAF VLV_SIGN_48
DATAF VLV_PROGRESS_48
DATAF VLV_DEGREES_PER_INTERVAL_48
DATAF VLV_DEGREES_49
DATAF VLV_ROTATION_49
DATAF VLV_SIGN_49
DATAF VLV_PROGRESS_49
DATAF VLV_DEGREES_PER_INTERVAL_49
DATAF VLV_DEGREES_A_50
DATAF VLV_DEGREES_D_50
DATA32 RUNCOUNTER_F_PIDCONTROL_AD_0
DATA32 RUNCOUNTER_F_ODOMETRY_0
DATA32 RUNCOUNTER_F_DISPLAYVELOCIDADES_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_49
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_48
    CALL ARRAYCREATE_FLOAT VLV_VELI_K1_33
    CALL ARRAYCREATE_FLOAT VLV_VELD_K1_33
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 0.0 VLV_ANGLE_35
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_46
    MOVEF_F 0.0 VLV_DEGREES_46
    MOVEF_F 0.0 VLV_VELOCIDAD_19
    MOVEF_F 0.0 VLV_DISTANCIA_19
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_44
    MOVEF_F 0.0 VLV_DEGREES_44
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_47
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_47
    MOVEF_F 0.0 VLV_DEGREES_A_47
    MOVEF_F 0.0 VLV_DEGREES_D_47
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_50
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_50
    MOVEF_F 0.0 VLV_V0_14
    MOVEF_F 0.0 VLV_VMAX_14
    MOVEF_F 0.0 VLV_KP_14
    MOVEF_F 0.0 VLV_KI_14
    MOVEF_F 0.0 VLV_KD_14
    MOVEF_F 0.0 VLV_ACCELENCODER_14
    CALL ARRAYCREATE_FLOAT VLV_M_43
    MOVEF_F 0.0 VLV_K_43
    CALL ARRAYCREATE_FLOAT VLV_S_43
    CALL ARRAYCREATE_FLOAT VLV_M_39
    CALL ARRAYCREATE_FLOAT VLV_S_39
    CALL ARRAYCREATE_FLOAT VLV_M_42
    CALL ARRAYCREATE_FLOAT VLV_S_42
    CALL ARRAYCREATE_FLOAT VLV_VELI_33
    CALL ARRAYCREATE_FLOAT VLV_VELD_33
    CALL ARRAYCREATE_FLOAT VLV_OMEGAI_K1_33
    CALL ARRAYCREATE_FLOAT VLV_OMEGAD_K1_33
    CALL ARRAYCREATE_FLOAT VLV_V_33
    CALL ARRAYCREATE_FLOAT VLV_DH_T_33
    CALL ARRAYCREATE_FLOAT VLV_S_INV_33
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F 0.0 VGV_SENTIDO_MOTORES
    CALL ARRAYCREATE_FLOAT VGV_L
    CALL ARRAYCREATE_FLOAT VGV_R
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_L
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYCREATE_FLOAT VGV_XT
    CALL ARRAYCREATE_FLOAT VGV_YT
    CALL ARRAYCREATE_FLOAT VGV_THETAT
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_D_L
    MOVEF_F 0.0 VGV_D_R
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_DELTA_THETA
    MOVEF_F 0.0 VGV_KP_A
    MOVEF_F 0.0 VGV_KI_A
    MOVEF_F 0.0 VGV_KD_A
    MOVEF_F 0.0 VGV_KP_D
    MOVEF_F 0.0 VGV_KI_D
    MOVEF_F 0.0 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    MOVEF_F 0.0 VGV_OLD_B
    MOVEF_F 0.0 VGV_OLD_C
    MOVEF_F 0.0 VGV_AGG_B
    MOVEF_F 0.0 VGV_AGG_C
    MOVEF_F 0.0 VGV_ITERACION
    MOVEF_F 0.0 VGV_RADS_B
    MOVEF_F 0.0 VGV_RADS_C
    MOVEF_F 0.0 VGV_MEDIA_B
    MOVEF_F 0.0 VGV_MEDIA_C
    STRINGS DUPLICATE '' VLV_I_14
    STRINGS DUPLICATE '' VLV_D_14
    MOVEF_F 0.0 VLV_U_14
    MOVEF_F 0.0 VLV_ERROR_14
    MOVEF_F 0.0 VLV_OLDERROR_14
    MOVEF_F 0.0 VLV_ERRSUM_14
    MOVEF_F 0.0 VLV_VEL_14
    MOVEF_F 0.0 VLV_SENTIDO_14
    MOVEF_F 0.0 VLV_DIAMETRO_19
    MOVEF_F 0.0 VLV_ENC_19
    MOVEF_F 0.0 VLV_START_B_19
    MOVEF_F 0.0 VLV_START_C_19
    MOVEF_F 0.0 VLV_ENCODER_C_19
    MOVEF_F 0.0 VLV_ENCODER_B_19
    MOVEF_F 0.0 VLV_ERROR_19
    MOVEF_F 0.0 VLV_PROPORCIAL_19
    MOVEF_F 0.0 VLV_ITERACION_33
    MOVEF_F 0.0 VLV_RADIO_33
    CALL ARRAYCREATE_FLOAT VLV_I_33
    CALL ARRAYCREATE_FLOAT VLV_MINUS_1_33
    CALL ARRAYCREATE_FLOAT VLV_DF_K_33
    CALL ARRAYCREATE_FLOAT VLV_K_K1_33
    CALL ARRAYCREATE_FLOAT VLV_K1_K_33
    MOVEF_F 0.0 VLV_DELTA_T_33
    MOVEF_F 0.0 VLV_OLD_T_33
    MOVEF_F 0.0 VLV_OLD_I_33
    MOVEF_F 0.0 VLV_OLD_D_33
    MOVEF_F 0.0 VLV_LOG_FILE_33
    CALL ARRAYCREATE_FLOAT VLV_F_K_33
    CALL ARRAYCREATE_FLOAT VLV_Q_K1_33
    CALL ARRAYCREATE_FLOAT VLV_U_33
    CALL ARRAYCREATE_FLOAT VLV_W_33
    CALL ARRAYCREATE_FLOAT VLV_P_K_K1_33
    CALL ARRAYCREATE_FLOAT VLV_H_33
    CALL ARRAYCREATE_FLOAT VLV_DH_33
    CALL ARRAYCREATE_FLOAT VLV_R_33
    CALL ARRAYCREATE_FLOAT VLV_Z_33
    CALL ARRAYCREATE_FLOAT VLV_MINUS_H_33
    CALL ARRAYCREATE_FLOAT VLV_Y_33
    CALL ARRAYCREATE_FLOAT VLV_S1_33
    CALL ARRAYCREATE_FLOAT VLV_S2_33
    CALL ARRAYCREATE_FLOAT VLV_S_33
    CALL ARRAYCREATE_FLOAT VLV_K1_33
    CALL ARRAYCREATE_FLOAT VLV_K_33
    CALL ARRAYCREATE_FLOAT VLV_KY_33
    CALL ARRAYCREATE_FLOAT VLV_KH_33
    CALL ARRAYCREATE_FLOAT VLV_MINUS_KH_33
    CALL ARRAYCREATE_FLOAT VLV_P1_33
    CALL ARRAYCREATE_FLOAT VLV_P_33
    STRINGS DUPLICATE '' VLV_I_35
    STRINGS DUPLICATE '' VLV_D_35
    MOVEF_F 0.0 VLV_G1_35
    MOVEF_F 0.0 VLV_SIGNO_35
    MOVEF_F 0.0 VLV_VMIN_35
    MOVEF_F 0.0 VLV_VMAX_35
    MOVEF_F 0.0 VLV_ENCODR_35
    MOVEF_F 0.0 VLV_DETERMINANTE_42
    MOVEF_F 0.0 VLV_I_43
    MOVEF_F 0.0 VLV_ROTATION_44
    MOVEF_F 0.0 VLV_SIGN_44
    MOVEF_F 0.0 VLV_PROGRESS_44
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_44
    MOVEF_F 0.0 VLV_ROTATION_46
    MOVEF_F 0.0 VLV_SIGN_46
    MOVEF_F 0.0 VLV_PROGRESS_46
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_46
    MOVEF_F 0.0 VLV_DEGREES_48
    MOVEF_F 0.0 VLV_ROTATION_48
    MOVEF_F 0.0 VLV_SIGN_48
    MOVEF_F 0.0 VLV_PROGRESS_48
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_48
    MOVEF_F 0.0 VLV_DEGREES_49
    MOVEF_F 0.0 VLV_ROTATION_49
    MOVEF_F 0.0 VLV_SIGN_49
    MOVEF_F 0.0 VLV_PROGRESS_49
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_49
    MOVEF_F 0.0 VLV_DEGREES_A_50
    MOVEF_F 0.0 VLV_DEGREES_D_50
    MOVE32_32 0 RUNCOUNTER_F_PIDCONTROL_AD_0
    MOVE32_32 0 RUNCOUNTER_F_ODOMETRY_0
    MOVE32_32 0 RUNCOUNTER_F_DISPLAYVELOCIDADES_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_PIDCONTROL_AD_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_PIDCONTROL_AD_0 0
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 -1 RUNCOUNTER_F_PIDCONTROL_AD_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_ODOMETRY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_ODOMETRY_0 1
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 -1 RUNCOUNTER_F_ODOMETRY_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_DISPLAYVELOCIDADES_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_DISPLAYVELOCIDADES_0 2
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAYVELOCIDADES_0 -1 RUNCOUNTER_F_DISPLAYVELOCIDADES_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_PIDCONTROL_AD_0
subcall PROGRAM_F_ODOMETRY_0
subcall PROGRAM_F_DISPLAYVELOCIDADES_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    DATAF F.6
    DATAF F.7
    DATAF F.8
    DATAF F.9
    DATAF F.10
    DATAF F.11
    DATAF F.12
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch817
    WRITE32 ENDSUB_F_PIDCONTROL_AD_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_PIDCONTROL_AD_0
  dispatch817:
    JR_NEQ32 SUBPROGRAM 1 dispatch818
    WRITE32 ENDSUB_F_ODOMETRY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ODOMETRY_0
  dispatch818:
    JR_NEQ32 SUBPROGRAM 2 dispatch819
    WRITE32 ENDSUB_F_DISPLAYVELOCIDADES_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DISPLAYVELOCIDADES_0
  dispatch819:
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_49
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_48
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_VELI_K1_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_VELD_K1_33
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 0.0 VLV_ANGLE_35
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_46
    MOVEF_F 0.0 VLV_DEGREES_46
    MOVEF_F 0.0 VLV_VELOCIDAD_19
    MOVEF_F 0.0 VLV_DISTANCIA_19
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_44
    MOVEF_F 0.0 VLV_DEGREES_44
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_47
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_47
    MOVEF_F 0.0 VLV_DEGREES_A_47
    MOVEF_F 0.0 VLV_DEGREES_D_47
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_50
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_50
    MOVEF_F 0.0 VLV_V0_14
    MOVEF_F 0.0 VLV_VMAX_14
    MOVEF_F 0.0 VLV_KP_14
    MOVEF_F 0.0 VLV_KI_14
    MOVEF_F 0.0 VLV_KD_14
    MOVEF_F 0.0 VLV_ACCELENCODER_14
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_M_43
    MOVEF_F 0.0 VLV_K_43
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_43
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_39
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_M_42
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_42
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_VELI_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_VELD_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_OMEGAI_K1_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_OMEGAD_K1_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_V_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_DH_T_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_INV_33
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F 0.0 VGV_SENTIDO_MOTORES
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_R
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 1.0 VGV_SENTIDO_D
    MOVEF_F 84.5 VGV_DW
    MOVEF_F 56.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F -1.0 VGV_SENTIDO_MOTORES
    MOVEF_F -1.0 VGV_SENTIDO_MOTORES
    DATA32 tmp17
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 1  RUNCOUNTER_F_PIDCONTROL_AD_0 tmp17
    JR_NEQ32 0 tmp17 alreadylaunched17
    OBJECT_START TF_PIDCONTROL_AD_0
  alreadylaunched17:
    DATA32 tmp18
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 1  RUNCOUNTER_F_ODOMETRY_0 tmp18
    JR_NEQ32 0 tmp18 alreadylaunched18
    OBJECT_START TF_ODOMETRY_0
  alreadylaunched18:
    DATA32 tmp19
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAYVELOCIDADES_0 1  RUNCOUNTER_F_DISPLAYVELOCIDADES_0 tmp19
    JR_NEQ32 0 tmp19 alreadylaunched19
    OBJECT_START TF_DISPLAYVELOCIDADES_0
  alreadylaunched19:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB20 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB20:
    DATA32 milliseconds21
	MOVEF_32 10000.0 milliseconds21
	DATA32 timer21
	TIMER_WAIT milliseconds21 timer21
	TIMER_READY timer21
ENDTHREAD:
    RETURN
SUB_F_STARTARM_0:
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    TIMER_READ timeMC1
  while23:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 500.0 endwhile23
  whilebody23:
    ADDF VGV_ANGLE_D 1.0 VGV_ANGLE_D
    DATA32 milliseconds26
	MOVEF_32 3.0 milliseconds26
	DATA32 timer26
	TIMER_WAIT milliseconds26 timer26
	TIMER_READY timer26
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 500.0 whilebody23
  endwhile23:
    DATA32 milliseconds28
	MOVEF_32 500.0 milliseconds28
	DATA32 timer28
	TIMER_WAIT milliseconds28 timer28
	TIMER_READY timer28
    CALL MOTOR.GETCOUNT 'D' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 60.0 else29_1
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_49
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB32 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB32:
    MOVEF_F -1.0 VGV_SENTIDO_D
    JR endif29
  else29_1:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_49
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB33 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB33:
    MOVEF_F 1.0 VGV_SENTIDO_D
  else29_2:
  endif29:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_48
    WRITE32 ENDSUB_F_BMOVEA0_1:CALLSUB34 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA0_1
CALLSUB34:
    DATA32 milliseconds35
	MOVEF_32 100.0 milliseconds35
	DATA32 timer35
	TIMER_WAIT milliseconds35 timer35
	TIMER_READY timer35
RETSUB_F_STARTARM_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STARTARM_0:
SUB_F_ODOMETRY_0:
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_XT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_YT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_THETAT
    MOVEF_F 0.0 VGV_I
  while41:
  whilebody41:
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_L
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_R
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_L
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_L
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf53
    DATA8 flag53
    DIVF F.0 2.0 tmpf53
    CP_EQF 0.0 2.0 flag53
    SELECTF flag53 0.0 tmpf53 VGV_D_L

    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_R
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_R
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf59
    DATA8 flag59
    DIVF F.0 2.0 tmpf59
    CP_EQF 0.0 2.0 flag59
    SELECTF flag59 0.0 tmpf59 VGV_D_R

    ADDF VGV_D_L VGV_D_R F.0
    DATAF tmpf61
    DATA8 flag61
    DIVF F.0 2.0 tmpf61
    CP_EQF 0.0 2.0 flag61
    SELECTF flag61 0.0 tmpf61 VGV_D

    SUBF VGV_D_R VGV_D_L F.0
    MULF 2.0 VGV_DW F.1
    DATAF tmpf64
    DATA8 flag64
    DIVF F.0 F.1 tmpf64
    CP_EQF 0.0 F.1 flag64
    SELECTF flag64 0.0 tmpf64 VGV_DELTA_THETA

    JR_EQF VGV_XTCORRECT 0.0 else65_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_XTCORRECT VGV_XT
    MOVEF_F 0.0 VGV_XTCORRECT
    JR endif65
  else65_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf70
    DATA8 flag70
    DIVF VGV_DELTA_THETA 2.0 tmpf70
    CP_EQF 0.0 2.0 flag70
    SELECTF flag70 0.0 tmpf70 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf72
	MULF F.5 57.295779513082  tmpf72
	MATH SIN  tmpf72 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_XT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_XT
  else65_2:
  endif65:
    JR_EQF VGV_YTCORRECT 0.0 else78_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_YTCORRECT VGV_YT
    MOVEF_F 0.0 VGV_YTCORRECT
    JR endif78
  else78_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf83
    DATA8 flag83
    DIVF VGV_DELTA_THETA 2.0 tmpf83
    CP_EQF 0.0 2.0 flag83
    SELECTF flag83 0.0 tmpf83 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf85
	MULF F.5 57.295779513082 tmpf85
	MATH COS tmpf85 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_YT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_YT
  else78_2:
  endif78:
    JR_EQF VGV_THETATCORRECT 0.0 else91_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_THETATCORRECT VGV_THETAT
    MOVEF_F 0.0 VGV_THETATCORRECT
    JR endif91
  else91_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_THETAT
    ADDF F.2 VGV_DELTA_THETA F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_THETAT
  else91_2:
  endif91:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_XTIME VGV_XT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_YTIME VGV_YT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_THETATIME VGV_THETAT
    ADDF VGV_I 1.0 VGV_I
    DATA32 milliseconds105
	MOVEF_32 10.0 milliseconds105
	DATA32 timer105
	TIMER_WAIT milliseconds105 timer105
	TIMER_READY timer105
    JR whilebody41
  endwhile41:
RETSUB_F_ODOMETRY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ODOMETRY_0:
SUB_F_PIDCONTROL_AD_0:
    MOVEF_F 0.5 VGV_KP_A
    MOVEF_F 0.0001 VGV_KI_A
    MOVEF_F 0.1 VGV_KD_A
    MOVEF_F 0.5 VGV_KP_D
    MOVEF_F 0.0001 VGV_KI_D
    MOVEF_F 0.1 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
  while106:
  whilebody106:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    SUBF VGV_ANGLE_A F.0 VGV_ERROR_A
    ADDF VGV_ERRSUM_A VGV_ERROR_A VGV_ERRSUM_A
    MULF VGV_ERROR_A VGV_KP_A F.1
    MULF VGV_ERRSUM_A VGV_KI_A F.3
    DATAF tmpf112
    DATA8 flag112
    DIVF F.3 1.0 tmpf112
    CP_EQF 0.0 1.0 flag112
    SELECTF flag112 0.0 tmpf112 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_A VGV_OLDERROR_A F.2
    MULF F.2 VGV_KD_A F.1
    ADDF F.0 F.1 VGV_U_A
    MOVEF_8 VGV_U_A setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    SUBF VGV_ANGLE_D F.0 VGV_ERROR_D
    ADDF VGV_ERRSUM_D VGV_ERROR_D VGV_ERRSUM_D
    MULF VGV_ERROR_D VGV_KP_D F.1
    MULF VGV_ERRSUM_D VGV_KI_D F.3
    DATAF tmpf123
    DATA8 flag123
    DIVF F.3 1.0 tmpf123
    CP_EQF 0.0 1.0 flag123
    SELECTF flag123 0.0 tmpf123 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_D VGV_OLDERROR_D F.3
    MULF F.3 VGV_KD_D F.2
    MULF F.2 VGV_SENTIDO_D F.1
    ADDF F.0 F.1 VGV_U_D
    MOVEF_8 VGV_U_D setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    JR whilebody106
  endwhile106:
RETSUB_F_PIDCONTROL_AD_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_PIDCONTROL_AD_0:
SUB_F_DISPLAYVELOCIDADES_0:
    MOVEF_F 0.0 VGV_OLD_B
    MOVEF_F 0.0 VGV_OLD_C
    MOVEF_F 0.0 VGV_AGG_B
    MOVEF_F 0.0 VGV_AGG_C
    MOVEF_F 0.0 VGV_ITERACION
  while130:
  whilebody130:
    ADDF VGV_ITERACION 1.0 VGV_ITERACION
    MOVE32_32 1 STOPLCDUPDATE
    CALL LCD.CLEAR
    OUTPUT_READ 0 1 getSpeedB tmpTachoB
	MOVE8_F getSpeedB F.1
    MULF F.1 -1.0 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Velocidad de B:  ' S.1 S.0
    CALL LCD.WRITE 5.0 45.0 S.0
    OUTPUT_READ 0 2 getSpeedC tmpTachoC
	MOVE8_F getSpeedC F.1
    MULF F.1 -1.0 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Velocidad de C:  ' S.1 S.0
    CALL LCD.WRITE 5.0 55.0 S.0
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.3
    SUBF F.3 VGV_OLD_B F.2
    DIVF F.2 57.295779513082 F.1
    DATAF tmpf147
    DATA8 flag147
    DIVF F.1 0.05 tmpf147
    CP_EQF 0.0 0.05 flag147
    SELECTF flag147 0.0 tmpf147 F.0

    MULF F.0 -1.0 VGV_RADS_B
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.3
    SUBF F.3 VGV_OLD_C F.2
    DIVF F.2 57.295779513082 F.1
    DATAF tmpf152
    DATA8 flag152
    DIVF F.1 0.05 tmpf152
    CP_EQF 0.0 0.05 flag152
    SELECTF flag152 0.0 tmpf152 F.0

    MULF F.0 -1.0 VGV_RADS_C
    ADDF VGV_AGG_B VGV_RADS_B VGV_AGG_B
    ADDF VGV_AGG_C VGV_RADS_C VGV_AGG_C
    DATAF tmpf156
    DATA8 flag156
    DIVF VGV_AGG_B VGV_ITERACION tmpf156
    CP_EQF 0.0 VGV_ITERACION flag156
    SELECTF flag156 0.0 tmpf156 VGV_MEDIA_B

    DATAF tmpf157
    DATA8 flag157
    DIVF VGV_AGG_C VGV_ITERACION tmpf157
    CP_EQF 0.0 VGV_ITERACION flag157
    SELECTF flag157 0.0 tmpf157 VGV_MEDIA_C

    STRINGS VALUE_FORMATTED VGV_MEDIA_B '%g' 99 S.1
    CALL TEXT.APPEND 'rad/s de B: ' S.1 S.0
    CALL LCD.WRITE 5.0 65.0 S.0
    STRINGS VALUE_FORMATTED VGV_MEDIA_C '%g' 99 S.1
    CALL TEXT.APPEND 'rad/s de C: ' S.1 S.0
    CALL LCD.WRITE 5.0 75.0 S.0
    MOVE32_32 0 STOPLCDUPDATE
	UI_DRAW UPDATE
    DATA32 milliseconds165
	MOVEF_32 50.0 milliseconds165
	DATA32 timer165
	TIMER_WAIT milliseconds165 timer165
	TIMER_READY timer165
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB VGV_OLD_B
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC VGV_OLD_C
    JR whilebody130
  endwhile130:
RETSUB_F_DISPLAYVELOCIDADES_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DISPLAYVELOCIDADES_0:
SUB_F_MAIN_0:
    CALL VECTOR.INIT 100.0 10.0 VGV_L
    CALL VECTOR.INIT 100.0 10.0 VGV_R
    ARRAY COPY VGV_L VLV_VELI_K1_33
    ARRAY COPY VGV_R VLV_VELD_K1_33
    WRITE32 ENDSUB_F_KALMAN_FILTER_2:CALLSUB170 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_KALMAN_FILTER_2
CALLSUB170:
    WRITE32 ENDSUB_F_STARTARM_0:CALLSUB171 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STARTARM_0
CALLSUB171:
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 20.0 VLV_V2_35
    MOVEF_F 40.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB172 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB172:
    MOVEF_F 20.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 40.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB173 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB173:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_46
    MOVEF_F 140.0 VLV_DEGREES_46
    WRITE32 ENDSUB_F_BMOVED_2:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED_2
CALLSUB174:
    MOVEF_F 30.0 VLV_VELOCIDAD_19
    MOVEF_F 80.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB175 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB175:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_49
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB176 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB176:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_44
    MOVEF_F 180.0 VLV_DEGREES_44
    WRITE32 ENDSUB_F_BMOVEA_2:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA_2
CALLSUB177:
    MOVEF_F -30.0 VLV_VELOCIDAD_19
    MOVEF_F 30.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB178:
    MOVEF_F 20.0 VLV_V1_35
    MOVEF_F -20.0 VLV_V2_35
    MOVEF_F 60.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB179 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB179:
    MOVEF_F 30.0 VLV_VELOCIDAD_19
    MOVEF_F 60.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB180 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB180:
    MOVEF_F -20.0 VLV_V1_35
    MOVEF_F 20.0 VLV_V2_35
    MOVEF_F 55.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB181 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB181:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_A_47
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_D_47
    MOVEF_F 60.0 VLV_DEGREES_A_47
    MOVEF_F 160.0 VLV_DEGREES_D_47
    WRITE32 ENDSUB_F_BMOVEAD_4:CALLSUB182 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD_4
CALLSUB182:
    DATA32 milliseconds183
	MOVEF_32 1000.0 milliseconds183
	DATA32 timer183
	TIMER_WAIT milliseconds183 timer183
	TIMER_READY timer183
    MOVEF_F -30.0 VLV_VELOCIDAD_19
    MOVEF_F 200.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB184 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB184:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_A_50
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_D_50
    WRITE32 ENDSUB_F_BMOVEAD0_2:CALLSUB185 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD0_2
CALLSUB185:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_SL14SICF_6:
    STRINGS DUPLICATE 'B' VLV_I_14
    STRINGS DUPLICATE 'C' VLV_D_14
    MOVEF_F 3.1415926535897932384 F.2
    MULF 56.0 F.2 F.1
    DATAF tmpf188
    DATA8 flag188
    DIVF VLV_ACCELENCODER_14 F.1 tmpf188
    CP_EQF 0.0 F.1 flag188
    SELECTF flag188 0.0 tmpf188 F.0

    MULF F.0 360.0 VLV_ACCELENCODER_14
    MOVEF_F 0.0 VLV_U_14
    MOVEF_F 0.0 VLV_ERROR_14
    MOVEF_F 0.0 VLV_OLDERROR_14
    MOVEF_F 0.0 VLV_ERRSUM_14
    CALL MOTOR.RESETCOUNT 'C'
  while191:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 15.0 or192
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 15.0 endwhile191
  or192:
  whilebody191:
    CALL MOTOR.GETCOUNT 'C' F.3
    DATAF tmpf196
    DATA8 flag196
    DIVF F.3 VLV_ACCELENCODER_14 tmpf196
    CP_EQF 0.0 VLV_ACCELENCODER_14 flag196
    SELECTF flag196 0.0 tmpf196 F.2

    MULF F.2 0.72 F.1
    ADDF VLV_VMAX_14 VLV_V0_14 F.2
    MULF F.1 F.2 F.0
    ADDF F.0 VLV_V0_14 VLV_VEL_14
    DATA8 flag201
	CP_LTF VLV_VEL_14 VLV_VMAX_14 flag201
	SELECTF flag201 VLV_VEL_14 VLV_VMAX_14 VLV_VEL_14
    MATH ABS VLV_VEL_14 F.0
    DATAF tmpf203
    DATA8 flag203
    DIVF VLV_VEL_14 F.0 tmpf203
    CP_EQF 0.0 F.0 flag203
    SELECTF flag203 0.0 tmpf203 VLV_SENTIDO_14

    CALL SENSOR.READPERCENT 1.0 F.1
    CALL SENSOR.READPERCENT 4.0 F.2
    SUBF F.1 F.2 F.0
    MULF F.0 VLV_SENTIDO_14 VLV_ERROR_14
    ADDF VLV_ERRSUM_14 VLV_ERROR_14 VLV_ERRSUM_14
    MULF VLV_ERROR_14 VLV_KP_14 F.1
    SUBF VLV_ERROR_14 VLV_OLDERROR_14 F.3
    MULF F.3 VLV_KD_14 F.2
    ADDF F.1 F.2 F.0
    MULF VLV_ERRSUM_14 VLV_KI_14 F.1
    ADDF F.0 F.1 VLV_U_14
    CALL TEXT.APPEND VLV_I_14 VLV_D_14 S.0
    ADDF VLV_VEL_14 VLV_U_14 F.1
    MULF F.1 VGV_SENTIDO_MOTORES F.0
    SUBF VLV_VEL_14 VLV_U_14 F.2
    MULF F.2 VGV_SENTIDO_MOTORES F.1
    CALL MOTOR.STARTSYNC S.0 F.0 F.1
    MOVEF_F VLV_ERROR_14 VLV_OLDERROR_14
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 15.0 whilebody191
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 15.0 whilebody191
  endwhile191:
    CALL TEXT.APPEND VLV_I_14 VLV_D_14 S.0
    CALL MOTOR.STOP S.0 'False'
RETSUB_F_SL14SICF_6:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SL14SICF_6:
SUB_F_ENCODERRECTOMG_2:
    MOVEF_F 56.0 VLV_DIAMETRO_19
    MULF VLV_DISTANCIA_19 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf227
    DATA8 flag227
    DIVF F.1 F.2 tmpf227
    CP_EQF 0.0 F.2 flag227
    SELECTF flag227 0.0 tmpf227 F.0

    DATAF tmpf228
    DATA8 flag228
    DIVF F.0 VLV_DIAMETRO_19 tmpf228
    CP_EQF 0.0 VLV_DIAMETRO_19 flag228
    SELECTF flag228 0.0 tmpf228 VLV_ENC_19

    CALL MOTOR.GETCOUNT 'B' VLV_START_B_19
    CALL MOTOR.GETCOUNT 'C' VLV_START_C_19
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_19 VLV_ENCODER_C_19
  while233:
    MATH ABS VLV_ENCODER_C_19 F.0
    JR_GTEQF F.0 VLV_ENC_19 endwhile233
  whilebody233:
    CALL MOTOR.GETCOUNT 'B' F.1
    SUBF F.1 VLV_START_B_19 F.0
    MULF F.0 VGV_SENTIDO_MOTORES VLV_ENCODER_B_19
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.1 VLV_START_C_19 F.0
    MULF F.0 VGV_SENTIDO_MOTORES VLV_ENCODER_C_19
    SUBF VLV_ENCODER_B_19 VLV_ENCODER_C_19 VLV_ERROR_19
    MULF VLV_ERROR_19 2.0 VLV_PROPORCIAL_19
    SUBF VLV_VELOCIDAD_19 VLV_PROPORCIAL_19 F.1
    MULF F.1 VGV_SENTIDO_MOTORES F.0
    ADDF VLV_VELOCIDAD_19 VLV_PROPORCIAL_19 F.2
    MULF F.2 VGV_SENTIDO_MOTORES F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    MATH ABS VLV_ENCODER_C_19 F.0
    JR_LTF F.0 VLV_ENC_19 whilebody233
  endwhile233:
    CALL MOTOR.STOP 'BC' 'True'
RETSUB_F_ENCODERRECTOMG_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ENCODERRECTOMG_2:
SUB_F_KALMAN_FILTER_2:
    MOVEF_F 0.0 VLV_ITERACION_33
    MOVEF_F 28.0 VLV_RADIO_33
    ARRAY COPY VLV_VELI_K1_33 VLV_M_43
    MOVEF_F -1.0 VLV_K_43
    WRITE32 ENDSUB_F_MULTIMATRIZCOEF_3:CALLSUB250 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MULTIMATRIZCOEF_3
CALLSUB250:
    ARRAY COPY VLV_S_43 VLV_VELI_33
    ARRAY COPY VLV_VELD_K1_33 VLV_M_43
    MOVEF_F -1.0 VLV_K_43
    WRITE32 ENDSUB_F_MULTIMATRIZCOEF_3:CALLSUB251 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MULTIMATRIZCOEF_3
CALLSUB251:
    ARRAY COPY VLV_S_43 VLV_VELD_33
    ARRAY COPY VLV_VELI_K1_33 VLV_M_43
    MOVEF_F 56.1197 VLV_K_43
    WRITE32 ENDSUB_F_MULTIMATRIZCOEF_3:CALLSUB252 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MULTIMATRIZCOEF_3
CALLSUB252:
    ARRAY COPY VLV_S_43 VLV_OMEGAI_K1_33
    ARRAY COPY VLV_VELD_K1_33 VLV_M_43
    MOVEF_F 59.879 VLV_K_43
    WRITE32 ENDSUB_F_MULTIMATRIZCOEF_3:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MULTIMATRIZCOEF_3
CALLSUB253:
    ARRAY COPY VLV_S_43 VLV_OMEGAD_K1_33
    CALL VECTOR.DATA 9.0 '1 0 0  0 1 0  0 0 1' VLV_I_33
    CALL VECTOR.DATA 9.0 '-1 0 0 0 -1 0 0 0 -1' VLV_MINUS_1_33
    CALL VECTOR.INIT 9.0 0.0 VLV_DF_K_33
    CALL VECTOR.INIT 3.0 0.0 VLV_K_K1_33
    CALL VECTOR.INIT 3.0 0.0 VLV_K1_K_33
    CALL EV3.TIME VLV_DELTA_T_33
    MOVEF_F 0.0 VLV_OLD_T_33
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    MULF -1.0 F.0 VLV_OLD_I_33
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.0
    MULF -1.0 F.0 VLV_OLD_D_33
    CALL EV3FILE.OPENWRITE 'log' VLV_LOG_FILE_33
  while265:
  whilebody265:
    CALL EV3.TIME F.0
    SUBF F.0 VLV_OLD_T_33 VLV_DELTA_T_33
    CALL EV3.TIME VLV_OLD_T_33
    MOVEF_F VLV_DELTA_T_33 VGV_D_T
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.0 VLV_VELI_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.1 VLV_VELD_33
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL ARRAYGET_FLOAT 0.0 F.1 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.7 VLV_OMEGAI_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.8 VLV_OMEGAD_K1_33
    ADDF F.7 F.8 F.6
    MULF F.6 VLV_RADIO_33 F.5
    MULF F.5 VLV_DELTA_T_33 F.4
    DATAF tmpf278
    DATA8 flag278
    DIVF F.4 2.0 tmpf278
    CP_EQF 0.0 2.0 flag278
    SELECTF flag278 0.0 tmpf278 F.3

    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.11 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.12 VLV_OMEGAI_K1_33
    SUBF F.11 F.12 F.10
    MULF F.10 VLV_RADIO_33 F.9
    MULF F.9 VLV_DELTA_T_33 F.8
    MULF 4.0 VGV_DW F.9
    DATAF tmpf286
    DATA8 flag286
    DIVF F.8 F.9 tmpf286
    CP_EQF 0.0 F.9 flag286
    SELECTF flag286 0.0 tmpf286 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf288
	MULF F.5 57.295779513082 tmpf288
	MATH COS tmpf288 F.4
    MULF F.3 F.4 F.2
    ADDF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.1 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.7 VLV_OMEGAI_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.8 VLV_OMEGAD_K1_33
    ADDF F.7 F.8 F.6
    MULF F.6 VLV_RADIO_33 F.5
    MULF F.5 VLV_DELTA_T_33 F.4
    DATAF tmpf298
    DATA8 flag298
    DIVF F.4 2.0 tmpf298
    CP_EQF 0.0 2.0 flag298
    SELECTF flag298 0.0 tmpf298 F.3

    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.11 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.12 VLV_OMEGAI_K1_33
    SUBF F.11 F.12 F.10
    MULF F.10 VLV_RADIO_33 F.9
    MULF F.9 VLV_DELTA_T_33 F.8
    MULF 4.0 VGV_DW F.9
    DATAF tmpf306
    DATA8 flag306
    DIVF F.8 F.9 tmpf306
    CP_EQF 0.0 F.9 flag306
    SELECTF flag306 0.0 tmpf306 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf308
	MULF F.5 57.295779513082  tmpf308
	MATH SIN  tmpf308 F.4
    MULF F.3 F.4 F.2
    ADDF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.1 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.6 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.7 VLV_OMEGAI_K1_33
    SUBF F.6 F.7 F.5
    MULF F.5 VLV_RADIO_33 F.4
    MULF F.4 VLV_DELTA_T_33 F.3
    MULF 2.0 VGV_DW F.4
    DATAF tmpf319
    DATA8 flag319
    DIVF F.3 F.4 tmpf319
    CP_EQF 0.0 F.4 flag319
    SELECTF flag319 0.0 tmpf319 F.2

    ADDF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.6 VLV_OMEGAI_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.7 VLV_OMEGAD_K1_33
    ADDF F.6 F.7 F.5
    MULF F.5 VLV_RADIO_33 F.4
    MULF F.4 VLV_DELTA_T_33 F.3
    MULF -1.0 F.3 F.2
    DATAF tmpf328
    DATA8 flag328
    DIVF F.2 2.0 tmpf328
    CP_EQF 0.0 2.0 flag328
    SELECTF flag328 0.0 tmpf328 F.1

    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.9 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.10 VLV_OMEGAI_K1_33
    SUBF F.9 F.10 F.8
    MULF F.8 VLV_RADIO_33 F.7
    MULF F.7 VLV_DELTA_T_33 F.6
    MULF 4.0 VGV_DW F.7
    DATAF tmpf336
    DATA8 flag336
    DIVF F.6 F.7 tmpf336
    CP_EQF 0.0 F.7 flag336
    SELECTF flag336 0.0 tmpf336 F.5

    ADDF F.4 F.5 F.3
    DATAF tmpf338
	MULF F.3 57.295779513082  tmpf338
	MATH SIN  tmpf338 F.2
    MULF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DF_K_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.5 VLV_OMEGAI_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.6 VLV_OMEGAD_K1_33
    ADDF F.5 F.6 F.4
    MULF F.4 VLV_RADIO_33 F.3
    MULF F.3 VLV_DELTA_T_33 F.2
    DATAF tmpf346
    DATA8 flag346
    DIVF F.2 2.0 tmpf346
    CP_EQF 0.0 2.0 flag346
    SELECTF flag346 0.0 tmpf346 F.1

    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.9 VLV_OMEGAD_K1_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.10 VLV_OMEGAI_K1_33
    SUBF F.9 F.10 F.8
    MULF F.8 VLV_RADIO_33 F.7
    MULF F.7 VLV_DELTA_T_33 F.6
    MULF 4.0 VGV_DW F.7
    DATAF tmpf354
    DATA8 flag354
    DIVF F.6 F.7 tmpf354
    CP_EQF 0.0 F.7 flag354
    SELECTF flag354 0.0 tmpf354 F.5

    ADDF F.4 F.5 F.3
    DATAF tmpf356
	MULF F.3 57.295779513082 tmpf356
	MATH COS tmpf356 F.2
    MULF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DF_K_33
    CALL VECTOR.ADD 9.0 VLV_I_33 VLV_DF_K_33 VLV_F_K_33
    CALL VECTOR.DATA 9.0 '0.25 0 0  0 0.25 0 0 0 0.002' VLV_Q_K1_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_F_K_33 VLV_I_33 VLV_U_33
    ARRAY COPY VLV_U_33 VLV_M_39
    WRITE32 ENDSUB_F_TRASPMATVECT3X3_2:CALLSUB362 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TRASPMATVECT3X3_2
CALLSUB362:
    ARRAY COPY VLV_S_39 VLV_V_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_U_33 VLV_V_33 VLV_W_33
    CALL VECTOR.ADD 9.0 VLV_W_33 VLV_Q_K1_33 VLV_P_K_K1_33
    CALL VECTOR.INIT 3.0 0.0 VLV_H_33
    CALL ARRAYGET_FLOAT 2.0 F.2 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.3 VLV_K1_K_33
    SUBF F.2 F.3 F.1
    MULF F.1 VLV_DELTA_T_33 F.0
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_H_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH SQRT F.3 F.2
    CALL ARRAYGET_FLOAT 2.0 F.5 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K1_K_33
    SUBF F.5 F.6 F.4
    MULF VGV_DW F.4 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf386
    DATA8 flag386
    DIVF F.1 VLV_RADIO_33 tmpf386
    CP_EQF 0.0 VLV_RADIO_33 flag386
    SELECTF flag386 0.0 tmpf386 F.0

    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_H_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH SQRT F.3 F.2
    CALL ARRAYGET_FLOAT 2.0 F.5 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 2.0 F.6 VLV_K1_K_33
    SUBF F.5 F.6 F.4
    MULF VGV_DW F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf403
    DATA8 flag403
    DIVF F.1 VLV_RADIO_33 tmpf403
    CP_EQF 0.0 VLV_RADIO_33 flag403
    SELECTF flag403 0.0 tmpf403 F.0

    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_H_33
    CALL VECTOR.INIT 9.0 0.0 VLV_DH_33
    DATAF tmpf406
    DATA8 flag406
    DIVF 1.0 VLV_DELTA_T_33 tmpf406
    CP_EQF 0.0 VLV_DELTA_T_33 flag406
    SELECTF flag406 0.0 tmpf406 F.0

    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 0.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf422
    DATA8 flag422
    DIVF F.1 VLV_RADIO_33 tmpf422
    CP_EQF 0.0 VLV_RADIO_33 flag422
    SELECTF flag422 0.0 tmpf422 F.0

    CALL ARRAYSTORE_FLOAT 3.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf438
    DATA8 flag438
    DIVF F.1 VLV_RADIO_33 tmpf438
    CP_EQF 0.0 VLV_RADIO_33 flag438
    SELECTF flag438 0.0 tmpf438 F.0

    CALL ARRAYSTORE_FLOAT 4.0 F.0 VLV_DH_33
    MATH NEGATE VGV_DW F.1
    DATAF tmpf441
    DATA8 flag441
    DIVF F.1 VLV_RADIO_33 tmpf441
    CP_EQF 0.0 VLV_RADIO_33 flag441
    SELECTF flag441 0.0 tmpf441 F.0

    CALL ARRAYSTORE_FLOAT 5.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 0.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf457
    DATA8 flag457
    DIVF F.1 VLV_RADIO_33 tmpf457
    CP_EQF 0.0 VLV_RADIO_33 flag457
    SELECTF flag457 0.0 tmpf457 F.0

    CALL ARRAYSTORE_FLOAT 6.0 F.0 VLV_DH_33
    CALL ARRAYGET_FLOAT 0.0 F.6 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 0.0 F.7 VLV_K1_K_33
    SUBF F.6 F.7 F.5
    MATH POW F.5 2.0 F.4
    CALL ARRAYGET_FLOAT 1.0 F.7 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.8 VLV_K1_K_33
    SUBF F.7 F.8 F.6
    MATH POW F.6 2.0 F.5
    ADDF F.4 F.5 F.3
    MATH POW F.3 -0.5 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_K_K1_33
    CALL ARRAYGET_FLOAT 1.0 F.5 VLV_K1_K_33
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf473
    DATA8 flag473
    DIVF F.1 VLV_RADIO_33 tmpf473
    CP_EQF 0.0 VLV_RADIO_33 flag473
    SELECTF flag473 0.0 tmpf473 F.0

    CALL ARRAYSTORE_FLOAT 7.0 F.0 VLV_DH_33
    DATAF tmpf475
    DATA8 flag475
    DIVF VGV_DW VLV_RADIO_33 tmpf475
    CP_EQF 0.0 VLV_RADIO_33 flag475
    SELECTF flag475 0.0 tmpf475 F.0

    CALL ARRAYSTORE_FLOAT 8.0 F.0 VLV_DH_33
    CALL VECTOR.DATA 9.0 '0.25 0 0  0 0.25 0 0 0 0.002' VLV_R_33
    CALL VECTOR.INIT 3.0 0.0 VLV_Z_33
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_Z_33
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.2
    MULF -1.0 F.2 F.1
    SUBF F.1 VLV_OLD_I_33 F.0
    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_Z_33
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.2
    MULF -1.0 F.2 F.1
    SUBF F.1 VLV_OLD_D_33 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_Z_33
    CALL VECTOR.MULTIPLY 1.0 3.0 3.0 VLV_H_33 VLV_MINUS_1_33 VLV_MINUS_H_33
    CALL VECTOR.ADD 3.0 VLV_Z_33 VLV_MINUS_H_33 VLV_Y_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_DH_33 VLV_P_K_K1_33 VLV_S1_33
    ARRAY COPY VLV_DH_33 VLV_M_39
    WRITE32 ENDSUB_F_TRASPMATVECT3X3_2:CALLSUB492 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TRASPMATVECT3X3_2
CALLSUB492:
    ARRAY COPY VLV_S_39 VLV_DH_T_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_S1_33 VLV_DH_T_33 VLV_S2_33
    CALL VECTOR.ADD 9.0 VLV_S2_33 VLV_R_33 VLV_S_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_P_K_K1_33 VLV_DH_T_33 VLV_K1_33
    ARRAY COPY VLV_S_33 VLV_M_42
    WRITE32 ENDSUB_F_INVMATVECT3X3_2:CALLSUB496 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_INVMATVECT3X3_2
CALLSUB496:
    ARRAY COPY VLV_S_42 VLV_S_INV_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_K1_33 VLV_S_INV_33 VLV_K_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_K_33 VLV_Y_33 VLV_KY_33
    CALL VECTOR.ADD 9.0 VLV_K_K1_33 VLV_KY_33 VLV_K1_K_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_K_33 VLV_DH_T_33 VLV_KH_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_KH_33 VLV_MINUS_1_33 VLV_MINUS_KH_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_I_33 VLV_MINUS_KH_33 VLV_P1_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_P1_33 VLV_P_K_K1_33 VLV_P_33
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.0 VLV_OMEGAI_K1_33
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Medidas de entrada Izq: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    CALL ARRAYGET_FLOAT VLV_ITERACION_33 F.0 VLV_OMEGAD_K1_33
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Medidas de entrada Dch: ' S.1 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 S.0
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 'Sensores:'
    CALL EV3FILE.WRITENUMBERARRAY VLV_LOG_FILE_33 3.0 VLV_Z_33
    CALL EV3FILE.WRITELINE VLV_LOG_FILE_33 '---------------'
    ADDF VLV_ITERACION_33 1.0 VLV_ITERACION_33
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    MULF -1.0 F.0 VLV_OLD_I_33
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.0
    MULF -1.0 F.0 VLV_OLD_D_33
    JR whilebody265
  endwhile265:
RETSUB_F_KALMAN_FILTER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_KALMAN_FILTER_2:
SUB_F_GUNIVENCMG_3:
    STRINGS DUPLICATE 'B' VLV_I_35
    STRINGS DUPLICATE 'C' VLV_D_35
    MOVEF_F 3.05555555555556 VLV_G1_35
    DATAF tmpf520
    DATA8 flag520
    DIVF VLV_V1_35 VLV_V2_35 tmpf520
    CP_EQF 0.0 VLV_V2_35 flag520
    SELECTF flag520 0.0 tmpf520 F.0

    DATAF tmpf521
    DATA8 flag521
    DIVF VLV_V1_35 VLV_V2_35 tmpf521
    CP_EQF 0.0 VLV_V2_35 flag521
    SELECTF flag521 0.0 tmpf521 F.2

    MATH ABS F.2 F.1
    DATAF tmpf523
    DATA8 flag523
    DIVF F.0 F.1 tmpf523
    CP_EQF 0.0 F.1 flag523
    SELECTF flag523 0.0 tmpf523 VLV_SIGNO_35

    MATH ABS VLV_V1_35 F.0
    MATH ABS VLV_V2_35 F.1
    DATA8 flag526
	CP_LTF F.0 F.1 flag526
	SELECTF flag526 F.0 F.1 VLV_VMIN_35
    MATH ABS VLV_V1_35 F.0
    MATH ABS VLV_V2_35 F.1
    DATA8 flag529
	CP_GTF F.0 F.1 flag529
	SELECTF flag529 F.0 F.1 VLV_VMAX_35
    DATAF tmpf530
    DATA8 flag530
    DIVF VLV_VMIN_35 VLV_VMAX_35 tmpf530
    CP_EQF 0.0 VLV_VMAX_35 flag530
    SELECTF flag530 0.0 tmpf530 F.3

    MULF -8.5 F.3 F.2
    MULF F.2 VLV_SIGNO_35 F.1
    SUBF F.1 8.5 F.0
    DATAF tmpf534
    DATA8 flag534
    DIVF VLV_VMIN_35 VLV_VMAX_35 tmpf534
    CP_EQF 0.0 VLV_VMAX_35 flag534
    SELECTF flag534 0.0 tmpf534 F.3

    MULF F.3 VLV_SIGNO_35 F.2
    SUBF F.2 1.0 F.1
    DATAF tmpf537
    DATA8 flag537
    DIVF F.0 F.1 tmpf537
    CP_EQF 0.0 F.1 flag537
    SELECTF flag537 0.0 tmpf537 VGV_CENTRO

    MULF VLV_ANGLE_35 VLV_G1_35 F.0
    MULF VLV_SIGNO_35 VLV_VMIN_35 F.4
    DATAF tmpf540
    DATA8 flag540
    DIVF F.4 VLV_VMAX_35 tmpf540
    CP_EQF 0.0 VLV_VMAX_35 flag540
    SELECTF flag540 0.0 tmpf540 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf542
    DATA8 flag542
    DIVF -2.0 F.2 tmpf542
    CP_EQF 0.0 F.2 flag542
    SELECTF flag542 0.0 tmpf542 F.1

    MULF F.0 F.1 VLV_ENCODR_35
    CALL TEXT.APPEND VLV_I_35 VLV_D_35 S.0
    MATH NEGATE VLV_V1_35 F.0
    MATH NEGATE VLV_V2_35 F.1
    CALL MOTOR.SCHEDULESYNC S.0 F.0 F.1 VLV_ENCODR_35 'True'

	DATA8 layer547
	DATA8 nos547
	DATA8 busy547
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer547 nos547
	JR_EQ8 0 nos547 motornotbusy547
  motorwaiting547:
	OUTPUT_TEST layer547 nos547 busy547
	JR_EQ8 busy547 0 motornotbusy547
	SLEEP
	JR motorwaiting547
  motornotbusy547:
RETSUB_F_GUNIVENCMG_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_GUNIVENCMG_3:
SUB_F_TRASPMATVECT3X3_2:
    CALL VECTOR.INIT 9.0 0.0 VLV_S_39
    CALL ARRAYGET_FLOAT 0.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 3.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 6.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 1.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 3.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 4.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 4.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 7.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 5.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 2.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 6.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 5.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 7.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 8.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 8.0 F.0 VLV_S_39
RETSUB_F_TRASPMATVECT3X3_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TRASPMATVECT3X3_2:
SUB_F_INVMATVECT3X3_2:
    CALL ARRAYGET_FLOAT 0.0 F.2 VLV_M_42
    CALL ARRAYGET_FLOAT 4.0 F.5 VLV_M_42
    CALL ARRAYGET_FLOAT 8.0 F.6 VLV_M_42
    MULF F.5 F.6 F.4
    CALL ARRAYGET_FLOAT 5.0 F.6 VLV_M_42
    CALL ARRAYGET_FLOAT 7.0 F.7 VLV_M_42
    MULF F.6 F.7 F.5
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    CALL ARRAYGET_FLOAT 1.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 3.0 F.6 VLV_M_42
    CALL ARRAYGET_FLOAT 8.0 F.7 VLV_M_42
    MULF F.6 F.7 F.5
    CALL ARRAYGET_FLOAT 5.0 F.7 VLV_M_42
    CALL ARRAYGET_FLOAT 6.0 F.8 VLV_M_42
    MULF F.7 F.8 F.6
    SUBF F.5 F.6 F.4
    MULF F.3 F.4 F.2
    SUBF F.1 F.2 F.0
    CALL ARRAYGET_FLOAT 2.0 F.2 VLV_M_42
    CALL ARRAYGET_FLOAT 3.0 F.5 VLV_M_42
    CALL ARRAYGET_FLOAT 7.0 F.6 VLV_M_42
    MULF F.5 F.6 F.4
    CALL ARRAYGET_FLOAT 4.0 F.6 VLV_M_42
    CALL ARRAYGET_FLOAT 6.0 F.7 VLV_M_42
    MULF F.6 F.7 F.5
    SUBF F.4 F.5 F.3
    MULF F.2 F.3 F.1
    ADDF F.0 F.1 VLV_DETERMINANTE_42
    JR_EQF VLV_DETERMINANTE_42 0.0 else596_1
    CALL ARRAYGET_FLOAT 4.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 7.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf604
    DATA8 flag604
    DIVF F.1 VLV_DETERMINANTE_42 tmpf604
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag604
    SELECTF flag604 0.0 tmpf604 F.0

    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 3.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf613
    DATA8 flag613
    DIVF F.1 VLV_DETERMINANTE_42 tmpf613
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag613
    SELECTF flag613 0.0 tmpf613 F.0

    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 3.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 7.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 4.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf622
    DATA8 flag622
    DIVF F.1 VLV_DETERMINANTE_42 tmpf622
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag622
    SELECTF flag622 0.0 tmpf622 F.0

    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 1.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 7.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf631
    DATA8 flag631
    DIVF F.1 VLV_DETERMINANTE_42 tmpf631
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag631
    SELECTF flag631 0.0 tmpf631 F.0

    CALL ARRAYSTORE_FLOAT 3.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 8.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf640
    DATA8 flag640
    DIVF F.1 VLV_DETERMINANTE_42 tmpf640
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag640
    SELECTF flag640 0.0 tmpf640 F.0

    CALL ARRAYSTORE_FLOAT 4.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 7.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 6.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf649
    DATA8 flag649
    DIVF F.1 VLV_DETERMINANTE_42 tmpf649
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag649
    SELECTF flag649 0.0 tmpf649 F.0

    CALL ARRAYSTORE_FLOAT 5.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 1.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 4.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf658
    DATA8 flag658
    DIVF F.1 VLV_DETERMINANTE_42 tmpf658
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag658
    SELECTF flag658 0.0 tmpf658 F.0

    CALL ARRAYSTORE_FLOAT 6.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 5.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 2.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 3.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf667
    DATA8 flag667
    DIVF F.1 VLV_DETERMINANTE_42 tmpf667
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag667
    SELECTF flag667 0.0 tmpf667 F.0

    CALL ARRAYSTORE_FLOAT 7.0 F.0 VLV_S_42
    CALL ARRAYGET_FLOAT 0.0 F.3 VLV_M_42
    CALL ARRAYGET_FLOAT 4.0 F.4 VLV_M_42
    MULF F.3 F.4 F.2
    CALL ARRAYGET_FLOAT 1.0 F.4 VLV_M_42
    CALL ARRAYGET_FLOAT 3.0 F.5 VLV_M_42
    MULF F.4 F.5 F.3
    SUBF F.2 F.3 F.1
    DATAF tmpf676
    DATA8 flag676
    DIVF F.1 VLV_DETERMINANTE_42 tmpf676
    CP_EQF 0.0 VLV_DETERMINANTE_42 flag676
    SELECTF flag676 0.0 tmpf676 F.0

    CALL ARRAYSTORE_FLOAT 8.0 F.0 VLV_S_42
  else596_1:
  endif596:
RETSUB_F_INVMATVECT3X3_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_INVMATVECT3X3_2:
SUB_F_MULTIMATRIZCOEF_3:
    MOVEF_F 0.0 VLV_I_43
  while678:
    CALL ARRAYGET_FLOAT VLV_I_43 F.0 VLV_M_43
    JR_EQF F.0 0.0 endwhile678
  whilebody678:
    CALL ARRAYGET_FLOAT VLV_I_43 F.1 VLV_M_43
    MULF VLV_K_43 F.1 F.0
    CALL ARRAYSTORE_FLOAT VLV_I_43 F.0 VLV_M_43
    ADDF VLV_I_43 1.0 VLV_I_43
    CALL ARRAYGET_FLOAT VLV_I_43 F.0 VLV_M_43
    JR_NEQF F.0 0.0 whilebody678
  endwhile678:
RETSUB_F_MULTIMATRIZCOEF_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MULTIMATRIZCOEF_3:
SUB_F_BMOVEA_2:
    SUBF VLV_DEGREES_44 VGV_ANGLE_A VLV_ROTATION_44
    MATH ABS VLV_ROTATION_44 F.0
    DATAF tmpf687
    DATA8 flag687
    DIVF F.0 VLV_ROTATION_44 tmpf687
    CP_EQF 0.0 VLV_ROTATION_44 flag687
    SELECTF flag687 0.0 tmpf687 VLV_SIGN_44

    MOVEF_F 0.0 VLV_PROGRESS_44
    MULF VLV_DEGREES_PER_SECOND_44 VLV_SIGN_44 F.0
    DATAF tmpf689
    DATA8 flag689
    DIVF F.0 50.0 tmpf689
    CP_EQF 0.0 50.0 flag689
    SELECTF flag689 0.0 tmpf689 VLV_DEGREES_PER_INTERVAL_44

  while690:
    SUBF VLV_ROTATION_44 VLV_PROGRESS_44 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile690
  whilebody690:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_44 VGV_ANGLE_A
    ADDF VLV_PROGRESS_44 VLV_DEGREES_PER_INTERVAL_44 VLV_PROGRESS_44
    DATA32 milliseconds695
	MOVEF_32 1.0 milliseconds695
	DATA32 timer695
	TIMER_WAIT milliseconds695 timer695
	TIMER_READY timer695
    SUBF VLV_ROTATION_44 VLV_PROGRESS_44 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody690
  endwhile690:
    MOVEF_F VLV_DEGREES_44 VGV_ANGLE_A
RETSUB_F_BMOVEA_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA_2:
SUB_F_BMOVED_2:
    MULF VLV_DEGREES_46 VGV_SENTIDO_D VLV_DEGREES_46
    SUBF VLV_DEGREES_46 VGV_ANGLE_D VLV_ROTATION_46
    MATH ABS VLV_ROTATION_46 F.0
    DATAF tmpf701
    DATA8 flag701
    DIVF F.0 VLV_ROTATION_46 tmpf701
    CP_EQF 0.0 VLV_ROTATION_46 flag701
    SELECTF flag701 0.0 tmpf701 VLV_SIGN_46

    MOVEF_F 0.0 VLV_PROGRESS_46
    MULF VLV_DEGREES_PER_SECOND_46 VLV_SIGN_46 F.0
    DATAF tmpf703
    DATA8 flag703
    DIVF F.0 50.0 tmpf703
    CP_EQF 0.0 50.0 flag703
    SELECTF flag703 0.0 tmpf703 VLV_DEGREES_PER_INTERVAL_46

  while704:
    SUBF VLV_ROTATION_46 VLV_PROGRESS_46 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile704
  whilebody704:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_46 VGV_ANGLE_D
    ADDF VLV_PROGRESS_46 VLV_DEGREES_PER_INTERVAL_46 VLV_PROGRESS_46
    DATA32 milliseconds709
	MOVEF_32 1.0 milliseconds709
	DATA32 timer709
	TIMER_WAIT milliseconds709 timer709
	TIMER_READY timer709
    SUBF VLV_ROTATION_46 VLV_PROGRESS_46 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody704
  endwhile704:
    MOVEF_F VLV_DEGREES_46 VGV_ANGLE_D
RETSUB_F_BMOVED_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED_2:
SUB_F_BMOVEAD_4:
    MULF VLV_DEGREES_D_47 VGV_SENTIDO_D VLV_DEGREES_D_47
  while713:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_47 or714
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_47 endwhile713
  or714:
  whilebody713:
    MATH ROUND VGV_ANGLE_A F.0
    SUBF VLV_DEGREES_A_47 5.0 F.1
    JR_GTEQF F.0 F.1 else715_1
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_47 else715_1
    DATAF tmpf719
    DATA8 flag719
    DIVF VLV_DEGREES_PER_SECOND_A_47 2.0 tmpf719
    CP_EQF 0.0 2.0 flag719
    SELECTF flag719 0.0 tmpf719 F.3

    SUBF VLV_DEGREES_A_47 VGV_ANGLE_A F.5
    DATAF tmpf721
    DATA8 flag721
    DIVF F.5 10.0 tmpf721
    CP_EQF 0.0 10.0 flag721
    SELECTF flag721 0.0 tmpf721 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag723
	CP_LTF VLV_DEGREES_PER_SECOND_A_47 F.2 flag723
	SELECTF flag723 VLV_DEGREES_PER_SECOND_A_47 F.2 F.1
    DATAF tmpf724
    DATA8 flag724
    DIVF F.1 50.0 tmpf724
    CP_EQF 0.0 50.0 flag724
    SELECTF flag724 0.0 tmpf724 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif715
  else715_1:
    MATH ROUND VGV_ANGLE_A F.0
    ADDF VLV_DEGREES_A_47 5.0 F.1
    JR_LTEQF F.0 F.1 else715_2
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_47 else715_2
    DATAF tmpf729
    DATA8 flag729
    DIVF VLV_DEGREES_PER_SECOND_A_47 2.0 tmpf729
    CP_EQF 0.0 2.0 flag729
    SELECTF flag729 0.0 tmpf729 F.3

    SUBF VLV_DEGREES_A_47 VGV_ANGLE_A F.5
    DATAF tmpf731
    DATA8 flag731
    DIVF F.5 10.0 tmpf731
    CP_EQF 0.0 10.0 flag731
    SELECTF flag731 0.0 tmpf731 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag733
	CP_GTF VLV_DEGREES_PER_SECOND_A_47 F.2 flag733
	SELECTF flag733 VLV_DEGREES_PER_SECOND_A_47 F.2 F.1
    DATAF tmpf734
    DATA8 flag734
    DIVF F.1 50.0 tmpf734
    CP_EQF 0.0 50.0 flag734
    SELECTF flag734 0.0 tmpf734 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif715
  else715_2:
    MOVEF_F VLV_DEGREES_A_47 VGV_ANGLE_A
  else715_3:
  endif715:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_47 else736_1
    DATAF tmpf738
    DATA8 flag738
    DIVF VLV_DEGREES_PER_SECOND_D_47 2.0 tmpf738
    CP_EQF 0.0 2.0 flag738
    SELECTF flag738 0.0 tmpf738 F.3

    SUBF VLV_DEGREES_D_47 VGV_ANGLE_D F.5
    DATAF tmpf740
    DATA8 flag740
    DIVF F.5 10.0 tmpf740
    CP_EQF 0.0 10.0 flag740
    SELECTF flag740 0.0 tmpf740 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag742
	CP_LTF VLV_DEGREES_PER_SECOND_D_47 F.2 flag742
	SELECTF flag742 VLV_DEGREES_PER_SECOND_D_47 F.2 F.1
    DATAF tmpf743
    DATA8 flag743
    DIVF F.1 50.0 tmpf743
    CP_EQF 0.0 50.0 flag743
    SELECTF flag743 0.0 tmpf743 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif736
  else736_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_47 else736_2
    DATAF tmpf746
    DATA8 flag746
    DIVF VLV_DEGREES_PER_SECOND_D_47 2.0 tmpf746
    CP_EQF 0.0 2.0 flag746
    SELECTF flag746 0.0 tmpf746 F.3

    SUBF VLV_DEGREES_D_47 VGV_ANGLE_D F.5
    DATAF tmpf748
    DATA8 flag748
    DIVF F.5 10.0 tmpf748
    CP_EQF 0.0 10.0 flag748
    SELECTF flag748 0.0 tmpf748 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag750
	CP_GTF VLV_DEGREES_PER_SECOND_D_47 F.2 flag750
	SELECTF flag750 VLV_DEGREES_PER_SECOND_D_47 F.2 F.1
    DATAF tmpf751
    DATA8 flag751
    DIVF F.1 50.0 tmpf751
    CP_EQF 0.0 50.0 flag751
    SELECTF flag751 0.0 tmpf751 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif736
  else736_2:
    MOVEF_F VLV_DEGREES_D_47 VGV_ANGLE_D
  else736_3:
  endif736:
    DATA32 milliseconds753
	MOVEF_32 1.0 milliseconds753
	DATA32 timer753
	TIMER_WAIT milliseconds753 timer753
	TIMER_READY timer753
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_47 whilebody713
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_47 whilebody713
  endwhile713:
    MOVEF_F VLV_DEGREES_A_47 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_47 VGV_ANGLE_D
RETSUB_F_BMOVEAD_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD_4:
SUB_F_BMOVEA0_1:
    MOVEF_F 0.0 VLV_DEGREES_48
    SUBF VLV_DEGREES_48 VGV_ANGLE_A VLV_ROTATION_48
    MATH ABS VLV_ROTATION_48 F.0
    DATAF tmpf756
    DATA8 flag756
    DIVF F.0 VLV_ROTATION_48 tmpf756
    CP_EQF 0.0 VLV_ROTATION_48 flag756
    SELECTF flag756 0.0 tmpf756 VLV_SIGN_48

    MOVEF_F 0.0 VLV_PROGRESS_48
    MULF VLV_DEGREES_PER_SECOND_48 VLV_SIGN_48 F.0
    DATAF tmpf758
    DATA8 flag758
    DIVF F.0 50.0 tmpf758
    CP_EQF 0.0 50.0 flag758
    SELECTF flag758 0.0 tmpf758 VLV_DEGREES_PER_INTERVAL_48

  while759:
    SUBF VLV_ROTATION_48 VLV_PROGRESS_48 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile759
  whilebody759:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_48 VGV_ANGLE_A
    ADDF VLV_PROGRESS_48 VLV_DEGREES_PER_INTERVAL_48 VLV_PROGRESS_48
    DATA32 milliseconds764
	MOVEF_32 1.0 milliseconds764
	DATA32 timer764
	TIMER_WAIT milliseconds764 timer764
	TIMER_READY timer764
    SUBF VLV_ROTATION_48 VLV_PROGRESS_48 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody759
  endwhile759:
    MOVEF_F VLV_DEGREES_48 VGV_ANGLE_A
RETSUB_F_BMOVEA0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA0_1:
SUB_F_BMOVED0_1:
    MOVEF_F 0.0 VLV_DEGREES_49
    SUBF VLV_DEGREES_49 VGV_ANGLE_D VLV_ROTATION_49
    MATH ABS VLV_ROTATION_49 F.0
    DATAF tmpf769
    DATA8 flag769
    DIVF F.0 VLV_ROTATION_49 tmpf769
    CP_EQF 0.0 VLV_ROTATION_49 flag769
    SELECTF flag769 0.0 tmpf769 VLV_SIGN_49

    MOVEF_F 0.0 VLV_PROGRESS_49
    MULF VLV_DEGREES_PER_SECOND_49 VLV_SIGN_49 F.0
    DATAF tmpf771
    DATA8 flag771
    DIVF F.0 50.0 tmpf771
    CP_EQF 0.0 50.0 flag771
    SELECTF flag771 0.0 tmpf771 VLV_DEGREES_PER_INTERVAL_49

  while772:
    SUBF VLV_ROTATION_49 VLV_PROGRESS_49 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile772
  whilebody772:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_49 VGV_ANGLE_D
    ADDF VLV_PROGRESS_49 VLV_DEGREES_PER_INTERVAL_49 VLV_PROGRESS_49
    DATA32 milliseconds777
	MOVEF_32 1.0 milliseconds777
	DATA32 timer777
	TIMER_WAIT milliseconds777 timer777
	TIMER_READY timer777
    SUBF VLV_ROTATION_49 VLV_PROGRESS_49 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody772
  endwhile772:
    MOVEF_F VLV_DEGREES_49 VGV_ANGLE_D
RETSUB_F_BMOVED0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED0_1:
SUB_F_BMOVEAD0_2:
    MOVEF_F 0.0 VLV_DEGREES_A_50
    MOVEF_F 0.0 VLV_DEGREES_D_50
  while780:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_50 or781
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_50 endwhile780
  or781:
  whilebody780:
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_50 else782_1
    DATAF tmpf784
    DATA8 flag784
    DIVF VLV_DEGREES_PER_SECOND_A_50 2.0 tmpf784
    CP_EQF 0.0 2.0 flag784
    SELECTF flag784 0.0 tmpf784 F.3

    SUBF VLV_DEGREES_A_50 VGV_ANGLE_A F.5
    DATAF tmpf786
    DATA8 flag786
    DIVF F.5 10.0 tmpf786
    CP_EQF 0.0 10.0 flag786
    SELECTF flag786 0.0 tmpf786 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag788
	CP_LTF VLV_DEGREES_PER_SECOND_A_50 F.2 flag788
	SELECTF flag788 VLV_DEGREES_PER_SECOND_A_50 F.2 F.1
    DATAF tmpf789
    DATA8 flag789
    DIVF F.1 50.0 tmpf789
    CP_EQF 0.0 50.0 flag789
    SELECTF flag789 0.0 tmpf789 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif782
  else782_1:
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_50 else782_2
    DATAF tmpf792
    DATA8 flag792
    DIVF VLV_DEGREES_PER_SECOND_A_50 2.0 tmpf792
    CP_EQF 0.0 2.0 flag792
    SELECTF flag792 0.0 tmpf792 F.3

    SUBF VLV_DEGREES_A_50 VGV_ANGLE_A F.5
    DATAF tmpf794
    DATA8 flag794
    DIVF F.5 10.0 tmpf794
    CP_EQF 0.0 10.0 flag794
    SELECTF flag794 0.0 tmpf794 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag796
	CP_GTF VLV_DEGREES_PER_SECOND_A_50 F.2 flag796
	SELECTF flag796 VLV_DEGREES_PER_SECOND_A_50 F.2 F.1
    DATAF tmpf797
    DATA8 flag797
    DIVF F.1 50.0 tmpf797
    CP_EQF 0.0 50.0 flag797
    SELECTF flag797 0.0 tmpf797 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif782
  else782_2:
    MOVEF_F VLV_DEGREES_A_50 VGV_ANGLE_A
  else782_3:
  endif782:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_50 else799_1
    DATAF tmpf801
    DATA8 flag801
    DIVF VLV_DEGREES_PER_SECOND_D_50 2.0 tmpf801
    CP_EQF 0.0 2.0 flag801
    SELECTF flag801 0.0 tmpf801 F.3

    SUBF VLV_DEGREES_D_50 VGV_ANGLE_D F.5
    DATAF tmpf803
    DATA8 flag803
    DIVF F.5 10.0 tmpf803
    CP_EQF 0.0 10.0 flag803
    SELECTF flag803 0.0 tmpf803 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag805
	CP_LTF VLV_DEGREES_PER_SECOND_D_50 F.2 flag805
	SELECTF flag805 VLV_DEGREES_PER_SECOND_D_50 F.2 F.1
    DATAF tmpf806
    DATA8 flag806
    DIVF F.1 50.0 tmpf806
    CP_EQF 0.0 50.0 flag806
    SELECTF flag806 0.0 tmpf806 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif799
  else799_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_50 else799_2
    DATAF tmpf809
    DATA8 flag809
    DIVF VLV_DEGREES_PER_SECOND_D_50 2.0 tmpf809
    CP_EQF 0.0 2.0 flag809
    SELECTF flag809 0.0 tmpf809 F.3

    SUBF VLV_DEGREES_D_50 VGV_ANGLE_D F.5
    DATAF tmpf811
    DATA8 flag811
    DIVF F.5 10.0 tmpf811
    CP_EQF 0.0 10.0 flag811
    SELECTF flag811 0.0 tmpf811 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag813
	CP_GTF VLV_DEGREES_PER_SECOND_D_50 F.2 flag813
	SELECTF flag813 VLV_DEGREES_PER_SECOND_D_50 F.2 F.1
    DATAF tmpf814
    DATA8 flag814
    DIVF F.1 50.0 tmpf814
    CP_EQF 0.0 50.0 flag814
    SELECTF flag814 0.0 tmpf814 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif799
  else799_2:
    MOVEF_F VLV_DEGREES_D_50 VGV_ANGLE_D
  else799_3:
  endif799:
    DATA32 milliseconds816
	MOVEF_32 1.0 milliseconds816
	DATA32 timer816
	TIMER_WAIT milliseconds816 timer816
	TIMER_READY timer816
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_50 whilebody780
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_50 whilebody780
  endwhile780:
    MOVEF_F VLV_DEGREES_A_50 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_50 VGV_ANGLE_D
RETSUB_F_BMOVEAD0_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD0_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall VECTOR.DATA       // FSA
{
	IN_F size
	IN_S d 252
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty
	ARRAY RESIZE a size32
	ARRAY FILL a 0.0

	DATAS d0 127        // 8bit-addressable data range
	DATAS d1 129
	DATA32 filled
	DATAF value
	DATA8 readidx
	DATA8 writeidx
	DATA8 c

	STRINGS DUPLICATE d d0

	MOVE32_32 0 filled
	MOVE8_8 -127 readidx

skipspaces:
	READ8 d1 readidx c
	ADD8 readidx 1 readidx
	JR_EQ8 c 0 done
	JR_EQ8 c 32 skipspaces
	
	MOVE8_8 -127 writeidx
copypart:
	WRITE8 c writeidx d1
	ADD8 writeidx 1 writeidx
	READ8 d1 readidx c
	ADD8 readidx 1 readidx
	JR_EQ8 c 0 lastnumber
	JR_NEQ8 c 32 copypart

	WRITE8 0 writeidx d1
	STRINGS STRING_TO_VALUE d0 value
	ARRAY_WRITE a filled value

	ADD32 filled 1 filled
	JR_LT32 filled size32 skipspaces
	RETURN

lastnumber:
	WRITE8 0 writeidx d1
	STRINGS STRING_TO_VALUE d0 value
	ARRAY_WRITE a filled value
done:
	RETURN
empty:
    ARRAY RESIZE a 0
}
subcall EV3.TIME  // F
{
	OUT_F time
	
	DATA32 ms
	DATAF thousand
	
	TIMER_READ ms
	MOVE32_F ms time	
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall VECTOR.ADD        // FAAA
{
	IN_F size
	IN_16 a
	IN_16 b
	IN_16 c

	DATA32 sizea
	DATA32 sizeb
	ARRAY SIZE a sizea
	ARRAY SIZE b sizeb

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty
	ARRAY RESIZE c size32

	DATA32 i
	MOVE32_32 0 i
loop:
	DATAF sum
	DATAf tmp
	MOVEF_F 0.0 sum
	JR_GTEQ32 i sizea a_too_small
	ARRAY_READ a i sum
a_too_small:
	JR_GTEQ32 i sizeb b_too_small
	ARRAY_READ b i tmp
	ADDF sum tmp sum
b_too_small:
    ARRAY_WRITE c i sum

	ADD32 i 1 i
	JR_LT32 i size32 loop
loopend:
	RETURN

empty:
    ARRAY RESIZE c 0
}
subcall VECTOR.MULTIPLY    // FFFAAA
{
	IN_F _N        // number of rows in result matrix
	IN_F _M        // number of columns in result matrix
	IN_F _K        // second dimension of A and B
	IN_16 A        // matrix of N rows, K columns
	IN_16 B        // matrix of K rows, M columns
	IN_16 C        // result-matrix of N rows, M columns
	DATA32 N
	DATA32 M
	DATA32 K
	MOVEF_32 _N N
	MOVEF_32 _M M
	MOVEF_32 _K K

	// get input matrix sizes for quick retrieval
	DATA32 ALEN
	DATA32 BLEN
	ARRAY SIZE A ALEN
	ARRAY SIZE B BLEN

	// check if the numerical parameters make sense
	JR_LTEQ32 N 0 outputempty
	JR_LTEQ32 M 0 outputempty

	// compute number of elements to compute
	DATA32 MN
	DATA32 KM
	MUL32 M N MN
	MUL32 K M KM

	// check if the K value is at least 1 (otherwise can perform no multiplication)
	JR_GT32 K 0 notallzero
	ARRAY RESIZE C MN
	ARRAY FILL C 0.0
	RETURN
notallzero:

	// check if the output should be written into one of the input matrizes -
	// need to create temporary storage to hold data while computation runs
	DATA16 TARGET
	JR_EQ16 C A needtemporary
	JR_NEQ16 C B dontneedtemporary
needtemporary:
	// create computation target of correct size
	ARRAY CREATEF MN TARGET
	JR startcopy
dontneedtemporary:
	// set the result matrix to correct size
	ARRAY RESIZE C MN
	MOVE16_16 C TARGET

startcopy:
	DATA32 CIDX
	MOVE32_32 0 CIDX 
	DATA32 I
	MOVE32_32 0 I
loop_rows:	
	DATA32 J
	MOVE32_32 0 J
loop_columns:
    DATAF SUM
	MOVEF_F 0.0 SUM

    DATA32 AIDX 
	MUL32 I K AIDX
	DATA32 BIDX
	MOVE32_32 J BIDX
loop_scalarproduct:
	DATAF TMP
	DATAF PROD
	JR_GTEQ32 AIDX ALEN nosourceelements
	JR_GTEQ32 BIDX BLEN nosourceelements
	ARRAY_READ A AIDX PROD
	ARRAY_READ B BIDX TMP
    MULF PROD TMP PROD
	ADDF SUM PROD SUM
	ADD32 AIDX 1 AIDX
	ADD32 BIDX M BIDX
	JR_LT32 BIDX KM loop_scalarproduct
nosourceelements:

	ARRAY_WRITE TARGET CIDX SUM
	ADD32 CIDX 1 CIDX

	ADD32 J 1 J 
	JR_LT32 J M loop_columns
	ADD32 I 1 I
	JR_LT32 I N loop_rows

	// check if need to store temporay data to output
	JR_EQ16 C TARGET notemporary
	ARRAY COPY TARGET C
	ARRAY DELETE TARGET
notemporary:
	RETURN

outputempty:
	ARRAY RESIZE C 0
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall EV3FILE.WRITENUMBERARRAY    // FFAV
{
	IN_F handle
	IN_F size
	IN_16 a

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	DATA8 byte8
	MOVEF_16 handle handle16

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	DATA32 len          // real size of array
	ARRAY SIZE a len

	ARRAY8 buffer 4     // buffer for a single float

	DATA32 i            // loop counter
	MOVE32_32 0 i
copyloop:
	JR_GTEQ32 i size32 over
	JR_GTEQ32 i len outofbounds
	ARRAY_READ a i buffer
outofbounds:
	FILE WRITE_BYTES handle16 4 buffer

	ADD32 i 1 i
	JR copyloop

over:
invalidhandle:
empty:
	RETURN
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
