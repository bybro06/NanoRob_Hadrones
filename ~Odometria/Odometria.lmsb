DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEGREES_PER_SECOND_41
DATAF VLV_DEGREES_PER_SECOND_40
DATAF VLV_V1_34
DATAF VLV_V2_34
DATAF VLV_ANGLE_34
DATAF VLV_DEGREES_PER_SECOND_38
DATAF VLV_DEGREES_38
DATAF VLV_VELOCIDAD_19
DATAF VLV_DISTANCIA_19
DATAF VLV_DEGREES_PER_SECOND_36
DATAF VLV_DEGREES_36
DATAF VLV_DEGREES_PER_SECOND_A_39
DATAF VLV_DEGREES_PER_SECOND_D_39
DATAF VLV_DEGREES_A_39
DATAF VLV_DEGREES_D_39
DATAF VLV_DEGREES_PER_SECOND_A_42
DATAF VLV_DEGREES_PER_SECOND_D_42
DATAF VLV_V0_14
DATAF VLV_VMAX_14
DATAF VLV_KP_14
DATAF VLV_KI_14
DATAF VLV_KD_14
DATAF VLV_ACCELENCODER_14
DATAF VGV_CENTRO
DATAF VGV_XTIME
DATAF VGV_YTIME
DATAF VGV_THETATIME
DATAF VGV_XTCORRECT
DATAF VGV_YTCORRECT
DATAF VGV_THETATCORRECT
DATAF VGV_SENTIDO_D
DATAF VGV_SENTIDO_MOTORES
DATAF VGV_ANGLE_A
DATAF VGV_ANGLE_D
ARRAY16 VGV_ALPHA_L 2
ARRAY16 VGV_ALPHA_R 2
DATAF VGV_OLDB
DATAF VGV_OLDC
ARRAY16 VGV_XT 2
ARRAY16 VGV_YT 2
ARRAY16 VGV_THETAT 2
DATAF VGV_I
DATAF VGV_DW
DATAF VGV_DIAMETER
DATAF VGV_D_L
DATAF VGV_D_R
DATAF VGV_D
DATAF VGV_DELTA_THETA
DATAF VGV_KP_A
DATAF VGV_KI_A
DATAF VGV_KD_A
DATAF VGV_KP_D
DATAF VGV_KI_D
DATAF VGV_KD_D
DATAF VGV_ERROR_A
DATAF VGV_ERROR_D
DATAF VGV_ERRSUM_A
DATAF VGV_ERRSUM_D
DATAF VGV_OLDERROR_A
DATAF VGV_OLDERROR_D
DATAF VGV_U_A
DATAF VGV_U_D
DATAS VLV_I_14 252
DATAS VLV_D_14 252
DATAF VLV_U_14
DATAF VLV_ERROR_14
DATAF VLV_OLDERROR_14
DATAF VLV_ERRSUM_14
DATAF VLV_VEL_14
DATAF VLV_SENTIDO_14
DATAF VLV_DIAMETRO_19
DATAF VLV_ENC_19
DATAF VLV_START_B_19
DATAF VLV_START_C_19
DATAF VLV_ENCODER_C_19
DATAF VLV_ENCODER_B_19
DATAF VLV_ERROR_19
DATAF VLV_PROPORCIAL_19
DATAS VLV_I_34 252
DATAS VLV_D_34 252
DATAF VLV_G1_34
DATAF VLV_SIGNO_34
DATAF VLV_VMIN_34
DATAF VLV_VMAX_34
DATAF VLV_ENCODR_34
DATAF VLV_ROTATION_36
DATAF VLV_SIGN_36
DATAF VLV_PROGRESS_36
DATAF VLV_DEGREES_PER_INTERVAL_36
DATAF VLV_ROTATION_38
DATAF VLV_SIGN_38
DATAF VLV_PROGRESS_38
DATAF VLV_DEGREES_PER_INTERVAL_38
DATAF VLV_DEGREES_40
DATAF VLV_ROTATION_40
DATAF VLV_SIGN_40
DATAF VLV_PROGRESS_40
DATAF VLV_DEGREES_PER_INTERVAL_40
DATAF VLV_DEGREES_41
DATAF VLV_ROTATION_41
DATAF VLV_SIGN_41
DATAF VLV_PROGRESS_41
DATAF VLV_DEGREES_PER_INTERVAL_41
DATAF VLV_DEGREES_A_42
DATAF VLV_DEGREES_D_42
DATA32 RUNCOUNTER_F_PIDCONTROL_AD_0
DATA32 RUNCOUNTER_F_ODOMETRY_0
DATA32 RUNCOUNTER_F_DISPLAY_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_41
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_40
    MOVEF_F 0.0 VLV_V1_34
    MOVEF_F 0.0 VLV_V2_34
    MOVEF_F 0.0 VLV_ANGLE_34
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_38
    MOVEF_F 0.0 VLV_DEGREES_38
    MOVEF_F 0.0 VLV_VELOCIDAD_19
    MOVEF_F 0.0 VLV_DISTANCIA_19
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_36
    MOVEF_F 0.0 VLV_DEGREES_36
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_39
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_39
    MOVEF_F 0.0 VLV_DEGREES_A_39
    MOVEF_F 0.0 VLV_DEGREES_D_39
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_42
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_42
    MOVEF_F 0.0 VLV_V0_14
    MOVEF_F 0.0 VLV_VMAX_14
    MOVEF_F 0.0 VLV_KP_14
    MOVEF_F 0.0 VLV_KI_14
    MOVEF_F 0.0 VLV_KD_14
    MOVEF_F 0.0 VLV_ACCELENCODER_14
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_SENTIDO_MOTORES
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_L
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYCREATE_FLOAT VGV_XT
    CALL ARRAYCREATE_FLOAT VGV_YT
    CALL ARRAYCREATE_FLOAT VGV_THETAT
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_L
    MOVEF_F 0.0 VGV_D_R
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_DELTA_THETA
    MOVEF_F 0.0 VGV_KP_A
    MOVEF_F 0.0 VGV_KI_A
    MOVEF_F 0.0 VGV_KD_A
    MOVEF_F 0.0 VGV_KP_D
    MOVEF_F 0.0 VGV_KI_D
    MOVEF_F 0.0 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    STRINGS DUPLICATE '' VLV_I_14
    STRINGS DUPLICATE '' VLV_D_14
    MOVEF_F 0.0 VLV_U_14
    MOVEF_F 0.0 VLV_ERROR_14
    MOVEF_F 0.0 VLV_OLDERROR_14
    MOVEF_F 0.0 VLV_ERRSUM_14
    MOVEF_F 0.0 VLV_VEL_14
    MOVEF_F 0.0 VLV_SENTIDO_14
    MOVEF_F 0.0 VLV_DIAMETRO_19
    MOVEF_F 0.0 VLV_ENC_19
    MOVEF_F 0.0 VLV_START_B_19
    MOVEF_F 0.0 VLV_START_C_19
    MOVEF_F 0.0 VLV_ENCODER_C_19
    MOVEF_F 0.0 VLV_ENCODER_B_19
    MOVEF_F 0.0 VLV_ERROR_19
    MOVEF_F 0.0 VLV_PROPORCIAL_19
    STRINGS DUPLICATE '' VLV_I_34
    STRINGS DUPLICATE '' VLV_D_34
    MOVEF_F 0.0 VLV_G1_34
    MOVEF_F 0.0 VLV_SIGNO_34
    MOVEF_F 0.0 VLV_VMIN_34
    MOVEF_F 0.0 VLV_VMAX_34
    MOVEF_F 0.0 VLV_ENCODR_34
    MOVEF_F 0.0 VLV_ROTATION_36
    MOVEF_F 0.0 VLV_SIGN_36
    MOVEF_F 0.0 VLV_PROGRESS_36
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_36
    MOVEF_F 0.0 VLV_ROTATION_38
    MOVEF_F 0.0 VLV_SIGN_38
    MOVEF_F 0.0 VLV_PROGRESS_38
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_38
    MOVEF_F 0.0 VLV_DEGREES_40
    MOVEF_F 0.0 VLV_ROTATION_40
    MOVEF_F 0.0 VLV_SIGN_40
    MOVEF_F 0.0 VLV_PROGRESS_40
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_40
    MOVEF_F 0.0 VLV_DEGREES_41
    MOVEF_F 0.0 VLV_ROTATION_41
    MOVEF_F 0.0 VLV_SIGN_41
    MOVEF_F 0.0 VLV_PROGRESS_41
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_41
    MOVEF_F 0.0 VLV_DEGREES_A_42
    MOVEF_F 0.0 VLV_DEGREES_D_42
    MOVE32_32 0 RUNCOUNTER_F_PIDCONTROL_AD_0
    MOVE32_32 0 RUNCOUNTER_F_ODOMETRY_0
    MOVE32_32 0 RUNCOUNTER_F_DISPLAY_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_PIDCONTROL_AD_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_PIDCONTROL_AD_0 0
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 -1 RUNCOUNTER_F_PIDCONTROL_AD_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_ODOMETRY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_ODOMETRY_0 1
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 -1 RUNCOUNTER_F_ODOMETRY_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_DISPLAY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_DISPLAY_0 2
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 -1 RUNCOUNTER_F_DISPLAY_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_PIDCONTROL_AD_0
subcall PROGRAM_F_ODOMETRY_0
subcall PROGRAM_F_DISPLAY_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    DATAF F.6
    DATAF F.7
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch406
    WRITE32 ENDSUB_F_PIDCONTROL_AD_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_PIDCONTROL_AD_0
  dispatch406:
    JR_NEQ32 SUBPROGRAM 1 dispatch407
    WRITE32 ENDSUB_F_ODOMETRY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ODOMETRY_0
  dispatch407:
    JR_NEQ32 SUBPROGRAM 2 dispatch408
    WRITE32 ENDSUB_F_DISPLAY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DISPLAY_0
  dispatch408:
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_41
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_40
    MOVEF_F 0.0 VLV_V1_34
    MOVEF_F 0.0 VLV_V2_34
    MOVEF_F 0.0 VLV_ANGLE_34
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_38
    MOVEF_F 0.0 VLV_DEGREES_38
    MOVEF_F 0.0 VLV_VELOCIDAD_19
    MOVEF_F 0.0 VLV_DISTANCIA_19
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_36
    MOVEF_F 0.0 VLV_DEGREES_36
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_39
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_39
    MOVEF_F 0.0 VLV_DEGREES_A_39
    MOVEF_F 0.0 VLV_DEGREES_D_39
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_42
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_42
    MOVEF_F 0.0 VLV_V0_14
    MOVEF_F 0.0 VLV_VMAX_14
    MOVEF_F 0.0 VLV_KP_14
    MOVEF_F 0.0 VLV_KI_14
    MOVEF_F 0.0 VLV_KD_14
    MOVEF_F 0.0 VLV_ACCELENCODER_14
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_SENTIDO_MOTORES
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 1.0 VGV_SENTIDO_D
    MOVEF_F -1.0 VGV_SENTIDO_MOTORES
    MOVEF_F -1.0 VGV_SENTIDO_MOTORES
    DATA32 tmp0
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 1  RUNCOUNTER_F_PIDCONTROL_AD_0 tmp0
    JR_NEQ32 0 tmp0 alreadylaunched0
    OBJECT_START TF_PIDCONTROL_AD_0
  alreadylaunched0:
    DATA32 tmp1
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 1  RUNCOUNTER_F_ODOMETRY_0 tmp1
    JR_NEQ32 0 tmp1 alreadylaunched1
    OBJECT_START TF_ODOMETRY_0
  alreadylaunched1:
    DATA32 tmp2
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 1  RUNCOUNTER_F_DISPLAY_0 tmp2
    JR_NEQ32 0 tmp2 alreadylaunched2
    OBJECT_START TF_DISPLAY_0
  alreadylaunched2:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB3 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB3:
    DATA32 milliseconds4
	MOVEF_32 10000.0 milliseconds4
	DATA32 timer4
	TIMER_WAIT milliseconds4 timer4
	TIMER_READY timer4
ENDTHREAD:
    RETURN
SUB_F_STARTARM_0:
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    TIMER_READ timeMC1
  while6:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 500.0 endwhile6
  whilebody6:
    ADDF VGV_ANGLE_D 1.0 VGV_ANGLE_D
    DATA32 milliseconds9
	MOVEF_32 3.0 milliseconds9
	DATA32 timer9
	TIMER_WAIT milliseconds9 timer9
	TIMER_READY timer9
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 500.0 whilebody6
  endwhile6:
    DATA32 milliseconds11
	MOVEF_32 500.0 milliseconds11
	DATA32 timer11
	TIMER_WAIT milliseconds11 timer11
	TIMER_READY timer11
    CALL MOTOR.GETCOUNT 'D' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 60.0 else12_1
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_41
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB15 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB15:
    MOVEF_F -1.0 VGV_SENTIDO_D
    JR endif12
  else12_1:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_41
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB16:
    MOVEF_F 1.0 VGV_SENTIDO_D
  else12_2:
  endif12:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_40
    WRITE32 ENDSUB_F_BMOVEA0_1:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA0_1
CALLSUB17:
    DATA32 milliseconds18
	MOVEF_32 100.0 milliseconds18
	DATA32 timer18
	TIMER_WAIT milliseconds18 timer18
	TIMER_READY timer18
RETSUB_F_STARTARM_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STARTARM_0:
SUB_F_ODOMETRY_0:
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_XT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_YT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_THETAT
    MOVEF_F 0.0 VGV_I
  while24:
  whilebody24:
    MOVEF_F 84.5 VGV_DW
    MOVEF_F 56.0 VGV_DIAMETER
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_L
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_R
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_L
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_L
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf36
    DATA8 flag36
    DIVF F.0 2.0 tmpf36
    CP_EQF 0.0 2.0 flag36
    SELECTF flag36 0.0 tmpf36 VGV_D_L

    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_R
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_R
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf42
    DATA8 flag42
    DIVF F.0 2.0 tmpf42
    CP_EQF 0.0 2.0 flag42
    SELECTF flag42 0.0 tmpf42 VGV_D_R

    ADDF VGV_D_L VGV_D_R F.0
    DATAF tmpf44
    DATA8 flag44
    DIVF F.0 2.0 tmpf44
    CP_EQF 0.0 2.0 flag44
    SELECTF flag44 0.0 tmpf44 VGV_D

    SUBF VGV_D_R VGV_D_L F.0
    MULF 2.0 VGV_DW F.1
    DATAF tmpf47
    DATA8 flag47
    DIVF F.0 F.1 tmpf47
    CP_EQF 0.0 F.1 flag47
    SELECTF flag47 0.0 tmpf47 VGV_DELTA_THETA

    JR_EQF VGV_XTCORRECT 0.0 else48_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_XTCORRECT VGV_XT
    MOVEF_F 0.0 VGV_XTCORRECT
    JR endif48
  else48_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf53
    DATA8 flag53
    DIVF VGV_DELTA_THETA 2.0 tmpf53
    CP_EQF 0.0 2.0 flag53
    SELECTF flag53 0.0 tmpf53 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf55
	MULF F.5 57.295779513082  tmpf55
	MATH SIN  tmpf55 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_XT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_XT
  else48_2:
  endif48:
    JR_EQF VGV_YTCORRECT 0.0 else61_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_YTCORRECT VGV_YT
    MOVEF_F 0.0 VGV_YTCORRECT
    JR endif61
  else61_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf66
    DATA8 flag66
    DIVF VGV_DELTA_THETA 2.0 tmpf66
    CP_EQF 0.0 2.0 flag66
    SELECTF flag66 0.0 tmpf66 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf68
	MULF F.5 57.295779513082 tmpf68
	MATH COS tmpf68 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_YT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_YT
  else61_2:
  endif61:
    JR_EQF VGV_THETATCORRECT 0.0 else74_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_THETATCORRECT VGV_THETAT
    MOVEF_F 0.0 VGV_THETATCORRECT
    JR endif74
  else74_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_THETAT
    ADDF F.2 VGV_DELTA_THETA F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_THETAT
  else74_2:
  endif74:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_XTIME VGV_XT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_YTIME VGV_YT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_THETATIME VGV_THETAT
    ADDF VGV_I 1.0 VGV_I
    DATA32 milliseconds88
	MOVEF_32 10.0 milliseconds88
	DATA32 timer88
	TIMER_WAIT milliseconds88 timer88
	TIMER_READY timer88
    JR whilebody24
  endwhile24:
RETSUB_F_ODOMETRY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ODOMETRY_0:
SUB_F_PIDCONTROL_AD_0:
    MOVEF_F 0.5 VGV_KP_A
    MOVEF_F 0.0001 VGV_KI_A
    MOVEF_F 0.1 VGV_KD_A
    MOVEF_F 0.5 VGV_KP_D
    MOVEF_F 0.0001 VGV_KI_D
    MOVEF_F 0.1 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
  while89:
  whilebody89:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    SUBF VGV_ANGLE_A F.0 VGV_ERROR_A
    ADDF VGV_ERRSUM_A VGV_ERROR_A VGV_ERRSUM_A
    MULF VGV_ERROR_A VGV_KP_A F.1
    MULF VGV_ERRSUM_A VGV_KI_A F.3
    DATAF tmpf95
    DATA8 flag95
    DIVF F.3 1.0 tmpf95
    CP_EQF 0.0 1.0 flag95
    SELECTF flag95 0.0 tmpf95 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_A VGV_OLDERROR_A F.2
    MULF F.2 VGV_KD_A F.1
    ADDF F.0 F.1 VGV_U_A
    MOVEF_8 VGV_U_A setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    SUBF VGV_ANGLE_D F.0 VGV_ERROR_D
    ADDF VGV_ERRSUM_D VGV_ERROR_D VGV_ERRSUM_D
    MULF VGV_ERROR_D VGV_KP_D F.1
    MULF VGV_ERRSUM_D VGV_KI_D F.3
    DATAF tmpf106
    DATA8 flag106
    DIVF F.3 1.0 tmpf106
    CP_EQF 0.0 1.0 flag106
    SELECTF flag106 0.0 tmpf106 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_D VGV_OLDERROR_D F.3
    MULF F.3 VGV_KD_D F.2
    MULF F.2 VGV_SENTIDO_D F.1
    ADDF F.0 F.1 VGV_U_D
    MOVEF_8 VGV_U_D setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    JR whilebody89
  endwhile89:
RETSUB_F_PIDCONTROL_AD_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_PIDCONTROL_AD_0:
SUB_F_DISPLAY_0:
  while113:
  whilebody113:
    MOVE32_32 1 STOPLCDUPDATE
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_XT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
    DATAF tmpf119
    DATA8 flag119
    DIVF F.1 100.0 tmpf119
    CP_EQF 0.0 100.0 flag119
    SELECTF flag119 0.0 tmpf119 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'xt: ' S.1 S.0
    CALL LCD.WRITE 5.0 5.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_YT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
    DATAF tmpf126
    DATA8 flag126
    DIVF F.1 100.0 tmpf126
    CP_EQF 0.0 100.0 flag126
    SELECTF flag126 0.0 tmpf126 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'yt: ' S.1 S.0
    CALL LCD.WRITE 5.0 15.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.1 VGV_THETAT
    MULF F.1 57.295779513082 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'thetat: ' S.1 S.0
    CALL LCD.WRITE 5.0 25.0 S.0
    STRINGS VALUE_FORMATTED VGV_CENTRO '%g' 99 S.1
    CALL TEXT.APPEND 'centro: ' S.1 S.0
    CALL LCD.WRITE 5.0 35.0 S.0
    OUTPUT_READ 0 1 getSpeedB tmpTachoB
	MOVE8_F getSpeedB F.1
    MULF F.1 -1.0 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Velocidad de B:  ' S.1 S.0
    CALL LCD.WRITE 5.0 45.0 S.0
    OUTPUT_READ 0 2 getSpeedC tmpTachoC
	MOVE8_F getSpeedC F.1
    MULF F.1 -1.0 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Velocidad de C:  ' S.1 S.0
    CALL LCD.WRITE 5.0 55.0 S.0
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Angulo de A:  ' S.1 S.0
    CALL LCD.WRITE 5.0 75.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGLE_A '%g' 99 S.1
    CALL TEXT.APPEND 'Obj de A:  ' S.1 S.0
    CALL LCD.WRITE 5.0 85.0 S.0
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Angulo de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 95.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGLE_D '%g' 99 S.1
    CALL TEXT.APPEND 'Obj de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 105.0 S.0
    STRINGS VALUE_FORMATTED VGV_SENTIDO_D '%g' 99 S.1
    CALL TEXT.APPEND 'Sentido0 de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 115.0 S.0
    MOVE32_32 0 STOPLCDUPDATE
	UI_DRAW UPDATE
    DATA32 milliseconds166
	MOVEF_32 50.0 milliseconds166
	DATA32 timer166
	TIMER_WAIT milliseconds166 timer166
	TIMER_READY timer166
    JR whilebody113
  endwhile113:
RETSUB_F_DISPLAY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DISPLAY_0:
SUB_F_MAIN_0:
    WRITE32 ENDSUB_F_STARTARM_0:CALLSUB167 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STARTARM_0
CALLSUB167:
    MOVEF_F 0.0 VLV_V1_34
    MOVEF_F 20.0 VLV_V2_34
    MOVEF_F 40.0 VLV_ANGLE_34
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB168 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB168:
    MOVEF_F 20.0 VLV_V1_34
    MOVEF_F 0.0 VLV_V2_34
    MOVEF_F 40.0 VLV_ANGLE_34
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB169 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB169:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_38
    MOVEF_F 140.0 VLV_DEGREES_38
    WRITE32 ENDSUB_F_BMOVED_2:CALLSUB170 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED_2
CALLSUB170:
    MOVEF_F 30.0 VLV_VELOCIDAD_19
    MOVEF_F 80.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB171 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB171:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_41
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB172 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB172:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_36
    MOVEF_F 180.0 VLV_DEGREES_36
    WRITE32 ENDSUB_F_BMOVEA_2:CALLSUB173 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA_2
CALLSUB173:
    MOVEF_F -30.0 VLV_VELOCIDAD_19
    MOVEF_F 30.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB174:
    MOVEF_F 20.0 VLV_V1_34
    MOVEF_F -20.0 VLV_V2_34
    MOVEF_F 60.0 VLV_ANGLE_34
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB175 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB175:
    MOVEF_F 30.0 VLV_VELOCIDAD_19
    MOVEF_F 60.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB176 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB176:
    MOVEF_F -20.0 VLV_V1_34
    MOVEF_F 20.0 VLV_V2_34
    MOVEF_F 55.0 VLV_ANGLE_34
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB177:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_A_39
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_D_39
    MOVEF_F 60.0 VLV_DEGREES_A_39
    MOVEF_F 160.0 VLV_DEGREES_D_39
    WRITE32 ENDSUB_F_BMOVEAD_4:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD_4
CALLSUB178:
    DATA32 milliseconds179
	MOVEF_32 1000.0 milliseconds179
	DATA32 timer179
	TIMER_WAIT milliseconds179 timer179
	TIMER_READY timer179
    MOVEF_F -30.0 VLV_VELOCIDAD_19
    MOVEF_F 200.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB180 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB180:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_A_42
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_D_42
    WRITE32 ENDSUB_F_BMOVEAD0_2:CALLSUB181 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD0_2
CALLSUB181:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_SL14SICF_6:
    STRINGS DUPLICATE 'B' VLV_I_14
    STRINGS DUPLICATE 'C' VLV_D_14
    MOVEF_F 3.1415926535897932384 F.2
    MULF 56.0 F.2 F.1
    DATAF tmpf184
    DATA8 flag184
    DIVF VLV_ACCELENCODER_14 F.1 tmpf184
    CP_EQF 0.0 F.1 flag184
    SELECTF flag184 0.0 tmpf184 F.0

    MULF F.0 360.0 VLV_ACCELENCODER_14
    MOVEF_F 0.0 VLV_U_14
    MOVEF_F 0.0 VLV_ERROR_14
    MOVEF_F 0.0 VLV_OLDERROR_14
    MOVEF_F 0.0 VLV_ERRSUM_14
    CALL MOTOR.RESETCOUNT 'C'
  while187:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 15.0 or188
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 15.0 endwhile187
  or188:
  whilebody187:
    CALL MOTOR.GETCOUNT 'C' F.3
    DATAF tmpf192
    DATA8 flag192
    DIVF F.3 VLV_ACCELENCODER_14 tmpf192
    CP_EQF 0.0 VLV_ACCELENCODER_14 flag192
    SELECTF flag192 0.0 tmpf192 F.2

    MULF F.2 0.72 F.1
    ADDF VLV_VMAX_14 VLV_V0_14 F.2
    MULF F.1 F.2 F.0
    ADDF F.0 VLV_V0_14 VLV_VEL_14
    DATA8 flag197
	CP_LTF VLV_VEL_14 VLV_VMAX_14 flag197
	SELECTF flag197 VLV_VEL_14 VLV_VMAX_14 VLV_VEL_14
    MATH ABS VLV_VEL_14 F.0
    DATAF tmpf199
    DATA8 flag199
    DIVF VLV_VEL_14 F.0 tmpf199
    CP_EQF 0.0 F.0 flag199
    SELECTF flag199 0.0 tmpf199 VLV_SENTIDO_14

    CALL SENSOR.READPERCENT 1.0 F.1
    CALL SENSOR.READPERCENT 4.0 F.2
    SUBF F.1 F.2 F.0
    MULF F.0 VLV_SENTIDO_14 VLV_ERROR_14
    ADDF VLV_ERRSUM_14 VLV_ERROR_14 VLV_ERRSUM_14
    MULF VLV_ERROR_14 VLV_KP_14 F.1
    SUBF VLV_ERROR_14 VLV_OLDERROR_14 F.3
    MULF F.3 VLV_KD_14 F.2
    ADDF F.1 F.2 F.0
    MULF VLV_ERRSUM_14 VLV_KI_14 F.1
    ADDF F.0 F.1 VLV_U_14
    CALL TEXT.APPEND VLV_I_14 VLV_D_14 S.0
    ADDF VLV_VEL_14 VLV_U_14 F.1
    MULF F.1 VGV_SENTIDO_MOTORES F.0
    SUBF VLV_VEL_14 VLV_U_14 F.2
    MULF F.2 VGV_SENTIDO_MOTORES F.1
    CALL MOTOR.STARTSYNC S.0 F.0 F.1
    MOVEF_F VLV_ERROR_14 VLV_OLDERROR_14
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 15.0 whilebody187
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 15.0 whilebody187
  endwhile187:
    CALL TEXT.APPEND VLV_I_14 VLV_D_14 S.0
    CALL MOTOR.STOP S.0 'False'
RETSUB_F_SL14SICF_6:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SL14SICF_6:
SUB_F_ENCODERRECTOMG_2:
    MOVEF_F 56.0 VLV_DIAMETRO_19
    MULF VLV_DISTANCIA_19 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf223
    DATA8 flag223
    DIVF F.1 F.2 tmpf223
    CP_EQF 0.0 F.2 flag223
    SELECTF flag223 0.0 tmpf223 F.0

    DATAF tmpf224
    DATA8 flag224
    DIVF F.0 VLV_DIAMETRO_19 tmpf224
    CP_EQF 0.0 VLV_DIAMETRO_19 flag224
    SELECTF flag224 0.0 tmpf224 VLV_ENC_19

    CALL MOTOR.GETCOUNT 'B' VLV_START_B_19
    CALL MOTOR.GETCOUNT 'C' VLV_START_C_19
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_19 VLV_ENCODER_C_19
  while229:
    MATH ABS VLV_ENCODER_C_19 F.0
    JR_GTEQF F.0 VLV_ENC_19 endwhile229
  whilebody229:
    CALL MOTOR.GETCOUNT 'B' F.1
    SUBF F.1 VLV_START_B_19 F.0
    MULF F.0 VGV_SENTIDO_MOTORES VLV_ENCODER_B_19
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.1 VLV_START_C_19 F.0
    MULF F.0 VGV_SENTIDO_MOTORES VLV_ENCODER_C_19
    SUBF VLV_ENCODER_B_19 VLV_ENCODER_C_19 VLV_ERROR_19
    MULF VLV_ERROR_19 2.0 VLV_PROPORCIAL_19
    SUBF VLV_VELOCIDAD_19 VLV_PROPORCIAL_19 F.1
    MULF F.1 VGV_SENTIDO_MOTORES F.0
    ADDF VLV_VELOCIDAD_19 VLV_PROPORCIAL_19 F.2
    MULF F.2 VGV_SENTIDO_MOTORES F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    MATH ABS VLV_ENCODER_C_19 F.0
    JR_LTF F.0 VLV_ENC_19 whilebody229
  endwhile229:
    CALL MOTOR.STOP 'BC' 'True'
RETSUB_F_ENCODERRECTOMG_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ENCODERRECTOMG_2:
SUB_F_GUNIVENCMG_3:
    STRINGS DUPLICATE 'B' VLV_I_34
    STRINGS DUPLICATE 'C' VLV_D_34
    MOVEF_F 3.05555555555556 VLV_G1_34
    DATAF tmpf246
    DATA8 flag246
    DIVF VLV_V1_34 VLV_V2_34 tmpf246
    CP_EQF 0.0 VLV_V2_34 flag246
    SELECTF flag246 0.0 tmpf246 F.0

    DATAF tmpf247
    DATA8 flag247
    DIVF VLV_V1_34 VLV_V2_34 tmpf247
    CP_EQF 0.0 VLV_V2_34 flag247
    SELECTF flag247 0.0 tmpf247 F.2

    MATH ABS F.2 F.1
    DATAF tmpf249
    DATA8 flag249
    DIVF F.0 F.1 tmpf249
    CP_EQF 0.0 F.1 flag249
    SELECTF flag249 0.0 tmpf249 VLV_SIGNO_34

    MATH ABS VLV_V1_34 F.0
    MATH ABS VLV_V2_34 F.1
    DATA8 flag252
	CP_LTF F.0 F.1 flag252
	SELECTF flag252 F.0 F.1 VLV_VMIN_34
    MATH ABS VLV_V1_34 F.0
    MATH ABS VLV_V2_34 F.1
    DATA8 flag255
	CP_GTF F.0 F.1 flag255
	SELECTF flag255 F.0 F.1 VLV_VMAX_34
    DATAF tmpf256
    DATA8 flag256
    DIVF VLV_VMIN_34 VLV_VMAX_34 tmpf256
    CP_EQF 0.0 VLV_VMAX_34 flag256
    SELECTF flag256 0.0 tmpf256 F.3

    MULF -8.5 F.3 F.2
    MULF F.2 VLV_SIGNO_34 F.1
    SUBF F.1 8.5 F.0
    DATAF tmpf260
    DATA8 flag260
    DIVF VLV_VMIN_34 VLV_VMAX_34 tmpf260
    CP_EQF 0.0 VLV_VMAX_34 flag260
    SELECTF flag260 0.0 tmpf260 F.3

    MULF F.3 VLV_SIGNO_34 F.2
    SUBF F.2 1.0 F.1
    DATAF tmpf263
    DATA8 flag263
    DIVF F.0 F.1 tmpf263
    CP_EQF 0.0 F.1 flag263
    SELECTF flag263 0.0 tmpf263 VGV_CENTRO

    MULF VLV_ANGLE_34 VLV_G1_34 F.0
    MULF VLV_SIGNO_34 VLV_VMIN_34 F.4
    DATAF tmpf266
    DATA8 flag266
    DIVF F.4 VLV_VMAX_34 tmpf266
    CP_EQF 0.0 VLV_VMAX_34 flag266
    SELECTF flag266 0.0 tmpf266 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf268
    DATA8 flag268
    DIVF -2.0 F.2 tmpf268
    CP_EQF 0.0 F.2 flag268
    SELECTF flag268 0.0 tmpf268 F.1

    MULF F.0 F.1 VLV_ENCODR_34
    CALL TEXT.APPEND VLV_I_34 VLV_D_34 S.0
    MATH NEGATE VLV_V1_34 F.0
    MATH NEGATE VLV_V2_34 F.1
    CALL MOTOR.SCHEDULESYNC S.0 F.0 F.1 VLV_ENCODR_34 'True'

	DATA8 layer273
	DATA8 nos273
	DATA8 busy273
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer273 nos273
	JR_EQ8 0 nos273 motornotbusy273
  motorwaiting273:
	OUTPUT_TEST layer273 nos273 busy273
	JR_EQ8 busy273 0 motornotbusy273
	SLEEP
	JR motorwaiting273
  motornotbusy273:
RETSUB_F_GUNIVENCMG_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_GUNIVENCMG_3:
SUB_F_BMOVEA_2:
    SUBF VLV_DEGREES_36 VGV_ANGLE_A VLV_ROTATION_36
    MATH ABS VLV_ROTATION_36 F.0
    DATAF tmpf276
    DATA8 flag276
    DIVF F.0 VLV_ROTATION_36 tmpf276
    CP_EQF 0.0 VLV_ROTATION_36 flag276
    SELECTF flag276 0.0 tmpf276 VLV_SIGN_36

    MOVEF_F 0.0 VLV_PROGRESS_36
    MULF VLV_DEGREES_PER_SECOND_36 VLV_SIGN_36 F.0
    DATAF tmpf278
    DATA8 flag278
    DIVF F.0 50.0 tmpf278
    CP_EQF 0.0 50.0 flag278
    SELECTF flag278 0.0 tmpf278 VLV_DEGREES_PER_INTERVAL_36

  while279:
    SUBF VLV_ROTATION_36 VLV_PROGRESS_36 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile279
  whilebody279:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_36 VGV_ANGLE_A
    ADDF VLV_PROGRESS_36 VLV_DEGREES_PER_INTERVAL_36 VLV_PROGRESS_36
    DATA32 milliseconds284
	MOVEF_32 1.0 milliseconds284
	DATA32 timer284
	TIMER_WAIT milliseconds284 timer284
	TIMER_READY timer284
    SUBF VLV_ROTATION_36 VLV_PROGRESS_36 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody279
  endwhile279:
    MOVEF_F VLV_DEGREES_36 VGV_ANGLE_A
RETSUB_F_BMOVEA_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA_2:
SUB_F_BMOVED_2:
    MULF VLV_DEGREES_38 VGV_SENTIDO_D VLV_DEGREES_38
    SUBF VLV_DEGREES_38 VGV_ANGLE_D VLV_ROTATION_38
    MATH ABS VLV_ROTATION_38 F.0
    DATAF tmpf290
    DATA8 flag290
    DIVF F.0 VLV_ROTATION_38 tmpf290
    CP_EQF 0.0 VLV_ROTATION_38 flag290
    SELECTF flag290 0.0 tmpf290 VLV_SIGN_38

    MOVEF_F 0.0 VLV_PROGRESS_38
    MULF VLV_DEGREES_PER_SECOND_38 VLV_SIGN_38 F.0
    DATAF tmpf292
    DATA8 flag292
    DIVF F.0 50.0 tmpf292
    CP_EQF 0.0 50.0 flag292
    SELECTF flag292 0.0 tmpf292 VLV_DEGREES_PER_INTERVAL_38

  while293:
    SUBF VLV_ROTATION_38 VLV_PROGRESS_38 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile293
  whilebody293:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_38 VGV_ANGLE_D
    ADDF VLV_PROGRESS_38 VLV_DEGREES_PER_INTERVAL_38 VLV_PROGRESS_38
    DATA32 milliseconds298
	MOVEF_32 1.0 milliseconds298
	DATA32 timer298
	TIMER_WAIT milliseconds298 timer298
	TIMER_READY timer298
    SUBF VLV_ROTATION_38 VLV_PROGRESS_38 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody293
  endwhile293:
    MOVEF_F VLV_DEGREES_38 VGV_ANGLE_D
RETSUB_F_BMOVED_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED_2:
SUB_F_BMOVEAD_4:
    MULF VLV_DEGREES_D_39 VGV_SENTIDO_D VLV_DEGREES_D_39
  while302:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_39 or303
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_39 endwhile302
  or303:
  whilebody302:
    MATH ROUND VGV_ANGLE_A F.0
    SUBF VLV_DEGREES_A_39 5.0 F.1
    JR_GTEQF F.0 F.1 else304_1
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_39 else304_1
    DATAF tmpf308
    DATA8 flag308
    DIVF VLV_DEGREES_PER_SECOND_A_39 2.0 tmpf308
    CP_EQF 0.0 2.0 flag308
    SELECTF flag308 0.0 tmpf308 F.3

    SUBF VLV_DEGREES_A_39 VGV_ANGLE_A F.5
    DATAF tmpf310
    DATA8 flag310
    DIVF F.5 10.0 tmpf310
    CP_EQF 0.0 10.0 flag310
    SELECTF flag310 0.0 tmpf310 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag312
	CP_LTF VLV_DEGREES_PER_SECOND_A_39 F.2 flag312
	SELECTF flag312 VLV_DEGREES_PER_SECOND_A_39 F.2 F.1
    DATAF tmpf313
    DATA8 flag313
    DIVF F.1 50.0 tmpf313
    CP_EQF 0.0 50.0 flag313
    SELECTF flag313 0.0 tmpf313 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif304
  else304_1:
    MATH ROUND VGV_ANGLE_A F.0
    ADDF VLV_DEGREES_A_39 5.0 F.1
    JR_LTEQF F.0 F.1 else304_2
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_39 else304_2
    DATAF tmpf318
    DATA8 flag318
    DIVF VLV_DEGREES_PER_SECOND_A_39 2.0 tmpf318
    CP_EQF 0.0 2.0 flag318
    SELECTF flag318 0.0 tmpf318 F.3

    SUBF VLV_DEGREES_A_39 VGV_ANGLE_A F.5
    DATAF tmpf320
    DATA8 flag320
    DIVF F.5 10.0 tmpf320
    CP_EQF 0.0 10.0 flag320
    SELECTF flag320 0.0 tmpf320 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag322
	CP_GTF VLV_DEGREES_PER_SECOND_A_39 F.2 flag322
	SELECTF flag322 VLV_DEGREES_PER_SECOND_A_39 F.2 F.1
    DATAF tmpf323
    DATA8 flag323
    DIVF F.1 50.0 tmpf323
    CP_EQF 0.0 50.0 flag323
    SELECTF flag323 0.0 tmpf323 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif304
  else304_2:
    MOVEF_F VLV_DEGREES_A_39 VGV_ANGLE_A
  else304_3:
  endif304:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_39 else325_1
    DATAF tmpf327
    DATA8 flag327
    DIVF VLV_DEGREES_PER_SECOND_D_39 2.0 tmpf327
    CP_EQF 0.0 2.0 flag327
    SELECTF flag327 0.0 tmpf327 F.3

    SUBF VLV_DEGREES_D_39 VGV_ANGLE_D F.5
    DATAF tmpf329
    DATA8 flag329
    DIVF F.5 10.0 tmpf329
    CP_EQF 0.0 10.0 flag329
    SELECTF flag329 0.0 tmpf329 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag331
	CP_LTF VLV_DEGREES_PER_SECOND_D_39 F.2 flag331
	SELECTF flag331 VLV_DEGREES_PER_SECOND_D_39 F.2 F.1
    DATAF tmpf332
    DATA8 flag332
    DIVF F.1 50.0 tmpf332
    CP_EQF 0.0 50.0 flag332
    SELECTF flag332 0.0 tmpf332 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif325
  else325_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_39 else325_2
    DATAF tmpf335
    DATA8 flag335
    DIVF VLV_DEGREES_PER_SECOND_D_39 2.0 tmpf335
    CP_EQF 0.0 2.0 flag335
    SELECTF flag335 0.0 tmpf335 F.3

    SUBF VLV_DEGREES_D_39 VGV_ANGLE_D F.5
    DATAF tmpf337
    DATA8 flag337
    DIVF F.5 10.0 tmpf337
    CP_EQF 0.0 10.0 flag337
    SELECTF flag337 0.0 tmpf337 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag339
	CP_GTF VLV_DEGREES_PER_SECOND_D_39 F.2 flag339
	SELECTF flag339 VLV_DEGREES_PER_SECOND_D_39 F.2 F.1
    DATAF tmpf340
    DATA8 flag340
    DIVF F.1 50.0 tmpf340
    CP_EQF 0.0 50.0 flag340
    SELECTF flag340 0.0 tmpf340 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif325
  else325_2:
    MOVEF_F VLV_DEGREES_D_39 VGV_ANGLE_D
  else325_3:
  endif325:
    DATA32 milliseconds342
	MOVEF_32 1.0 milliseconds342
	DATA32 timer342
	TIMER_WAIT milliseconds342 timer342
	TIMER_READY timer342
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_39 whilebody302
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_39 whilebody302
  endwhile302:
    MOVEF_F VLV_DEGREES_A_39 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_39 VGV_ANGLE_D
RETSUB_F_BMOVEAD_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD_4:
SUB_F_BMOVEA0_1:
    MOVEF_F 0.0 VLV_DEGREES_40
    SUBF VLV_DEGREES_40 VGV_ANGLE_A VLV_ROTATION_40
    MATH ABS VLV_ROTATION_40 F.0
    DATAF tmpf345
    DATA8 flag345
    DIVF F.0 VLV_ROTATION_40 tmpf345
    CP_EQF 0.0 VLV_ROTATION_40 flag345
    SELECTF flag345 0.0 tmpf345 VLV_SIGN_40

    MOVEF_F 0.0 VLV_PROGRESS_40
    MULF VLV_DEGREES_PER_SECOND_40 VLV_SIGN_40 F.0
    DATAF tmpf347
    DATA8 flag347
    DIVF F.0 50.0 tmpf347
    CP_EQF 0.0 50.0 flag347
    SELECTF flag347 0.0 tmpf347 VLV_DEGREES_PER_INTERVAL_40

  while348:
    SUBF VLV_ROTATION_40 VLV_PROGRESS_40 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile348
  whilebody348:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_40 VGV_ANGLE_A
    ADDF VLV_PROGRESS_40 VLV_DEGREES_PER_INTERVAL_40 VLV_PROGRESS_40
    DATA32 milliseconds353
	MOVEF_32 1.0 milliseconds353
	DATA32 timer353
	TIMER_WAIT milliseconds353 timer353
	TIMER_READY timer353
    SUBF VLV_ROTATION_40 VLV_PROGRESS_40 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody348
  endwhile348:
    MOVEF_F VLV_DEGREES_40 VGV_ANGLE_A
RETSUB_F_BMOVEA0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA0_1:
SUB_F_BMOVED0_1:
    MOVEF_F 0.0 VLV_DEGREES_41
    SUBF VLV_DEGREES_41 VGV_ANGLE_D VLV_ROTATION_41
    MATH ABS VLV_ROTATION_41 F.0
    DATAF tmpf358
    DATA8 flag358
    DIVF F.0 VLV_ROTATION_41 tmpf358
    CP_EQF 0.0 VLV_ROTATION_41 flag358
    SELECTF flag358 0.0 tmpf358 VLV_SIGN_41

    MOVEF_F 0.0 VLV_PROGRESS_41
    MULF VLV_DEGREES_PER_SECOND_41 VLV_SIGN_41 F.0
    DATAF tmpf360
    DATA8 flag360
    DIVF F.0 50.0 tmpf360
    CP_EQF 0.0 50.0 flag360
    SELECTF flag360 0.0 tmpf360 VLV_DEGREES_PER_INTERVAL_41

  while361:
    SUBF VLV_ROTATION_41 VLV_PROGRESS_41 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile361
  whilebody361:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_41 VGV_ANGLE_D
    ADDF VLV_PROGRESS_41 VLV_DEGREES_PER_INTERVAL_41 VLV_PROGRESS_41
    DATA32 milliseconds366
	MOVEF_32 1.0 milliseconds366
	DATA32 timer366
	TIMER_WAIT milliseconds366 timer366
	TIMER_READY timer366
    SUBF VLV_ROTATION_41 VLV_PROGRESS_41 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody361
  endwhile361:
    MOVEF_F VLV_DEGREES_41 VGV_ANGLE_D
RETSUB_F_BMOVED0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED0_1:
SUB_F_BMOVEAD0_2:
    MOVEF_F 0.0 VLV_DEGREES_A_42
    MOVEF_F 0.0 VLV_DEGREES_D_42
  while369:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_42 or370
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_42 endwhile369
  or370:
  whilebody369:
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_42 else371_1
    DATAF tmpf373
    DATA8 flag373
    DIVF VLV_DEGREES_PER_SECOND_A_42 2.0 tmpf373
    CP_EQF 0.0 2.0 flag373
    SELECTF flag373 0.0 tmpf373 F.3

    SUBF VLV_DEGREES_A_42 VGV_ANGLE_A F.5
    DATAF tmpf375
    DATA8 flag375
    DIVF F.5 10.0 tmpf375
    CP_EQF 0.0 10.0 flag375
    SELECTF flag375 0.0 tmpf375 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag377
	CP_LTF VLV_DEGREES_PER_SECOND_A_42 F.2 flag377
	SELECTF flag377 VLV_DEGREES_PER_SECOND_A_42 F.2 F.1
    DATAF tmpf378
    DATA8 flag378
    DIVF F.1 50.0 tmpf378
    CP_EQF 0.0 50.0 flag378
    SELECTF flag378 0.0 tmpf378 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif371
  else371_1:
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_42 else371_2
    DATAF tmpf381
    DATA8 flag381
    DIVF VLV_DEGREES_PER_SECOND_A_42 2.0 tmpf381
    CP_EQF 0.0 2.0 flag381
    SELECTF flag381 0.0 tmpf381 F.3

    SUBF VLV_DEGREES_A_42 VGV_ANGLE_A F.5
    DATAF tmpf383
    DATA8 flag383
    DIVF F.5 10.0 tmpf383
    CP_EQF 0.0 10.0 flag383
    SELECTF flag383 0.0 tmpf383 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag385
	CP_GTF VLV_DEGREES_PER_SECOND_A_42 F.2 flag385
	SELECTF flag385 VLV_DEGREES_PER_SECOND_A_42 F.2 F.1
    DATAF tmpf386
    DATA8 flag386
    DIVF F.1 50.0 tmpf386
    CP_EQF 0.0 50.0 flag386
    SELECTF flag386 0.0 tmpf386 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif371
  else371_2:
    MOVEF_F VLV_DEGREES_A_42 VGV_ANGLE_A
  else371_3:
  endif371:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_42 else388_1
    DATAF tmpf390
    DATA8 flag390
    DIVF VLV_DEGREES_PER_SECOND_D_42 2.0 tmpf390
    CP_EQF 0.0 2.0 flag390
    SELECTF flag390 0.0 tmpf390 F.3

    SUBF VLV_DEGREES_D_42 VGV_ANGLE_D F.5
    DATAF tmpf392
    DATA8 flag392
    DIVF F.5 10.0 tmpf392
    CP_EQF 0.0 10.0 flag392
    SELECTF flag392 0.0 tmpf392 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag394
	CP_LTF VLV_DEGREES_PER_SECOND_D_42 F.2 flag394
	SELECTF flag394 VLV_DEGREES_PER_SECOND_D_42 F.2 F.1
    DATAF tmpf395
    DATA8 flag395
    DIVF F.1 50.0 tmpf395
    CP_EQF 0.0 50.0 flag395
    SELECTF flag395 0.0 tmpf395 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif388
  else388_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_42 else388_2
    DATAF tmpf398
    DATA8 flag398
    DIVF VLV_DEGREES_PER_SECOND_D_42 2.0 tmpf398
    CP_EQF 0.0 2.0 flag398
    SELECTF flag398 0.0 tmpf398 F.3

    SUBF VLV_DEGREES_D_42 VGV_ANGLE_D F.5
    DATAF tmpf400
    DATA8 flag400
    DIVF F.5 10.0 tmpf400
    CP_EQF 0.0 10.0 flag400
    SELECTF flag400 0.0 tmpf400 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag402
	CP_GTF VLV_DEGREES_PER_SECOND_D_42 F.2 flag402
	SELECTF flag402 VLV_DEGREES_PER_SECOND_D_42 F.2 F.1
    DATAF tmpf403
    DATA8 flag403
    DIVF F.1 50.0 tmpf403
    CP_EQF 0.0 50.0 flag403
    SELECTF flag403 0.0 tmpf403 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif388
  else388_2:
    MOVEF_F VLV_DEGREES_D_42 VGV_ANGLE_D
  else388_3:
  endif388:
    DATA32 milliseconds405
	MOVEF_32 1.0 milliseconds405
	DATA32 timer405
	TIMER_WAIT milliseconds405 timer405
	TIMER_READY timer405
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_42 whilebody369
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_42 whilebody369
  endwhile369:
    MOVEF_F VLV_DEGREES_A_42 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_42 VGV_ANGLE_D
RETSUB_F_BMOVEAD0_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD0_2:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
