DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEGREES_PER_SECOND_47
DATAF VLV_DEGREES_PER_SECOND_46
DATAF VLV_OMEGAI_K1_33
DATAF VLV_OMEGAD_K1_33
DATAF VLV_V1_35
DATAF VLV_V2_35
DATAF VLV_ANGLE_35
DATAF VLV_DEGREES_PER_SECOND_44
DATAF VLV_DEGREES_44
DATAF VLV_VELOCIDAD_19
DATAF VLV_DISTANCIA_19
DATAF VLV_DEGREES_PER_SECOND_42
DATAF VLV_DEGREES_42
DATAF VLV_DEGREES_PER_SECOND_A_45
DATAF VLV_DEGREES_PER_SECOND_D_45
DATAF VLV_DEGREES_A_45
DATAF VLV_DEGREES_D_45
DATAF VLV_DEGREES_PER_SECOND_A_48
DATAF VLV_DEGREES_PER_SECOND_D_48
DATAF VLV_V0_14
DATAF VLV_VMAX_14
DATAF VLV_KP_14
DATAF VLV_KI_14
DATAF VLV_KD_14
DATAF VLV_ACCELENCODER_14
ARRAY16 VLV_M_39 2
ARRAY16 VLV_S_39 2
ARRAY16 VLV_V_33 2
DATAF VGV_CENTRO
DATAF VGV_XTIME
DATAF VGV_YTIME
DATAF VGV_THETATIME
DATAF VGV_XTCORRECT
DATAF VGV_YTCORRECT
DATAF VGV_THETATCORRECT
DATAF VGV_SENTIDO_D
DATAF VGV_D_T
DATAF VGV_SENTIDO_MOTORES
DATAF VGV_ANGLE_A
DATAF VGV_ANGLE_D
ARRAY16 VGV_ALPHA_L 2
ARRAY16 VGV_ALPHA_R 2
DATAF VGV_OLDB
DATAF VGV_OLDC
ARRAY16 VGV_XT 2
ARRAY16 VGV_YT 2
ARRAY16 VGV_THETAT 2
DATAF VGV_I
DATAF VGV_DW
DATAF VGV_DIAMETER
DATAF VGV_D_L
DATAF VGV_D_R
DATAF VGV_D
DATAF VGV_DELTA_THETA
DATAF VGV_KP_A
DATAF VGV_KI_A
DATAF VGV_KD_A
DATAF VGV_KP_D
DATAF VGV_KI_D
DATAF VGV_KD_D
DATAF VGV_ERROR_A
DATAF VGV_ERROR_D
DATAF VGV_ERRSUM_A
DATAF VGV_ERRSUM_D
DATAF VGV_OLDERROR_A
DATAF VGV_OLDERROR_D
DATAF VGV_U_A
DATAF VGV_U_D
DATAS VLV_I_14 252
DATAS VLV_D_14 252
DATAF VLV_U_14
DATAF VLV_ERROR_14
DATAF VLV_OLDERROR_14
DATAF VLV_ERRSUM_14
DATAF VLV_VEL_14
DATAF VLV_SENTIDO_14
DATAF VLV_DIAMETRO_19
DATAF VLV_ENC_19
DATAF VLV_START_B_19
DATAF VLV_START_C_19
DATAF VLV_ENCODER_C_19
DATAF VLV_ENCODER_B_19
DATAF VLV_ERROR_19
DATAF VLV_PROPORCIAL_19
DATAF VLV_RADIO_33
ARRAY16 VLV_P_33 2
ARRAY16 VLV_DF_K_33 2
DATAF VLV_X_K_K1_33
DATAF VLV_Y_K_K1_33
DATAF VLV_THETA_K_K1_33
DATAF VLV_DELTA_T_33
DATAF VLV_OLD_T_33
ARRAY16 VLV_F_K_X_33 2
ARRAY16 VLV_F_K_Y_33 2
ARRAY16 VLV_F_K_THETA_33 2
ARRAY16 VLV_F_K_33 2
ARRAY16 VLV_Q_K1_33 2
ARRAY16 VLV_Q_X_K1_33 2
ARRAY16 VLV_Q_Y_K1_33 2
ARRAY16 VLV_Q_THETA_K1_33 2
ARRAY16 VLV_U_33 2
ARRAY16 VLV_W_33 2
DATAS VLV_I_35 252
DATAS VLV_D_35 252
DATAF VLV_G1_35
DATAF VLV_SIGNO_35
DATAF VLV_VMIN_35
DATAF VLV_VMAX_35
DATAF VLV_ENCODR_35
DATAF VLV_ROTATION_42
DATAF VLV_SIGN_42
DATAF VLV_PROGRESS_42
DATAF VLV_DEGREES_PER_INTERVAL_42
DATAF VLV_ROTATION_44
DATAF VLV_SIGN_44
DATAF VLV_PROGRESS_44
DATAF VLV_DEGREES_PER_INTERVAL_44
DATAF VLV_DEGREES_46
DATAF VLV_ROTATION_46
DATAF VLV_SIGN_46
DATAF VLV_PROGRESS_46
DATAF VLV_DEGREES_PER_INTERVAL_46
DATAF VLV_DEGREES_47
DATAF VLV_ROTATION_47
DATAF VLV_SIGN_47
DATAF VLV_PROGRESS_47
DATAF VLV_DEGREES_PER_INTERVAL_47
DATAF VLV_DEGREES_A_48
DATAF VLV_DEGREES_D_48
DATA32 RUNCOUNTER_F_PIDCONTROL_AD_0
DATA32 RUNCOUNTER_F_ODOMETRY_0
DATA32 RUNCOUNTER_F_DISPLAY_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_47
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_46
    MOVEF_F 0.0 VLV_OMEGAI_K1_33
    MOVEF_F 0.0 VLV_OMEGAD_K1_33
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 0.0 VLV_ANGLE_35
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_44
    MOVEF_F 0.0 VLV_DEGREES_44
    MOVEF_F 0.0 VLV_VELOCIDAD_19
    MOVEF_F 0.0 VLV_DISTANCIA_19
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_42
    MOVEF_F 0.0 VLV_DEGREES_42
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_45
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_45
    MOVEF_F 0.0 VLV_DEGREES_A_45
    MOVEF_F 0.0 VLV_DEGREES_D_45
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_48
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_48
    MOVEF_F 0.0 VLV_V0_14
    MOVEF_F 0.0 VLV_VMAX_14
    MOVEF_F 0.0 VLV_KP_14
    MOVEF_F 0.0 VLV_KI_14
    MOVEF_F 0.0 VLV_KD_14
    MOVEF_F 0.0 VLV_ACCELENCODER_14
    CALL ARRAYCREATE_FLOAT VLV_M_39
    CALL ARRAYCREATE_FLOAT VLV_S_39
    CALL ARRAYCREATE_FLOAT VLV_V_33
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F 0.0 VGV_SENTIDO_MOTORES
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_L
    CALL ARRAYCREATE_FLOAT VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYCREATE_FLOAT VGV_XT
    CALL ARRAYCREATE_FLOAT VGV_YT
    CALL ARRAYCREATE_FLOAT VGV_THETAT
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_DW
    MOVEF_F 0.0 VGV_DIAMETER
    MOVEF_F 0.0 VGV_D_L
    MOVEF_F 0.0 VGV_D_R
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_DELTA_THETA
    MOVEF_F 0.0 VGV_KP_A
    MOVEF_F 0.0 VGV_KI_A
    MOVEF_F 0.0 VGV_KD_A
    MOVEF_F 0.0 VGV_KP_D
    MOVEF_F 0.0 VGV_KI_D
    MOVEF_F 0.0 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    STRINGS DUPLICATE '' VLV_I_14
    STRINGS DUPLICATE '' VLV_D_14
    MOVEF_F 0.0 VLV_U_14
    MOVEF_F 0.0 VLV_ERROR_14
    MOVEF_F 0.0 VLV_OLDERROR_14
    MOVEF_F 0.0 VLV_ERRSUM_14
    MOVEF_F 0.0 VLV_VEL_14
    MOVEF_F 0.0 VLV_SENTIDO_14
    MOVEF_F 0.0 VLV_DIAMETRO_19
    MOVEF_F 0.0 VLV_ENC_19
    MOVEF_F 0.0 VLV_START_B_19
    MOVEF_F 0.0 VLV_START_C_19
    MOVEF_F 0.0 VLV_ENCODER_C_19
    MOVEF_F 0.0 VLV_ENCODER_B_19
    MOVEF_F 0.0 VLV_ERROR_19
    MOVEF_F 0.0 VLV_PROPORCIAL_19
    MOVEF_F 0.0 VLV_RADIO_33
    CALL ARRAYCREATE_FLOAT VLV_P_33
    CALL ARRAYCREATE_FLOAT VLV_DF_K_33
    MOVEF_F 0.0 VLV_X_K_K1_33
    MOVEF_F 0.0 VLV_Y_K_K1_33
    MOVEF_F 0.0 VLV_THETA_K_K1_33
    MOVEF_F 0.0 VLV_DELTA_T_33
    MOVEF_F 0.0 VLV_OLD_T_33
    CALL ARRAYCREATE_FLOAT VLV_F_K_X_33
    CALL ARRAYCREATE_FLOAT VLV_F_K_Y_33
    CALL ARRAYCREATE_FLOAT VLV_F_K_THETA_33
    CALL ARRAYCREATE_FLOAT VLV_F_K_33
    CALL ARRAYCREATE_FLOAT VLV_Q_K1_33
    CALL ARRAYCREATE_FLOAT VLV_Q_X_K1_33
    CALL ARRAYCREATE_FLOAT VLV_Q_Y_K1_33
    CALL ARRAYCREATE_FLOAT VLV_Q_THETA_K1_33
    CALL ARRAYCREATE_FLOAT VLV_U_33
    CALL ARRAYCREATE_FLOAT VLV_W_33
    STRINGS DUPLICATE '' VLV_I_35
    STRINGS DUPLICATE '' VLV_D_35
    MOVEF_F 0.0 VLV_G1_35
    MOVEF_F 0.0 VLV_SIGNO_35
    MOVEF_F 0.0 VLV_VMIN_35
    MOVEF_F 0.0 VLV_VMAX_35
    MOVEF_F 0.0 VLV_ENCODR_35
    MOVEF_F 0.0 VLV_ROTATION_42
    MOVEF_F 0.0 VLV_SIGN_42
    MOVEF_F 0.0 VLV_PROGRESS_42
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_42
    MOVEF_F 0.0 VLV_ROTATION_44
    MOVEF_F 0.0 VLV_SIGN_44
    MOVEF_F 0.0 VLV_PROGRESS_44
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_44
    MOVEF_F 0.0 VLV_DEGREES_46
    MOVEF_F 0.0 VLV_ROTATION_46
    MOVEF_F 0.0 VLV_SIGN_46
    MOVEF_F 0.0 VLV_PROGRESS_46
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_46
    MOVEF_F 0.0 VLV_DEGREES_47
    MOVEF_F 0.0 VLV_ROTATION_47
    MOVEF_F 0.0 VLV_SIGN_47
    MOVEF_F 0.0 VLV_PROGRESS_47
    MOVEF_F 0.0 VLV_DEGREES_PER_INTERVAL_47
    MOVEF_F 0.0 VLV_DEGREES_A_48
    MOVEF_F 0.0 VLV_DEGREES_D_48
    MOVE32_32 0 RUNCOUNTER_F_PIDCONTROL_AD_0
    MOVE32_32 0 RUNCOUNTER_F_ODOMETRY_0
    MOVE32_32 0 RUNCOUNTER_F_DISPLAY_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_PIDCONTROL_AD_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_PIDCONTROL_AD_0 0
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 -1 RUNCOUNTER_F_PIDCONTROL_AD_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_ODOMETRY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_ODOMETRY_0 1
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 -1 RUNCOUNTER_F_ODOMETRY_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_DISPLAY_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_DISPLAY_0 2
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 -1 RUNCOUNTER_F_DISPLAY_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_PIDCONTROL_AD_0
subcall PROGRAM_F_ODOMETRY_0
subcall PROGRAM_F_DISPLAY_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    DATAF F.6
    DATAF F.7
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch540
    WRITE32 ENDSUB_F_PIDCONTROL_AD_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_PIDCONTROL_AD_0
  dispatch540:
    JR_NEQ32 SUBPROGRAM 1 dispatch541
    WRITE32 ENDSUB_F_ODOMETRY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ODOMETRY_0
  dispatch541:
    JR_NEQ32 SUBPROGRAM 2 dispatch542
    WRITE32 ENDSUB_F_DISPLAY_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DISPLAY_0
  dispatch542:
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_47
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_46
    MOVEF_F 0.0 VLV_OMEGAI_K1_33
    MOVEF_F 0.0 VLV_OMEGAD_K1_33
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 0.0 VLV_ANGLE_35
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_44
    MOVEF_F 0.0 VLV_DEGREES_44
    MOVEF_F 0.0 VLV_VELOCIDAD_19
    MOVEF_F 0.0 VLV_DISTANCIA_19
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_42
    MOVEF_F 0.0 VLV_DEGREES_42
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_45
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_45
    MOVEF_F 0.0 VLV_DEGREES_A_45
    MOVEF_F 0.0 VLV_DEGREES_D_45
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_A_48
    MOVEF_F 0.0 VLV_DEGREES_PER_SECOND_D_48
    MOVEF_F 0.0 VLV_V0_14
    MOVEF_F 0.0 VLV_VMAX_14
    MOVEF_F 0.0 VLV_KP_14
    MOVEF_F 0.0 VLV_KI_14
    MOVEF_F 0.0 VLV_KD_14
    MOVEF_F 0.0 VLV_ACCELENCODER_14
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_S_39
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_V_33
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 0.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F 0.0 VGV_SENTIDO_MOTORES
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    MOVEF_F 0.0 VGV_CENTRO
    MOVEF_F 0.0 VGV_XTIME
    MOVEF_F 0.0 VGV_YTIME
    MOVEF_F 0.0 VGV_THETATIME
    MOVEF_F 0.0 VGV_XTCORRECT
    MOVEF_F 0.0 VGV_YTCORRECT
    MOVEF_F 0.0 VGV_THETATCORRECT
    MOVEF_F 1.0 VGV_SENTIDO_D
    MOVEF_F 0.0 VGV_D_T
    MOVEF_F -1.0 VGV_SENTIDO_MOTORES
    MOVEF_F -1.0 VGV_SENTIDO_MOTORES
    DATA32 tmp3
    CALL GETANDINC32 RUNCOUNTER_F_PIDCONTROL_AD_0 1  RUNCOUNTER_F_PIDCONTROL_AD_0 tmp3
    JR_NEQ32 0 tmp3 alreadylaunched3
    OBJECT_START TF_PIDCONTROL_AD_0
  alreadylaunched3:
    DATA32 tmp4
    CALL GETANDINC32 RUNCOUNTER_F_ODOMETRY_0 1  RUNCOUNTER_F_ODOMETRY_0 tmp4
    JR_NEQ32 0 tmp4 alreadylaunched4
    OBJECT_START TF_ODOMETRY_0
  alreadylaunched4:
    DATA32 tmp5
    CALL GETANDINC32 RUNCOUNTER_F_DISPLAY_0 1  RUNCOUNTER_F_DISPLAY_0 tmp5
    JR_NEQ32 0 tmp5 alreadylaunched5
    OBJECT_START TF_DISPLAY_0
  alreadylaunched5:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB6 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB6:
    DATA32 milliseconds7
	MOVEF_32 10000.0 milliseconds7
	DATA32 timer7
	TIMER_WAIT milliseconds7 timer7
	TIMER_READY timer7
ENDTHREAD:
    RETURN
SUB_F_STARTARM_0:
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
    TIMER_READ timeMC1
  while9:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 500.0 endwhile9
  whilebody9:
    ADDF VGV_ANGLE_D 1.0 VGV_ANGLE_D
    DATA32 milliseconds12
	MOVEF_32 3.0 milliseconds12
	DATA32 timer12
	TIMER_WAIT milliseconds12 timer12
	TIMER_READY timer12
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 500.0 whilebody9
  endwhile9:
    DATA32 milliseconds14
	MOVEF_32 500.0 milliseconds14
	DATA32 timer14
	TIMER_WAIT milliseconds14 timer14
	TIMER_READY timer14
    CALL MOTOR.GETCOUNT 'D' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 60.0 else15_1
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_47
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB18 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB18:
    MOVEF_F -1.0 VGV_SENTIDO_D
    JR endif15
  else15_1:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_47
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB19 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB19:
    MOVEF_F 1.0 VGV_SENTIDO_D
  else15_2:
  endif15:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_46
    WRITE32 ENDSUB_F_BMOVEA0_1:CALLSUB20 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA0_1
CALLSUB20:
    DATA32 milliseconds21
	MOVEF_32 100.0 milliseconds21
	DATA32 timer21
	TIMER_WAIT milliseconds21 timer21
	TIMER_READY timer21
RETSUB_F_STARTARM_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STARTARM_0:
SUB_F_ODOMETRY_0:
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_ALPHA_R
    MOVEF_F 0.0 VGV_OLDB
    MOVEF_F 0.0 VGV_OLDC
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_XT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_YT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_THETAT
    MOVEF_F 0.0 VGV_I
  while27:
  whilebody27:
    MOVEF_F 84.5 VGV_DW
    MOVEF_F 56.0 VGV_DIAMETER
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_L
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.1
    DIVF F.1 57.295779513082 F.0
    CALL ARRAYSTORE_FLOAT VGV_I F.0 VGV_ALPHA_R
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_L
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_L
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf39
    DATA8 flag39
    DIVF F.0 2.0 tmpf39
    CP_EQF 0.0 2.0 flag39
    SELECTF flag39 0.0 tmpf39 VGV_D_L

    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_ALPHA_R
    SUBF VGV_I 1.0 F.4
    CALL ARRAYGET_FLOAT F.4 F.3 VGV_ALPHA_R
    SUBF F.2 F.3 F.1
    MULF F.1 VGV_DIAMETER F.0
    DATAF tmpf45
    DATA8 flag45
    DIVF F.0 2.0 tmpf45
    CP_EQF 0.0 2.0 flag45
    SELECTF flag45 0.0 tmpf45 VGV_D_R

    ADDF VGV_D_L VGV_D_R F.0
    DATAF tmpf47
    DATA8 flag47
    DIVF F.0 2.0 tmpf47
    CP_EQF 0.0 2.0 flag47
    SELECTF flag47 0.0 tmpf47 VGV_D

    SUBF VGV_D_R VGV_D_L F.0
    MULF 2.0 VGV_DW F.1
    DATAF tmpf50
    DATA8 flag50
    DIVF F.0 F.1 tmpf50
    CP_EQF 0.0 F.1 flag50
    SELECTF flag50 0.0 tmpf50 VGV_DELTA_THETA

    JR_EQF VGV_XTCORRECT 0.0 else51_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_XTCORRECT VGV_XT
    MOVEF_F 0.0 VGV_XTCORRECT
    JR endif51
  else51_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf56
    DATA8 flag56
    DIVF VGV_DELTA_THETA 2.0 tmpf56
    CP_EQF 0.0 2.0 flag56
    SELECTF flag56 0.0 tmpf56 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf58
	MULF F.5 57.295779513082  tmpf58
	MATH SIN  tmpf58 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_XT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_XT
  else51_2:
  endif51:
    JR_EQF VGV_YTCORRECT 0.0 else64_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_YTCORRECT VGV_YT
    MOVEF_F 0.0 VGV_YTCORRECT
    JR endif64
  else64_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.6 VGV_THETAT
    DATAF tmpf69
    DATA8 flag69
    DIVF VGV_DELTA_THETA 2.0 tmpf69
    CP_EQF 0.0 2.0 flag69
    SELECTF flag69 0.0 tmpf69 F.7

    ADDF F.6 F.7 F.5
    DATAF tmpf71
	MULF F.5 57.295779513082 tmpf71
	MATH COS tmpf71 F.4
    MULF VGV_D F.4 F.3
    CALL ARRAYGET_FLOAT VGV_I F.4 VGV_YT
    ADDF F.3 F.4 F.2
    MULF F.2 -1.0 F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_YT
  else64_2:
  endif64:
    JR_EQF VGV_THETATCORRECT 0.0 else77_1
    ADDF VGV_I 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VGV_THETATCORRECT VGV_THETAT
    MOVEF_F 0.0 VGV_THETATCORRECT
    JR endif77
  else77_1:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT VGV_I F.2 VGV_THETAT
    ADDF F.2 VGV_DELTA_THETA F.1
    CALL ARRAYSTORE_FLOAT F.0 F.1 VGV_THETAT
  else77_2:
  endif77:
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_XTIME VGV_XT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_YTIME VGV_YT
    ADDF VGV_I 1.0 F.0
    CALL ARRAYGET_FLOAT F.0 VGV_THETATIME VGV_THETAT
    ADDF VGV_I 1.0 VGV_I
    DATA32 milliseconds91
	MOVEF_32 10.0 milliseconds91
	DATA32 timer91
	TIMER_WAIT milliseconds91 timer91
	TIMER_READY timer91
    JR whilebody27
  endwhile27:
RETSUB_F_ODOMETRY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ODOMETRY_0:
SUB_F_PIDCONTROL_AD_0:
    MOVEF_F 0.5 VGV_KP_A
    MOVEF_F 0.0001 VGV_KI_A
    MOVEF_F 0.1 VGV_KD_A
    MOVEF_F 0.5 VGV_KP_D
    MOVEF_F 0.0001 VGV_KI_D
    MOVEF_F 0.1 VGV_KD_D
    MOVEF_F 0.0 VGV_ERROR_A
    MOVEF_F 0.0 VGV_ERROR_D
    MOVEF_F 0.0 VGV_ERRSUM_A
    MOVEF_F 0.0 VGV_ERRSUM_D
    MOVEF_F 0.0 VGV_OLDERROR_A
    MOVEF_F 0.0 VGV_OLDERROR_D
    MOVEF_F 0.0 VGV_U_A
    MOVEF_F 0.0 VGV_U_D
    MOVEF_F 0.0 VGV_ANGLE_A
    MOVEF_F 0.0 VGV_ANGLE_D
  while92:
  whilebody92:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    SUBF VGV_ANGLE_A F.0 VGV_ERROR_A
    ADDF VGV_ERRSUM_A VGV_ERROR_A VGV_ERRSUM_A
    MULF VGV_ERROR_A VGV_KP_A F.1
    MULF VGV_ERRSUM_A VGV_KI_A F.3
    DATAF tmpf98
    DATA8 flag98
    DIVF F.3 1.0 tmpf98
    CP_EQF 0.0 1.0 flag98
    SELECTF flag98 0.0 tmpf98 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_A VGV_OLDERROR_A F.2
    MULF F.2 VGV_KD_A F.1
    ADDF F.0 F.1 VGV_U_A
    MOVEF_8 VGV_U_A setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    SUBF VGV_ANGLE_D F.0 VGV_ERROR_D
    ADDF VGV_ERRSUM_D VGV_ERROR_D VGV_ERRSUM_D
    MULF VGV_ERROR_D VGV_KP_D F.1
    MULF VGV_ERRSUM_D VGV_KI_D F.3
    DATAF tmpf109
    DATA8 flag109
    DIVF F.3 1.0 tmpf109
    CP_EQF 0.0 1.0 flag109
    SELECTF flag109 0.0 tmpf109 F.2

    ADDF F.1 F.2 F.0
    SUBF VGV_ERROR_D VGV_OLDERROR_D F.3
    MULF F.3 VGV_KD_D F.2
    MULF F.2 VGV_SENTIDO_D F.1
    ADDF F.0 F.1 VGV_U_D
    MOVEF_8 VGV_U_D setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    JR whilebody92
  endwhile92:
RETSUB_F_PIDCONTROL_AD_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_PIDCONTROL_AD_0:
SUB_F_DISPLAY_0:
  while116:
  whilebody116:
    MOVE32_32 1 STOPLCDUPDATE
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_XT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
    DATAF tmpf122
    DATA8 flag122
    DIVF F.1 100.0 tmpf122
    CP_EQF 0.0 100.0 flag122
    SELECTF flag122 0.0 tmpf122 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'xt: ' S.1 S.0
    CALL LCD.WRITE 5.0 5.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.3 VGV_YT
    MULF F.3 100.0 F.2
    MATH ROUND F.2 F.1
    DATAF tmpf129
    DATA8 flag129
    DIVF F.1 100.0 tmpf129
    CP_EQF 0.0 100.0 flag129
    SELECTF flag129 0.0 tmpf129 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'yt: ' S.1 S.0
    CALL LCD.WRITE 5.0 15.0 S.0
    CALL ARRAYGET_FLOAT VGV_I F.1 VGV_THETAT
    MULF F.1 57.295779513082 F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'thetat: ' S.1 S.0
    CALL LCD.WRITE 5.0 25.0 S.0
    STRINGS VALUE_FORMATTED VGV_CENTRO '%g' 99 S.1
    CALL TEXT.APPEND 'centro: ' S.1 S.0
    CALL LCD.WRITE 5.0 35.0 S.0
    STRINGS VALUE_FORMATTED VGV_D_T '%g' 99 S.1
    CALL TEXT.APPEND 'Delta T:  ' S.1 S.0
    CALL LCD.WRITE 5.0 45.0 S.0
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Angulo de A:  ' S.1 S.0
    CALL LCD.WRITE 5.0 75.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGLE_A '%g' 99 S.1
    CALL TEXT.APPEND 'Obj de A:  ' S.1 S.0
    CALL LCD.WRITE 5.0 85.0 S.0
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Angulo de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 95.0 S.0
    STRINGS VALUE_FORMATTED VGV_ANGLE_D '%g' 99 S.1
    CALL TEXT.APPEND 'Obj de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 105.0 S.0
    STRINGS VALUE_FORMATTED VGV_SENTIDO_D '%g' 99 S.1
    CALL TEXT.APPEND 'Sentido de D:  ' S.1 S.0
    CALL LCD.WRITE 5.0 115.0 S.0
    MOVE32_32 0 STOPLCDUPDATE
	UI_DRAW UPDATE
    DATA32 milliseconds162
	MOVEF_32 50.0 milliseconds162
	DATA32 timer162
	TIMER_WAIT milliseconds162 timer162
	TIMER_READY timer162
    JR whilebody116
  endwhile116:
RETSUB_F_DISPLAY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DISPLAY_0:
SUB_F_MAIN_0:
    MOVEF_F 1.0 VLV_OMEGAI_K1_33
    MOVEF_F 1.0 VLV_OMEGAD_K1_33
    WRITE32 ENDSUB_F_KALMAN_FILTER_2:CALLSUB163 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_KALMAN_FILTER_2
CALLSUB163:
    WRITE32 ENDSUB_F_STARTARM_0:CALLSUB164 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STARTARM_0
CALLSUB164:
    MOVEF_F 0.0 VLV_V1_35
    MOVEF_F 20.0 VLV_V2_35
    MOVEF_F 40.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB165 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB165:
    MOVEF_F 20.0 VLV_V1_35
    MOVEF_F 0.0 VLV_V2_35
    MOVEF_F 40.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB166 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB166:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_44
    MOVEF_F 140.0 VLV_DEGREES_44
    WRITE32 ENDSUB_F_BMOVED_2:CALLSUB167 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED_2
CALLSUB167:
    MOVEF_F 30.0 VLV_VELOCIDAD_19
    MOVEF_F 80.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB168 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB168:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_47
    WRITE32 ENDSUB_F_BMOVED0_1:CALLSUB169 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVED0_1
CALLSUB169:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_42
    MOVEF_F 180.0 VLV_DEGREES_42
    WRITE32 ENDSUB_F_BMOVEA_2:CALLSUB170 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEA_2
CALLSUB170:
    MOVEF_F -30.0 VLV_VELOCIDAD_19
    MOVEF_F 30.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB171 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB171:
    MOVEF_F 20.0 VLV_V1_35
    MOVEF_F -20.0 VLV_V2_35
    MOVEF_F 60.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB172 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB172:
    MOVEF_F 30.0 VLV_VELOCIDAD_19
    MOVEF_F 60.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB173 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB173:
    MOVEF_F -20.0 VLV_V1_35
    MOVEF_F 20.0 VLV_V2_35
    MOVEF_F 55.0 VLV_ANGLE_35
    WRITE32 ENDSUB_F_GUNIVENCMG_3:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GUNIVENCMG_3
CALLSUB174:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_A_45
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_D_45
    MOVEF_F 60.0 VLV_DEGREES_A_45
    MOVEF_F 160.0 VLV_DEGREES_D_45
    WRITE32 ENDSUB_F_BMOVEAD_4:CALLSUB175 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD_4
CALLSUB175:
    DATA32 milliseconds176
	MOVEF_32 1000.0 milliseconds176
	DATA32 timer176
	TIMER_WAIT milliseconds176 timer176
	TIMER_READY timer176
    MOVEF_F -30.0 VLV_VELOCIDAD_19
    MOVEF_F 200.0 VLV_DISTANCIA_19
    WRITE32 ENDSUB_F_ENCODERRECTOMG_2:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ENCODERRECTOMG_2
CALLSUB177:
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_A_48
    MOVEF_F 90.0 VLV_DEGREES_PER_SECOND_D_48
    WRITE32 ENDSUB_F_BMOVEAD0_2:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BMOVEAD0_2
CALLSUB178:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_SL14SICF_6:
    STRINGS DUPLICATE 'B' VLV_I_14
    STRINGS DUPLICATE 'C' VLV_D_14
    MOVEF_F 3.1415926535897932384 F.2
    MULF 56.0 F.2 F.1
    DATAF tmpf181
    DATA8 flag181
    DIVF VLV_ACCELENCODER_14 F.1 tmpf181
    CP_EQF 0.0 F.1 flag181
    SELECTF flag181 0.0 tmpf181 F.0

    MULF F.0 360.0 VLV_ACCELENCODER_14
    MOVEF_F 0.0 VLV_U_14
    MOVEF_F 0.0 VLV_ERROR_14
    MOVEF_F 0.0 VLV_OLDERROR_14
    MOVEF_F 0.0 VLV_ERRSUM_14
    CALL MOTOR.RESETCOUNT 'C'
  while184:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 15.0 or185
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 15.0 endwhile184
  or185:
  whilebody184:
    CALL MOTOR.GETCOUNT 'C' F.3
    DATAF tmpf189
    DATA8 flag189
    DIVF F.3 VLV_ACCELENCODER_14 tmpf189
    CP_EQF 0.0 VLV_ACCELENCODER_14 flag189
    SELECTF flag189 0.0 tmpf189 F.2

    MULF F.2 0.72 F.1
    ADDF VLV_VMAX_14 VLV_V0_14 F.2
    MULF F.1 F.2 F.0
    ADDF F.0 VLV_V0_14 VLV_VEL_14
    DATA8 flag194
	CP_LTF VLV_VEL_14 VLV_VMAX_14 flag194
	SELECTF flag194 VLV_VEL_14 VLV_VMAX_14 VLV_VEL_14
    MATH ABS VLV_VEL_14 F.0
    DATAF tmpf196
    DATA8 flag196
    DIVF VLV_VEL_14 F.0 tmpf196
    CP_EQF 0.0 F.0 flag196
    SELECTF flag196 0.0 tmpf196 VLV_SENTIDO_14

    CALL SENSOR.READPERCENT 1.0 F.1
    CALL SENSOR.READPERCENT 4.0 F.2
    SUBF F.1 F.2 F.0
    MULF F.0 VLV_SENTIDO_14 VLV_ERROR_14
    ADDF VLV_ERRSUM_14 VLV_ERROR_14 VLV_ERRSUM_14
    MULF VLV_ERROR_14 VLV_KP_14 F.1
    SUBF VLV_ERROR_14 VLV_OLDERROR_14 F.3
    MULF F.3 VLV_KD_14 F.2
    ADDF F.1 F.2 F.0
    MULF VLV_ERRSUM_14 VLV_KI_14 F.1
    ADDF F.0 F.1 VLV_U_14
    CALL TEXT.APPEND VLV_I_14 VLV_D_14 S.0
    ADDF VLV_VEL_14 VLV_U_14 F.1
    MULF F.1 VGV_SENTIDO_MOTORES F.0
    SUBF VLV_VEL_14 VLV_U_14 F.2
    MULF F.2 VGV_SENTIDO_MOTORES F.1
    CALL MOTOR.STARTSYNC S.0 F.0 F.1
    MOVEF_F VLV_ERROR_14 VLV_OLDERROR_14
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 15.0 whilebody184
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 15.0 whilebody184
  endwhile184:
    CALL TEXT.APPEND VLV_I_14 VLV_D_14 S.0
    CALL MOTOR.STOP S.0 'False'
RETSUB_F_SL14SICF_6:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SL14SICF_6:
SUB_F_ENCODERRECTOMG_2:
    MOVEF_F 56.0 VLV_DIAMETRO_19
    MULF VLV_DISTANCIA_19 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf220
    DATA8 flag220
    DIVF F.1 F.2 tmpf220
    CP_EQF 0.0 F.2 flag220
    SELECTF flag220 0.0 tmpf220 F.0

    DATAF tmpf221
    DATA8 flag221
    DIVF F.0 VLV_DIAMETRO_19 tmpf221
    CP_EQF 0.0 VLV_DIAMETRO_19 flag221
    SELECTF flag221 0.0 tmpf221 VLV_ENC_19

    CALL MOTOR.GETCOUNT 'B' VLV_START_B_19
    CALL MOTOR.GETCOUNT 'C' VLV_START_C_19
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_19 VLV_ENCODER_C_19
  while226:
    MATH ABS VLV_ENCODER_C_19 F.0
    JR_GTEQF F.0 VLV_ENC_19 endwhile226
  whilebody226:
    CALL MOTOR.GETCOUNT 'B' F.1
    SUBF F.1 VLV_START_B_19 F.0
    MULF F.0 VGV_SENTIDO_MOTORES VLV_ENCODER_B_19
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.1 VLV_START_C_19 F.0
    MULF F.0 VGV_SENTIDO_MOTORES VLV_ENCODER_C_19
    SUBF VLV_ENCODER_B_19 VLV_ENCODER_C_19 VLV_ERROR_19
    MULF VLV_ERROR_19 2.0 VLV_PROPORCIAL_19
    SUBF VLV_VELOCIDAD_19 VLV_PROPORCIAL_19 F.1
    MULF F.1 VGV_SENTIDO_MOTORES F.0
    ADDF VLV_VELOCIDAD_19 VLV_PROPORCIAL_19 F.2
    MULF F.2 VGV_SENTIDO_MOTORES F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    MATH ABS VLV_ENCODER_C_19 F.0
    JR_LTF F.0 VLV_ENC_19 whilebody226
  endwhile226:
    CALL MOTOR.STOP 'BC' 'True'
RETSUB_F_ENCODERRECTOMG_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ENCODERRECTOMG_2:
SUB_F_KALMAN_FILTER_2:
    MOVEF_F 28.0 VLV_RADIO_33
    CALL VECTOR.DATA 9.0 '1 0 0  0 1 0  0 0 1' VLV_P_33
    CALL VECTOR.INIT 9.0 0.0 VLV_DF_K_33
    MOVEF_F 0.0 VLV_X_K_K1_33
    MOVEF_F 0.0 VLV_Y_K_K1_33
    MOVEF_F 0.0 VLV_THETA_K_K1_33
    CALL EV3.TIME VLV_DELTA_T_33
    MOVEF_F 0.0 VLV_OLD_T_33
  while246:
  whilebody246:
    CALL EV3.TIME F.0
    SUBF F.0 VLV_OLD_T_33 VLV_DELTA_T_33
    CALL EV3.TIME VLV_OLD_T_33
    ADDF VLV_OMEGAI_K1_33 VLV_OMEGAD_K1_33 F.4
    MULF F.4 VLV_RADIO_33 F.3
    MULF F.3 VLV_DELTA_T_33 F.2
    DATAF tmpf253
    DATA8 flag253
    DIVF F.2 2.0 tmpf253
    CP_EQF 0.0 2.0 flag253
    SELECTF flag253 0.0 tmpf253 F.1

    SUBF VLV_OMEGAD_K1_33 VLV_OMEGAI_K1_33 F.7
    MULF F.7 VLV_RADIO_33 F.6
    MULF F.6 VLV_DELTA_T_33 F.5
    MULF 4.0 VGV_DW F.6
    DATAF tmpf258
    DATA8 flag258
    DIVF F.5 F.6 tmpf258
    CP_EQF 0.0 F.6 flag258
    SELECTF flag258 0.0 tmpf258 F.4

    ADDF VLV_THETA_K_K1_33 F.4 F.3
    DATAF tmpf260
	MULF F.3 57.295779513082 tmpf260
	MATH COS tmpf260 F.2
    MULF F.1 F.2 F.0
    ADDF VLV_X_K_K1_33 F.0 VLV_X_K_K1_33
    ADDF VLV_OMEGAI_K1_33 VLV_OMEGAD_K1_33 F.4
    MULF F.4 VLV_RADIO_33 F.3
    MULF F.3 VLV_DELTA_T_33 F.2
    DATAF tmpf266
    DATA8 flag266
    DIVF F.2 2.0 tmpf266
    CP_EQF 0.0 2.0 flag266
    SELECTF flag266 0.0 tmpf266 F.1

    SUBF VLV_OMEGAD_K1_33 VLV_OMEGAI_K1_33 F.7
    MULF F.7 VLV_RADIO_33 F.6
    MULF F.6 VLV_DELTA_T_33 F.5
    MULF 4.0 VGV_DW F.6
    DATAF tmpf271
    DATA8 flag271
    DIVF F.5 F.6 tmpf271
    CP_EQF 0.0 F.6 flag271
    SELECTF flag271 0.0 tmpf271 F.4

    ADDF VLV_THETA_K_K1_33 F.4 F.3
    DATAF tmpf273
	MULF F.3 57.295779513082  tmpf273
	MATH SIN  tmpf273 F.2
    MULF F.1 F.2 F.0
    ADDF VLV_Y_K_K1_33 F.0 VLV_Y_K_K1_33
    SUBF VLV_OMEGAD_K1_33 VLV_OMEGAI_K1_33 F.3
    MULF F.3 VLV_RADIO_33 F.2
    MULF F.2 VLV_DELTA_T_33 F.1
    MULF 2.0 VGV_DW F.2
    DATAF tmpf280
    DATA8 flag280
    DIVF F.1 F.2 tmpf280
    CP_EQF 0.0 F.2 flag280
    SELECTF flag280 0.0 tmpf280 F.0

    ADDF VLV_THETA_K_K1_33 F.0 VLV_THETA_K_K1_33
    CALL ARRAYSTORE_FLOAT 0.0 1.0 VLV_F_K_X_33
    CALL ARRAYSTORE_FLOAT 1.0 0.0 VLV_F_K_X_33
    ADDF VLV_OMEGAI_K1_33 VLV_OMEGAD_K1_33 F.5
    MULF F.5 VLV_RADIO_33 F.4
    MULF F.4 VLV_DELTA_T_33 F.3
    MULF -1.0 F.3 F.2
    DATAF tmpf288
    DATA8 flag288
    DIVF F.2 2.0 tmpf288
    CP_EQF 0.0 2.0 flag288
    SELECTF flag288 0.0 tmpf288 F.1

    SUBF VLV_OMEGAD_K1_33 VLV_OMEGAI_K1_33 F.7
    MULF F.7 VLV_RADIO_33 F.6
    MULF F.6 VLV_DELTA_T_33 F.5
    MULF 4.0 VGV_DW F.6
    DATAF tmpf293
    DATA8 flag293
    DIVF F.5 F.6 tmpf293
    CP_EQF 0.0 F.6 flag293
    SELECTF flag293 0.0 tmpf293 F.4

    ADDF VLV_THETA_K_K1_33 F.4 F.3
    DATAF tmpf295
	MULF F.3 57.295779513082  tmpf295
	MATH SIN  tmpf295 F.2
    MULF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_F_K_X_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_F_K_Y_33
    CALL ARRAYSTORE_FLOAT 1.0 1.0 VLV_F_K_Y_33
    ADDF VLV_OMEGAI_K1_33 VLV_OMEGAD_K1_33 F.4
    MULF F.4 VLV_RADIO_33 F.3
    MULF F.3 VLV_DELTA_T_33 F.2
    DATAF tmpf303
    DATA8 flag303
    DIVF F.2 2.0 tmpf303
    CP_EQF 0.0 2.0 flag303
    SELECTF flag303 0.0 tmpf303 F.1

    SUBF VLV_OMEGAD_K1_33 VLV_OMEGAI_K1_33 F.7
    MULF F.7 VLV_RADIO_33 F.6
    MULF F.6 VLV_DELTA_T_33 F.5
    MULF 4.0 VGV_DW F.6
    DATAF tmpf308
    DATA8 flag308
    DIVF F.5 F.6 tmpf308
    CP_EQF 0.0 F.6 flag308
    SELECTF flag308 0.0 tmpf308 F.4

    ADDF VLV_THETA_K_K1_33 F.4 F.3
    DATAF tmpf310
	MULF F.3 57.295779513082 tmpf310
	MATH COS tmpf310 F.2
    MULF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_F_K_Y_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_F_K_THETA_33
    CALL ARRAYSTORE_FLOAT 1.0 0.0 VLV_F_K_THETA_33
    CALL ARRAYSTORE_FLOAT 2.0 1.0 VLV_F_K_THETA_33
    ADDF VLV_OMEGAI_K1_33 VLV_OMEGAD_K1_33 F.5
    MULF F.5 VLV_RADIO_33 F.4
    MULF F.4 VLV_DELTA_T_33 F.3
    MULF -1.0 F.3 F.2
    DATAF tmpf320
    DATA8 flag320
    DIVF F.2 2.0 tmpf320
    CP_EQF 0.0 2.0 flag320
    SELECTF flag320 0.0 tmpf320 F.1

    SUBF VLV_OMEGAD_K1_33 VLV_OMEGAI_K1_33 F.7
    MULF F.7 VLV_RADIO_33 F.6
    MULF F.6 VLV_DELTA_T_33 F.5
    MULF 4.0 VGV_DW F.6
    DATAF tmpf325
    DATA8 flag325
    DIVF F.5 F.6 tmpf325
    CP_EQF 0.0 F.6 flag325
    SELECTF flag325 0.0 tmpf325 F.4

    ADDF VLV_THETA_K_K1_33 F.4 F.3
    DATAF tmpf327
	MULF F.3 57.295779513082  tmpf327
	MATH SIN  tmpf327 F.2
    MULF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DF_K_33
    ADDF VLV_OMEGAI_K1_33 VLV_OMEGAD_K1_33 F.4
    MULF F.4 VLV_RADIO_33 F.3
    MULF F.3 VLV_DELTA_T_33 F.2
    DATAF tmpf333
    DATA8 flag333
    DIVF F.2 2.0 tmpf333
    CP_EQF 0.0 2.0 flag333
    SELECTF flag333 0.0 tmpf333 F.1

    SUBF VLV_OMEGAD_K1_33 VLV_OMEGAI_K1_33 F.7
    MULF F.7 VLV_RADIO_33 F.6
    MULF F.6 VLV_DELTA_T_33 F.5
    MULF 4.0 VGV_DW F.6
    DATAF tmpf338
    DATA8 flag338
    DIVF F.5 F.6 tmpf338
    CP_EQF 0.0 F.6 flag338
    SELECTF flag338 0.0 tmpf338 F.4

    ADDF VLV_THETA_K_K1_33 F.4 F.3
    DATAF tmpf340
	MULF F.3 57.295779513082 tmpf340
	MATH COS tmpf340 F.2
    MULF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_DF_K_33
    CALL VECTOR.ADD 9.0 VLV_P_33 VLV_DF_K_33 VLV_F_K_33
    CALL VECTOR.DATA 9.0 '0.25 0 0  0 0.25 0 0 0 0.002' VLV_Q_K1_33
    CALL ARRAYSTORE_FLOAT 0.0 0.25 VLV_Q_X_K1_33
    CALL ARRAYSTORE_FLOAT 1.0 0.0 VLV_Q_X_K1_33
    CALL ARRAYSTORE_FLOAT 2.0 0.0 VLV_Q_X_K1_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_Q_Y_K1_33
    CALL ARRAYSTORE_FLOAT 1.0 0.25 VLV_Q_Y_K1_33
    CALL ARRAYSTORE_FLOAT 2.0 0.0 VLV_Q_Y_K1_33
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VLV_Q_THETA_K1_33
    CALL ARRAYSTORE_FLOAT 1.0 0.0 VLV_Q_THETA_K1_33
    DIVF 3.0 57.295779513082 F.1
    DIVF 3.0 57.295779513082 F.2
    MULF F.1 F.2 F.0
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_Q_THETA_K1_33
    MOVEF_F VLV_DELTA_T_33 VGV_D_T
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_F_K_33 VLV_P_33 VLV_U_33
    ARRAY COPY VLV_U_33 VLV_M_39
    WRITE32 ENDSUB_F_TRASPMATVECT3X3_2:CALLSUB358 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TRASPMATVECT3X3_2
CALLSUB358:
    ARRAY COPY VLV_S_39 VLV_V_33
    CALL VECTOR.MULTIPLY 3.0 3.0 3.0 VLV_U_33 VLV_V_33 VLV_W_33
    CALL VECTOR.ADD 9.0 VLV_W_33 VLV_Q_K1_33 VLV_P_33
    JR whilebody246
  endwhile246:
RETSUB_F_KALMAN_FILTER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_KALMAN_FILTER_2:
SUB_F_GUNIVENCMG_3:
    STRINGS DUPLICATE 'B' VLV_I_35
    STRINGS DUPLICATE 'C' VLV_D_35
    MOVEF_F 3.05555555555556 VLV_G1_35
    DATAF tmpf361
    DATA8 flag361
    DIVF VLV_V1_35 VLV_V2_35 tmpf361
    CP_EQF 0.0 VLV_V2_35 flag361
    SELECTF flag361 0.0 tmpf361 F.0

    DATAF tmpf362
    DATA8 flag362
    DIVF VLV_V1_35 VLV_V2_35 tmpf362
    CP_EQF 0.0 VLV_V2_35 flag362
    SELECTF flag362 0.0 tmpf362 F.2

    MATH ABS F.2 F.1
    DATAF tmpf364
    DATA8 flag364
    DIVF F.0 F.1 tmpf364
    CP_EQF 0.0 F.1 flag364
    SELECTF flag364 0.0 tmpf364 VLV_SIGNO_35

    MATH ABS VLV_V1_35 F.0
    MATH ABS VLV_V2_35 F.1
    DATA8 flag367
	CP_LTF F.0 F.1 flag367
	SELECTF flag367 F.0 F.1 VLV_VMIN_35
    MATH ABS VLV_V1_35 F.0
    MATH ABS VLV_V2_35 F.1
    DATA8 flag370
	CP_GTF F.0 F.1 flag370
	SELECTF flag370 F.0 F.1 VLV_VMAX_35
    DATAF tmpf371
    DATA8 flag371
    DIVF VLV_VMIN_35 VLV_VMAX_35 tmpf371
    CP_EQF 0.0 VLV_VMAX_35 flag371
    SELECTF flag371 0.0 tmpf371 F.3

    MULF -8.5 F.3 F.2
    MULF F.2 VLV_SIGNO_35 F.1
    SUBF F.1 8.5 F.0
    DATAF tmpf375
    DATA8 flag375
    DIVF VLV_VMIN_35 VLV_VMAX_35 tmpf375
    CP_EQF 0.0 VLV_VMAX_35 flag375
    SELECTF flag375 0.0 tmpf375 F.3

    MULF F.3 VLV_SIGNO_35 F.2
    SUBF F.2 1.0 F.1
    DATAF tmpf378
    DATA8 flag378
    DIVF F.0 F.1 tmpf378
    CP_EQF 0.0 F.1 flag378
    SELECTF flag378 0.0 tmpf378 VGV_CENTRO

    MULF VLV_ANGLE_35 VLV_G1_35 F.0
    MULF VLV_SIGNO_35 VLV_VMIN_35 F.4
    DATAF tmpf381
    DATA8 flag381
    DIVF F.4 VLV_VMAX_35 tmpf381
    CP_EQF 0.0 VLV_VMAX_35 flag381
    SELECTF flag381 0.0 tmpf381 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf383
    DATA8 flag383
    DIVF -2.0 F.2 tmpf383
    CP_EQF 0.0 F.2 flag383
    SELECTF flag383 0.0 tmpf383 F.1

    MULF F.0 F.1 VLV_ENCODR_35
    CALL TEXT.APPEND VLV_I_35 VLV_D_35 S.0
    MATH NEGATE VLV_V1_35 F.0
    MATH NEGATE VLV_V2_35 F.1
    CALL MOTOR.SCHEDULESYNC S.0 F.0 F.1 VLV_ENCODR_35 'True'

	DATA8 layer388
	DATA8 nos388
	DATA8 busy388
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer388 nos388
	JR_EQ8 0 nos388 motornotbusy388
  motorwaiting388:
	OUTPUT_TEST layer388 nos388 busy388
	JR_EQ8 busy388 0 motornotbusy388
	SLEEP
	JR motorwaiting388
  motornotbusy388:
RETSUB_F_GUNIVENCMG_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_GUNIVENCMG_3:
SUB_F_TRASPMATVECT3X3_2:
    CALL VECTOR.INIT 9.0 0.0 VLV_S_39
    CALL ARRAYGET_FLOAT 0.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 0.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 3.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 1.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 6.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 2.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 1.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 3.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 4.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 4.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 7.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 5.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 2.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 6.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 5.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 7.0 F.0 VLV_S_39
    CALL ARRAYGET_FLOAT 8.0 F.0 VLV_M_39
    CALL ARRAYSTORE_FLOAT 8.0 F.0 VLV_S_39
RETSUB_F_TRASPMATVECT3X3_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TRASPMATVECT3X3_2:
SUB_F_BMOVEA_2:
    SUBF VLV_DEGREES_42 VGV_ANGLE_A VLV_ROTATION_42
    MATH ABS VLV_ROTATION_42 F.0
    DATAF tmpf410
    DATA8 flag410
    DIVF F.0 VLV_ROTATION_42 tmpf410
    CP_EQF 0.0 VLV_ROTATION_42 flag410
    SELECTF flag410 0.0 tmpf410 VLV_SIGN_42

    MOVEF_F 0.0 VLV_PROGRESS_42
    MULF VLV_DEGREES_PER_SECOND_42 VLV_SIGN_42 F.0
    DATAF tmpf412
    DATA8 flag412
    DIVF F.0 50.0 tmpf412
    CP_EQF 0.0 50.0 flag412
    SELECTF flag412 0.0 tmpf412 VLV_DEGREES_PER_INTERVAL_42

  while413:
    SUBF VLV_ROTATION_42 VLV_PROGRESS_42 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile413
  whilebody413:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_42 VGV_ANGLE_A
    ADDF VLV_PROGRESS_42 VLV_DEGREES_PER_INTERVAL_42 VLV_PROGRESS_42
    DATA32 milliseconds418
	MOVEF_32 1.0 milliseconds418
	DATA32 timer418
	TIMER_WAIT milliseconds418 timer418
	TIMER_READY timer418
    SUBF VLV_ROTATION_42 VLV_PROGRESS_42 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody413
  endwhile413:
    MOVEF_F VLV_DEGREES_42 VGV_ANGLE_A
RETSUB_F_BMOVEA_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA_2:
SUB_F_BMOVED_2:
    MULF VLV_DEGREES_44 VGV_SENTIDO_D VLV_DEGREES_44
    SUBF VLV_DEGREES_44 VGV_ANGLE_D VLV_ROTATION_44
    MATH ABS VLV_ROTATION_44 F.0
    DATAF tmpf424
    DATA8 flag424
    DIVF F.0 VLV_ROTATION_44 tmpf424
    CP_EQF 0.0 VLV_ROTATION_44 flag424
    SELECTF flag424 0.0 tmpf424 VLV_SIGN_44

    MOVEF_F 0.0 VLV_PROGRESS_44
    MULF VLV_DEGREES_PER_SECOND_44 VLV_SIGN_44 F.0
    DATAF tmpf426
    DATA8 flag426
    DIVF F.0 50.0 tmpf426
    CP_EQF 0.0 50.0 flag426
    SELECTF flag426 0.0 tmpf426 VLV_DEGREES_PER_INTERVAL_44

  while427:
    SUBF VLV_ROTATION_44 VLV_PROGRESS_44 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile427
  whilebody427:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_44 VGV_ANGLE_D
    ADDF VLV_PROGRESS_44 VLV_DEGREES_PER_INTERVAL_44 VLV_PROGRESS_44
    DATA32 milliseconds432
	MOVEF_32 1.0 milliseconds432
	DATA32 timer432
	TIMER_WAIT milliseconds432 timer432
	TIMER_READY timer432
    SUBF VLV_ROTATION_44 VLV_PROGRESS_44 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody427
  endwhile427:
    MOVEF_F VLV_DEGREES_44 VGV_ANGLE_D
RETSUB_F_BMOVED_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED_2:
SUB_F_BMOVEAD_4:
    MULF VLV_DEGREES_D_45 VGV_SENTIDO_D VLV_DEGREES_D_45
  while436:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_45 or437
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_45 endwhile436
  or437:
  whilebody436:
    MATH ROUND VGV_ANGLE_A F.0
    SUBF VLV_DEGREES_A_45 5.0 F.1
    JR_GTEQF F.0 F.1 else438_1
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_45 else438_1
    DATAF tmpf442
    DATA8 flag442
    DIVF VLV_DEGREES_PER_SECOND_A_45 2.0 tmpf442
    CP_EQF 0.0 2.0 flag442
    SELECTF flag442 0.0 tmpf442 F.3

    SUBF VLV_DEGREES_A_45 VGV_ANGLE_A F.5
    DATAF tmpf444
    DATA8 flag444
    DIVF F.5 10.0 tmpf444
    CP_EQF 0.0 10.0 flag444
    SELECTF flag444 0.0 tmpf444 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag446
	CP_LTF VLV_DEGREES_PER_SECOND_A_45 F.2 flag446
	SELECTF flag446 VLV_DEGREES_PER_SECOND_A_45 F.2 F.1
    DATAF tmpf447
    DATA8 flag447
    DIVF F.1 50.0 tmpf447
    CP_EQF 0.0 50.0 flag447
    SELECTF flag447 0.0 tmpf447 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif438
  else438_1:
    MATH ROUND VGV_ANGLE_A F.0
    ADDF VLV_DEGREES_A_45 5.0 F.1
    JR_LTEQF F.0 F.1 else438_2
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_45 else438_2
    DATAF tmpf452
    DATA8 flag452
    DIVF VLV_DEGREES_PER_SECOND_A_45 2.0 tmpf452
    CP_EQF 0.0 2.0 flag452
    SELECTF flag452 0.0 tmpf452 F.3

    SUBF VLV_DEGREES_A_45 VGV_ANGLE_A F.5
    DATAF tmpf454
    DATA8 flag454
    DIVF F.5 10.0 tmpf454
    CP_EQF 0.0 10.0 flag454
    SELECTF flag454 0.0 tmpf454 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag456
	CP_GTF VLV_DEGREES_PER_SECOND_A_45 F.2 flag456
	SELECTF flag456 VLV_DEGREES_PER_SECOND_A_45 F.2 F.1
    DATAF tmpf457
    DATA8 flag457
    DIVF F.1 50.0 tmpf457
    CP_EQF 0.0 50.0 flag457
    SELECTF flag457 0.0 tmpf457 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif438
  else438_2:
    MOVEF_F VLV_DEGREES_A_45 VGV_ANGLE_A
  else438_3:
  endif438:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_45 else459_1
    DATAF tmpf461
    DATA8 flag461
    DIVF VLV_DEGREES_PER_SECOND_D_45 2.0 tmpf461
    CP_EQF 0.0 2.0 flag461
    SELECTF flag461 0.0 tmpf461 F.3

    SUBF VLV_DEGREES_D_45 VGV_ANGLE_D F.5
    DATAF tmpf463
    DATA8 flag463
    DIVF F.5 10.0 tmpf463
    CP_EQF 0.0 10.0 flag463
    SELECTF flag463 0.0 tmpf463 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag465
	CP_LTF VLV_DEGREES_PER_SECOND_D_45 F.2 flag465
	SELECTF flag465 VLV_DEGREES_PER_SECOND_D_45 F.2 F.1
    DATAF tmpf466
    DATA8 flag466
    DIVF F.1 50.0 tmpf466
    CP_EQF 0.0 50.0 flag466
    SELECTF flag466 0.0 tmpf466 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif459
  else459_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_45 else459_2
    DATAF tmpf469
    DATA8 flag469
    DIVF VLV_DEGREES_PER_SECOND_D_45 2.0 tmpf469
    CP_EQF 0.0 2.0 flag469
    SELECTF flag469 0.0 tmpf469 F.3

    SUBF VLV_DEGREES_D_45 VGV_ANGLE_D F.5
    DATAF tmpf471
    DATA8 flag471
    DIVF F.5 10.0 tmpf471
    CP_EQF 0.0 10.0 flag471
    SELECTF flag471 0.0 tmpf471 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag473
	CP_GTF VLV_DEGREES_PER_SECOND_D_45 F.2 flag473
	SELECTF flag473 VLV_DEGREES_PER_SECOND_D_45 F.2 F.1
    DATAF tmpf474
    DATA8 flag474
    DIVF F.1 50.0 tmpf474
    CP_EQF 0.0 50.0 flag474
    SELECTF flag474 0.0 tmpf474 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif459
  else459_2:
    MOVEF_F VLV_DEGREES_D_45 VGV_ANGLE_D
  else459_3:
  endif459:
    DATA32 milliseconds476
	MOVEF_32 1.0 milliseconds476
	DATA32 timer476
	TIMER_WAIT milliseconds476 timer476
	TIMER_READY timer476
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_45 whilebody436
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_45 whilebody436
  endwhile436:
    MOVEF_F VLV_DEGREES_A_45 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_45 VGV_ANGLE_D
RETSUB_F_BMOVEAD_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD_4:
SUB_F_BMOVEA0_1:
    MOVEF_F 0.0 VLV_DEGREES_46
    SUBF VLV_DEGREES_46 VGV_ANGLE_A VLV_ROTATION_46
    MATH ABS VLV_ROTATION_46 F.0
    DATAF tmpf479
    DATA8 flag479
    DIVF F.0 VLV_ROTATION_46 tmpf479
    CP_EQF 0.0 VLV_ROTATION_46 flag479
    SELECTF flag479 0.0 tmpf479 VLV_SIGN_46

    MOVEF_F 0.0 VLV_PROGRESS_46
    MULF VLV_DEGREES_PER_SECOND_46 VLV_SIGN_46 F.0
    DATAF tmpf481
    DATA8 flag481
    DIVF F.0 50.0 tmpf481
    CP_EQF 0.0 50.0 flag481
    SELECTF flag481 0.0 tmpf481 VLV_DEGREES_PER_INTERVAL_46

  while482:
    SUBF VLV_ROTATION_46 VLV_PROGRESS_46 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile482
  whilebody482:
    ADDF VGV_ANGLE_A VLV_DEGREES_PER_INTERVAL_46 VGV_ANGLE_A
    ADDF VLV_PROGRESS_46 VLV_DEGREES_PER_INTERVAL_46 VLV_PROGRESS_46
    DATA32 milliseconds487
	MOVEF_32 1.0 milliseconds487
	DATA32 timer487
	TIMER_WAIT milliseconds487 timer487
	TIMER_READY timer487
    SUBF VLV_ROTATION_46 VLV_PROGRESS_46 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody482
  endwhile482:
    MOVEF_F VLV_DEGREES_46 VGV_ANGLE_A
RETSUB_F_BMOVEA0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEA0_1:
SUB_F_BMOVED0_1:
    MOVEF_F 0.0 VLV_DEGREES_47
    SUBF VLV_DEGREES_47 VGV_ANGLE_D VLV_ROTATION_47
    MATH ABS VLV_ROTATION_47 F.0
    DATAF tmpf492
    DATA8 flag492
    DIVF F.0 VLV_ROTATION_47 tmpf492
    CP_EQF 0.0 VLV_ROTATION_47 flag492
    SELECTF flag492 0.0 tmpf492 VLV_SIGN_47

    MOVEF_F 0.0 VLV_PROGRESS_47
    MULF VLV_DEGREES_PER_SECOND_47 VLV_SIGN_47 F.0
    DATAF tmpf494
    DATA8 flag494
    DIVF F.0 50.0 tmpf494
    CP_EQF 0.0 50.0 flag494
    SELECTF flag494 0.0 tmpf494 VLV_DEGREES_PER_INTERVAL_47

  while495:
    SUBF VLV_ROTATION_47 VLV_PROGRESS_47 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 5.0 endwhile495
  whilebody495:
    ADDF VGV_ANGLE_D VLV_DEGREES_PER_INTERVAL_47 VGV_ANGLE_D
    ADDF VLV_PROGRESS_47 VLV_DEGREES_PER_INTERVAL_47 VLV_PROGRESS_47
    DATA32 milliseconds500
	MOVEF_32 1.0 milliseconds500
	DATA32 timer500
	TIMER_WAIT milliseconds500 timer500
	TIMER_READY timer500
    SUBF VLV_ROTATION_47 VLV_PROGRESS_47 F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 5.0 whilebody495
  endwhile495:
    MOVEF_F VLV_DEGREES_47 VGV_ANGLE_D
RETSUB_F_BMOVED0_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVED0_1:
SUB_F_BMOVEAD0_2:
    MOVEF_F 0.0 VLV_DEGREES_A_48
    MOVEF_F 0.0 VLV_DEGREES_D_48
  while503:
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_48 or504
    JR_EQF VGV_ANGLE_D VLV_DEGREES_D_48 endwhile503
  or504:
  whilebody503:
    MATH ROUND VGV_ANGLE_A F.0
    JR_GTEQF F.0 VLV_DEGREES_A_48 else505_1
    DATAF tmpf507
    DATA8 flag507
    DIVF VLV_DEGREES_PER_SECOND_A_48 2.0 tmpf507
    CP_EQF 0.0 2.0 flag507
    SELECTF flag507 0.0 tmpf507 F.3

    SUBF VLV_DEGREES_A_48 VGV_ANGLE_A F.5
    DATAF tmpf509
    DATA8 flag509
    DIVF F.5 10.0 tmpf509
    CP_EQF 0.0 10.0 flag509
    SELECTF flag509 0.0 tmpf509 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag511
	CP_LTF VLV_DEGREES_PER_SECOND_A_48 F.2 flag511
	SELECTF flag511 VLV_DEGREES_PER_SECOND_A_48 F.2 F.1
    DATAF tmpf512
    DATA8 flag512
    DIVF F.1 50.0 tmpf512
    CP_EQF 0.0 50.0 flag512
    SELECTF flag512 0.0 tmpf512 F.0

    ADDF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif505
  else505_1:
    MATH ROUND VGV_ANGLE_A F.0
    JR_LTEQF F.0 VLV_DEGREES_A_48 else505_2
    DATAF tmpf515
    DATA8 flag515
    DIVF VLV_DEGREES_PER_SECOND_A_48 2.0 tmpf515
    CP_EQF 0.0 2.0 flag515
    SELECTF flag515 0.0 tmpf515 F.3

    SUBF VLV_DEGREES_A_48 VGV_ANGLE_A F.5
    DATAF tmpf517
    DATA8 flag517
    DIVF F.5 10.0 tmpf517
    CP_EQF 0.0 10.0 flag517
    SELECTF flag517 0.0 tmpf517 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag519
	CP_GTF VLV_DEGREES_PER_SECOND_A_48 F.2 flag519
	SELECTF flag519 VLV_DEGREES_PER_SECOND_A_48 F.2 F.1
    DATAF tmpf520
    DATA8 flag520
    DIVF F.1 50.0 tmpf520
    CP_EQF 0.0 50.0 flag520
    SELECTF flag520 0.0 tmpf520 F.0

    SUBF VGV_ANGLE_A F.0 VGV_ANGLE_A
    JR endif505
  else505_2:
    MOVEF_F VLV_DEGREES_A_48 VGV_ANGLE_A
  else505_3:
  endif505:
    MATH ROUND VGV_ANGLE_D F.0
    JR_GTEQF F.0 VLV_DEGREES_D_48 else522_1
    DATAF tmpf524
    DATA8 flag524
    DIVF VLV_DEGREES_PER_SECOND_D_48 2.0 tmpf524
    CP_EQF 0.0 2.0 flag524
    SELECTF flag524 0.0 tmpf524 F.3

    SUBF VLV_DEGREES_D_48 VGV_ANGLE_D F.5
    DATAF tmpf526
    DATA8 flag526
    DIVF F.5 10.0 tmpf526
    CP_EQF 0.0 10.0 flag526
    SELECTF flag526 0.0 tmpf526 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag528
	CP_LTF VLV_DEGREES_PER_SECOND_D_48 F.2 flag528
	SELECTF flag528 VLV_DEGREES_PER_SECOND_D_48 F.2 F.1
    DATAF tmpf529
    DATA8 flag529
    DIVF F.1 50.0 tmpf529
    CP_EQF 0.0 50.0 flag529
    SELECTF flag529 0.0 tmpf529 F.0

    ADDF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif522
  else522_1:
    MATH ROUND VGV_ANGLE_D F.0
    JR_LTEQF F.0 VLV_DEGREES_D_48 else522_2
    DATAF tmpf532
    DATA8 flag532
    DIVF VLV_DEGREES_PER_SECOND_D_48 2.0 tmpf532
    CP_EQF 0.0 2.0 flag532
    SELECTF flag532 0.0 tmpf532 F.3

    SUBF VLV_DEGREES_D_48 VGV_ANGLE_D F.5
    DATAF tmpf534
    DATA8 flag534
    DIVF F.5 10.0 tmpf534
    CP_EQF 0.0 10.0 flag534
    SELECTF flag534 0.0 tmpf534 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag536
	CP_GTF VLV_DEGREES_PER_SECOND_D_48 F.2 flag536
	SELECTF flag536 VLV_DEGREES_PER_SECOND_D_48 F.2 F.1
    DATAF tmpf537
    DATA8 flag537
    DIVF F.1 50.0 tmpf537
    CP_EQF 0.0 50.0 flag537
    SELECTF flag537 0.0 tmpf537 F.0

    SUBF VGV_ANGLE_D F.0 VGV_ANGLE_D
    JR endif522
  else522_2:
    MOVEF_F VLV_DEGREES_D_48 VGV_ANGLE_D
  else522_3:
  endif522:
    DATA32 milliseconds539
	MOVEF_32 1.0 milliseconds539
	DATA32 timer539
	TIMER_WAIT milliseconds539 timer539
	TIMER_READY timer539
    JR_NEQF VGV_ANGLE_A VLV_DEGREES_A_48 whilebody503
    JR_NEQF VGV_ANGLE_D VLV_DEGREES_D_48 whilebody503
  endwhile503:
    MOVEF_F VLV_DEGREES_A_48 VGV_ANGLE_A
    MOVEF_F VLV_DEGREES_D_48 VGV_ANGLE_D
RETSUB_F_BMOVEAD0_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BMOVEAD0_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall VECTOR.DATA       // FSA
{
	IN_F size
	IN_S d 252
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty
	ARRAY RESIZE a size32
	ARRAY FILL a 0.0

	DATAS d0 127        // 8bit-addressable data range
	DATAS d1 129
	DATA32 filled
	DATAF value
	DATA8 readidx
	DATA8 writeidx
	DATA8 c

	STRINGS DUPLICATE d d0

	MOVE32_32 0 filled
	MOVE8_8 -127 readidx

skipspaces:
	READ8 d1 readidx c
	ADD8 readidx 1 readidx
	JR_EQ8 c 0 done
	JR_EQ8 c 32 skipspaces
	
	MOVE8_8 -127 writeidx
copypart:
	WRITE8 c writeidx d1
	ADD8 writeidx 1 writeidx
	READ8 d1 readidx c
	ADD8 readidx 1 readidx
	JR_EQ8 c 0 lastnumber
	JR_NEQ8 c 32 copypart

	WRITE8 0 writeidx d1
	STRINGS STRING_TO_VALUE d0 value
	ARRAY_WRITE a filled value

	ADD32 filled 1 filled
	JR_LT32 filled size32 skipspaces
	RETURN

lastnumber:
	WRITE8 0 writeidx d1
	STRINGS STRING_TO_VALUE d0 value
	ARRAY_WRITE a filled value
done:
	RETURN
empty:
    ARRAY RESIZE a 0
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall EV3.TIME  // F
{
	OUT_F time
	
	DATA32 ms
	DATAF thousand
	
	TIMER_READ ms
	MOVE32_F ms time	
}
subcall VECTOR.ADD        // FAAA
{
	IN_F size
	IN_16 a
	IN_16 b
	IN_16 c

	DATA32 sizea
	DATA32 sizeb
	ARRAY SIZE a sizea
	ARRAY SIZE b sizeb

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty
	ARRAY RESIZE c size32

	DATA32 i
	MOVE32_32 0 i
loop:
	DATAF sum
	DATAf tmp
	MOVEF_F 0.0 sum
	JR_GTEQ32 i sizea a_too_small
	ARRAY_READ a i sum
a_too_small:
	JR_GTEQ32 i sizeb b_too_small
	ARRAY_READ b i tmp
	ADDF sum tmp sum
b_too_small:
    ARRAY_WRITE c i sum

	ADD32 i 1 i
	JR_LT32 i size32 loop
loopend:
	RETURN

empty:
    ARRAY RESIZE c 0
}
subcall VECTOR.MULTIPLY    // FFFAAA
{
	IN_F _N        // number of rows in result matrix
	IN_F _M        // number of columns in result matrix
	IN_F _K        // second dimension of A and B
	IN_16 A        // matrix of N rows, K columns
	IN_16 B        // matrix of K rows, M columns
	IN_16 C        // result-matrix of N rows, M columns
	DATA32 N
	DATA32 M
	DATA32 K
	MOVEF_32 _N N
	MOVEF_32 _M M
	MOVEF_32 _K K

	// get input matrix sizes for quick retrieval
	DATA32 ALEN
	DATA32 BLEN
	ARRAY SIZE A ALEN
	ARRAY SIZE B BLEN

	// check if the numerical parameters make sense
	JR_LTEQ32 N 0 outputempty
	JR_LTEQ32 M 0 outputempty

	// compute number of elements to compute
	DATA32 MN
	DATA32 KM
	MUL32 M N MN
	MUL32 K M KM

	// check if the K value is at least 1 (otherwise can perform no multiplication)
	JR_GT32 K 0 notallzero
	ARRAY RESIZE C MN
	ARRAY FILL C 0.0
	RETURN
notallzero:

	// check if the output should be written into one of the input matrizes -
	// need to create temporary storage to hold data while computation runs
	DATA16 TARGET
	JR_EQ16 C A needtemporary
	JR_NEQ16 C B dontneedtemporary
needtemporary:
	// create computation target of correct size
	ARRAY CREATEF MN TARGET
	JR startcopy
dontneedtemporary:
	// set the result matrix to correct size
	ARRAY RESIZE C MN
	MOVE16_16 C TARGET

startcopy:
	DATA32 CIDX
	MOVE32_32 0 CIDX 
	DATA32 I
	MOVE32_32 0 I
loop_rows:	
	DATA32 J
	MOVE32_32 0 J
loop_columns:
    DATAF SUM
	MOVEF_F 0.0 SUM

    DATA32 AIDX 
	MUL32 I K AIDX
	DATA32 BIDX
	MOVE32_32 J BIDX
loop_scalarproduct:
	DATAF TMP
	DATAF PROD
	JR_GTEQ32 AIDX ALEN nosourceelements
	JR_GTEQ32 BIDX BLEN nosourceelements
	ARRAY_READ A AIDX PROD
	ARRAY_READ B BIDX TMP
    MULF PROD TMP PROD
	ADDF SUM PROD SUM
	ADD32 AIDX 1 AIDX
	ADD32 BIDX M BIDX
	JR_LT32 BIDX KM loop_scalarproduct
nosourceelements:

	ARRAY_WRITE TARGET CIDX SUM
	ADD32 CIDX 1 CIDX

	ADD32 J 1 J 
	JR_LT32 J M loop_columns
	ADD32 I 1 I
	JR_LT32 I N loop_rows

	// check if need to store temporay data to output
	JR_EQ16 C TARGET notemporary
	ARRAY COPY TARGET C
	ARRAY DELETE TARGET
notemporary:
	RETURN

outputempty:
	ARRAY RESIZE C 0
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
