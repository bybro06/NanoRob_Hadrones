Velocidad = 100

kp = 0.2
ki = 0.0001
kd = 3

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Diameter = 56

centro = 0

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
include "includes\MRU_MotMed"

include "includes\Giro_MotMed"
include "includes\GirosPerfectos_MotMed"
include "includes\GirosUniversales_MotMed"

include "includes\Aceleracion_MotMed"
include "includes\Deceleracion_MotMed"

include "includes\Siguelineas_MotMed"
include "includes\Siguelineas_MotMed_Smart"

include "includes\Brazo"

include "includes\RGBRead"

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Setup()
Thread.Run = Display
Thread.Run = Stop
Main()

Sub Setup
  Sensor.SetMode(1,0)
  Sensor.SetMode(2,4)
  Sensor.SetMode(3,0)
  Sensor.SetMode(4,0)
EndSub

Sub StartArm
  
  Time.Reset1()
  While Time.Get1() < 850
    MotorA.StartSpeed(30)
    MotorD.StartSpeed(30)
  EndWhile
  
  MotorAD.OffAndBrake()
  
  MotorA.ResetCount()
  MotorD.ResetCount()
  
  BMoveD(40,-360)
  
  MotorD.ResetCount()
  
  Program.Delay(100)
EndSub

'Subs de control paralelo

Sub Display
  old_B = 0
  old_C = 0
  While "True"
    LCD.StopUpdate()
    LCD.Clear()
    
    LCD.Write(5,35,"centro: "+centro)
    
    
    LCD.Write(5,45,"Velocidad de B:  "+MotorB.GetSpeed()*-1)
    LCD.Write(5,55,"Velocidad de C:  "+MotorC.GetSpeed())
    
    LCD.Write(5,65,"rad/s de B:  "+Math.GetRadians(MotorB.GetTacho()-old_B)/0.05*-1)
    LCD.Write(5,75,"rad/s de C:  "+Math.GetRadians(MotorC.GetTacho()-old_C)/0.05)
    
    LCD.Write(5,85,"Encoder de B:  "+MotorB.GetTacho()*-1)
    LCD.Write(5,95,"Encoder de C:  "+MotorC.GetTacho())
    
    LCD.Update()
    Program.Delay(50)
    old_B = MotorB.GetTacho()
    old_C = MotorC.GetTacho()
  EndWhile
EndSub

'Subs a ejecutar

Sub Main
  
  StartArm()
  
  'Gira hacia tubería
  
  BMoveA0(30)
  EncoderRectoMM(Velocidad*0.3,30)
  GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,90)
  EncoderRectoMM(Velocidad*0.3,25)
  
  rojos = 0
  amarillos = 0
  verdes = 0
  azules = 0
  
  'Avanza a tubería
  EncoderRectoMM(Velocidad*0.3,7)
  
  Program.Delay(200)
  
  'Cierra y Baja brazo
  BMoveD(20,-300)
  BMoveA(20,-750)
  
  'Recoloca
  GUnivEncMM(Velocidad*-0.1,Velocidad*0.1,25)
  Program.Delay(1000)
  EncoderRectoMM(Velocidad*0.12,6)
  BMoveA(20,-760)
  
  TiempoGiroMM(Velocidad*0.1,Velocidad*-0.1,1300)
  GUnivEncMM(Velocidad*-0.05,Velocidad*0.05,5)
  
  'Sube Brazo y gira
  BMoveA(20,-510)
  Program.Delay(1000)
  Spin90(10)
  Spin90(-10)
  
  'Echa hacia atrás
  EncoderRectoMM(Velocidad*-0.3,10)
  BMoveA(30,-300)
  BMoveD0(40)
  
  'Gira para colocar con pared (x2)
  GUnivEncMM(Velocidad*0.2,Velocidad*-0.2,80)
  
  TiempoRectoMM(Velocidad*-0.9,2000)
  EncoderRectoMM(Velocidad*0.3,3.5)
  
  TiempoRectoMM(Velocidad*-0.8,500)
  EncoderRectoMM(Velocidad*0.3,5.5)
  
  'Gira hacia bloques azules/verdes y avanza
  BMoveA(20,-300)
  GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,89)
  EncoderRectoMM(Velocidad*0.2,17.5)
  Program.Delay(200)
  
  Lectura(bloque)
  If bloque <> 3 And bloque <> 2 Then
    'Si no hay bloque
    numero_bloques = 0
    bomboclat[0] = 0
  Else
    bomboclat[0] = bloque
    numero_bloques = 1
    
    If bloque = 3 Then
      verdes ++
    Else
      azules ++
    EndIf
    
    Coger_Abajo()
    
  EndIf
  
  'Gira al segundo
  
  BMoveA(30,-350)
  
  EncoderRectoMM(Velocidad*-0.2,11)
  GUnivEncMM(Velocidad*0.2,Velocidad*-0.2,90)
  
  
  EncoderRectoMM(Velocidad*0.2,10.5)
  GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,88)
  
  EncoderRectoMM(Velocidad*0.2,26)
  Lectura(bloque)
  
  If bloque <> 3 and bloque <> 2 Then
    bomboclat[1] = bomboclat[0]
    
    bomboclat[0] = 0
  Else
    bomboclat[1] = bloque
    numero_bloques ++
    
    If numero_bloques = 1 Then
      
      'Si no lleva bloque
      Coger_Abajo()
      
    Else
      
      'Si lleva Bloque
      Coger_Arriba()
      
    EndIf
    
  EndIf
  
  'Gira hacia linea
  GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,171)
  EncoderRectoMM(Velocidad*0.9,72)
  GUnivEncMM(Velocidad*-0.2, Velocidad*0.2,85)
  
  'Lee línea
  TiempoRectoMM(Velocidad*-0.7,600)
  1BlancoRectoMM(Velocidad*0.5,1)
  1NegroRectoMM(Velocidad*0.2,1)
  EncoderRectoMM(Velocidad*0.3,6)
  
  'Gira a derecha y avanza hasta cruce
  GUnivEncMMF(30,-30,50)
  1NegroGiroMM(30,-30,1)
  SL14PIDEncF(Velocidad*0.3,kp*2,ki,kd,5)
  
  If numero_bloques > 0 Then
    
    'Avanza hacia las zonas verde y azul
    SL1SPIDCross(Velocidad*0.4,kp,ki,kd,3)
    ' Spin180(30) (Aquí había un criminal)
    GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,180)
    SL14PIDEnc(Velocidad*0.3,kp,ki,kd,23)
    GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,84)
    EncoderRectoMM(Velocidad*0.3,18.5)
    
    if numero_bloques = 1 Then
      
      If bomboclat[0] = 0 Then
        bomboclat[0] = bomboclat[1]
        bomboclat[1] = 0
      EndIf
      
      'Si solo tiene un bloque
      if bomboclat[0] = 2 Then
        
        'Es azul
        GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,40)
        Soltar_Todo()
        GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,40)
      Else
        
        'Es verde
        GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,40)
        Soltar_Todo()
        GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,40)
      EndIf
      
      
    Else
      
      'Si tiene 2 bloques
      
      If bomboclat[0] = bomboclat[1] Then
        
        'Si los dos son del mismo color
        
        If bomboclat[0] = 2 Then
          
          'Los dos son azules
          GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,40)
          Soltar_Todo()
          GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,40)
          
        Else
          
          'Los dos son verdes
          GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,40)
          Soltar_Todo()
          GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,40)
        EndIf
        
        
      Else
        
        'Si los dos son de distinto color
        
        If bomboclat[0] = 3 Then
          
          'Son azul y verde
          
          GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,40)
          Soltar_Uno()
          GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,40)
          
          GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,40)
          Soltar_Todo()
          GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,40)
          
        Else
          
          'Son verde y azul
          
          GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,40)
          Soltar_Uno()
          GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,40)
          
          GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,25)
          Soltar_Todo()
          GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,25)
          
        EndIf
        
        
      EndIf
      
    EndIf
    
    'Vuelve a línea
    BMoveAD0(20)
    1BlancoRectoMM(Velocidad*-0.15,1)
    1NegroRectoMM(Velocidad*-0.15,1)
    EncoderRectoMM(Velocidad*0.15,2)
    
    'Se va al cruce
    GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,10)
    GPerfDDEFINITIVOMM(Velocidad*0.3)
    SL14PIDEnc(Velocidad*0.3,kp,ki,kd,7)
    SL1SPIDCrossF(Velocidad*0.4,kp,ki,kd,3)
    
  Else
    SL14PIDEnc(Velocidad*0.3,kp,ki,kd,8)
    SL1SPIDCrossF(Velocidad*0.4,kp,ki,kd,3)
  EndIf
  
  'En el cruce delante de rojos
  GPerfIDEFINITIVOMM(Velocidad*0.3)
  SL14PID(Velocidad*0.3,kp,ki,kd)
  Motor.Stop("ABCD","True")
  
  EncoderRectoMM(Velocidad*0.2,16.7)
  
  Coger_Abajo()
  1BlancoRectoMM(Velocidad*-0.15,1)
  1NegroRectoMM(Velocidad*-0.15,1)
  EncoderRectoMM(Velocidad*0.15,5)
  
  GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,89)
  SL14PIDEnc(Velocidad*0.3,kp*1.5,ki,kd,12)
  
  GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,87)
  EncoderRectoMM(Velocidad*0.2,12)
  Coger_Arriba()
  
  Spin180(Velocidad*0.3)
  TiempoRectoMM(Velocidad*-0.3,1000)
  
  EncoderRectoMM(Velocidad*0.4,47)
  GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,90)
  EncoderRectoMM(Velocidad*0.4,30)
  EncoderRectoMM(Velocidad*-0.4,34)
  
  Soltar_Todo()
  BmoveAD0(20)
  
  1BlancoRectoMM(Velocidad*-0.3,4)
  
  GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,80)

  BMoveA0(30)
  SL14PIDF(Velocidad*0.3,kp,ki,kd)
  EncoderRectoMM(Velocidad*0.3,6)
  
  GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,88)
  SL14PIDEnc(Velocidad*0.3,kp,ki,kd,18)

  EncoderGiroMM(Velocidad*0.3,Velocidad*0.2,22)
  EncoderGiroMM(Velocidad*0.2,Velocidad*0.3,25)
  EncoderRectoMM(Velocidad*0.5,15)
  
  BMoveD(20,-300)
  BMoveA(20,-780)
  EncoderRectoMM(Velocidad*0.3,6)
  GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,30)
  EncoderRectoMM(Velocidad*0.3,4)
  GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,45)
  
  BMoveA(20,-520)
  EncoderGiroMM(Velocidad*0.3,Velocidad*0.1,14)
  BMoveAD0(30)
  
EndSub

Sub MainPrueba
  
  rojos = 0
  amarillos = 0
  verdes = 0
  azules = 0
  
  StartArm()
  
  BMoveAD(10,40,-700,-240)
EndSub

Sub MainControlBrazo
  angle_A = 0
  angle_D = 0  
  
  While "True"
    If Buttons.Current = "U" Then
      MotorA.StartSpeed(20)
    ElseIf Buttons.Current = "D" Then
      MotorA.StartSpeed(-20)
    ElseIf Buttons.Current = "L" Then
      MotorD.StartSpeed(20)
    ElseIf Buttons.Current = "R" Then
      MotorD.StartSpeed(-20)
    Else
      MotorAD.OffAndBrake()
    EndIf
  EndWhile
EndSub

Sub MainControlRuedas
  vel_B = 92
  vel_C = 92
  
  While "True"
    If Buttons.Current = "U" Then
      vel_B -= 0.5
      Program.Delay(1)
    ElseIf Buttons.Current = "D" Then
      vel_B += 0.5
      Program.Delay(1)
    ElseIf Buttons.Current = "L" Then
      vel_C += 1
      Program.Delay(1)
    ElseIf Buttons.Current = "R" Then
      vel_C -= 1
      Program.Delay(1)
    EndIf
    Motor.StartSync("BC",-vel_B,-vel_C)
  EndWhile
EndSub


Sub Stop
  While "True"
    if Buttons.Current = "E" Then
      MotorBC.OffAndBrake()
      MotorAD.OffAndBrake()
      BMoveADSafe(20,0)
      Program.End()
    EndIf
  EndWhile
EndSub


Function Coger_Abajo()
  
  EncoderRectoMM(-30,5)
  
  'Coge el primero
  
  BMoveD(40,-220)
  BMoveA(20,-780)
  BMoveDTimer(-40,350)
  BMoveA(20,-300)
  
EndFunction

Function Coger_Abajo_Comunistas()
  
  EncoderRectoMM(-30,5)
  
  'Coge el primero
  
  BMoveD(40,-230)
  BMoveA(20,-780)
  BMoveDTimer(-40,350)
  BMoveA(20,-300)
  
EndFunction

Function Coger_Abajo_Basura()
  
  EncoderRectoMM(-30,2)
  
  'Coge el primero
  
  BMoveD(40,-130)
  BMoveA(20,-780)
  BMoveDTimer(-40,500)
  BMoveA(20,-500)
  
EndFunction

Function Coger_Arriba()
  
  EncoderRectoMM(-20,6.5)
  
  BMoveA(10,-670)
  BMoveD(20,-230)
  
  'Coge el segundo
  
  'EncoderRectoMM(10,0.75)
  BMoveA(10,-780)
  
  BMoveDSafe(40,-250)
  BMoveDTimer(-40,800)
  BMoveA(20,-400)
  
  
  
EndFunction

Function Coger_Arriba_Rojo()
  
  EncoderRectoMM(-20,6.5)
  
  BMoveA(10,-670)
  BMoveD(20,-200)
  
  'Coge el segundo
  
  EncoderRectoMM(10,1)
  BMoveA(10,-780)
  
  BMoveDSafe(40,-250)
  BMoveDTimer(-40,400)
  BMoveA(20,-400)
  
  
  
EndFunction

Function Soltar_Todo()
  
  'EncoderRectoMM(-30,5)
  
  BMoveA(10,-750)
  BMoveDSafe(40,-200)
  
  BMoveA(10,-500)
  
EndFunction

Function Soltar_Uno()
  
  'EncoderRectoMM(-30,5)
  
  BMoveA(10,-760)
  BMoveDSafe(40,-200)
  
  BMoveA(10,-660)
  BMoveDSafe(40,-250)
  BMoveDTimer(-40,500)
  
  BMoveA(10,-500)
  
EndFunction


Function Lectura(out number read)
  BmoveA(15,-690)
  RGBDetect2(5,read)
  LeerColor(read)
  BmoveA(15,-200)
EndFunction
