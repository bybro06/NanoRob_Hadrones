pr_giro_g1 = 0
pr_rgb_valuenegro = 0
pr_rgb_valueblanco = 0
pr_rgb_rwhite = 0
pr_rgb_gwhite = 0
pr_rgb_bwhite = 0
pr_recto_diametro = 0
pr_giro_diametro = 0
pr_siguelineas_diametro = 0
pr_smart_diametro = 0
pr_siguelineas_negro1 = 0
pr_siguelineas_negro3 = 0
pr_siguelineas_negro4 = 0
pr_siguelineas_blanco1 = 0
pr_siguelineas_blanco3 = 0
pr_siguelineas_blanco4 = 0
pr_smart_negro1 = 0
pr_smart_negro3 = 0
pr_smart_negro4 = 0
pr_smart_blanco1 = 0
pr_smart_blanco3 = 0
pr_smart_blanco4 = 0
pr_recto_negro = 0
pr_recto_blanco = 0
pr_giro_negro = 0
pr_giro_blanco = 0
lv_velocidada_7 = 0
lv_velocidadd_7 = 0
lv_timer_7 = 0
lv_velocidad_10 = 0
lv_distancia_10 = 0
lv_velocidad1_16 = 0
lv_velocidad2_16 = 0
lv_grados_16 = 0
lv_velocidad_11 = 0
lv_distancia_11 = 0
lv_velocidad_12 = 0
lv_sensor_12 = 0
lv_velocidad_18 = 0
lv_velocidad_19 = 0
lv_encoder_19 = 0
lv_sens_24 = 0
lv_reps_24 = 0
lv_color_24 = 0
lv_color_25 = 0
lv_velocidad_13 = 0
lv_tiempo_13 = 0
lv_velocidad_8 = 0
lv_encoder_8 = 0
lv_velocidad_20 = 0
lv_encoder_20 = 0
lv_velocidad_21 = 0
lv_reader_21 = 0
lv_velocidad1_17 = 0
lv_velocidad2_17 = 0
lv_distancia_17 = 0
lv_velocidad_22 = 0
lv_reader_22 = 0
lv_velocidad_23 = 0
lv_encoder_23 = 0
lv_v0_14 = 0
lv_vmax_14 = 0
lv_distanciaaccel_14 = 0
lv_distanciacrucero_14 = 0
lv_distanciadecel_14 = 0
lv_v0_15 = 0
lv_vmax_15 = 0
lv_distanciaaccel_15 = 0
lv_distanciacrucero_15 = 0
lv_distanciadecel_15 = 0
lv_velocidad_9 = 0
lv_encoder_9 = 0
lv_numero_2 = 0
gv_markinggrande = 0
gv_diametro = 0
gv_negro1 = 0
gv_negro3 = 0
gv_negro4 = 0
gv_blanco1 = 0
gv_blanco3 = 0
gv_blanco4 = 0
f_setup_0 ()
f_startarm_0 ()
f_bajarambos_0 ()
Sub f_setup_0
Sensor.SetMode ( 1 , 0 )
Sensor.SetMode ( 2 , 4 )
Sensor.SetMode ( 3 , 0 )
Sensor.SetMode ( 4 , 0 )
gv_diametro = 6.24
pr_giro_g1 = 1065 / 360
gv_negro1 = 10
gv_negro3 = 9
gv_negro4 = 8
gv_blanco1 = 65
gv_blanco3 = 59
gv_blanco4 = 55
pr_rgb_valuenegro = 4
pr_rgb_valueblanco = 32
pr_rgb_rwhite = 57
pr_rgb_gwhite = 71
pr_rgb_bwhite = 73
pr_recto_diametro = gv_diametro
pr_giro_diametro = gv_diametro
pr_siguelineas_diametro = gv_diametro
pr_smart_diametro = gv_diametro
pr_siguelineas_negro1 = gv_negro1
pr_siguelineas_negro3 = gv_negro3
pr_siguelineas_negro4 = gv_negro4
pr_siguelineas_blanco1 = gv_blanco1
pr_siguelineas_blanco3 = gv_blanco3
pr_siguelineas_blanco4 = gv_blanco4
pr_smart_negro1 = gv_negro1
pr_smart_negro3 = gv_negro3
pr_smart_negro4 = gv_negro4
pr_smart_blanco1 = gv_blanco1
pr_smart_blanco3 = gv_blanco3
pr_smart_blanco4 = gv_blanco4
pr_recto_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_recto_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
pr_giro_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_giro_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
EndSub
Sub f_startarm_0
lv_velocidada_7 = 35
lv_velocidadd_7 = - 35
lv_timer_7 = 500
m_brazo_adtimer_3 ()
MotorA.ResetCount ()
MotorD.ResetCount ()
Speaker.Play ( 100 , "WRO2025/Media/Connect" )
Speaker.Wait ()
EndSub
Sub f_bajarizq_0
lv_velocidad_8 = 20
lv_encoder_8 = - 370
m_brazo_aencoder_2 ()
EndSub
Sub f_bajardch_0
lv_velocidad_9 = 20
lv_encoder_9 = 380
m_brazo_dencoder_2 ()
EndSub
Sub f_gritarvoltaje_0
lv_voltaje_1 = EV3.BatteryVoltage
lv_numero_2 = Math.Floor ( lv_voltaje_1 )
f_gritarnumero_1 ()
lv_numero_2 = Math.Floor ( lv_voltaje_1 * 10 ) - Math.Floor ( lv_voltaje_1 ) * 10
f_gritarnumero_1 ()
lv_numero_2 = Math.Floor ( lv_voltaje_1 * 100 ) - Math.Floor ( lv_voltaje_1 * 10 ) * 10
f_gritarnumero_1 ()
EndSub
Sub f_gritarnumero_1
If lv_numero_2 = 0 Then
Speaker.Play ( 100 , "WRO2025/Media/ZERO" )
Elseif lv_numero_2 = 1 Then
Speaker.Play ( 100 , "WRO2025/Media/One" )
Elseif lv_numero_2 = 2 Then
Speaker.Play ( 100 , "WRO2025/Media/Two" )
Elseif lv_numero_2 = 3 Then
Speaker.Play ( 100 , "WRO2025/Media/Three" )
Elseif lv_numero_2 = 4 Then
Speaker.Play ( 100 , "WRO2025/Media/Four" )
Elseif lv_numero_2 = 5 Then
Speaker.Play ( 100 , "WRO2025/Media/Five" )
Elseif lv_numero_2 = 6 Then
Speaker.Play ( 100 , "WRO2025/Media/Six" )
Elseif lv_numero_2 = 7 Then
Speaker.Play ( 100 , "WRO2025/Media/Seven" )
Elseif lv_numero_2 = 8 Then
Speaker.Play ( 100 , "WRO2025/Media/Eight" )
Elseif lv_numero_2 = 9 Then
Speaker.Play ( 100 , "WRO2025/Media/Nine" )
Elseif lv_numero_2 = 10 Then
Speaker.Play ( 100 , "WRO2025/Media/Ten" )
EndIf
Speaker.Wait ()
EndSub
Sub f_bajararana_0
lv_velocidad_8 = 20
lv_encoder_8 = - 370
m_brazo_aencoder_2 ()
EndSub
Sub f_bajarambos_0
Thread.Run = f_bajarizq_0
f_bajardch_0 ()
EndSub
Sub f_s_0
Buttons.Flush ()
Buttons.Wait ()
EndSub
Sub m_brazo_adtimer_3
Time.Reset1 ()
While Time.Get1 () < lv_timer_7
MotorA.StartSpeed ( lv_velocidada_7 )
MotorD.StartSpeed ( lv_velocidadd_7 )
EndWhile
Motor.Stop ( "AD" , "True" )
EndSub
Sub m_brazo_aencoder_2
lv_encdiff_8 = lv_encoder_8 - Motor.GetCount ( "A" )
lv_signo_8 = lv_encdiff_8 / Math.Abs ( lv_encdiff_8 )
lv_safetytimer_8 = Math.Max ( ( ( Math.abs ( lv_encdiff_8 ) / 100 ) / ( lv_velocidad_8 / 20 ) * 650 * 2 ) , 400 )
Time.Reset3 ()
If lv_encdiff_8 <> 0 Then
While Math.Abs ( Motor.GetCount ( "A" ) - lv_encoder_8 ) > 25 and Time.Get3 () < 2000
MotorA.StartSpeed ( lv_signo_8 * lv_velocidad_8 )
EndWhile
Motor.Stop ( "A" , "True" )
EndIf
EndSub
Sub m_brazo_dencoder_2
lv_encdiff_9 = lv_encoder_9 - Motor.GetCount ( "D" )
lv_signo_9 = lv_encdiff_9 / Math.Abs ( lv_encdiff_9 )
lv_safetytimer_9 = Math.Max ( ( ( Math.abs ( lv_encdiff_9 ) / 100 ) / ( lv_velocidad_9 / 20 ) * 650 * 2 ) , 400 )
Time.Reset3 ()
If lv_encdiff_9 <> 0 Then
While Math.Abs ( Motor.GetCount ( "D" ) - lv_encoder_9 ) > 25 and Time.Get3 () < lv_safetytimer_9
MotorD.StartSpeed ( lv_signo_9 * lv_velocidad_9 )
LCD.Clear ()
LCD.Write ( 5 , 30 , "safetyTimer: " + lv_safetytimer_9 )
EndWhile
Motor.Stop ( "D" , "True" )
EndIf
EndSub
Sub m_recto_encoder_2
lv_correccion_10 = ( Math.abs ( lv_velocidad_10 ) - 20 ) * 0.05
lv_enc_10 = ( lv_distancia_10 - lv_correccion_10 ) * 360 / Math.Pi / pr_recto_diametro
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad_10 , lv_velocidad_10 , lv_enc_10 , "True" )
EndSub
Sub m_recto_encoderf_2
lv_correccion_11 = ( Math.abs ( lv_velocidad_11 ) - 20 ) * 0.05
lv_enc_11 = ( lv_distancia_11 - lv_correccion_11 ) * 360 / Math.Pi / pr_recto_diametro
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad_11 , lv_velocidad_11 , lv_enc_11 , "False" )
EndSub
Sub m_recto_negro1_2
lv_correccion_12 = 0
MotorBC.Off ()
lv_lectura_12 = 50
While lv_lectura_12 > 15
lv_lectura_12 = ( Sensor.ReadPercent ( lv_sensor_12 ) - pr_recto_negro ) / pr_recto_blanco * ( 100 - pr_recto_negro )
Motor.StartSync ( "BC" , - lv_velocidad_12 + lv_correccion_12 , lv_velocidad_12 + lv_correccion_12 )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_tiempo_2
lv_correccion_13 = 0
Time.Reset3 ()
MotorBC.Off ()
While Time.Get3 () < lv_tiempo_13
Motor.StartSync ( "BC" , - lv_velocidad_13 + lv_correccion_13 , lv_velocidad_13 + lv_correccion_13 )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_acceldecelf_5
lv_startb_14 = Motor.GetCount ( "B" )
lv_startc_14 = Motor.GetCount ( "C" )
lv_encoderb_14 = 0
lv_encoderc_14 = 0
lv_signo_14 = lv_v0_14 / Math.Abs ( lv_v0_14 )
lv_v0_14 = Math.Max ( 8 , Math.Abs ( lv_v0_14 ) ) * lv_signo_14
lv_vmax_14 = Math.Min ( 90 , Math.Abs ( lv_vmax_14 ) ) * lv_signo_14
lv_vel_14 = 0
lv_kp_14 = 0.4
lv_kd_14 = 0.5
lv_error_14 = 0
lv_olderror_14 = 0
lv_gradosaccel_14 = lv_distanciaaccel_14 * 360 / ( pr_recto_diametro * math.pi )
lv_gradoscrucero_14 = lv_distanciacrucero_14 * 360 / ( pr_recto_diametro * math.pi )
lv_gradosdecel_14 = lv_distanciadecel_14 * 360 / ( pr_recto_diametro * math.pi )
While Math.Abs ( lv_encoderc_14 ) < lv_gradosaccel_14 + lv_gradoscrucero_14 + lv_gradosdecel_14
lv_encoderb_14 = Motor.GetCount ( "B" ) * 1 - lv_startb_14
lv_encoderc_14 = Motor.GetCount ( "C" ) - lv_startc_14
If Math.Abs ( lv_encoderc_14 ) < lv_gradosaccel_14 + lv_gradoscrucero_14 Then
lv_pendiente_14 = ( lv_vmax_14 - lv_v0_14 ) / lv_gradosaccel_14 * lv_signo_14
If lv_signo_14 > 0 Then
lv_vel_14 = Math.Min ( lv_vmax_14 , lv_pendiente_14 * lv_encoderc_14 + lv_v0_14 )
Else
lv_vel_14 = Math.Max ( lv_vmax_14 , lv_pendiente_14 * lv_encoderc_14 + lv_v0_14 )
EndIf
Else
lv_pendiente_14 = ( lv_v0_14 - lv_vmax_14 ) / lv_gradosdecel_14 * lv_signo_14
If lv_signo_14 > 0 Then
lv_vel_14 = Math.Max ( lv_v0_14 , lv_pendiente_14 * ( lv_encoderc_14 - lv_gradosaccel_14 - lv_gradoscrucero_14 ) + lv_vmax_14 )
Else
lv_vel_14 = Math.Min ( lv_v0_14 , lv_pendiente_14 * ( lv_encoderc_14 + lv_gradosaccel_14 + lv_gradoscrucero_14 ) + lv_vmax_14 )
EndIf
EndIf
lv_error_14 = ( - 1 * lv_encoderb_14 - lv_encoderc_14 ) * 1
lv_correccion_14 = lv_error_14 * lv_kp_14 + ( lv_error_14 - lv_olderror_14 ) * lv_kd_14
Motor.StartSync ( "BC" , - ( lv_vel_14 - lv_correccion_14 ) , ( lv_vel_14 + lv_correccion_14 ) )
lv_olderror_14 = lv_error_14
EndWhile
MotorBC.Off ()
EndSub
Sub m_recto_acceldecel_5
lv_startb_15 = Motor.GetCount ( "B" )
lv_startc_15 = Motor.GetCount ( "C" )
lv_encoderb_15 = 0
lv_encoderc_15 = 0
lv_signo_15 = lv_v0_15 / Math.Abs ( lv_v0_15 )
lv_v0_15 = Math.Max ( 8 , Math.Abs ( lv_v0_15 ) ) * lv_signo_15
lv_vmax_15 = Math.Min ( 90 , Math.Abs ( lv_vmax_15 ) ) * lv_signo_15
lv_vel_15 = 0
lv_kp_15 = 0.4
lv_kd_15 = 0.5
lv_error_15 = 0
lv_olderror_15 = 0
lv_gradosaccel_15 = lv_distanciaaccel_15 * 360 / ( pr_recto_diametro * math.pi )
lv_gradoscrucero_15 = lv_distanciacrucero_15 * 360 / ( pr_recto_diametro * math.pi )
lv_gradosdecel_15 = lv_distanciadecel_15 * 360 / ( pr_recto_diametro * math.pi )
While Math.Abs ( lv_encoderc_15 ) < lv_gradosaccel_15 + lv_gradoscrucero_15 + lv_gradosdecel_15
lv_encoderb_15 = Motor.GetCount ( "B" ) * 1 - lv_startb_15
lv_encoderc_15 = Motor.GetCount ( "C" ) - lv_startc_15
If Math.Abs ( lv_encoderc_15 ) < lv_gradosaccel_15 + lv_gradoscrucero_15 Then
lv_pendiente_15 = ( lv_vmax_15 - lv_v0_15 ) / lv_gradosaccel_15 * lv_signo_15
If lv_signo_15 > 0 Then
lv_vel_15 = Math.Min ( lv_vmax_15 , lv_pendiente_15 * lv_encoderc_15 + lv_v0_15 )
Else
lv_vel_15 = Math.Max ( lv_vmax_15 , lv_pendiente_15 * lv_encoderc_15 + lv_v0_15 )
EndIf
Else
lv_pendiente_15 = ( lv_v0_15 - lv_vmax_15 ) / lv_gradosdecel_15 * lv_signo_15
If lv_signo_15 > 0 Then
lv_vel_15 = Math.Max ( lv_v0_15 , lv_pendiente_15 * ( lv_encoderc_15 - lv_gradosaccel_15 - lv_gradoscrucero_15 ) + lv_vmax_15 )
Else
lv_vel_15 = Math.Min ( lv_v0_15 , lv_pendiente_15 * ( lv_encoderc_15 + lv_gradosaccel_15 + lv_gradoscrucero_15 ) + lv_vmax_15 )
EndIf
EndIf
lv_error_15 = ( - 1 * lv_encoderb_15 - lv_encoderc_15 ) * 1
lv_correccion_15 = lv_error_15 * lv_kp_15 + ( lv_error_15 - lv_olderror_15 ) * lv_kd_15
Motor.StartSync ( "BC" , - ( lv_vel_15 - lv_correccion_15 ) , ( lv_vel_15 + lv_correccion_15 ) )
lv_olderror_15 = lv_error_15
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_giro_grados_3
lv_signo_16 = ( lv_velocidad1_16 / lv_velocidad2_16 ) / Math.Abs ( lv_velocidad1_16 / lv_velocidad2_16 )
lv_vmin_16 = Math.Min ( Math.Abs ( lv_velocidad1_16 ) , Math.Abs ( lv_velocidad2_16 ) )
lv_vmax_16 = Math.Max ( Math.Abs ( lv_velocidad1_16 ) , Math.Abs ( lv_velocidad2_16 ) )
lv_encoder_16 = lv_grados_16 * pr_giro_g1 * ( - 2 / ( lv_signo_16 * lv_vmin_16 / lv_vmax_16 - 1 ) )
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad1_16 , lv_velocidad2_16 , lv_encoder_16 , "True" )
lv_velocidad1_16 = 0
lv_velocidad2_16 = 0
lv_grados_16 = 0
Program.Delay ( 100 )
EndSub
Sub m_giro_encoder_3
lv_encoder_17 = lv_distancia_17 / ( pr_giro_diametro * Math.Pi ) * 360
MotorBC.Off ()
Motor.MoveSync ( "BC" , - lv_velocidad1_17 , lv_velocidad2_17 , lv_encoder_17 , "True" )
EndSub
Sub m_siguelineas_cruce14_1
lv_velocidad_18 = lv_velocidad_18 * 1
lv_lectura1_18 = 50
lv_lectura3_18 = 50
lv_lectura4_18 = 50
lv_kp_18 = lv_velocidad_18 / 280
lv_kd_18 = lv_kp_18 * 32
lv_error_18 = 0
lv_olderror_18 = 0
lv_u_18 = 0
lv_sentido_18 = lv_velocidad_18 / Math.Abs ( lv_velocidad_18 )
While lv_lectura1_18 > 10 Or lv_lectura4_18 > 10
lv_lectura1_18 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura4_18 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_18 = ( lv_lectura1_18 - lv_lectura4_18 ) * lv_sentido_18 * 1
lv_u_18 = lv_error_18 * lv_kp_18 + ( lv_error_18 - lv_olderror_18 ) * lv_kd_18
Motor.StartSync ( "BC" , - ( lv_velocidad_18 + lv_u_18 ) , lv_velocidad_18 - lv_u_18 )
lv_olderror_18 = lv_error_18
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_encoder31_2
lv_velocidad_19 = lv_velocidad_19 * 1
lv_lectura1_19 = 50
lv_lectura3_19 = 50
lv_lectura4_19 = 50
lv_kp_19 = lv_velocidad_19 / 280
lv_kd_19 = lv_kp_19 * 32
lv_error_19 = 0
lv_olderror_19 = 0
lv_u_19 = 0
lv_sentido_19 = lv_velocidad_19 / Math.Abs ( lv_velocidad_19 )
lv_encoder_19 = lv_encoder_19 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_19 = MotorC.GetTacho ()
lv_encoderc_19 = 0
While Math.Abs ( lv_encoderc_19 ) < lv_encoder_19
lv_encoderc_19 = MotorC.GetTacho () - lv_startc_19
lv_lectura1_19 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_19 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_error_19 = ( lv_lectura3_19 - lv_lectura1_19 ) * lv_sentido_19 * 1
lv_u_19 = lv_error_19 * lv_kp_19 + ( lv_error_19 - lv_olderror_19 ) * lv_kd_19
Motor.StartSync ( "BC" , - ( lv_velocidad_19 + lv_u_19 ) , lv_velocidad_19 - lv_u_19 )
lv_olderror_19 = lv_error_19
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_encoder14_2
lv_velocidad_20 = lv_velocidad_20 * 1
lv_lectura1_20 = 50
lv_lectura3_20 = 50
lv_lectura4_20 = 50
lv_kp_20 = lv_velocidad_20 / 320
lv_kd_20 = lv_kp_20 * 28
lv_error_20 = 0
lv_olderror_20 = 0
lv_u_20 = 0
lv_sentido_20 = lv_velocidad_20 / Math.Abs ( lv_velocidad_20 )
lv_encoder_20 = lv_encoder_20 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_20 = MotorC.GetTacho ()
lv_encoderc_20 = 0
While Math.Abs ( lv_encoderc_20 ) < lv_encoder_20
lv_encoderc_20 = MotorC.GetTacho () - lv_startc_20
lv_lectura1_20 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura4_20 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_20 = ( lv_lectura1_20 - lv_lectura4_20 ) * lv_sentido_20 * 1
lv_u_20 = lv_error_20 * lv_kp_20 + ( lv_error_20 - lv_olderror_20 ) * lv_kd_20
Motor.StartSync ( "BC" , - ( lv_velocidad_20 + lv_u_20 ) , lv_velocidad_20 - lv_u_20 )
lv_olderror_20 = lv_error_20
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_cruce_externo_2
lv_velocidad_21 = lv_velocidad_21 * 1
lv_lectura1_21 = 50
lv_lectura3_21 = 50
lv_lectura4_21 = 50
lv_kp_21 = lv_velocidad_21 / 280
lv_kd_21 = lv_kp_21 * 32
lv_error_21 = 0
lv_olderror_21 = 0
lv_u_21 = 0
lv_sentido_21 = lv_velocidad_21 / Math.Abs ( lv_velocidad_21 )
lv_lectura_21 = 50
While lv_lectura_21 > 7
If lv_reader_21 = 3 Then
lv_lectura_21 = lv_lectura3_21
lv_lecturaizq_21 = lv_lectura1_21
lv_lecturadch_21 = lv_lectura4_21
Else
lv_lectura_21 = lv_lectura4_21
lv_lecturaizq_21 = lv_lectura3_21
lv_lecturadch_21 = lv_lectura1_21
EndIf
lv_lectura1_21 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_21 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_lectura4_21 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_21 = ( lv_lecturaizq_21 - lv_lecturadch_21 ) * lv_sentido_21 * 1
lv_u_21 = lv_error_21 * lv_kp_21 + ( lv_error_21 - lv_olderror_21 ) * lv_kd_21
Motor.StartSync ( "BC" , - ( lv_velocidad_21 + lv_u_21 ) , lv_velocidad_21 - lv_u_21 )
lv_olderror_21 = lv_error_21
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_cruce_externof_2
lv_velocidad_22 = lv_velocidad_22 * 1
lv_lectura1_22 = 50
lv_lectura3_22 = 50
lv_lectura4_22 = 50
lv_kp_22 = lv_velocidad_22 / 280
lv_kd_22 = lv_kp_22 * 32
lv_error_22 = 0
lv_olderror_22 = 0
lv_u_22 = 0
lv_sentido_22 = lv_velocidad_22 / Math.Abs ( lv_velocidad_22 )
lv_lectura_22 = 50
While lv_lectura_22 > 7
If lv_reader_22 = 3 Then
lv_lectura_22 = lv_lectura3_22
lv_lecturaizq_22 = lv_lectura1_22
lv_lecturadch_22 = lv_lectura4_22
Else
lv_lectura_22 = lv_lectura4_22
lv_lecturaizq_22 = lv_lectura3_22
lv_lecturadch_22 = lv_lectura1_22
EndIf
lv_lectura1_22 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_22 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_lectura4_22 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_22 = ( lv_lecturaizq_22 - lv_lecturadch_22 ) * lv_sentido_22 * 1
lv_u_22 = lv_error_22 * lv_kp_22 + ( lv_error_22 - lv_olderror_22 ) * lv_kd_22
Motor.StartSync ( "BC" , - ( lv_velocidad_22 + lv_u_22 ) , lv_velocidad_22 - lv_u_22 )
lv_olderror_22 = lv_error_22
EndWhile
MotorBC.Off ()
EndSub
Sub m_siguelineas_encoder31f_2
lv_velocidad_23 = lv_velocidad_23 * 1
lv_lectura1_23 = 50
lv_lectura3_23 = 50
lv_lectura4_23 = 50
lv_kp_23 = lv_velocidad_23 / 280
lv_kd_23 = lv_kp_23 * 32
lv_error_23 = 0
lv_olderror_23 = 0
lv_u_23 = 0
lv_sentido_23 = lv_velocidad_23 / Math.Abs ( lv_velocidad_23 )
lv_encoder_23 = lv_encoder_23 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_23 = MotorC.GetTacho ()
lv_encoderc_23 = 0
While Math.Abs ( lv_encoderc_23 ) < lv_encoder_23
lv_encoderc_23 = MotorC.GetTacho () - lv_startc_23
lv_lectura1_23 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_23 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_error_23 = ( lv_lectura3_23 - lv_lectura1_23 ) * lv_sentido_23 * 1
lv_u_23 = lv_error_23 * lv_kp_23 + ( lv_error_23 - lv_olderror_23 ) * lv_kd_23
Motor.StartSync ( "BC" , - ( lv_velocidad_23 + lv_u_23 ) , lv_velocidad_23 - lv_u_23 )
lv_olderror_23 = lv_error_23
EndWhile
MotorBC.Off ()
EndSub
Sub m_rgb_detect_3
lv_sens_mode_24 = Sensor.GetMode ( lv_sens_24 )
Sensor.SetMode ( lv_sens_24 , 4 )
lv_red_24 = 15
lv_yellow_24 = 60
lv_green_24 = 170
lv_blue_24 = 330
lv_hue_24 = 0
lv_sat_24 = 0
lv_value_24 = 0
lv_color_24 = 0
lv_rnormarray_24 [ 0 ] = 0
lv_gnormarray_24 [ 0 ] = 0
lv_bnormarray_24 [ 0 ] = 0
LCD.Clear ()
For lv_j_24 = 1 To lv_reps_24 Step 1
lv_rgb_24 = Sensor.ReadRaw ( lv_sens_24 , 3 )
lv_rraw_24 = lv_rgb_24 [ 0 ]
lv_graw_24 = lv_rgb_24 [ 1 ]
lv_braw_24 = lv_rgb_24 [ 2 ]
lv_rnormarray_24 [ lv_j_24 ] = Math.Round ( lv_rraw_24 / pr_rgb_rwhite * 255 )
lv_gnormarray_24 [ lv_j_24 ] = Math.Round ( lv_graw_24 / pr_rgb_gwhite * 255 )
lv_bnormarray_24 [ lv_j_24 ] = Math.Round ( lv_braw_24 / pr_rgb_bwhite * 255 )
Program.Delay ( 5 )
EndFor
For lv_j_24 = 1 To lv_reps_24 Step 2
lv_rnorm_24 = lv_rnormarray_24 [ lv_j_24 ] + lv_rnormarray_24 [ lv_j_24 + 1 ]
lv_gnorm_24 = lv_gnormarray_24 [ lv_j_24 ] + lv_gnormarray_24 [ lv_j_24 + 1 ]
lv_bnorm_24 = lv_bnormarray_24 [ lv_j_24 ] + lv_bnormarray_24 [ lv_j_24 + 1 ]
EndFor
lv_rnorm_24 = lv_rnorm_24 / lv_reps_24
lv_gnorm_24 = lv_gnorm_24 / lv_reps_24
lv_bnorm_24 = lv_bnorm_24 / lv_reps_24
lv_max_24 = Math.Max ( Math.Max ( lv_rnorm_24 , lv_gnorm_24 ) , lv_bnorm_24 )
lv_min_24 = Math.Min ( Math.Min ( lv_rnorm_24 , lv_gnorm_24 ) , lv_bnorm_24 )
If lv_max_24 = lv_min_24 Then
lv_hue_24 = 0
Elseif lv_max_24 = lv_rnorm_24 Then
If lv_gnorm_24 >= lv_bnorm_24 Then
lv_hue_24 = 60 * ( lv_gnorm_24 - lv_bnorm_24 ) / ( lv_max_24 - lv_min_24 )
Else
lv_hue_24 = 60 * ( lv_gnorm_24 - lv_bnorm_24 ) / ( lv_max_24 - lv_min_24 ) + 360
EndIf
Elseif lv_max_24 = lv_gnorm_24 Then
lv_hue_24 = 60 * ( lv_bnorm_24 - lv_rnorm_24 ) / ( lv_max_24 - lv_min_24 ) + 120
Else
lv_hue_24 = 60 * ( lv_rnorm_24 - lv_gnorm_24 ) / ( lv_max_24 - lv_min_24 ) + 240
EndIf
If lv_max_24 = 0 Then
lv_sat_24 = 0
Else
lv_sat_24 = 1 - lv_min_24 / lv_max_24
EndIf
lv_value_24 = lv_max_24
lv_rgbgrey_24 = ( pr_rgb_valueblanco + pr_rgb_valuenegro ) / 2
If lv_rraw_24 + lv_graw_24 + lv_braw_24 <= 3 Then
lv_color_24 = 0
Else
If lv_sat_24 < 0.3 Then
If lv_value_24 > lv_rgbgrey_24 Then
lv_color_24 = 6
Else
lv_color_24 = 1
EndIf
Else
If lv_hue_24 >= 0 And lv_hue_24 < lv_red_24 Then
lv_color_24 = 5
Elseif lv_hue_24 >= lv_red_24 And lv_hue_24 < lv_yellow_24 Then
lv_color_24 = 4
Elseif lv_hue_24 >= lv_yellow_24 And lv_hue_24 < lv_green_24 Then
lv_color_24 = 3
Elseif lv_hue_24 >= lv_green_24 And lv_hue_24 < lv_blue_24 Then
lv_color_24 = 2
Else
lv_color_24 = 5
EndIf
EndIf
EndIf
LCD.StopUpdate ()
LCD.Clear ()
LCD.Write ( 33 , 20 , "R: " + lv_rraw_24 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_24 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_24 )
LCD.Write ( 33 , 70 , "color: " + lv_color_24 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_24 )
LCD.Update ()
Sensor.SetMode ( lv_sens_24 , lv_sens_mode_24 )
EndSub
Sub m_rgb_gritar_1
If lv_color_25 = 0 Then
Speaker.Play ( 100 , "WRO2025/Media/Zero" )
Elseif lv_color_25 = 1 Then
Speaker.Play ( 100 , "WRO2025/Media/Black" )
Elseif lv_color_25 = 2 Then
Speaker.Play ( 100 , "WRO2025/Media/BLUE" )
Elseif lv_color_25 = 3 Then
Speaker.Play ( 100 , "WRO2025/Media/GREEN" )
Elseif lv_color_25 = 4 Then
Speaker.Play ( 100 , "WRO2025/Media/YELLOW" )
Elseif lv_color_25 = 5 Then
Speaker.Play ( 100 , "WRO2025/Media/RED" )
Elseif lv_color_25 = 6 Then
Speaker.Play ( 100 , "WRO2025/Media/White" )
Elseif lv_color_25 = 7 Then
Speaker.Play ( 100 , "WRO2025/Media/Brown" )
EndIf
Speaker.Wait ()
EndSub
