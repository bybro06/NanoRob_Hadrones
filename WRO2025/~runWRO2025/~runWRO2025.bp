pr_giro_g1 = 0
pr_rgb_valuenegro = 0
pr_rgb_valueblanco = 0
pr_rgb_rwhite = 0
pr_rgb_gwhite = 0
pr_rgb_bwhite = 0
pr_recto_diametro = 0
pr_giro_diametro = 0
pr_siguelineas_diametro = 0
pr_smart_diametro = 0
pr_control_diametro = 0
pr_siguelineas_negro1 = 0
pr_siguelineas_negro3 = 0
pr_siguelineas_negro4 = 0
pr_siguelineas_blanco1 = 0
pr_siguelineas_blanco3 = 0
pr_siguelineas_blanco4 = 0
pr_smart_negro1 = 0
pr_smart_negro3 = 0
pr_smart_negro4 = 0
pr_smart_blanco1 = 0
pr_smart_blanco3 = 0
pr_smart_blanco4 = 0
pr_recto_negro = 0
pr_recto_blanco = 0
pr_giro_negro = 0
pr_giro_blanco = 0
lv_velocidad_9 = 0
lv_timer_9 = 0
lv_velocidad_10 = 0
lv_encoder_10 = 0
lv_velocidad_11 = 0
lv_encoder_11 = 0
lv_velocidad1_18 = 0
lv_velocidad2_18 = 0
lv_grados_18 = 0
lv_velocidad1_19 = 0
lv_velocidad2_19 = 0
lv_distancia_19 = 0
lv_velocidad_25 = 0
lv_sensor_25 = 0
lv_velocidad1_20 = 0
lv_velocidad2_20 = 0
lv_grados_20 = 0
lv_velocidad_12 = 0
lv_velocidad_13 = 0
lv_encoder_13 = 0
lv_velocidad_26 = 0
lv_distancia_26 = 0
lv_sens_33 = 0
lv_reps_33 = 0
lv_color_33 = 0
lv_velocidad_27 = 0
lv_tiempo_27 = 0
lv_velocidad1_21 = 0
lv_velocidad2_21 = 0
lv_sens_21 = 0
lv_velocidad_14 = 0
lv_encoder_14 = 0
lv_velocidad1_22 = 0
lv_velocidad2_22 = 0
lv_distancia_22 = 0
lv_velocidad_28 = 0
lv_distancia_28 = 0
lv_velocidad_15 = 0
lv_reader_15 = 0
lv_velocidad_29 = 0
lv_sensor_29 = 0
lv_color_29 = 0
lv_velocidad_30 = 0
lv_sensor_30 = 0
lv_velocidad_16 = 0
lv_reader_16 = 0
lv_velocidad_31 = 0
lv_sensor_31 = 0
lv_marking_6 [ 0 ] = 0
lv_velocidad1_23 = 0
lv_velocidad2_23 = 0
lv_tiempo_23 = 0
lv_velocidad_17 = 0
lv_encoder_17 = 0
lv_velocidad1_24 = 0
lv_velocidad2_24 = 0
lv_tiempo_24 = 0
lv_velocidad_32 = 0
lv_sensor_32 = 0
lv_vmax_35 = 0
lv_distanciaaccel_35 = 0
lv_distancia_35 = 0
lv_grados_5 = 0
lv_color_34 = 0
lv_numero_2 = 0
lv_marking_4 [ 0 ] = 0
lv_codigo_4 = ""
gv_markinggrande = 0
lv_codigo_6 = ""
gv_diametro = 0
gv_negro1 = 0
gv_negro3 = 0
gv_negro4 = 0
gv_blanco1 = 0
gv_blanco3 = 0
gv_blanco4 = 0
gv_color = 0
f_setup_0 ()
f_pruebavelocidad_0 ()
Sub f_setup_0
Sensor.SetMode ( 1 , 0 )
Sensor.SetMode ( 2 , 4 )
Sensor.SetMode ( 3 , 0 )
Sensor.SetMode ( 4 , 0 )
gv_diametro = 6.24
pr_giro_g1 = 965 / 360
gv_negro1 = 3
gv_negro3 = 3
gv_negro4 = 2
gv_blanco1 = 99
gv_blanco3 = 100
gv_blanco4 = 104
pr_rgb_valuenegro = 4
pr_rgb_valueblanco = 32
pr_rgb_rwhite = 57
pr_rgb_gwhite = 71
pr_rgb_bwhite = 73
pr_recto_diametro = gv_diametro
pr_giro_diametro = gv_diametro
pr_siguelineas_diametro = gv_diametro
pr_smart_diametro = gv_diametro
pr_control_diametro = gv_diametro
pr_siguelineas_negro1 = gv_negro1
pr_siguelineas_negro3 = gv_negro3
pr_siguelineas_negro4 = gv_negro4
pr_siguelineas_blanco1 = gv_blanco1
pr_siguelineas_blanco3 = gv_blanco3
pr_siguelineas_blanco4 = gv_blanco4
pr_smart_negro1 = gv_negro1
pr_smart_negro3 = gv_negro3
pr_smart_negro4 = gv_negro4
pr_smart_blanco1 = gv_blanco1
pr_smart_blanco3 = gv_blanco3
pr_smart_blanco4 = gv_blanco4
pr_recto_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_recto_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
pr_giro_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_giro_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
gv_color = 0
EndSub
Sub f_startarm_0
lv_velocidad_9 = 100
lv_timer_9 = 1000
m_brazo_atimer_2 ()
MotorA.ResetCount ()
Program.Delay ( 100 )
lv_velocidad_10 = 35
lv_encoder_10 = - 200
m_brazo_aencoder_2 ()
MotorA.ResetCount ()
Speaker.Play ( 100 , "WRO2025/Media/Connect" )
Speaker.Wait ()
EndSub
Sub f_pruebavelocidad_0
f_startarm_0 ()
Program.Delay ( 200 )
lv_velocidad_10 = 30
lv_encoder_10 = - 260
m_brazo_aencoder_2 ()
Program.Delay ( 1000 )
lv_vmax_35 = 60
lv_distanciaaccel_35 = 10
lv_distancia_35 = 50
m_control_logsinacceldecel_3 ()
EndSub
Sub f_safetytimerbrazo_0
lv_velocidad_10 = 30
lv_encoder_10 = - 730
m_brazo_aencoder_2 ()
MotorA.OffAndBrake ()
EndSub
Sub f_gritarcolor_0
lv_color_34 = gv_color
m_rgb_gritar_1 ()
EndSub
Sub f_gritarvoltaje_0
lv_voltaje_1 = EV3.BatteryVoltage
lv_numero_2 = Math.Floor ( lv_voltaje_1 )
f_gritarnumero_1 ()
lv_numero_2 = Math.Floor ( lv_voltaje_1 * 10 ) - Math.Floor ( lv_voltaje_1 ) * 10
f_gritarnumero_1 ()
lv_numero_2 = Math.Floor ( lv_voltaje_1 * 100 ) - Math.Floor ( lv_voltaje_1 * 10 ) * 10
f_gritarnumero_1 ()
EndSub
Sub f_gritarnumero_1
If lv_numero_2 = 0 Then
Speaker.Play ( 100 , "WRO2025/Media/ZERO" )
ElseIf lv_numero_2 = 1 Then
Speaker.Play ( 100 , "WRO2025/Media/One" )
ElseIf lv_numero_2 = 2 Then
Speaker.Play ( 100 , "WRO2025/Media/Two" )
ElseIf lv_numero_2 = 3 Then
Speaker.Play ( 100 , "WRO2025/Media/Three" )
ElseIf lv_numero_2 = 4 Then
Speaker.Play ( 100 , "WRO2025/Media/Four" )
ElseIf lv_numero_2 = 5 Then
Speaker.Play ( 100 , "WRO2025/Media/Five" )
ElseIf lv_numero_2 = 6 Then
Speaker.Play ( 100 , "WRO2025/Media/Six" )
ElseIf lv_numero_2 = 7 Then
Speaker.Play ( 100 , "WRO2025/Media/Seven" )
ElseIf lv_numero_2 = 8 Then
Speaker.Play ( 100 , "WRO2025/Media/Eight" )
ElseIf lv_numero_2 = 9 Then
Speaker.Play ( 100 , "WRO2025/Media/Nine" )
ElseIf lv_numero_2 = 10 Then
Speaker.Play ( 100 , "WRO2025/Media/Ten" )
EndIf
Speaker.Wait ()
EndSub
Sub f_bajarcuadro_0
Thread.Run = f_safetytimerbrazo_0
Program.Delay ( 1300 )
MotorA.Off ()
lv_velocidad_10 = 30
lv_encoder_10 = - 730
m_brazo_aencoder_2 ()
EndSub
Sub f_codigo_2
lv_codigo_4 = ""
lv_aux_4 = lv_marking_4 [ 2 ]
lv_marking_4 [ 2 ] = lv_marking_4 [ 3 ]
lv_marking_4 [ 3 ] = lv_aux_4
For lv_i_4 = 0 To 4
If lv_marking_4 [ lv_i_4 ] = 2 Then
lv_codigo_4 = lv_codigo_4 + "Z"
ElseIf lv_marking_4 [ lv_i_4 ] = 3 Then
lv_codigo_4 = lv_codigo_4 + "V"
ElseIf lv_marking_4 [ lv_i_4 ] = 4 Then
lv_codigo_4 = lv_codigo_4 + "A"
ElseIf lv_marking_4 [ lv_i_4 ] = 5 Then
lv_codigo_4 = lv_codigo_4 + "R"
EndIf
EndFor
LCD.StopUpdate ()
LCD.Clear ()
LCD.Write ( 5 , 5 , "Codigo: " + lv_codigo_4 )
LCD.Update ()
EndSub
Sub f_rotar_1
lv_signo_5 = lv_grados_5 / Math.Abs ( lv_grados_5 )
f_bajarcuadro_0 ()
Program.Delay ( 100 )
Motor.Move ( "D" , 34 * lv_signo_5 , Math.Abs ( lv_grados_5 ) - 4 , "True" )
Program.Delay ( 200 )
lv_velocidad_10 = 30
lv_encoder_10 = - 360
m_brazo_aencoder_2 ()
EndSub
Sub f_ordenarbloques_1
lv_marking_4 = lv_marking_6
f_codigo_2 ()
lv_codigo_6 = lv_codigo_4
If lv_codigo_6 = "AZRV" Then
lv_grados_5 = 180
f_rotar_1 ()
ElseIf lv_codigo_6 = "VRAZ" Then
f_swap_0 ()
ElseIf lv_codigo_6 = "VZRA" Then
f_swap_0 ()
lv_grados_5 = 180
f_rotar_1 ()
f_swap_0 ()
lv_grados_5 = - 90
f_rotar_1 ()
ElseIf lv_codigo_6 = "VZAR" Then
f_swap_0 ()
lv_grados_5 = 180
f_rotar_1 ()
f_swap_0 ()
lv_grados_5 = - 90
f_rotar_1 ()
f_swap_0 ()
ElseIf lv_codigo_6 = "VARZ" Then
lv_grados_5 = 180
f_rotar_1 ()
f_swap_0 ()
lv_grados_5 = - 90
f_rotar_1 ()
ElseIf lv_codigo_6 = "VAZR" Then
lv_grados_5 = 180
f_rotar_1 ()
f_swap_0 ()
lv_grados_5 = - 90
f_rotar_1 ()
f_swap_0 ()
ElseIf lv_codigo_6 = "RVZA" Then
lv_grados_5 = 180
f_rotar_1 ()
f_swap_0 ()
lv_grados_5 = 180
f_rotar_1 ()
ElseIf lv_codigo_6 = "RVAZ" Then
lv_grados_5 = 180
f_rotar_1 ()
f_swap_0 ()
lv_grados_5 = 180
f_rotar_1 ()
f_swap_0 ()
ElseIf lv_codigo_6 = "RZVA" Then
lv_grados_5 = - 90
f_rotar_1 ()
f_swap_0 ()
lv_grados_5 = - 90
f_rotar_1 ()
f_swap_0 ()
ElseIf lv_codigo_6 = "RZAV" Then
lv_grados_5 = - 90
f_rotar_1 ()
f_swap_0 ()
lv_grados_5 = - 90
f_rotar_1 ()
ElseIf lv_codigo_6 = "RAVZ" Then
lv_grados_5 = 90
f_rotar_1 ()
ElseIf lv_codigo_6 = "RAZV" Then
lv_grados_5 = 90
f_rotar_1 ()
f_swap_0 ()
ElseIf lv_codigo_6 = "ZVAR" Then
lv_grados_5 = - 90
f_rotar_1 ()
ElseIf lv_codigo_6 = "ZVRA" Then
lv_grados_5 = - 90
f_rotar_1 ()
f_swap_0 ()
ElseIf lv_codigo_6 = "ZRVA" Then
lv_grados_5 = 90
f_rotar_1 ()
f_swap_0 ()
lv_grados_5 = - 90
f_rotar_1 ()
ElseIf lv_codigo_6 = "ZRAV" Then
lv_grados_5 = 90
f_rotar_1 ()
f_swap_0 ()
lv_grados_5 = - 90
f_rotar_1 ()
f_swap_0 ()
ElseIf lv_codigo_6 = "ZAVR" Then
f_swap_0 ()
lv_grados_5 = 180
f_rotar_1 ()
f_swap_0 ()
ElseIf lv_codigo_6 = "ZARV" Then
f_swap_0 ()
lv_grados_5 = 180
f_rotar_1 ()
ElseIf lv_codigo_6 = "AVRZ" Then
f_swap_0 ()
lv_grados_5 = - 90
f_rotar_1 ()
f_swap_0 ()
ElseIf lv_codigo_6 = "AVZR" Then
f_swap_0 ()
lv_grados_5 = - 90
f_rotar_1 ()
ElseIf lv_codigo_6 = "ARVZ" Then
lv_grados_5 = - 90
f_rotar_1 ()
f_swap_0 ()
lv_grados_5 = 180
f_rotar_1 ()
ElseIf lv_codigo_6 = "ARZV" Then
lv_grados_5 = - 90
f_rotar_1 ()
f_swap_0 ()
lv_grados_5 = 180
f_rotar_1 ()
f_swap_0 ()
ElseIf lv_codigo_6 = "AZVR" Then
lv_grados_5 = 180
f_rotar_1 ()
f_swap_0 ()
Else
EndIf
lv_velocidad_26 = - 20
lv_distancia_26 = 8
m_recto_encoder_2 ()
lv_velocidad1_20 = 15
lv_velocidad2_20 = - 15
lv_grados_20 = 185
m_giro_grados_3 ()
lv_velocidad_26 = - 30
lv_distancia_26 = 0
m_recto_encoder_2 ()
lv_velocidad_10 = 20
lv_encoder_10 = 24
m_brazo_aencoder_2 ()
EndSub
Sub f_swap_0
lv_velocidad_26 = - 15
lv_distancia_26 = 7.5
m_recto_encoder_2 ()
f_bajarcuadro_0 ()
lv_velocidad_26 = - 15
lv_distancia_26 = 2
m_recto_encoder_2 ()
Motor.Move ( "D" , 50 , 180 , "True" )
lv_velocidad_10 = 30
lv_encoder_10 = - 360
m_brazo_aencoder_2 ()
lv_velocidad_26 = 15
lv_distancia_26 = 15
m_recto_encoder_2 ()
lv_velocidad_26 = - 15
lv_distancia_26 = 5
m_recto_encoder_2 ()
EndSub
Sub f_s_0
Buttons.Flush ()
Buttons.Wait ()
EndSub
Sub m_brazo_atimer_2
Time.Reset1 ()
While Time.Get1 () < lv_timer_9
MotorA.StartSpeed ( lv_velocidad_9 )
EndWhile
Motor.Stop ( "A" , "True" )
EndSub
Sub m_brazo_aencoder_2
lv_encdiff_10 = lv_encoder_10 - Motor.GetCount ( "A" )
lv_signo_10 = lv_encdiff_10 / Math.Abs ( lv_encdiff_10 )
If lv_encdiff_10 <> 0 Then
Motor.Move ( "A" , lv_velocidad_10 * lv_signo_10 , Math.Abs ( lv_encdiff_10 ) , "True" )
EndIf
Motor.Stop ( "A" , "True" )
EndSub
Sub m_siguelineas_encoder14f_2
lv_velocidad_11 = lv_velocidad_11 * 1
lv_lectura1_11 = 50
lv_lectura3_11 = 50
lv_lectura4_11 = 50
lv_kp_11 = Math.Power ( lv_velocidad_11 , 5 / 6 ) / 210
lv_kd_11 = lv_kp_11 * 50
lv_error_11 = 0
lv_olderror_11 = 0
lv_u_11 = 0
lv_sentido_11 = lv_velocidad_11 / Math.Abs ( lv_velocidad_11 )
lv_encoder_11 = lv_encoder_11 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_11 = MotorC.GetTacho ()
lv_encoderc_11 = 0
lv_safetytimer_11 = 11286 / ( lv_velocidad_11 / 10 ) * ( lv_encoder_11 / 100 ) / ( pr_siguelineas_diametro / 6.24 )
Time.Reset4 ()
While Math.Abs ( lv_encoderc_11 ) < lv_encoder_11 And Time.Get4 () < lv_safetytimer_11 + 2000
lv_encoderc_11 = MotorC.GetTacho () - lv_startc_11
lv_lectura1_11 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura4_11 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_11 = ( lv_lectura1_11 - lv_lectura4_11 ) * lv_sentido_11 * 1
lv_u_11 = lv_error_11 * lv_kp_11 + ( lv_error_11 - lv_olderror_11 ) * lv_kd_11
Motor.StartSync ( "BC" , - ( lv_velocidad_11 + lv_u_11 ) , lv_velocidad_11 - lv_u_11 )
lv_olderror_11 = lv_error_11
EndWhile
If Time.Get4 () > lv_safetytimer_11 + 2000 Then
Speaker.Play ( 100 , "WRO2025/Media/General alert" )
Speaker.Wait ()
EndIf
MotorBC.Off ()
EndSub
Sub m_siguelineas_cruce14_1
lv_velocidad_12 = lv_velocidad_12 * 1
lv_lectura1_12 = 50
lv_lectura3_12 = 50
lv_lectura4_12 = 50
lv_kp_12 = Math.Power ( lv_velocidad_12 , 5 / 6 ) / 210
lv_kd_12 = lv_kp_12 * 50
lv_error_12 = 0
lv_olderror_12 = 0
lv_u_12 = 0
lv_sentido_12 = lv_velocidad_12 / Math.Abs ( lv_velocidad_12 )
While lv_lectura1_12 > 15 Or lv_lectura4_12 > 15
lv_lectura1_12 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura4_12 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_12 = ( lv_lectura1_12 - lv_lectura4_12 ) * lv_sentido_12 * 1
lv_u_12 = lv_error_12 * lv_kp_12 + ( lv_error_12 - lv_olderror_12 ) * lv_kd_12
Motor.StartSync ( "BC" , - ( lv_velocidad_12 + lv_u_12 ) , lv_velocidad_12 - lv_u_12 )
lv_olderror_12 = lv_error_12
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_encoder31f_2
lv_velocidad_13 = lv_velocidad_13 * 1
lv_lectura1_13 = 50
lv_lectura3_13 = 50
lv_lectura4_13 = 50
lv_kp_13 = Math.Power ( lv_velocidad_13 , 5 / 6 ) / 210
lv_kd_13 = lv_kp_13 * 50
lv_error_13 = 0
lv_olderror_13 = 0
lv_u_13 = 0
lv_sentido_13 = lv_velocidad_13 / Math.Abs ( lv_velocidad_13 )
lv_encoder_13 = lv_encoder_13 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_13 = MotorC.GetTacho ()
lv_encoderc_13 = 0
lv_safetytimer_13 = 11286 / ( lv_velocidad_13 / 10 ) * ( lv_encoder_13 / 100 ) / ( pr_siguelineas_diametro / 6.24 )
Time.Reset4 ()
While Math.Abs ( lv_encoderc_13 ) < lv_encoder_13 And Time.Get4 () < lv_safetytimer_13 + 2000
lv_encoderc_13 = MotorC.GetTacho () - lv_startc_13
lv_lectura1_13 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_13 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_error_13 = ( lv_lectura3_13 - lv_lectura1_13 ) * lv_sentido_13 * 1
lv_u_13 = lv_error_13 * lv_kp_13 + ( lv_error_13 - lv_olderror_13 ) * lv_kd_13
Motor.StartSync ( "BC" , - ( lv_velocidad_13 + lv_u_13 ) , lv_velocidad_13 - lv_u_13 )
lv_olderror_13 = lv_error_13
EndWhile
If Time.Get4 () > lv_safetytimer_13 + 2000 Then
Speaker.Play ( 100 , "WRO2025/Media/General alert" )
Speaker.Wait ()
EndIf
MotorBC.Off ()
EndSub
Sub m_siguelineas_encoder14_2
lv_velocidad_14 = lv_velocidad_14 * 1
lv_lectura1_14 = 50
lv_lectura3_14 = 50
lv_lectura4_14 = 50
lv_kp_14 = Math.Power ( lv_velocidad_14 , 5 / 6 ) / 210
lv_kd_14 = lv_kp_14 * 50
lv_error_14 = 0
lv_olderror_14 = 0
lv_u_14 = 0
lv_sentido_14 = lv_velocidad_14 / Math.Abs ( lv_velocidad_14 )
lv_encoder_14 = lv_encoder_14 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_14 = MotorC.GetTacho ()
lv_encoderc_14 = 0
lv_safetytimer_14 = 11286 / ( lv_velocidad_14 / 10 ) * ( lv_encoder_14 / 100 ) / ( pr_siguelineas_diametro / 6.24 )
Time.Reset4 ()
While Math.Abs ( lv_encoderc_14 ) < lv_encoder_14 And Time.Get4 () < lv_safetytimer_14 + 2000
lv_encoderc_14 = MotorC.GetTacho () - lv_startc_14
lv_lectura1_14 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura4_14 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_14 = ( lv_lectura1_14 - lv_lectura4_14 ) * lv_sentido_14 * 1
lv_u_14 = lv_error_14 * lv_kp_14 + ( lv_error_14 - lv_olderror_14 ) * lv_kd_14
Motor.StartSync ( "BC" , - ( lv_velocidad_14 + lv_u_14 ) , lv_velocidad_14 - lv_u_14 )
lv_olderror_14 = lv_error_14
EndWhile
If Time.Get4 () > lv_safetytimer_14 + 2000 Then
Speaker.Play ( 100 , "WRO2025/Media/General alert" )
Speaker.Wait ()
EndIf
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_cruce_externo_2
lv_velocidad_15 = lv_velocidad_15 * 1
lv_lectura1_15 = 50
lv_lectura3_15 = 50
lv_lectura4_15 = 50
lv_kp_15 = Math.Power ( lv_velocidad_15 , 5 / 6 ) / 210
lv_kd_15 = lv_kp_15 * 50
lv_error_15 = 0
lv_olderror_15 = 0
lv_u_15 = 0
lv_sentido_15 = lv_velocidad_15 / Math.Abs ( lv_velocidad_15 )
lv_lectura_15 = 50
While lv_lectura_15 > 15
If lv_reader_15 = 3 Then
lv_lectura_15 = lv_lectura3_15
lv_lecturaizq_15 = lv_lectura1_15
lv_lecturadch_15 = lv_lectura4_15
Else
lv_lectura_15 = lv_lectura4_15
lv_lecturaizq_15 = lv_lectura3_15
lv_lecturadch_15 = lv_lectura1_15
EndIf
lv_lectura1_15 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_15 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_lectura4_15 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_15 = ( lv_lecturaizq_15 - lv_lecturadch_15 ) * lv_sentido_15 * 1
lv_u_15 = lv_error_15 * lv_kp_15 + ( lv_error_15 - lv_olderror_15 ) * lv_kd_15
Motor.StartSync ( "BC" , - ( lv_velocidad_15 + lv_u_15 ) , lv_velocidad_15 - lv_u_15 )
lv_olderror_15 = lv_error_15
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_cruce_externof_2
lv_velocidad_16 = lv_velocidad_16 * 1
lv_lectura1_16 = 50
lv_lectura3_16 = 50
lv_lectura4_16 = 50
lv_kp_16 = Math.Power ( lv_velocidad_16 , 5 / 6 ) / 210
lv_kd_16 = lv_kp_16 * 50
lv_error_16 = 0
lv_olderror_16 = 0
lv_u_16 = 0
lv_sentido_16 = lv_velocidad_16 / Math.Abs ( lv_velocidad_16 )
lv_lectura_16 = 50
While lv_lectura_16 > 15
If lv_reader_16 = 3 Then
lv_lectura_16 = lv_lectura3_16
lv_lecturaizq_16 = lv_lectura1_16
lv_lecturadch_16 = lv_lectura4_16
Else
lv_lectura_16 = lv_lectura4_16
lv_lecturaizq_16 = lv_lectura3_16
lv_lecturadch_16 = lv_lectura1_16
EndIf
lv_lectura1_16 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_16 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_lectura4_16 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_16 = ( lv_lecturaizq_16 - lv_lecturadch_16 ) * lv_sentido_16 * 1
lv_u_16 = lv_error_16 * lv_kp_16 + ( lv_error_16 - lv_olderror_16 ) * lv_kd_16
Motor.StartSync ( "BC" , - ( lv_velocidad_16 + lv_u_16 ) , lv_velocidad_16 - lv_u_16 )
lv_olderror_16 = lv_error_16
EndWhile
MotorBC.Off ()
EndSub
Sub m_siguelineas_encoder31_2
lv_velocidad_17 = lv_velocidad_17 * 1
lv_lectura1_17 = 50
lv_lectura3_17 = 50
lv_lectura4_17 = 50
lv_kp_17 = Math.Power ( lv_velocidad_17 , 5 / 6 ) / 210
lv_kd_17 = lv_kp_17 * 50
lv_error_17 = 0
lv_olderror_17 = 0
lv_u_17 = 0
lv_sentido_17 = lv_velocidad_17 / Math.Abs ( lv_velocidad_17 )
lv_encoder_17 = lv_encoder_17 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_17 = MotorC.GetTacho ()
lv_encoderc_17 = 0
lv_safetytimer_17 = 11286 / ( lv_velocidad_17 / 10 ) * ( lv_encoder_17 / 100 ) / ( pr_siguelineas_diametro / 6.24 )
Time.Reset4 ()
While Math.Abs ( lv_encoderc_17 ) < lv_encoder_17 And Time.Get4 () < lv_safetytimer_17 + 2000
lv_encoderc_17 = MotorC.GetTacho () - lv_startc_17
lv_lectura1_17 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_17 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_error_17 = ( lv_lectura3_17 - lv_lectura1_17 ) * lv_sentido_17 * 1
lv_u_17 = lv_error_17 * lv_kp_17 + ( lv_error_17 - lv_olderror_17 ) * lv_kd_17
Motor.StartSync ( "BC" , - ( lv_velocidad_17 + lv_u_17 ) , lv_velocidad_17 - lv_u_17 )
lv_olderror_17 = lv_error_17
EndWhile
If Time.Get4 () > lv_safetytimer_17 + 2000 Then
Speaker.Play ( 100 , "WRO2025/Media/General alert" )
Speaker.Wait ()
EndIf
MotorBC.OffAndBrake ()
EndSub
Sub m_giro_gradosf_3
lv_signo_18 = ( lv_velocidad1_18 / lv_velocidad2_18 ) / Math.Abs ( lv_velocidad1_18 / lv_velocidad2_18 )
lv_vmin_18 = Math.Min ( Math.Abs ( lv_velocidad1_18 ) , Math.Abs ( lv_velocidad2_18 ) )
lv_vmax_18 = Math.Max ( Math.Abs ( lv_velocidad1_18 ) , Math.Abs ( lv_velocidad2_18 ) )
lv_encoder_18 = lv_grados_18 * pr_giro_g1 * ( - 2 / ( lv_signo_18 * lv_vmin_18 / lv_vmax_18 - 1 ) )
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad1_18 , lv_velocidad2_18 , lv_encoder_18 , "False" )
lv_velocidad1_18 = 0
lv_velocidad2_18 = 0
lv_grados_18 = 0
Program.Delay ( 100 )
EndSub
Sub m_giro_encoder_3
lv_encoder_19 = lv_distancia_19 / ( pr_giro_diametro * Math.Pi ) * 360
MotorBC.Off ()
Motor.MoveSync ( "BC" , - lv_velocidad1_19 , lv_velocidad2_19 , lv_encoder_19 , "True" )
EndSub
Sub m_giro_grados_3
lv_signo_20 = ( lv_velocidad1_20 / lv_velocidad2_20 ) / Math.Abs ( lv_velocidad1_20 / lv_velocidad2_20 )
lv_vmin_20 = Math.Min ( Math.Abs ( lv_velocidad1_20 ) , Math.Abs ( lv_velocidad2_20 ) )
lv_vmax_20 = Math.Max ( Math.Abs ( lv_velocidad1_20 ) , Math.Abs ( lv_velocidad2_20 ) )
lv_encoder_20 = lv_grados_20 * pr_giro_g1 * ( - 2 / ( lv_signo_20 * lv_vmin_20 / lv_vmax_20 - 1 ) )
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad1_20 , lv_velocidad2_20 , lv_encoder_20 , "True" )
lv_velocidad1_20 = 0
lv_velocidad2_20 = 0
lv_grados_20 = 0
Program.Delay ( 100 )
EndSub
Sub m_giro_negro1f_3
lv_lectura_21 = 50
While lv_lectura_21 > 15
lv_lectura_21 = ( Sensor.ReadPercent ( lv_sens_21 ) - pr_giro_negro ) / pr_giro_blanco * ( 100 - pr_giro_negro )
Motor.StartSync ( "BC" , - lv_velocidad1_21 , lv_velocidad2_21 )
EndWhile
Motor.Stop ( "BC" , "False" )
EndSub
Sub m_giro_encoderf_3
lv_encoder_22 = lv_distancia_22 / ( pr_giro_diametro * Math.Pi ) * 360
MotorBC.Off ()
Motor.MoveSync ( "BC" , - lv_velocidad1_22 , lv_velocidad2_22 , lv_encoder_22 , "False" )
EndSub
Sub m_giro_tiempo_3
Time.Reset3 ()
While Time.Get3 () < lv_tiempo_23
Motor.StartSync ( "BC" , - lv_velocidad1_23 , lv_velocidad2_23 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub m_giro_tiempof_3
Time.Reset3 ()
While Time.Get3 () < lv_tiempo_24
Motor.StartSync ( "BC" , - lv_velocidad1_24 , lv_velocidad2_24 )
EndWhile
Motor.Stop ( "BC" , "False" )
EndSub
Sub m_recto_negro1_2
lv_correccion_25 = 0
MotorBC.Off ()
lv_lectura_25 = 50
While lv_lectura_25 > 15
lv_lectura_25 = ( Sensor.ReadPercent ( lv_sensor_25 ) - pr_recto_negro ) / pr_recto_blanco * ( 100 - pr_recto_negro )
Motor.StartSync ( "BC" , - lv_velocidad_25 * ( 1 - lv_correccion_25 ) , lv_velocidad_25 * ( 1 - lv_correccion_25 ) )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_encoder_2
lv_safetytimer_26 = 11286 / ( lv_velocidad_26 / 10 ) * ( lv_distancia_26 / 100 ) / ( pr_recto_diametro / 6.24 )
lv_correccion_26 = ( Math.abs ( lv_velocidad_26 ) - 20 ) * 0.05
lv_enc_26 = ( lv_distancia_26 - lv_correccion_26 ) * 360 / Math.Pi / pr_recto_diametro
MotorB.ResetCount ()
MotorC.ResetCount ()
MotorBC.Off ()
Program.Delay ( 100 )
lv_c_26 = 0
Time.Reset4 ()
While Math.Abs ( MotorC.GetTacho () ) < lv_enc_26 And Time.Get4 () < lv_safetytimer_26 + 2000
Motor.StartSync ( "BC" , - lv_velocidad_26 * ( 1 + lv_c_26 / 2 ) , lv_velocidad_26 * ( 1 - lv_c_26 / 2 ) )
EndWhile
If Time.Get4 () > lv_safetytimer_26 + 2000 Then
Speaker.Play ( 100 , "WRO2025/Media/General alert" )
Speaker.Wait ()
EndIf
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_tiempo_2
lv_correccion_27 = 0
Time.Reset3 ()
MotorBC.Off ()
While Time.Get3 () < lv_tiempo_27
Motor.StartSync ( "BC" , - lv_velocidad_27 * ( 1 - lv_correccion_27 ) , lv_velocidad_27 * ( 1 - lv_correccion_27 ) )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_encoderf_2
lv_safetytimer_28 = 11286 / ( lv_velocidad_28 / 10 ) * ( lv_distancia_28 / 100 ) / ( pr_recto_diametro / 6.24 )
lv_correccion_28 = ( Math.abs ( lv_velocidad_28 ) - 20 ) * 0.05
lv_enc_28 = ( lv_distancia_28 - lv_correccion_28 ) * 360 / Math.Pi / pr_recto_diametro
MotorB.ResetCount ()
MotorC.ResetCount ()
MotorBC.Off ()
Program.Delay ( 100 )
lv_c_28 = 0
Time.Reset4 ()
While Math.Abs ( MotorC.GetTacho () ) < lv_enc_28 And Time.Get4 () < lv_safetytimer_28 + 2000
Motor.StartSync ( "BC" , - lv_velocidad_28 * ( 1 + lv_c_28 / 2 ) , lv_velocidad_28 * ( 1 - lv_c_28 / 2 ) )
EndWhile
If Time.Get4 () > lv_safetytimer_28 + 2000 Then
Speaker.Play ( 100 , "WRO2025/Media/General alert" )
Speaker.Wait ()
EndIf
MotorBC.Off ()
EndSub
Sub m_recto_color1_3
lv_correccion_29 = 0
lv_mode_29 = Sensor.GetMode ( lv_sensor_29 )
Sensor.SetMode ( lv_sensor_29 , 2 )
MotorBC.Off ()
While Sensor.ReadRawValue ( lv_sensor_29 , 0 ) <> lv_color_29
Motor.StartSync ( "BC" , - lv_velocidad_29 * ( 1 + lv_correccion_29 ) , lv_velocidad_29 * ( 1 - lv_correccion_29 ) )
EndWhile
MotorBC.OffAndBrake ()
Sensor.SetMode ( lv_sensor_29 , lv_mode_29 )
EndSub
Sub m_recto_blanco1f_2
lv_correccion_30 = 0
MotorBC.Off ()
lv_lectura_30 = 50
While lv_lectura_30 < 60
lv_lectura_30 = ( Sensor.ReadPercent ( lv_sensor_30 ) - pr_recto_negro ) / pr_recto_blanco * ( 100 - pr_recto_negro )
Motor.StartSync ( "BC" , - lv_velocidad_30 * ( 1 - lv_correccion_30 ) , lv_velocidad_30 * ( 1 - lv_correccion_30 ) )
EndWhile
MotorBC.Off ()
EndSub
Sub m_recto_blanco1_2
lv_correccion_31 = 0
MotorBC.Off ()
lv_lectura_31 = 50
While lv_lectura_31 < 60
lv_lectura_31 = ( Sensor.ReadPercent ( lv_sensor_31 ) - pr_recto_negro ) / pr_recto_blanco * ( 100 - pr_recto_negro )
Motor.StartSync ( "BC" , - lv_velocidad_31 * ( 1 - lv_correccion_31 ) , lv_velocidad_31 * ( 1 - lv_correccion_31 ) )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_negro1f_2
lv_correccion_32 = 0
MotorBC.Off ()
lv_lectura_32 = 50
While lv_lectura_32 > 15
lv_lectura_32 = ( Sensor.ReadPercent ( lv_sensor_32 ) - pr_recto_negro ) / pr_recto_blanco * ( 100 - pr_recto_negro )
Motor.StartSync ( "BC" , - lv_velocidad_32 * ( 1 - lv_correccion_32 ) , lv_velocidad_32 * ( 1 - lv_correccion_32 ) )
EndWhile
MotorBC.Off ()
EndSub
Sub m_rgb_detect_3
lv_sens_mode_33 = Sensor.GetMode ( lv_sens_33 )
Sensor.SetMode ( lv_sens_33 , 4 )
lv_red_33 = 15
lv_yellow_33 = 60
lv_green_33 = 170
lv_blue_33 = 330
lv_hue_33 = 0
lv_sat_33 = 0
lv_value_33 = 0
lv_color_33 = 0
lv_rnormarray_33 [ 0 ] = 0
lv_gnormarray_33 [ 0 ] = 0
lv_bnormarray_33 [ 0 ] = 0
LCD.Clear ()
For lv_j_33 = 1 To lv_reps_33 Step 1
lv_rgb_33 = Sensor.ReadRaw ( lv_sens_33 , 3 )
lv_rraw_33 = lv_rgb_33 [ 0 ]
lv_graw_33 = lv_rgb_33 [ 1 ]
lv_braw_33 = lv_rgb_33 [ 2 ]
lv_rnormarray_33 [ lv_j_33 ] = Math.Round ( lv_rraw_33 / pr_rgb_rwhite * 255 )
lv_gnormarray_33 [ lv_j_33 ] = Math.Round ( lv_graw_33 / pr_rgb_gwhite * 255 )
lv_bnormarray_33 [ lv_j_33 ] = Math.Round ( lv_braw_33 / pr_rgb_bwhite * 255 )
Program.Delay ( 5 )
EndFor
For lv_j_33 = 1 To lv_reps_33 Step 2
lv_rnorm_33 = lv_rnormarray_33 [ lv_j_33 ] + lv_rnormarray_33 [ lv_j_33 + 1 ]
lv_gnorm_33 = lv_gnormarray_33 [ lv_j_33 ] + lv_gnormarray_33 [ lv_j_33 + 1 ]
lv_bnorm_33 = lv_bnormarray_33 [ lv_j_33 ] + lv_bnormarray_33 [ lv_j_33 + 1 ]
EndFor
lv_rnorm_33 = lv_rnorm_33 / lv_reps_33
lv_gnorm_33 = lv_gnorm_33 / lv_reps_33
lv_bnorm_33 = lv_bnorm_33 / lv_reps_33
lv_max_33 = Math.Max ( Math.Max ( lv_rnorm_33 , lv_gnorm_33 ) , lv_bnorm_33 )
lv_min_33 = Math.Min ( Math.Min ( lv_rnorm_33 , lv_gnorm_33 ) , lv_bnorm_33 )
If lv_max_33 = lv_min_33 Then
lv_hue_33 = 0
Elseif lv_max_33 = lv_rnorm_33 Then
If lv_gnorm_33 >= lv_bnorm_33 Then
lv_hue_33 = 60 * ( lv_gnorm_33 - lv_bnorm_33 ) / ( lv_max_33 - lv_min_33 )
Else
lv_hue_33 = 60 * ( lv_gnorm_33 - lv_bnorm_33 ) / ( lv_max_33 - lv_min_33 ) + 360
EndIf
Elseif lv_max_33 = lv_gnorm_33 Then
lv_hue_33 = 60 * ( lv_bnorm_33 - lv_rnorm_33 ) / ( lv_max_33 - lv_min_33 ) + 120
Else
lv_hue_33 = 60 * ( lv_rnorm_33 - lv_gnorm_33 ) / ( lv_max_33 - lv_min_33 ) + 240
EndIf
If lv_max_33 = 0 Then
lv_sat_33 = 0
Else
lv_sat_33 = 1 - lv_min_33 / lv_max_33
EndIf
lv_value_33 = lv_max_33
lv_rgbgrey_33 = ( pr_rgb_valueblanco + pr_rgb_valuenegro ) / 2
If lv_rraw_33 + lv_graw_33 + lv_braw_33 <= 3 Then
lv_color_33 = 0
Else
If lv_sat_33 < 0.3 Then
If lv_value_33 > lv_rgbgrey_33 Then
lv_color_33 = 6
Else
lv_color_33 = 1
EndIf
Else
If lv_hue_33 >= 0 And lv_hue_33 < lv_red_33 Then
lv_color_33 = 5
Elseif lv_hue_33 >= lv_red_33 And lv_hue_33 < lv_yellow_33 Then
lv_color_33 = 4
Elseif lv_hue_33 >= lv_yellow_33 And lv_hue_33 < lv_green_33 Then
lv_color_33 = 3
Elseif lv_hue_33 >= lv_green_33 And lv_hue_33 < lv_blue_33 Then
lv_color_33 = 2
Else
lv_color_33 = 5
EndIf
EndIf
EndIf
LCD.StopUpdate ()
LCD.Clear ()
LCD.Write ( 33 , 20 , "R: " + lv_rraw_33 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_33 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_33 )
LCD.Write ( 33 , 70 , "color: " + lv_color_33 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_33 )
LCD.Update ()
Sensor.SetMode ( lv_sens_33 , lv_sens_mode_33 )
EndSub
Sub m_rgb_gritar_1
If lv_color_34 = 0 Then
Speaker.Play ( 100 , "WRO2025/Media/Zero" )
Elseif lv_color_34 = 1 Then
Speaker.Play ( 100 , "WRO2025/Media/Black" )
Elseif lv_color_34 = 2 Then
Speaker.Play ( 100 , "WRO2025/Media/BLUE" )
Elseif lv_color_34 = 3 Then
Speaker.Play ( 100 , "WRO2025/Media/GREEN" )
Elseif lv_color_34 = 4 Then
Speaker.Play ( 100 , "WRO2025/Media/YELLOW" )
Elseif lv_color_34 = 5 Then
Speaker.Play ( 100 , "WRO2025/Media/RED" )
Elseif lv_color_34 = 6 Then
Speaker.Play ( 100 , "WRO2025/Media/White" )
Elseif lv_color_34 = 7 Then
Speaker.Play ( 100 , "WRO2025/Media/Brown" )
EndIf
Speaker.Wait ()
EndSub
Sub m_control_logsinacceldecel_3
MotorB.ResetCount ()
MotorC.ResetCount ()
lv_signo_35 = lv_vmax_35 / Math.Abs ( lv_vmax_35 )
lv_vmax_35 = Math.Min ( 90 , Math.Abs ( lv_vmax_35 ) ) * lv_signo_35
lv_vel_35 = 0
lv_kp_35 = 0.7
lv_kd_35 = 1
lv_error_35 = 0
lv_olderror_35 = 0
lv_encoderaccel_35 = lv_distanciaaccel_35 * 360 / ( Math.Pi * pr_control_diametro )
lv_encoder_35 = lv_distancia_35 * 360 / ( Math.Pi * pr_control_diametro )
lv_encodercrucero_35 = lv_encoder_35 - 2 * lv_encoderaccel_35
LV_LOG_35 = EV3File.OpenWrite ( "WRO2025/Files/LecturasAccelDecel.txt" )
lv_lecturas_35 = 0
lv_encoderb_35 [ 0 ] = 0
lv_encoderc_35 [ 0 ] = 0
lv_distanciac_35 = 0
Speaker.Play ( 100 , "WRO2025/Media/Start" )
Speaker.Wait ()
Time.Reset8 ()
While Math.Abs ( lv_distanciac_35 ) < lv_encoder_35
lv_distanciab_35 = Motor.GetCount ( "B" ) * - 1
lv_distanciac_35 = Motor.GetCount ( "C" )
If Math.Abs ( lv_distanciac_35 ) < lv_encoderaccel_35 / 2 Then
lv_vel_35 = - 1 * ( 2 * lv_vmax_35 / 5 ) * Math.cos ( 2 * Math.pi * lv_distanciac_35 / lv_encoderaccel_35 ) + 3 * lv_vmax_35 / 5
ElseIf Math.Abs ( lv_distanciac_35 ) < lv_encoderaccel_35 + lv_encodercrucero_35 Then
lv_vel_35 = lv_vmax_35
Else
lv_vel_35 = - 1 * ( 2 * lv_vmax_35 / 5 ) * Math.cos ( Math.pi * ( lv_distanciac_35 - lv_encodercrucero_35 ) / lv_encoderaccel_35 ) + 3 * lv_vmax_35 / 5
EndIf
lv_error_35 = ( lv_distanciab_35 - lv_distanciac_35 )
lv_correccion_35 = lv_error_35 * lv_kp_35 + ( lv_error_35 - lv_olderror_35 ) * lv_kd_35
Motor.StartSync ( "BC" , - ( lv_vel_35 - lv_correccion_35 ) , ( lv_vel_35 + lv_correccion_35 ) )
lv_olderror_35 = lv_error_35
lv_velocidad_35 [ lv_lecturas_35 ] = lv_vel_35
lv_encoderb_35 [ lv_lecturas_35 ] = lv_distanciab_35
lv_encoderc_35 [ lv_lecturas_35 ] = lv_distanciac_35
lv_lecturas_35 = lv_lecturas_35 + 1
EndWhile
lv_deltat_35 = Time.Get8 ()
MotorBC.OffAndBrake ()
EV3File.WriteLine ( lv_log_35 , "encoderB;encoderC;velocidad" )
For lv_i_35 = 0 To lv_lecturas_35 - 1
lv_encoderb_35 [ lv_i_35 ] = lv_encoderb_35 [ lv_i_35 ] / 360 * ( Math.Pi * pr_control_diametro )
lv_encoderc_35 [ lv_i_35 ] = lv_encoderc_35 [ lv_i_35 ] / 360 * ( Math.Pi * pr_control_diametro )
EV3File.WriteLine ( lv_log_35 , Text.Append ( Text.Append ( Text.Append ( Text.Append ( lv_encoderb_35 [ lv_i_35 ] , ";" ) , lv_encoderc_35 [ lv_i_35 ] ) , ";" ) , lv_velocidad_35 [ lv_i_35 ] ) )
EndFor
EV3File.WriteLine ( lv_log_35 , lv_lecturas_35 / lv_deltat_35 * 1000 )
EV3File.Close ( lv_log_35 )
EndSub
