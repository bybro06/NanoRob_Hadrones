pr_giro_g1 = 0
pr_rgb_valuenegro = 0
pr_rgb_valueblanco = 0
pr_rgb_rwhite = 0
pr_rgb_gwhite = 0
pr_rgb_bwhite = 0
pr_recto_diametro = 0
pr_giro_diametro = 0
pr_siguelineas_diametro = 0
pr_smart_diametro = 0
pr_siguelineas_negro1 = 0
pr_siguelineas_negro3 = 0
pr_siguelineas_negro4 = 0
pr_siguelineas_blanco1 = 0
pr_siguelineas_blanco3 = 0
pr_siguelineas_blanco4 = 0
pr_smart_negro1 = 0
pr_smart_negro3 = 0
pr_smart_negro4 = 0
pr_smart_blanco1 = 0
pr_smart_blanco3 = 0
pr_smart_blanco4 = 0
pr_recto_negro = 0
pr_recto_blanco = 0
pr_giro_negro = 0
pr_giro_blanco = 0
lv_velocidada_5 = 0
lv_velocidadd_5 = 0
lv_timer_5 = 0
lv_velocidad_7 = 0
lv_distancia_7 = 0
lv_velocidad1_13 = 0
lv_velocidad2_13 = 0
lv_grados_13 = 0
lv_velocidad_8 = 0
lv_distancia_8 = 0
lv_velocidad_9 = 0
lv_sensor_9 = 0
lv_velocidad_15 = 0
lv_velocidad_16 = 0
lv_encoder_16 = 0
lv_sens_22 = 0
lv_reps_22 = 0
lv_color_22 = 0
lv_color_23 = 0
lv_velocidad_10 = 0
lv_tiempo_10 = 0
lv_velocidad_6 = 0
lv_encoder_6 = 0
lv_velocidad_17 = 0
lv_encoder_17 = 0
lv_velocidad_18 = 0
lv_reader_18 = 0
lv_velocidad1_14 = 0
lv_velocidad2_14 = 0
lv_distancia_14 = 0
lv_velocidad_19 = 0
lv_color_19 = 0
lv_velocidad_20 = 0
lv_reader_20 = 0
lv_velocidad_21 = 0
lv_encoder_21 = 0
lv_v0_11 = 0
lv_vmax_11 = 0
lv_distanciaaccel_11 = 0
lv_distanciacrucero_11 = 0
lv_distanciadecel_11 = 0
lv_v0_12 = 0
lv_vmax_12 = 0
lv_distanciaaccel_12 = 0
lv_distanciacrucero_12 = 0
lv_distanciadecel_12 = 0
lv_numero_2 = 0
gv_markinggrande = 0
gv_diametro = 0
gv_negro1 = 0
gv_negro3 = 0
gv_negro4 = 0
gv_blanco1 = 0
gv_blanco3 = 0
gv_blanco4 = 0
f_setup_0 ()
f_mainprueba_0 ()
Sub f_setup_0
Sensor.SetMode ( 1 , 0 )
Sensor.SetMode ( 2 , 4 )
Sensor.SetMode ( 3 , 0 )
Sensor.SetMode ( 4 , 0 )
gv_diametro = 6.24
pr_giro_g1 = 1065 / 360
gv_negro1 = 10
gv_negro3 = 9
gv_negro4 = 8
gv_blanco1 = 65
gv_blanco3 = 59
gv_blanco4 = 55
pr_rgb_valuenegro = 4
pr_rgb_valueblanco = 32
pr_rgb_rwhite = 57
pr_rgb_gwhite = 71
pr_rgb_bwhite = 73
pr_recto_diametro = gv_diametro
pr_giro_diametro = gv_diametro
pr_siguelineas_diametro = gv_diametro
pr_smart_diametro = gv_diametro
pr_siguelineas_negro1 = gv_negro1
pr_siguelineas_negro3 = gv_negro3
pr_siguelineas_negro4 = gv_negro4
pr_siguelineas_blanco1 = gv_blanco1
pr_siguelineas_blanco3 = gv_blanco3
pr_siguelineas_blanco4 = gv_blanco4
pr_smart_negro1 = gv_negro1
pr_smart_negro3 = gv_negro3
pr_smart_negro4 = gv_negro4
pr_smart_blanco1 = gv_blanco1
pr_smart_blanco3 = gv_blanco3
pr_smart_blanco4 = gv_blanco4
pr_recto_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_recto_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
pr_giro_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_giro_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
EndSub
Sub f_startarm_0
lv_velocidada_5 = 50
lv_velocidadd_5 = - 50
lv_timer_5 = 250
m_brazo_adtimer_3 ()
MotorA.ResetCount ()
MotorD.ResetCount ()
Speaker.Play ( 100 , "WRO2025/Media/Connect" )
Speaker.Wait ()
EndSub
Sub f_mainprueba_0
f_startarm_0 ()
gv_markinggrande = 5
lv_velocidad_20 = 40
lv_reader_20 = 4
m_siguelineas_cruce_externof_2 ()
lv_velocidad_21 = 80
lv_encoder_21 = 50
m_siguelineas_encoder31f_2 ()
If gv_markinggrande = 2 Then
lv_velocidad_21 = 80
lv_encoder_21 = 40
m_siguelineas_encoder31f_2 ()
lv_velocidad_16 = 30
lv_encoder_16 = 9
m_siguelineas_encoder31_2 ()
lv_velocidad_7 = 30
lv_distancia_7 = 16
m_recto_encoder_2 ()
lv_velocidad1_13 = - 20
lv_velocidad2_13 = 20
lv_grados_13 = 90
m_giro_grados_3 ()
lv_velocidad_7 = - 10
lv_distancia_7 = 8
m_recto_encoder_2 ()
lv_velocidad_6 = 40
lv_encoder_6 = - 380
m_brazo_aencoder_2 ()
lv_velocidad1_13 = - 20
lv_velocidad2_13 = - 40
lv_grados_13 = 90
m_giro_grados_3 ()
lv_v0_11 = - 30
lv_vmax_11 = - 80
lv_distanciaaccel_11 = 10
lv_distanciacrucero_11 = 1
lv_distanciadecel_11 = 15
m_recto_acceldecelf_5 ()
lv_velocidad_7 = - 10
lv_distancia_7 = 5
m_recto_encoder_2 ()
lv_velocidad_7 = 10
lv_distancia_7 = 2
m_recto_encoder_2 ()
lv_velocidad_6 = 40
lv_encoder_6 = - 50
m_brazo_aencoder_2 ()
ElseIf gv_markinggrande = 5 Then
lv_velocidad_16 = 30
lv_encoder_16 = 10
m_siguelineas_encoder31_2 ()
lv_velocidad1_13 = 30
lv_velocidad2_13 = - 30
lv_grados_13 = 90
m_giro_grados_3 ()
lv_velocidad_7 = 40
lv_distancia_7 = 25
m_recto_encoder_2 ()
lv_velocidad1_13 = 30
lv_velocidad2_13 = - 30
lv_grados_13 = 88
m_giro_grados_3 ()
lv_velocidad_8 = - 60
lv_distancia_8 = 27
m_recto_encoderf_2 ()
lv_velocidad_7 = - 20
lv_distancia_7 = 10
m_recto_encoder_2 ()
lv_velocidad_6 = 40
lv_encoder_6 = - 380
m_brazo_aencoder_2 ()
lv_velocidad1_13 = - 5
lv_velocidad2_13 = - 60
lv_grados_13 = 182
m_giro_grados_3 ()
lv_velocidad_8 = - 80
lv_distancia_8 = 37
m_recto_encoderf_2 ()
lv_velocidad_7 = - 10
lv_distancia_7 = 6
m_recto_encoder_2 ()
lv_velocidad_7 = 10
lv_distancia_7 = 2
m_recto_encoder_2 ()
lv_velocidad_6 = 40
lv_encoder_6 = - 60
m_brazo_aencoder_2 ()
ElseIf gv_markinggrande = 4 Then
lv_velocidad_21 = 80
lv_encoder_21 = 34.5
m_siguelineas_encoder31f_2 ()
lv_velocidad_16 = 30
lv_encoder_16 = 9
m_siguelineas_encoder31_2 ()
lv_velocidad1_13 = 30
lv_velocidad2_13 = - 30
lv_grados_13 = 90
m_giro_grados_3 ()
lv_v0_12 = 30
lv_vmax_12 = 80
lv_distanciaaccel_12 = 10
lv_distanciacrucero_12 = 30.5
lv_distanciadecel_12 = 10
m_recto_acceldecel_5 ()
lv_velocidad1_13 = - 30
lv_velocidad2_13 = 30
lv_grados_13 = 86
m_giro_grados_3 ()
lv_velocidad_8 = 20
lv_distancia_8 = 5
m_recto_encoderf_2 ()
lv_velocidad_18 = 20
lv_reader_18 = 4
m_siguelineas_cruce_externo_2 ()
lv_velocidad_7 = - 10
lv_distancia_7 = 1.5
m_recto_encoder_2 ()
lv_velocidad1_13 = 15
lv_velocidad2_13 = - 30
lv_grados_13 = 87
m_giro_grados_3 ()
lv_velocidad_7 = - 10
lv_distancia_7 = 5.5
m_recto_encoder_2 ()
lv_velocidad_6 = 40
lv_encoder_6 = - 380
m_brazo_aencoder_2 ()
lv_velocidad_7 = 10
lv_distancia_7 = 0.5
m_recto_encoder_2 ()
Program.Delay ( 100 )
lv_velocidad1_13 = - 30
lv_velocidad2_13 = 30
lv_grados_13 = 87
m_giro_grados_3 ()
lv_velocidad_7 = - 80
lv_distancia_7 = 54
m_recto_encoder_2 ()
lv_velocidad_7 = - 20
lv_distancia_7 = 7
m_recto_encoder_2 ()
lv_velocidad_6 = 40
lv_encoder_6 = - 50
m_brazo_aencoder_2 ()
EndIf
EndSub
Sub f_gritarvoltaje_0
lv_voltaje_1 = EV3.BatteryVoltage
lv_numero_2 = Math.Floor ( lv_voltaje_1 )
f_gritarnumero_1 ()
lv_numero_2 = Math.Floor ( lv_voltaje_1 * 10 ) - Math.Floor ( lv_voltaje_1 ) * 10
f_gritarnumero_1 ()
lv_numero_2 = Math.Floor ( lv_voltaje_1 * 100 ) - Math.Floor ( lv_voltaje_1 * 10 ) * 10
f_gritarnumero_1 ()
EndSub
Sub f_gritarnumero_1
If lv_numero_2 = 0 Then
Speaker.Play ( 100 , "WRO2025/Media/ZERO" )
Elseif lv_numero_2 = 1 Then
Speaker.Play ( 100 , "WRO2025/Media/One" )
Elseif lv_numero_2 = 2 Then
Speaker.Play ( 100 , "WRO2025/Media/Two" )
Elseif lv_numero_2 = 3 Then
Speaker.Play ( 100 , "WRO2025/Media/Three" )
Elseif lv_numero_2 = 4 Then
Speaker.Play ( 100 , "WRO2025/Media/Four" )
Elseif lv_numero_2 = 5 Then
Speaker.Play ( 100 , "WRO2025/Media/Five" )
Elseif lv_numero_2 = 6 Then
Speaker.Play ( 100 , "WRO2025/Media/Six" )
Elseif lv_numero_2 = 7 Then
Speaker.Play ( 100 , "WRO2025/Media/Seven" )
Elseif lv_numero_2 = 8 Then
Speaker.Play ( 100 , "WRO2025/Media/Eight" )
Elseif lv_numero_2 = 9 Then
Speaker.Play ( 100 , "WRO2025/Media/Nine" )
Elseif lv_numero_2 = 10 Then
Speaker.Play ( 100 , "WRO2025/Media/Ten" )
EndIf
Speaker.Wait ()
EndSub
Sub f_s_0
Buttons.Flush ()
Buttons.Wait ()
EndSub
Sub m_brazo_adtimer_3
Time.Reset1 ()
While Time.Get1 () < lv_timer_5
MotorA.StartSpeed ( lv_velocidada_5 )
MotorD.StartSpeed ( lv_velocidadd_5 )
EndWhile
Motor.Stop ( "AD" , "True" )
EndSub
Sub m_brazo_aencoder_2
lv_encdiff_6 = lv_encoder_6 - Motor.GetCount ( "A" )
lv_signo_6 = lv_encdiff_6 / Math.Abs ( lv_encdiff_6 )
lv_safetytimer_6 = Math.Max ( ( ( Math.abs ( lv_encdiff_6 ) / 100 ) / ( lv_velocidad_6 / 20 ) * 650 * 2 ) , 400 )
Time.Reset3 ()
If lv_encdiff_6 <> 0 Then
While Math.Abs ( Motor.GetCount ( "A" ) - lv_encoder_6 ) > 25 and Time.Get3 () < 2000
MotorA.StartSpeed ( lv_signo_6 * lv_velocidad_6 )
EndWhile
Motor.Stop ( "A" , "True" )
EndIf
EndSub
Sub m_recto_encoder_2
lv_correccion_7 = ( Math.abs ( lv_velocidad_7 ) - 20 ) * 0.05
lv_enc_7 = ( lv_distancia_7 - lv_correccion_7 ) * 360 / Math.Pi / pr_recto_diametro
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad_7 , lv_velocidad_7 , lv_enc_7 , "True" )
EndSub
Sub m_recto_encoderf_2
lv_correccion_8 = ( Math.abs ( lv_velocidad_8 ) - 20 ) * 0.05
lv_enc_8 = ( lv_distancia_8 - lv_correccion_8 ) * 360 / Math.Pi / pr_recto_diametro
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad_8 , lv_velocidad_8 , lv_enc_8 , "False" )
EndSub
Sub m_recto_negro1_2
lv_correccion_9 = 0
MotorBC.Off ()
lv_lectura_9 = 50
While lv_lectura_9 > 15
lv_lectura_9 = ( Sensor.ReadPercent ( lv_sensor_9 ) - pr_recto_negro ) / pr_recto_blanco * ( 100 - pr_recto_negro )
Motor.StartSync ( "BC" , - lv_velocidad_9 + lv_correccion_9 , lv_velocidad_9 + lv_correccion_9 )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_tiempo_2
lv_correccion_10 = 0
Time.Reset3 ()
MotorBC.Off ()
While Time.Get3 () < lv_tiempo_10
Motor.StartSync ( "BC" , - lv_velocidad_10 + lv_correccion_10 , lv_velocidad_10 + lv_correccion_10 )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_acceldecelf_5
lv_startb_11 = Motor.GetCount ( "B" )
lv_startc_11 = Motor.GetCount ( "C" )
lv_encoderb_11 = 0
lv_encoderc_11 = 0
lv_signo_11 = lv_v0_11 / Math.Abs ( lv_v0_11 )
lv_v0_11 = Math.Max ( 8 , Math.Abs ( lv_v0_11 ) ) * lv_signo_11
lv_vmax_11 = Math.Min ( 90 , Math.Abs ( lv_vmax_11 ) ) * lv_signo_11
lv_vel_11 = 0
lv_kp_11 = 0.4
lv_kd_11 = 0.5
lv_error_11 = 0
lv_olderror_11 = 0
lv_gradosaccel_11 = lv_distanciaaccel_11 * 360 / ( pr_recto_diametro * math.pi )
lv_gradoscrucero_11 = lv_distanciacrucero_11 * 360 / ( pr_recto_diametro * math.pi )
lv_gradosdecel_11 = lv_distanciadecel_11 * 360 / ( pr_recto_diametro * math.pi )
While Math.Abs ( lv_encoderc_11 ) < lv_gradosaccel_11 + lv_gradoscrucero_11 + lv_gradosdecel_11
lv_encoderb_11 = Motor.GetCount ( "B" ) * 1 - lv_startb_11
lv_encoderc_11 = Motor.GetCount ( "C" ) - lv_startc_11
If Math.Abs ( lv_encoderc_11 ) < lv_gradosaccel_11 + lv_gradoscrucero_11 Then
lv_pendiente_11 = ( lv_vmax_11 - lv_v0_11 ) / lv_gradosaccel_11 * lv_signo_11
If lv_signo_11 > 0 Then
lv_vel_11 = Math.Min ( lv_vmax_11 , lv_pendiente_11 * lv_encoderc_11 + lv_v0_11 )
Else
lv_vel_11 = Math.Max ( lv_vmax_11 , lv_pendiente_11 * lv_encoderc_11 + lv_v0_11 )
EndIf
Else
lv_pendiente_11 = ( lv_v0_11 - lv_vmax_11 ) / lv_gradosdecel_11 * lv_signo_11
If lv_signo_11 > 0 Then
lv_vel_11 = Math.Max ( lv_v0_11 , lv_pendiente_11 * ( lv_encoderc_11 - lv_gradosaccel_11 - lv_gradoscrucero_11 ) + lv_vmax_11 )
Else
lv_vel_11 = Math.Min ( lv_v0_11 , lv_pendiente_11 * ( lv_encoderc_11 + lv_gradosaccel_11 + lv_gradoscrucero_11 ) + lv_vmax_11 )
EndIf
EndIf
lv_error_11 = ( - 1 * lv_encoderb_11 - lv_encoderc_11 ) * 1
lv_correccion_11 = lv_error_11 * lv_kp_11 + ( lv_error_11 - lv_olderror_11 ) * lv_kd_11
Motor.StartSync ( "BC" , - ( lv_vel_11 - lv_correccion_11 ) , ( lv_vel_11 + lv_correccion_11 ) )
lv_olderror_11 = lv_error_11
EndWhile
MotorBC.Off ()
EndSub
Sub m_recto_acceldecel_5
lv_startb_12 = Motor.GetCount ( "B" )
lv_startc_12 = Motor.GetCount ( "C" )
lv_encoderb_12 = 0
lv_encoderc_12 = 0
lv_signo_12 = lv_v0_12 / Math.Abs ( lv_v0_12 )
lv_v0_12 = Math.Max ( 8 , Math.Abs ( lv_v0_12 ) ) * lv_signo_12
lv_vmax_12 = Math.Min ( 90 , Math.Abs ( lv_vmax_12 ) ) * lv_signo_12
lv_vel_12 = 0
lv_kp_12 = 0.4
lv_kd_12 = 0.5
lv_error_12 = 0
lv_olderror_12 = 0
lv_gradosaccel_12 = lv_distanciaaccel_12 * 360 / ( pr_recto_diametro * math.pi )
lv_gradoscrucero_12 = lv_distanciacrucero_12 * 360 / ( pr_recto_diametro * math.pi )
lv_gradosdecel_12 = lv_distanciadecel_12 * 360 / ( pr_recto_diametro * math.pi )
While Math.Abs ( lv_encoderc_12 ) < lv_gradosaccel_12 + lv_gradoscrucero_12 + lv_gradosdecel_12
lv_encoderb_12 = Motor.GetCount ( "B" ) * 1 - lv_startb_12
lv_encoderc_12 = Motor.GetCount ( "C" ) - lv_startc_12
If Math.Abs ( lv_encoderc_12 ) < lv_gradosaccel_12 + lv_gradoscrucero_12 Then
lv_pendiente_12 = ( lv_vmax_12 - lv_v0_12 ) / lv_gradosaccel_12 * lv_signo_12
If lv_signo_12 > 0 Then
lv_vel_12 = Math.Min ( lv_vmax_12 , lv_pendiente_12 * lv_encoderc_12 + lv_v0_12 )
Else
lv_vel_12 = Math.Max ( lv_vmax_12 , lv_pendiente_12 * lv_encoderc_12 + lv_v0_12 )
EndIf
Else
lv_pendiente_12 = ( lv_v0_12 - lv_vmax_12 ) / lv_gradosdecel_12 * lv_signo_12
If lv_signo_12 > 0 Then
lv_vel_12 = Math.Max ( lv_v0_12 , lv_pendiente_12 * ( lv_encoderc_12 - lv_gradosaccel_12 - lv_gradoscrucero_12 ) + lv_vmax_12 )
Else
lv_vel_12 = Math.Min ( lv_v0_12 , lv_pendiente_12 * ( lv_encoderc_12 + lv_gradosaccel_12 + lv_gradoscrucero_12 ) + lv_vmax_12 )
EndIf
EndIf
lv_error_12 = ( - 1 * lv_encoderb_12 - lv_encoderc_12 ) * 1
lv_correccion_12 = lv_error_12 * lv_kp_12 + ( lv_error_12 - lv_olderror_12 ) * lv_kd_12
Motor.StartSync ( "BC" , - ( lv_vel_12 - lv_correccion_12 ) , ( lv_vel_12 + lv_correccion_12 ) )
lv_olderror_12 = lv_error_12
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_giro_grados_3
lv_signo_13 = ( lv_velocidad1_13 / lv_velocidad2_13 ) / Math.Abs ( lv_velocidad1_13 / lv_velocidad2_13 )
lv_vmin_13 = Math.Min ( Math.Abs ( lv_velocidad1_13 ) , Math.Abs ( lv_velocidad2_13 ) )
lv_vmax_13 = Math.Max ( Math.Abs ( lv_velocidad1_13 ) , Math.Abs ( lv_velocidad2_13 ) )
lv_encoder_13 = lv_grados_13 * pr_giro_g1 * ( - 2 / ( lv_signo_13 * lv_vmin_13 / lv_vmax_13 - 1 ) )
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad1_13 , lv_velocidad2_13 , lv_encoder_13 , "True" )
lv_velocidad1_13 = 0
lv_velocidad2_13 = 0
lv_grados_13 = 0
Program.Delay ( 100 )
EndSub
Sub m_giro_encoder_3
lv_encoder_14 = lv_distancia_14 / ( pr_giro_diametro * Math.Pi ) * 360
MotorBC.Off ()
Motor.MoveSync ( "BC" , - lv_velocidad1_14 , lv_velocidad2_14 , lv_encoder_14 , "True" )
EndSub
Sub m_siguelineas_cruce14_1
lv_velocidad_15 = lv_velocidad_15 * 1
lv_lectura1_15 = 50
lv_lectura3_15 = 50
lv_lectura4_15 = 50
lv_kp_15 = lv_velocidad_15 / 280
lv_kd_15 = lv_kp_15 * 32
lv_error_15 = 0
lv_olderror_15 = 0
lv_u_15 = 0
lv_sentido_15 = lv_velocidad_15 / Math.Abs ( lv_velocidad_15 )
While lv_lectura1_15 > 10 Or lv_lectura4_15 > 10
lv_lectura1_15 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura4_15 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_15 = ( lv_lectura1_15 - lv_lectura4_15 ) * lv_sentido_15 * 1
lv_u_15 = lv_error_15 * lv_kp_15 + ( lv_error_15 - lv_olderror_15 ) * lv_kd_15
Motor.StartSync ( "BC" , - ( lv_velocidad_15 + lv_u_15 ) , lv_velocidad_15 - lv_u_15 )
lv_olderror_15 = lv_error_15
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_encoder31_2
lv_velocidad_16 = lv_velocidad_16 * 1
lv_lectura1_16 = 50
lv_lectura3_16 = 50
lv_lectura4_16 = 50
lv_kp_16 = lv_velocidad_16 / 280
lv_kd_16 = lv_kp_16 * 32
lv_error_16 = 0
lv_olderror_16 = 0
lv_u_16 = 0
lv_sentido_16 = lv_velocidad_16 / Math.Abs ( lv_velocidad_16 )
lv_encoder_16 = lv_encoder_16 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_16 = MotorC.GetTacho ()
lv_encoderc_16 = 0
While Math.Abs ( lv_encoderc_16 ) < lv_encoder_16
lv_encoderc_16 = MotorC.GetTacho () - lv_startc_16
lv_lectura1_16 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_16 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_error_16 = ( lv_lectura3_16 - lv_lectura1_16 ) * lv_sentido_16 * 1
lv_u_16 = lv_error_16 * lv_kp_16 + ( lv_error_16 - lv_olderror_16 ) * lv_kd_16
Motor.StartSync ( "BC" , - ( lv_velocidad_16 + lv_u_16 ) , lv_velocidad_16 - lv_u_16 )
lv_olderror_16 = lv_error_16
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_encoder14_2
lv_velocidad_17 = lv_velocidad_17 * 1
lv_lectura1_17 = 50
lv_lectura3_17 = 50
lv_lectura4_17 = 50
lv_kp_17 = lv_velocidad_17 / 320
lv_kd_17 = lv_kp_17 * 28
lv_error_17 = 0
lv_olderror_17 = 0
lv_u_17 = 0
lv_sentido_17 = lv_velocidad_17 / Math.Abs ( lv_velocidad_17 )
lv_encoder_17 = lv_encoder_17 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_17 = MotorC.GetTacho ()
lv_encoderc_17 = 0
While Math.Abs ( lv_encoderc_17 ) < lv_encoder_17
lv_encoderc_17 = MotorC.GetTacho () - lv_startc_17
lv_lectura1_17 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura4_17 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_17 = ( lv_lectura1_17 - lv_lectura4_17 ) * lv_sentido_17 * 1
lv_u_17 = lv_error_17 * lv_kp_17 + ( lv_error_17 - lv_olderror_17 ) * lv_kd_17
Motor.StartSync ( "BC" , - ( lv_velocidad_17 + lv_u_17 ) , lv_velocidad_17 - lv_u_17 )
lv_olderror_17 = lv_error_17
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_cruce_externo_2
lv_velocidad_18 = lv_velocidad_18 * 1
lv_lectura1_18 = 50
lv_lectura3_18 = 50
lv_lectura4_18 = 50
lv_kp_18 = lv_velocidad_18 / 280
lv_kd_18 = lv_kp_18 * 32
lv_error_18 = 0
lv_olderror_18 = 0
lv_u_18 = 0
lv_sentido_18 = lv_velocidad_18 / Math.Abs ( lv_velocidad_18 )
lv_lectura_18 = 50
While lv_lectura_18 > 7
If lv_reader_18 = 3 Then
lv_lectura_18 = lv_lectura3_18
lv_lecturaizq_18 = lv_lectura1_18
lv_lecturadch_18 = lv_lectura4_18
Else
lv_lectura_18 = lv_lectura4_18
lv_lecturaizq_18 = lv_lectura3_18
lv_lecturadch_18 = lv_lectura1_18
EndIf
lv_lectura1_18 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_18 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_lectura4_18 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_18 = ( lv_lecturaizq_18 - lv_lecturadch_18 ) * lv_sentido_18 * 1
lv_u_18 = lv_error_18 * lv_kp_18 + ( lv_error_18 - lv_olderror_18 ) * lv_kd_18
Motor.StartSync ( "BC" , - ( lv_velocidad_18 + lv_u_18 ) , lv_velocidad_18 - lv_u_18 )
lv_olderror_18 = lv_error_18
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_color31_2
lv_mode_19 = Sensor.GetMode ( 4 )
Sensor.SetMode ( 4 , 2 )
lv_velocidad_19 = lv_velocidad_19 * 1
lv_lectura1_19 = 50
lv_lectura3_19 = 50
lv_lectura4_19 = 50
lv_kp_19 = lv_velocidad_19 / 280
lv_kd_19 = lv_kp_19 * 32
lv_error_19 = 0
lv_olderror_19 = 0
lv_u_19 = 0
lv_sentido_19 = lv_velocidad_19 / Math.Abs ( lv_velocidad_19 )
While Sensor.ReadRawValue ( 4 , 0 ) <> lv_color_19
lv_lectura1_19 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_19 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_19 = ( lv_lectura3_19 - lv_lectura1_19 ) * lv_sentido_19 * 1
lv_u_19 = lv_error_19 * lv_kp_19 + ( lv_error_19 - lv_olderror_19 ) * lv_kd_19
Motor.StartSync ( "BC" , - ( lv_velocidad_19 + lv_u_19 ) , lv_velocidad_19 - lv_u_19 )
lv_olderror_19 = lv_error_19
EndWhile
MotorBC.OffAndBrake ()
Sensor.SetMode ( 4 , lv_mode_19 )
EndSub
Sub m_siguelineas_cruce_externof_2
lv_velocidad_20 = lv_velocidad_20 * 1
lv_lectura1_20 = 50
lv_lectura3_20 = 50
lv_lectura4_20 = 50
lv_kp_20 = lv_velocidad_20 / 280
lv_kd_20 = lv_kp_20 * 32
lv_error_20 = 0
lv_olderror_20 = 0
lv_u_20 = 0
lv_sentido_20 = lv_velocidad_20 / Math.Abs ( lv_velocidad_20 )
lv_lectura_20 = 50
While lv_lectura_20 > 7
If lv_reader_20 = 3 Then
lv_lectura_20 = lv_lectura3_20
lv_lecturaizq_20 = lv_lectura1_20
lv_lecturadch_20 = lv_lectura4_20
Else
lv_lectura_20 = lv_lectura4_20
lv_lecturaizq_20 = lv_lectura3_20
lv_lecturadch_20 = lv_lectura1_20
EndIf
lv_lectura1_20 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_20 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_lectura4_20 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_20 = ( lv_lecturaizq_20 - lv_lecturadch_20 ) * lv_sentido_20 * 1
lv_u_20 = lv_error_20 * lv_kp_20 + ( lv_error_20 - lv_olderror_20 ) * lv_kd_20
Motor.StartSync ( "BC" , - ( lv_velocidad_20 + lv_u_20 ) , lv_velocidad_20 - lv_u_20 )
lv_olderror_20 = lv_error_20
EndWhile
MotorBC.Off ()
EndSub
Sub m_siguelineas_encoder31f_2
lv_velocidad_21 = lv_velocidad_21 * 1
lv_lectura1_21 = 50
lv_lectura3_21 = 50
lv_lectura4_21 = 50
lv_kp_21 = lv_velocidad_21 / 280
lv_kd_21 = lv_kp_21 * 32
lv_error_21 = 0
lv_olderror_21 = 0
lv_u_21 = 0
lv_sentido_21 = lv_velocidad_21 / Math.Abs ( lv_velocidad_21 )
lv_encoder_21 = lv_encoder_21 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_21 = MotorC.GetTacho ()
lv_encoderc_21 = 0
While Math.Abs ( lv_encoderc_21 ) < lv_encoder_21
lv_encoderc_21 = MotorC.GetTacho () - lv_startc_21
lv_lectura1_21 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_21 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_error_21 = ( lv_lectura3_21 - lv_lectura1_21 ) * lv_sentido_21 * 1
lv_u_21 = lv_error_21 * lv_kp_21 + ( lv_error_21 - lv_olderror_21 ) * lv_kd_21
Motor.StartSync ( "BC" , - ( lv_velocidad_21 + lv_u_21 ) , lv_velocidad_21 - lv_u_21 )
lv_olderror_21 = lv_error_21
EndWhile
MotorBC.Off ()
EndSub
Sub m_rgb_detect_3
lv_sens_mode_22 = Sensor.GetMode ( lv_sens_22 )
Sensor.SetMode ( lv_sens_22 , 4 )
lv_red_22 = 15
lv_yellow_22 = 60
lv_green_22 = 170
lv_blue_22 = 330
lv_hue_22 = 0
lv_sat_22 = 0
lv_value_22 = 0
lv_color_22 = 0
lv_rnormarray_22 [ 0 ] = 0
lv_gnormarray_22 [ 0 ] = 0
lv_bnormarray_22 [ 0 ] = 0
LCD.Clear ()
For lv_j_22 = 1 To lv_reps_22 Step 1
lv_rgb_22 = Sensor.ReadRaw ( lv_sens_22 , 3 )
lv_rraw_22 = lv_rgb_22 [ 0 ]
lv_graw_22 = lv_rgb_22 [ 1 ]
lv_braw_22 = lv_rgb_22 [ 2 ]
lv_rnormarray_22 [ lv_j_22 ] = Math.Round ( lv_rraw_22 / pr_rgb_rwhite * 255 )
lv_gnormarray_22 [ lv_j_22 ] = Math.Round ( lv_graw_22 / pr_rgb_gwhite * 255 )
lv_bnormarray_22 [ lv_j_22 ] = Math.Round ( lv_braw_22 / pr_rgb_bwhite * 255 )
Program.Delay ( 5 )
EndFor
For lv_j_22 = 1 To lv_reps_22 Step 2
lv_rnorm_22 = lv_rnormarray_22 [ lv_j_22 ] + lv_rnormarray_22 [ lv_j_22 + 1 ]
lv_gnorm_22 = lv_gnormarray_22 [ lv_j_22 ] + lv_gnormarray_22 [ lv_j_22 + 1 ]
lv_bnorm_22 = lv_bnormarray_22 [ lv_j_22 ] + lv_bnormarray_22 [ lv_j_22 + 1 ]
EndFor
lv_rnorm_22 = lv_rnorm_22 / lv_reps_22
lv_gnorm_22 = lv_gnorm_22 / lv_reps_22
lv_bnorm_22 = lv_bnorm_22 / lv_reps_22
lv_max_22 = Math.Max ( Math.Max ( lv_rnorm_22 , lv_gnorm_22 ) , lv_bnorm_22 )
lv_min_22 = Math.Min ( Math.Min ( lv_rnorm_22 , lv_gnorm_22 ) , lv_bnorm_22 )
If lv_max_22 = lv_min_22 Then
lv_hue_22 = 0
Elseif lv_max_22 = lv_rnorm_22 Then
If lv_gnorm_22 >= lv_bnorm_22 Then
lv_hue_22 = 60 * ( lv_gnorm_22 - lv_bnorm_22 ) / ( lv_max_22 - lv_min_22 )
Else
lv_hue_22 = 60 * ( lv_gnorm_22 - lv_bnorm_22 ) / ( lv_max_22 - lv_min_22 ) + 360
EndIf
Elseif lv_max_22 = lv_gnorm_22 Then
lv_hue_22 = 60 * ( lv_bnorm_22 - lv_rnorm_22 ) / ( lv_max_22 - lv_min_22 ) + 120
Else
lv_hue_22 = 60 * ( lv_rnorm_22 - lv_gnorm_22 ) / ( lv_max_22 - lv_min_22 ) + 240
EndIf
If lv_max_22 = 0 Then
lv_sat_22 = 0
Else
lv_sat_22 = 1 - lv_min_22 / lv_max_22
EndIf
lv_value_22 = lv_max_22
lv_rgbgrey_22 = ( pr_rgb_valueblanco + pr_rgb_valuenegro ) / 2
If lv_rraw_22 + lv_graw_22 + lv_braw_22 <= 3 Then
lv_color_22 = 0
Else
If lv_sat_22 < 0.3 Then
If lv_value_22 > lv_rgbgrey_22 Then
lv_color_22 = 6
Else
lv_color_22 = 1
EndIf
Else
If lv_hue_22 >= 0 And lv_hue_22 < lv_red_22 Then
lv_color_22 = 5
Elseif lv_hue_22 >= lv_red_22 And lv_hue_22 < lv_yellow_22 Then
lv_color_22 = 4
Elseif lv_hue_22 >= lv_yellow_22 And lv_hue_22 < lv_green_22 Then
lv_color_22 = 3
Elseif lv_hue_22 >= lv_green_22 And lv_hue_22 < lv_blue_22 Then
lv_color_22 = 2
Else
lv_color_22 = 5
EndIf
EndIf
EndIf
LCD.StopUpdate ()
LCD.Clear ()
LCD.Write ( 33 , 20 , "R: " + lv_rraw_22 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_22 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_22 )
LCD.Write ( 33 , 70 , "color: " + lv_color_22 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_22 )
LCD.Update ()
Sensor.SetMode ( lv_sens_22 , lv_sens_mode_22 )
EndSub
Sub m_rgb_gritar_1
If lv_color_23 = 0 Then
Speaker.Play ( 100 , "WRO2025/Media/Zero" )
Elseif lv_color_23 = 1 Then
Speaker.Play ( 100 , "WRO2025/Media/Black" )
Elseif lv_color_23 = 2 Then
Speaker.Play ( 100 , "WRO2025/Media/BLUE" )
Elseif lv_color_23 = 3 Then
Speaker.Play ( 100 , "WRO2025/Media/GREEN" )
Elseif lv_color_23 = 4 Then
Speaker.Play ( 100 , "WRO2025/Media/YELLOW" )
Elseif lv_color_23 = 5 Then
Speaker.Play ( 100 , "WRO2025/Media/RED" )
Elseif lv_color_23 = 6 Then
Speaker.Play ( 100 , "WRO2025/Media/White" )
Elseif lv_color_23 = 7 Then
Speaker.Play ( 100 , "WRO2025/Media/Brown" )
EndIf
Speaker.Wait ()
EndSub
