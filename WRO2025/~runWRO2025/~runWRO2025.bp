pr_giro_g1 = 0
pr_rgb_valuenegro = 0
pr_rgb_valueblanco = 0
pr_rgb_rwhite = 0
pr_rgb_gwhite = 0
pr_rgb_bwhite = 0
pr_recto_diametro = 0
pr_giro_diametro = 0
pr_siguelineas_diametro = 0
pr_smart_diametro = 0
pr_siguelineas_negro1 = 0
pr_siguelineas_negro3 = 0
pr_siguelineas_negro4 = 0
pr_siguelineas_blanco1 = 0
pr_siguelineas_blanco3 = 0
pr_siguelineas_blanco4 = 0
pr_smart_negro1 = 0
pr_smart_negro3 = 0
pr_smart_negro4 = 0
pr_smart_blanco1 = 0
pr_smart_blanco3 = 0
pr_smart_blanco4 = 0
pr_recto_negro = 0
pr_recto_blanco = 0
pr_giro_negro = 0
pr_giro_blanco = 0
lv_velocidada_3 = 0
lv_velocidadd_3 = 0
lv_timer_3 = 0
lv_velocidad_5 = 0
lv_distancia_5 = 0
lv_velocidad_9 = 0
lv_encoder_9 = 0
lv_velocidad1_12 = 0
lv_velocidad2_12 = 0
lv_grados_12 = 0
lv_velocidad_6 = 0
lv_sensor_6 = 0
lv_velocidad_10 = 0
lv_velocidad_11 = 0
lv_encoder_11 = 0
lv_velocidad_7 = 0
lv_distancia_7 = 0
lv_sens_13 = 0
lv_reps_13 = 0
lv_color_13 = 0
lv_color_14 = 0
lv_velocidad_8 = 0
lv_tiempo_8 = 0
lv_velocidad_4 = 0
lv_encoder_4 = 0
gv_markinggrande = 0
gv_diametro = 0
gv_negro1 = 0
gv_negro3 = 0
gv_negro4 = 0
gv_blanco1 = 0
gv_blanco3 = 0
gv_blanco4 = 0
f_setup_0 ()
f_main_0 ()
Sub f_setup_0
Sensor.SetMode ( 1 , 0 )
Sensor.SetMode ( 2 , 4 )
Sensor.SetMode ( 3 , 0 )
Sensor.SetMode ( 4 , 0 )
gv_diametro = 6.24
pr_giro_g1 = 1065 / 360
gv_negro1 = 10
gv_negro3 = 8
gv_negro4 = 10
gv_blanco1 = 65
gv_blanco3 = 57
gv_blanco4 = 71
pr_rgb_valuenegro = 4
pr_rgb_valueblanco = 32
pr_rgb_rwhite = 57
pr_rgb_gwhite = 71
pr_rgb_bwhite = 73
pr_recto_diametro = gv_diametro
pr_giro_diametro = gv_diametro
pr_siguelineas_diametro = gv_diametro
pr_smart_diametro = gv_diametro
pr_siguelineas_negro1 = gv_negro1
pr_siguelineas_negro3 = gv_negro3
pr_siguelineas_negro4 = gv_negro4
pr_siguelineas_blanco1 = gv_blanco1
pr_siguelineas_blanco3 = gv_blanco3
pr_siguelineas_blanco4 = gv_blanco4
pr_smart_negro1 = gv_negro1
pr_smart_negro3 = gv_negro3
pr_smart_negro4 = gv_negro4
pr_smart_blanco1 = gv_blanco1
pr_smart_blanco3 = gv_blanco3
pr_smart_blanco4 = gv_blanco4
pr_recto_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_recto_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
pr_giro_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_giro_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
EndSub
Sub f_startarm_0
lv_velocidada_3 = - 50
lv_velocidadd_3 = 50
lv_timer_3 = 250
m_brazo_adtimer_3 ()
MotorA.ResetCount ()
MotorD.ResetCount ()
Speaker.Play ( 100 , "WRO2025/Media/Connect" )
Speaker.Wait ()
EndSub
Sub f_main_0
f_startarm_0 ()
f_s_0 ()
lv_velocidad_5 = 50
lv_distancia_5 = 10
m_recto_encoderf_2 ()
lv_velocidad_9 = 70
lv_encoder_9 = 20
m_siguelineas_encoder14_2 ()
lv_velocidad1_12 = 10
lv_velocidad2_12 = 40
lv_grados_12 = 60
m_giro_grados_3 ()
lv_velocidad1_12 = 40
lv_velocidad2_12 = 10
lv_grados_12 = 60
m_giro_grados_3 ()
lv_velocidad_5 = 50
lv_distancia_5 = 40
m_recto_encoderf_2 ()
lv_velocidad_6 = 70
lv_sensor_6 = 4
m_recto_negro1_2 ()
lv_velocidad1_12 = 40
lv_velocidad2_12 = - 20
lv_grados_12 = 90
m_giro_grados_3 ()
lv_velocidad_10 = 60
m_siguelineas_cruce14_1 ()
lv_velocidad1_12 = 70
lv_velocidad2_12 = - 62
lv_grados_12 = 175
m_giro_grados_3 ()
lv_velocidad_11 = 40
lv_encoder_11 = 48
m_siguelineas_encoder31_2 ()
lv_velocidad1_12 = - 30
lv_velocidad2_12 = 30
lv_grados_12 = 90
m_giro_grados_3 ()
lv_velocidad_7 = 60
lv_distancia_7 = 14
m_recto_encoder_2 ()
lv_velocidad1_12 = 30
lv_velocidad2_12 = - 30
lv_grados_12 = 90
m_giro_grados_3 ()
lv_sens_13 = 2
lv_reps_13 = 5
m_rgb_detect_3 ()
gv_markinggrande = lv_color_13
lv_color_14 = gv_markinggrande
m_rgb_gritar_1 ()
lv_velocidad1_12 = 40
lv_velocidad2_12 = 10
lv_grados_12 = 35
m_giro_grados_3 ()
lv_velocidad1_12 = 10
lv_velocidad2_12 = 40
lv_grados_12 = 35
m_giro_grados_3 ()
lv_velocidad_7 = 20
lv_distancia_7 = 15
m_recto_encoder_2 ()
lv_sens_13 = 2
lv_reps_13 = 5
m_rgb_detect_3 ()
gv_marking [ 0 ] = lv_color_13
lv_color_14 = gv_marking [ 0 ]
m_rgb_gritar_1 ()
lv_velocidad_8 = 20
lv_tiempo_8 = 700
m_recto_tiempo_2 ()
lv_sens_13 = 2
lv_reps_13 = 5
m_rgb_detect_3 ()
gv_marking [ 1 ] = lv_color_13
lv_color_14 = gv_marking [ 1 ]
m_rgb_gritar_1 ()
lv_velocidad_7 = - 30
lv_distancia_7 = 35
m_recto_encoder_2 ()
lv_velocidad1_12 = 30
lv_velocidad2_12 = - 30
lv_grados_12 = 90
m_giro_grados_3 ()
lv_velocidad_7 = 30
lv_distancia_7 = 10
m_recto_encoder_2 ()
lv_velocidad1_12 = 30
lv_velocidad2_12 = - 30
lv_grados_12 = 85
m_giro_grados_3 ()
lv_velocidad_7 = - 70
lv_distancia_7 = 30
m_recto_encoder_2 ()
lv_velocidad_8 = - 20
lv_tiempo_8 = 500
m_recto_tiempo_2 ()
lv_velocidad_7 = 20
lv_distancia_7 = 4
m_recto_encoder_2 ()
lv_sens_13 = 2
lv_reps_13 = 5
m_rgb_detect_3 ()
gv_marking [ 2 ] = lv_color_13
lv_color_14 = gv_marking [ 2 ]
m_rgb_gritar_1 ()
lv_velocidad_7 = 20
lv_distancia_7 = 10
m_recto_encoder_2 ()
lv_sens_13 = 2
lv_reps_13 = 5
m_rgb_detect_3 ()
gv_marking [ 2 ] = lv_color_13
lv_color_14 = gv_marking [ 2 ]
m_rgb_gritar_1 ()
EndSub
Sub f_s_0
Buttons.Flush ()
Buttons.Wait ()
EndSub
Sub m_brazo_adtimer_3
Time.Reset1 ()
While Time.Get1 () < lv_timer_3
MotorA.StartSpeed ( lv_velocidada_3 )
MotorD.StartSpeed ( lv_velocidadd_3 )
EndWhile
Motor.Stop ( "AD" , "True" )
EndSub
Sub m_brazo_aencoder_2
lv_encdiff_4 = lv_encoder_4 - Motor.GetCount ( "A" )
lv_signo_4 = lv_encdiff_4 / Math.Abs ( lv_encdiff_4 )
lv_safetytimer_4 = Math.Max ( ( ( Math.abs ( lv_encdiff_4 ) / 100 ) / ( lv_velocidad_4 / 20 ) * 650 * 2 ) , 400 )
Time.Reset3 ()
If lv_encdiff_4 <> 0 Then
While Math.Abs ( Motor.GetCount ( "A" ) - lv_encoder_4 ) > 25 and Time.Get3 () < 2000
MotorA.StartSpeed ( lv_signo_4 * lv_velocidad_4 )
EndWhile
Motor.Stop ( "A" , "True" )
EndIf
EndSub
Sub m_recto_encoderf_2
lv_correccion_5 = ( Math.abs ( lv_velocidad_5 ) - 20 ) * 0.05
lv_enc_5 = ( lv_distancia_5 - lv_correccion_5 ) * 360 / Math.Pi / pr_recto_diametro
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad_5 , lv_velocidad_5 , lv_enc_5 , "False" )
EndSub
Sub m_recto_negro1_2
lv_correccion_6 = 0
MotorBC.Off ()
lv_lectura_6 = 50
While lv_lectura_6 > 15
lv_lectura_6 = ( Sensor.ReadPercent ( lv_sensor_6 ) - pr_recto_negro ) / pr_recto_blanco * ( 100 - pr_recto_negro )
Motor.StartSync ( "BC" , - lv_velocidad_6 + lv_correccion_6 , lv_velocidad_6 + lv_correccion_6 )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_encoder_2
lv_correccion_7 = ( Math.abs ( lv_velocidad_7 ) - 20 ) * 0.05
lv_enc_7 = ( lv_distancia_7 - lv_correccion_7 ) * 360 / Math.Pi / pr_recto_diametro
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad_7 , lv_velocidad_7 , lv_enc_7 , "True" )
EndSub
Sub m_recto_tiempo_2
lv_correccion_8 = 0
Time.Reset3 ()
MotorBC.Off ()
While Time.Get3 () < lv_tiempo_8
Motor.StartSync ( "BC" , - lv_velocidad_8 + lv_correccion_8 , lv_velocidad_8 + lv_correccion_8 )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_encoder14_2
lv_velocidad_9 = lv_velocidad_9 * 1
lv_lectura1_9 = 50
lv_lectura3_9 = 50
lv_lectura4_9 = 50
lv_kp_9 = lv_velocidad_9 / 320
lv_kd_9 = lv_kp_9 * 28
lv_error_9 = 0
lv_olderror_9 = 0
lv_u_9 = 0
lv_sentido_9 = lv_velocidad_9 / Math.Abs ( lv_velocidad_9 )
lv_encoder_9 = lv_encoder_9 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_9 = MotorC.GetTacho ()
lv_encoderc_9 = 0
While Math.Abs ( lv_encoderc_9 ) < lv_encoder_9
lv_encoderc_9 = MotorC.GetTacho () - lv_startc_9
lv_lectura1_9 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura4_9 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_9 = ( lv_lectura1_9 - lv_lectura4_9 ) * lv_sentido_9 * 1
lv_u_9 = lv_error_9 * lv_kp_9 + ( lv_error_9 - lv_olderror_9 ) * lv_kd_9
Motor.StartSync ( "BC" , - ( lv_velocidad_9 + lv_u_9 ) , lv_velocidad_9 - lv_u_9 )
lv_olderror_9 = lv_error_9
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_cruce14_1
lv_velocidad_10 = lv_velocidad_10 * 1
lv_lectura1_10 = 50
lv_lectura3_10 = 50
lv_lectura4_10 = 50
lv_kp_10 = lv_velocidad_10 / 280
lv_kd_10 = lv_kp_10 * 32
lv_error_10 = 0
lv_olderror_10 = 0
lv_u_10 = 0
lv_sentido_10 = lv_velocidad_10 / Math.Abs ( lv_velocidad_10 )
While lv_lectura1_10 > 10 Or lv_lectura4_10 > 10
lv_lectura1_10 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura4_10 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_10 = ( lv_lectura1_10 - lv_lectura4_10 ) * lv_sentido_10 * 1
lv_u_10 = lv_error_10 * lv_kp_10 + ( lv_error_10 - lv_olderror_10 ) * lv_kd_10
Motor.StartSync ( "BC" , - ( lv_velocidad_10 + lv_u_10 ) , lv_velocidad_10 - lv_u_10 )
lv_olderror_10 = lv_error_10
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_encoder31_2
lv_velocidad_11 = lv_velocidad_11 * 1
lv_lectura1_11 = 50
lv_lectura3_11 = 50
lv_lectura4_11 = 50
lv_kp_11 = lv_velocidad_11 / 280
lv_kd_11 = lv_kp_11 * 32
lv_error_11 = 0
lv_olderror_11 = 0
lv_u_11 = 0
lv_sentido_11 = lv_velocidad_11 / Math.Abs ( lv_velocidad_11 )
lv_encoder_11 = lv_encoder_11 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_11 = MotorC.GetTacho ()
lv_encoderc_11 = 0
While Math.Abs ( lv_encoderc_11 ) < lv_encoder_11
lv_encoderc_11 = MotorC.GetTacho () - lv_startc_11
lv_lectura1_11 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_11 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_error_11 = ( lv_lectura3_11 - lv_lectura1_11 ) * lv_sentido_11 * 1
lv_u_11 = lv_error_11 * lv_kp_11 + ( lv_error_11 - lv_olderror_11 ) * lv_kd_11
Motor.StartSync ( "BC" , - ( lv_velocidad_11 + lv_u_11 ) , lv_velocidad_11 - lv_u_11 )
lv_olderror_11 = lv_error_11
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_giro_grados_3
lv_signo_12 = ( lv_velocidad1_12 / lv_velocidad2_12 ) / Math.Abs ( lv_velocidad1_12 / lv_velocidad2_12 )
lv_vmin_12 = Math.Min ( Math.Abs ( lv_velocidad1_12 ) , Math.Abs ( lv_velocidad2_12 ) )
lv_vmax_12 = Math.Max ( Math.Abs ( lv_velocidad1_12 ) , Math.Abs ( lv_velocidad2_12 ) )
lv_encoder_12 = lv_grados_12 * pr_giro_g1 * ( - 2 / ( lv_signo_12 * lv_vmin_12 / lv_vmax_12 - 1 ) )
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad1_12 , lv_velocidad2_12 , lv_encoder_12 , "True" )
lv_velocidad1_12 = 0
lv_velocidad2_12 = 0
lv_grados_12 = 0
Program.Delay ( 100 )
EndSub
Sub m_rgb_detect_3
lv_sens_mode_13 = Sensor.GetMode ( lv_sens_13 )
Sensor.SetMode ( lv_sens_13 , 4 )
lv_red_13 = 15
lv_yellow_13 = 60
lv_green_13 = 170
lv_blue_13 = 330
lv_hue_13 = 0
lv_sat_13 = 0
lv_value_13 = 0
lv_color_13 = 0
lv_rnormarray_13 [ 0 ] = 0
lv_gnormarray_13 [ 0 ] = 0
lv_bnormarray_13 [ 0 ] = 0
LCD.Clear ()
For lv_j_13 = 1 To lv_reps_13 Step 1
lv_rgb_13 = Sensor.ReadRaw ( lv_sens_13 , 3 )
lv_rraw_13 = lv_rgb_13 [ 0 ]
lv_graw_13 = lv_rgb_13 [ 1 ]
lv_braw_13 = lv_rgb_13 [ 2 ]
lv_rnormarray_13 [ lv_j_13 ] = Math.Round ( lv_rraw_13 / pr_rgb_rwhite * 255 )
lv_gnormarray_13 [ lv_j_13 ] = Math.Round ( lv_graw_13 / pr_rgb_gwhite * 255 )
lv_bnormarray_13 [ lv_j_13 ] = Math.Round ( lv_braw_13 / pr_rgb_bwhite * 255 )
Program.Delay ( 5 )
EndFor
For lv_j_13 = 1 To lv_reps_13 Step 2
lv_rnorm_13 = lv_rnormarray_13 [ lv_j_13 ] + lv_rnormarray_13 [ lv_j_13 + 1 ]
lv_gnorm_13 = lv_gnormarray_13 [ lv_j_13 ] + lv_gnormarray_13 [ lv_j_13 + 1 ]
lv_bnorm_13 = lv_bnormarray_13 [ lv_j_13 ] + lv_bnormarray_13 [ lv_j_13 + 1 ]
EndFor
lv_rnorm_13 = lv_rnorm_13 / lv_reps_13
lv_gnorm_13 = lv_gnorm_13 / lv_reps_13
lv_bnorm_13 = lv_bnorm_13 / lv_reps_13
lv_max_13 = Math.Max ( Math.Max ( lv_rnorm_13 , lv_gnorm_13 ) , lv_bnorm_13 )
lv_min_13 = Math.Min ( Math.Min ( lv_rnorm_13 , lv_gnorm_13 ) , lv_bnorm_13 )
If lv_max_13 = lv_min_13 Then
lv_hue_13 = 0
Elseif lv_max_13 = lv_rnorm_13 Then
If lv_gnorm_13 >= lv_bnorm_13 Then
lv_hue_13 = 60 * ( lv_gnorm_13 - lv_bnorm_13 ) / ( lv_max_13 - lv_min_13 )
Else
lv_hue_13 = 60 * ( lv_gnorm_13 - lv_bnorm_13 ) / ( lv_max_13 - lv_min_13 ) + 360
EndIf
Elseif lv_max_13 = lv_gnorm_13 Then
lv_hue_13 = 60 * ( lv_bnorm_13 - lv_rnorm_13 ) / ( lv_max_13 - lv_min_13 ) + 120
Else
lv_hue_13 = 60 * ( lv_rnorm_13 - lv_gnorm_13 ) / ( lv_max_13 - lv_min_13 ) + 240
EndIf
If lv_max_13 = 0 Then
lv_sat_13 = 0
Else
lv_sat_13 = 1 - lv_min_13 / lv_max_13
EndIf
lv_value_13 = lv_max_13
lv_rgbgrey_13 = ( pr_rgb_valueblanco + pr_rgb_valuenegro ) / 2
If lv_rraw_13 + lv_graw_13 + lv_braw_13 <= 3 Then
lv_color_13 = 0
Else
If lv_sat_13 < 0.3 Then
If lv_value_13 > lv_rgbgrey_13 Then
lv_color_13 = 6
Else
lv_color_13 = 1
EndIf
Else
If lv_hue_13 >= 0 And lv_hue_13 < lv_red_13 Then
lv_color_13 = 5
Elseif lv_hue_13 >= lv_red_13 And lv_hue_13 < lv_yellow_13 Then
lv_color_13 = 4
Elseif lv_hue_13 >= lv_yellow_13 And lv_hue_13 < lv_green_13 Then
lv_color_13 = 3
Elseif lv_hue_13 >= lv_green_13 And lv_hue_13 < lv_blue_13 Then
lv_color_13 = 2
Else
lv_color_13 = 5
EndIf
EndIf
EndIf
LCD.StopUpdate ()
LCD.Clear ()
LCD.Write ( 33 , 20 , "R: " + lv_rraw_13 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_13 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_13 )
LCD.Write ( 33 , 70 , "color: " + lv_color_13 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_13 )
LCD.Update ()
Sensor.SetMode ( lv_sens_13 , lv_sens_mode_13 )
EndSub
Sub m_rgb_gritar_1
If lv_color_14 = 0 Then
Speaker.Play ( 100 , "WRO2025/Media/Zero" )
Elseif lv_color_14 = 1 Then
Speaker.Play ( 100 , "WRO2025/Media/Black" )
Elseif lv_color_14 = 2 Then
Speaker.Play ( 100 , "WRO2025/Media/BLUE" )
Elseif lv_color_14 = 3 Then
Speaker.Play ( 100 , "WRO2025/Media/GREEN" )
Elseif lv_color_14 = 4 Then
Speaker.Play ( 100 , "WRO2025/Media/YELLOW" )
Elseif lv_color_14 = 5 Then
Speaker.Play ( 100 , "WRO2025/Media/RED" )
Elseif lv_color_14 = 6 Then
Speaker.Play ( 100 , "WRO2025/Media/White" )
Elseif lv_color_14 = 7 Then
Speaker.Play ( 100 , "WRO2025/Media/Brown" )
EndIf
Speaker.Wait ()
EndSub
