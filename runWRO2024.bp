folder "prjs""WRO2024"

import "modules/Siguelineas"
import "modules/Giro"
import "modules/Recto"
import "modules/Shift"
import "modules/Brazo"
import "modules/Smart"
import "modules/RGB"

encoderA = 0
encoderD = 0

errorA = 0
olderrorA = 0

errorD = 0
olderrorD = 0

Sub Setup
  
  Sensor.SetMode(1,0)
  Sensor.SetMode(2,3)
  Sensor.SetMode(3,0)
  Sensor.SetMode(4,0)
  
  diametro = 6.24
  
  Giro.G1 = 965/360
  
  negro1 = 10
  negro3 = 10
  negro4 = 8
  
  blanco1 = 76
  blanco3 = 76
  blanco4 = 61
  
  RGB.VALUENEGRO = 10
  RGB.VALUEBLANCO = 100
  
  'Auto definición de propiedades
  
  Recto.diametro = diametro
  Giro.diametro = diametro
  Siguelineas.diametro = diametro
  Smart.diametro = diametro
  
  Siguelineas.negro1 = negro1
  Siguelineas.negro3 = negro3
  Siguelineas.negro4 = negro4
  
  Siguelineas.blanco1 = blanco1
  Siguelineas.blanco3 = blanco3
  Siguelineas.blanco4 = blanco4
  
  Smart.negro1 = negro1
  Smart.negro3 = negro3
  Smart.negro4 = negro4
  
  Smart.blanco1 = blanco1
  Smart.blanco3 = blanco3
  Smart.blanco4 = blanco4
  
  Recto.negro = (negro1+negro3+negro4)/3
  Recto.blanco = (blanco1+blanco3+blanco4)/3
  
  Giro.negro = (negro1+negro3+negro4)/3
  Giro.blanco = (blanco1+blanco3+blanco4)/3
  
EndSub

Sub StartArm
  Brazo.DTimer(-50,800)
  AEncoder(50,-800)
  encoderA = 0
  'encoderD = 0
  MotorA.ResetCount()
  MotorD.ResetCount()
  AEncoder(50,650)
  MotorA.ResetCount()
  MotorD.ResetCount()
  encoderA = 0
  'encoderD = 0
  Brazo.DEncoder(50,80)
  
EndSub

Setup()
Thread.Run = ControlBrazo
MainPrueba()

Sub Main
  
  StartArm()
  Recto.Tiempo(-80,800)
  Recto.Encoder(20,2.5)
  Brazo.DEncoder(50,320)
  Giro.Grados(60,-14,88)
  
  Recto.AccelDecel(15,30,3.5,0,3)
  
  Brazo.DEncoder(50,-20)
  AEncoder(50,-200)
  
  Coger()
  
  Recto.Encoder(-20,9.5)
  Brazo.DEncoder(60,200)
  Giro.Grados(-80,0,100)
  
  Recto.Tiempo(-80,300)
  
  'Cuadra con pared para irse a por la segunda fila
  
  Recto.AccelDecelF(15,89,10,0,0)
  Recto.EncoderF(89,52)
  Recto.Blanco1F(50,3)
  
  'llega a línea
  
  Giro.Grados(45,-12,95)
  
  Time.Reset1()
  
  Smart.Encoder31F(80,8)
  Siguelineas.Cruce_ExternoF(80,4)
  
  tiempoHastaCruce = Time.Get1()
  
  If tiempoHastaCruce > 600 Then 'Calcular tiempo en ambos cruces
    'Caso VOX
    
    Siguelineas.Encoder31F(80,16)
    
    Recto.EncoderF(80,15)
    Recto.Decel(80,15,7,0)
    
    Giro.Grados(60,-55,90)
    
    Recto.AccelDecel(-10,-80,3,20,3)
    Recto.Tiempo(-20,800)
    Recto.Encoder(20,2.5)
    
    Brazo.DEncoder(50,100)
    
    Giro.Grados(60,-24,87)
    Brazo.DEncoder(50,350)
    Recto.Color1(20,4,5)
    
    Recto.Encoder(25,3)
    
    AEncoder(50,0)
    Brazo.DEncoder(50,0)
    AEncoder(50,-150)
    
    For i = 0 To 2
      Coger()
    EndFor
    
    'Giro abierto y lanzamiento a por los dos ultimos amarillos
    
    Giro.Grados(40,65,98)
    
    Recto.AccelDecelF(15,89,8,0,0)
    Recto.Encoder(89,30)
    
    Giro.Grados(-50,50,190)
    
    Recto.AccelDecelF(-15,65,8,5,0)
    
    Recto.Tiempo(-45,600)
    
    'Sale de pared
    
    Giro.Grados(50,-8,100)
    
    Brazo.DEncoder(50,400)
    
    Recto.EncoderF(40,4)
    Recto.Color1(30,4,5)
    Speaker.Play(100,"Connect")
    Speaker.Wait()
    Program.Delay(1000)
    Recto.AccelDecel(15,30,3,0,0)
    
    Brazo.DEncoder(50,-20)
    AEncoder(50,-200)
    
    Coger()
    
    Giro.Grados(10,50,120)
    
    Recto.Encoder(60,45)
    
    Soltar(4,0)
    
  Else
    'Caso PSOE
    
    'Gira Derecha
    'Deja Rojos
    'Gira Izquierda
    'Deja Amarillos
    'Vuelve a rojos
    'Deja rojos
  EndIf
  
EndSub

Sub MainPrueba
  
  AEncoder(40,-100)
  Brazo.DEncoder(70,100)
    Giro.Grados(8,50,100)
    
    Siguelineas.Encoder14(30,15)
    
    'Soltar(4,0)
  
EndSub

Sub ControlBrazo
  
  While "True"
    errorA = encoderA - MotorA.GetTacho()
    'errorD = encoderD - MotorD.GetTacho()
    correccionA = errorA * 1 + (errorA - olderrorA) * 0.6
    'correccionD = errorD * 1 + (errorD - olderrorD) * 0.3
    MotorA.StartSpeed(correccionA)
    'MotorD.StartSpeed(correccionD)
  EndWhile
  
EndSub

Sub Display
  While "True"
    LCD.StopUpdate()
    LCD.Clear()
    LCD.Write(5,5,"Encoder B: "+ MotorB.GetTacho()*-1)
    LCD.Write(5,15,"Encoder C: "+ MotorC.GetTacho())
    LCD.Write(5,30,"Diferencia: "+ (MotorB.GetTacho()*-1 -MotorC.GetTacho()))
    LCD.Update()
    Program.Delay(100)
  EndWhile
EndSub

Function Coger()
  Brazo.DEncoder(50,350)
  
  Recto.AccelDecel(15,30,5,0,5)
  Brazo.DEncoder(50,240)
  AEncoder(50,0)
  
  Brazo.DEncoder(50,-10)
  
  AEncoder(50,-180)
  
  Brazo.DEncoder(50,100)
  
EndFunction

Function Soltar(in number bloques, in number altura)
  
  altura --
  bloques --
  
  Brazo.DEncoder(50,Math.Max(320*(altura),0))
  Program.Delay(1000)
  AEncoder(50,0)
  Brazo.DEncoder(50,320*(bloques+altura-1))
  Program.Delay(1000)
  AEncoder(50,-250)
  
  Brazo.DEncoder(50,MotorD.GetTacho()+200)
  Recto.AccelDecel(-15,30,5,0,5)
  
  Brazo.DEncoder(50,50)
EndFunction

Function AEncoder(in number Velocidad, in number Encoder)
  
  encDiff = Encoder - MotorA.GetTacho()
  
  signo = Math.Abs(encDiff)/encDiff
  
  safetyTimer = 1200
  Time.Reset3()
  
  ' Solo ejecuta el movimiento si hay diferencia en el encoder
  If encDiff <> 0 Then
    
    While Math.Abs(MotorA.GetTacho() - Encoder) > 15 And Time.Get3() < safetyTimer
      
      ' Ajuste del encoder actual con control de velocidad
      @encoderA = @encoderA + (Velocidad / 15.5 * signo)
      
      ' Límite para evitar sobrepasar el encoder objetivo
      If signo > 0 Then
        @encoderA = Math.Min(@encoderA, Encoder)
      Else
        @encoderA = Math.Max(@encoderA, Encoder)
      EndIf
      
    EndWhile
    
    ' Asegura que el valor final del encoder sea el exacto
    @encoderA = Encoder
    MotorA.OffAndBrake()
    
  EndIf
  
EndFunction

Function DEncoder(in number Velocidad, in number Encoder)
  
  encDiff = Encoder - MotorD.GetTacho()
  
  signo = Math.Abs(encDiff)/encDiff
  
  safetyTimer = 2400
  Time.Reset4()
  
  ' Solo ejecuta el movimiento si hay diferencia en el encoder
  If encDiff <> 0 Then
    
    While (Math.Abs(MotorD.GetTacho() - Encoder) > 15) And Time.Get3() < safetyTimer
      
      ' Ajuste del encoder actual con control de velocidad
      @encoderD =  @encoderD + (Velocidad / 15.5 * signo)
      
      ' Límite para evitar sobrepasar el encoder objetivo
      If signo > 0 Then
        @encoderD = Math.Min(@encoderD, Encoder)
      Else
        @encoderD = Math.Max(@encoderD, Encoder)
      EndIf
      
    EndWhile
    
    ' Asegura que el valor final del encoder sea el exacto
    @encoderD = Encoder
    MotorD.OffAndBrake()
    
  EndIf
EndFunction
