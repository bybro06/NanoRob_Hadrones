Velocidad = 100

kp = 0.2
ki = 0.0003
kd = 7

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Diameter = 56

centro = 0

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
include "includes\MRU_MotMed"

include "includes\Giro_MotMed"
include "includes\GirosPerfectos_MotMed"
include "includes\GirosUniversales_MotMed"

include "includes\Aceleracion_MotMed"
include "includes\Deceleracion_MotMed"

include "includes\Siguelineas_MotMed"
include "includes\Siguelineas_MotMed_Smart"

include "includes\Brazo"

include "includes\RGBRead"

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Setup()
'Thread.Run = Display
Thread.Run = Stop
'StartArm()
'Program.End()
MainPrueba()

Sub Setup
  Sensor.SetMode(1,0)
  Sensor.SetMode(2,4)
  Sensor.SetMode(3,0)
  Sensor.SetMode(4,0)
EndSub

Sub StartArm
  
  Time.Reset1()
  While Time.Get1() < 700
    MotorA.StartSpeed(40)
  EndWhile
  MotorA.OffAndBrake()

  Program.Delay(100)

  Motor.Move("A",-50,350,"True")
  
  MotorA.ResetCount()
  MotorD.ResetCount()
  Program.Delay(100)
EndSub

'Subs de control paralelo

Sub Display
  old_B = 0
  old_C = 0
  While "True"
    LCD.StopUpdate()
    LCD.Clear()
    
    LCD.Write(5,35,"centro: "+centro)
    
    
    LCD.Write(5,45,"Velocidad de B:  "+MotorB.GetSpeed()*-1)
    LCD.Write(5,55,"Velocidad de C:  "+MotorC.GetSpeed())
    
    LCD.Write(5,65,"rad/s de B:  "+Math.GetRadians(MotorB.GetTacho()-old_B)/0.05*-1)
    LCD.Write(5,75,"rad/s de C:  "+Math.GetRadians(MotorC.GetTacho()-old_C)/0.05)
    
    LCD.Write(5,85,"Encoder de B:  "+MotorB.GetTacho()*-1)
    LCD.Write(5,95,"Encoder de C:  "+MotorC.GetTacho())
    
    LCD.Update()
    Program.Delay(50)
    old_B = MotorB.GetTacho()
    old_C = MotorC.GetTacho()
  EndWhile
EndSub

'Subs a ejecutar
Sub Main
EndSub

Sub MainPrueba
  
  rojos = 0
  amarillos = 0
  verdes = 0
  azules = 0
  
  StartArm()
  'While Buttons.Current <> "U"
    'If Buttons.Current <> "" Then
      'Coger()
    'EndIf
  'EndWhile
  'Soltar()
  'Program.End()
  GUnivEncMM(0,30,62)
  GUnivEncMM(30,0,62)
  SL14PIDEnc(30,kp,ki,kd,16.5)
  'Ataca al 1º rojo
  GUnivEncMM(30,-30,92)
  EncoderRectoMM(30,4.5)
  Coger()
  'Ataca al 2º rojo
  EncoderRectoMM(-30,7.5)
  GUnivEncMM(-30,30,89)
  
  SL14PIDEnc(30,kp*0.5,ki,kd*0.5,8.5)
  GUnivEncMM(30,-30,93)
  EncoderRectoMM(30,5)
  Coger()
  BMoveA(Velocidad*0.4,-110)

  'Vuelve a linea tras los 2 rojos (Comprueba)
  EncoderRectoMM(-30,9)
  GUnivEncMM(-30,30,92)
  EncoderRectoMM(-40,22)
 
  
  'Verificamos el lado
  SL14PIDEncF(30,kp*1.5,ki,kd,5)
  Time.Reset4()
  SL1SPIDCross(30,kp,ki,kd,3)
  Tiempohastalinea = Time.Get4()
  'Muestra pantalla
  LCD.Clear()
  LCD.Write(5,5,Tiempohastalinea)
  If Tiempohastalinea<1400 Then
    CasoPSOE()
    FinPrueba()
  Else
    CasoVOX()
    FinPrueba()
  EndIf
  
EndSub

Sub MainControlBrazo
  angle_A = 0
  angle_D = 0  
  
  While "True"
    If Buttons.Current = "U" Then
      MotorA.StartSpeed(30)
    ElseIf Buttons.Current = "D" Then
      MotorA.StartSpeed(-30)
    ElseIf Buttons.Current = "L" Then
      MotorD.StartSpeed(30)
    ElseIf Buttons.Current = "R" Then
      MotorD.StartSpeed(-30)
    Else
      MotorAD.OffAndBrake()
    EndIf
  EndWhile
EndSub

Sub MainControlRuedas
  vel_B = 92
  vel_C = 92
  
  While "True"
    If Buttons.Current = "U" Then
      vel_B -= 0.5
      Program.Delay(1)
    ElseIf Buttons.Current = "D" Then
      vel_B += 0.5
      Program.Delay(1)
    ElseIf Buttons.Current = "L" Then
      vel_C += 1
      Program.Delay(1)
    ElseIf Buttons.Current = "R" Then
      vel_C -= 1
      Program.Delay(1)
    EndIf
    Motor.StartSync("BC",-vel_B,-vel_C)
  EndWhile
EndSub


Sub CasoPSOE
  'Sube hacia los dos rojos
  EncoderRectoMM(30,3)
  GUnivEncMM(-30,30,94)
  SL14PID(40,kp,ki,kd)
  'EncoderRectoMM(30,2)
  GUnivEncMM(20,-20,95)
  SL31PIDEnc(30,kp,ki,kd*1.5,27)
  'Ataca al 3º rojo
  GUnivEncMM(-20,20,90)
  EncoderRectoMM(30,7)
  Coger()
  
  
  'Ataca al 4º rojo
  EncoderRectoMM(-30,7)
  GUnivEncMM(-20,20,92)
  SL14PIDEnc(30,kp,ki,kd,7.5)
  GUnivEncMM(20,-20,93)
  EncoderRectoMM(20,5)
  Coger()
  EncoderRectoMM(-30,6)
  'Dejamos los rojos
  GUnivEncMM(-20,20,93)
  SL14PIDEncF(30,kp,ki,kd,5)
  SL1SPIDCrossF(30,kp,ki,kd,3)
  SL14PIDEnc(30,kp,ki,kd,25)
  
  'Levantamos bracete
  GUnivEncMM(Velocidad*-0.2,Velocidad*0.2,93)  
  EncoderRectoMM(Velocidad*0.3,13)
  Soltar()
  EncoderRectoMM(Velocidad*-0.3,3)
  GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,92)
  'Atacamos amarillos
  SL31PIDEncF(Velocidad*0.3,kp*1.5,ki,kd,5)
  SL1SPIDCrossF(Velocidad*0.3,kp,ki,kd,4)
  EncoderRectoMM(Velocidad*0.3,1)
  GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,93)
  EncoderRectoMM(Velocidad*0.3,7)
  Coger()
  EncoderRectoMM(-30,8)
  GUnivEncMM(30,-30,95)
  SL31PIDEnc(15,kp,ki,kd,8.5)
  GUnivEncMM(-30,30,93)
  EncoderRectoMM(30,7)
  Coger()
  EncoderRectoMM(-30,6)
  
  GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,92)
  SL14PIDEncF(Velocidad*0.3,kp*1.5,ki,kd,3)
  SL1SPIDCrossF(Velocidad*0.3,kp,ki,kd,3)
  EncoderRectoMM(Velocidad*0.3,2)
  
  GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,92)
  SL14PIDEnc(Velocidad*0.3,kp*1.5,ki,kd,20)
  EncoderRectoMM(Velocidad*0.3,15)
  SL14PID(Velocidad*0.3,kp*1.5,ki,kd)
  EncoderRectoMM(Velocidad*0.3,4)
  GUnivEncMM(Velocidad*-0.3,Velocidad*0.3,93)
  SL14PIDEnc(Velocidad*0.3,kp,ki,kd,8)
  'Ataca al 3º amarillo
  GUnivEncMM(30,-30,95)
  EncoderRectoMM(30,4.5)
  Coger()
  'Ataca al 4º amarillo
  EncoderRectoMM(-30,7)
  GUnivEncMM(-20,20,92)
  SL14PIDEnc(30,kp,ki,kd,9)
  GUnivEncMM(20,-20,91)
  EncoderRectoMM(30,5)
  Coger()
  EncoderRectoMM(-30,9)
  GUnivEncMM(Velocidad*0.2,Velocidad*-0.2,93)
  SL1SPIDCross(Velocidad*0.3,kp,ki,kd,4)
  EncoderRectoMM(Velocidad*0.3,3)
  GUnivEncMM(Velocidad*0.3,Velocidad*-0.3,94)
  SL14PIDEnc(Velocidad*0.3,kp,ki,kd,10)
  Soltar()
  

  
  '1BlancoRectoMM(-30,1)
  'GUnivEncMM(30,-30,94)
  'EncoderRectoMM(30,5)
  ''Ataca al 1º amarillo
  'SL14PID(30,kp,ki,kd)
  'EncoderRectoMM(30,11)
  'Program.Delay(500)
  ''Ataca al 2º amarillo
  'EncoderRectoMM(30,11)
  'GUnivEncMM(30,-30,93)
  'SL14PIDEnc(30,kp,ki,kd,11)
  'GUnivEncMM(-30,30,93)
  'EncoderRectoMM(30,6)
  'Program.Delay(500)
 
  
  
  
  
EndSub

Sub CasoVOX
  
EndSub

Sub Stop
  While "True"
    if Buttons.Current = "E" Then
      MotorBC.OffAndBrake()
      MotorAD.OffAndBrake()
      BMoveADSafe(20,0)
      Program.End()
    EndIf
  EndWhile
EndSub

Sub FinPrueba
  MotorBC.OffAndBrake()
  MotorAD.OffAndBrake()
  BMoveASafe(20,0)
  BMoveDSafe(20,0)
  Program.End()
EndSub

Function Coger()
  
  
  'Suelta bloques anteriores y Coge el bloque nuevo
  
  Program.Delay(150)
  BMoveA(60,20)
  BMoveD(40,70)
  BMoveA(60,270)
  BMoveDTimer(40,500)
  BMoveA(60,-80)
  
EndFunction

Function Soltar()
  
  'EncoderRectoMM(-30,5)
  
  BMoveA(60,250)
  BMoveD(40,70)
  
  BMoveA(60,-660)
  EncoderRectoMM(-30,10)
  
  BMoveA(60,0)
  
EndFunction


Function Lectura(out number read)
  BmoveA(15,-690)
  RGBDetect2(5,read)
  LeerColor(read)
  BmoveA(15,-200)
EndFunction
