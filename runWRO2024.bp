folder "prjs""WRO2024"

import "modules/Siguelineas"
import "modules/Giro"
import "modules/Recto"
import "modules/Shift"
import "modules/Brazo"
import "modules/Smart"
import "modules/RGB"

encoderA = 0
encoderD = 0

errorA = 0
olderrorA = 0

errorD = 0
olderrorD = 0

Sub Setup
  
  Sensor.SetMode(1,0)
  Sensor.SetMode(2,2)
  Sensor.SetMode(3,0)
  Sensor.SetMode(4,0)
  
  diametro = 6.24
  
  '965
  Giro.G1 = 1025/360
  
  negro1 = 10
  negro3 = 10
  negro4 = 8
  
  blanco1 = 76
  blanco3 = 76
  blanco4 = 61
  
  RGB.VALUENEGRO = 4
  RGB.VALUEBLANCO = 52
  
  'Auto definición de propiedades
  
  Recto.diametro = diametro
  Giro.diametro = diametro
  Siguelineas.diametro = diametro
  Smart.diametro = diametro
  
  Siguelineas.negro1 = negro1
  Siguelineas.negro3 = negro3
  Siguelineas.negro4 = negro4
  
  Siguelineas.blanco1 = blanco1
  Siguelineas.blanco3 = blanco3
  Siguelineas.blanco4 = blanco4
  
  Smart.negro1 = negro1
  Smart.negro3 = negro3
  Smart.negro4 = negro4
  
  Smart.blanco1 = blanco1
  Smart.blanco3 = blanco3
  Smart.blanco4 = blanco4
  
  Recto.negro = (negro1+negro3+negro4)/3
  Recto.blanco = (blanco1+blanco3+blanco4)/3
  
  Giro.negro = (negro1+negro3+negro4)/3
  Giro.blanco = (blanco1+blanco3+blanco4)/3
  
EndSub

Sub StartArm
  Brazo.DTimer(-50,800)
  AEncoder(50,-1300)
  encoderA = 0
  'encoderD = 0
  MotorA.ResetCount()
  MotorD.ResetCount()
  AEncoder(50,650)
  MotorA.ResetCount()
  MotorD.ResetCount()
  encoderA = 0
  'encoderD = 0
  Brazo.DEncoder(50,80)
  
EndSub

Setup()
Thread.Run = ControlBrazo
Main()

Sub Main
  
  StartArm()
  Recto.Tiempo(-80,600)
  Recto.Encoder(55,2)
  Brazo.DEncoder(50,320)
  Giro.Grados(70,-21,98)
  
  Recto.AccelDecel(15,30,3.5,0,3.5)
  
  Brazo.DEncoder(50,-20)
  AEncoder(50,-200)
  
  Coger()
  
  Recto.Encoder(-20,14.5)
  Brazo.DEncoder(60,200)
  Giro.Grados(-80,40,105)
  
  Giro.Tiempo(-80,-20,800)
  
  'Cuadra con pared para irse a por la segunda fila
  
  Recto.AccelDecelF(15,89,10,0,0)
  Recto.EncoderF(89,52)
  Recto.Blanco1F(50,3)
  
  'llega a línea
  
  Giro.Grados(45,-18,95)
  
  Time.Reset1()
  
  Smart.Encoder31F(80,8)
  Siguelineas.Cruce_ExternoF(80,4)
  
  tiempoHastaCruce = Time.Get1()
  
  If tiempoHastaCruce > 1800 Then 'Calcular tiempo en ambos cruces
    'Caso VOX
    
    Siguelineas.Encoder31F(80,5) 'llegar hasta salida opuesta
    
    Recto.Encoder(80,23)
    Giro.Grados(30,-27,90)
    
    Recto.EncoderF(50,16)
    Giro.EncoderF(45,50,20)
    Giro.Encoder(50,43,38)
    
    Giro.EncoderF(-86,-75,56)
    
    Recto.Tiempo(-50,1500)
    Recto.Encoder(50,3)
    
    Giro.Grados(-60,60,95)
    Recto.EncoderF(70,30)
    
    Brazo.DEncoder(50,650)
    Recto.Encoder(-60,10)
    Giro.GradosF(50,-50, 190)
    Recto.Color1(30,3,5)
    Recto.Encoder(55,20)
    Recto.Color1(30,3,5)
    Recto.Encoder(30,2)
    
    Brazo.DEncoder(50,260)
    AEncoder(50,0)
    Brazo.DEncoder(50,-10)
    AEncoder(50,-150)
    
    'Coge los otros 3 bloques
    
    For i = 0 To 2
      Coger()
    EndFor
    
    'Giro abierto y lanzamiento a por los dos ultimos amarillos
    
    Giro.Grados(52.75,81.25,90)
    
    Recto.AccelDecelF(15,89,8,0,0)
    Recto.Encoder(89,28)
    
    'Gira 180 para cudrar de espaldas
    
    Giro.Grados(-40,40,225)
    
    Recto.Tiempo(-65,800)
    
    'Sale de pared
    
    Recto.Encoder(20,3)
    
    Giro.Grados(50,-18,115)
    
    Brazo.DEncoder(50,400)
    
    'Anda hasta primer cuadrado rojo
    
    Giro.EncoderF(30,25,8)
    Giro.Color1(23,20,4,5)
    Thread.Run = Detecta
    
    Brazo.DEncoder(50,350)
    Recto.AccelDecel(15,30,11.5,0,0)
    
    'Coge 3er amarillo
    
    Brazo.DEncoder(50,240)
    AEncoder(50,0)
    
    Brazo.DEncoder(50,-10)
    
    AEncoder(50,-150)
    
    Brazo.DEncoder(50,350)
    
    'Coge 4º amarillo
    
    Coger()
    
    Recto.Encoder (-60,12)
    'Gira a línea
    
    Giro.Grados(14,50,98)
    
    Recto.Encoder(60,13.5)
    
    Soltar(4)
    
    Giro.Grados(0,-60,90)
    
    Recto.Encoder(50,27)
    
    Giro.Grados(-30,30,96)
    
    Recto.Encoder(50,16)
    
    Soltar(4)
    
    Giro.Grados(-60,10,98)
    
  Else
    'Caso PSOE
    
    Siguelineas.Encoder31F(85,30)
    Recto.Encoder(50,17)
    
    Giro.Grados(50,-10,110)
    
    Recto.Encoder(80,25)
    
    Giro.TiempoF(-82,-80,1200)
    Recto.Tiempo(-35,400)
    
    'Sale de pared
    
    Giro.Grados(50,-18,100)
    
    Brazo.DEncoder(50,400)
    'Anda hasta primer cuadrado rojo
    
    Recto.Color1F(20,4,5)
    Recto.Encoder(20,2)
    Brazo.DEncoder(50,260)
    AEncoder(50,0)
    Brazo.DEncoder(50,-10)
    AEncoder(50,-150)
    
    'Coge los otros 3 bloques
    
    For i = 0 To 2
      Coger()
    EndFor
    
    'Apunta a basura
    Giro.Grados(0,60,38)
    Recto.Encoder(80,110)
    Giro.Grados(30,10,20)
    
    'Sube brazo y gira dejando basuras
    Brazo.DEncoder(50,700)
    Giro.Grados(-20,-60,130)
    
    'Cuadra con pared
    Brazo.DEncoder(50,50)

    Recto.Tiempo(-70,500)
    
    'Gira hacia los últimos amarillos
    'Sale de pared
    
    Recto.Encoder(50,4)
    Brazo.DEncoder(50,350)
    Giro.Tiempo(50,-15,1200)
    
    'Anda hasta primer cuadrado rojo
    
    Giro.EncoderF(30,27,7)
    Giro.Color1(30,20,4,5)
    Thread.Run = Detecta
    
    Brazo.DEncoder(50,350)
    Recto.AccelDecel(15,30,8,0,0)
    Giro.EncoderF(30,27,16)
    
    'Coge 3er amarillo
    
    Brazo.DEncoder(50,240)
    AEncoder(50,0)
    
    Brazo.DEncoder(50,-10)
    
    AEncoder(50,-150)
    
    Brazo.DEncoder(50,350)
    
    'Coge 4º amarillo
    
    Coger()
    
    Brazo.DEncoder(50,10)
    Giro.Encoder(-30,-35,20.5)
    
    'Gira hacia amarillo
    Giro.Grados(-10,40,105)
    Recto.Tiempo(-30,800)
    Giro.Encoder(49,50,39)
    
    Soltar(4)
    
    Giro.Encoder(-40,-5,7)
    Giro.Grados(-35,35,43)
    
    Recto.Encoder(50,12.5)
    Soltar(4)
  
    Brazo.DEncoder(50,10)
    Recto.Encoder(-40,7.5)
    
    'Gira hacia grúa
    Giro.Grados(-30,30,45)
    
    Recto.Encoder(-60,24)
  
    Siguelineas.Encoder31F(20,5)
    Siguelineas.Color31F(70,5)
    Thread.Run = Detecta
    Recto.Encoder(60,57)
  
    Giro.Grados(-10,10,10)
    Recto.Encoder(20,2)
    Giro.Grados(10,-10,15)
    
    'Levanta grúa
    Brazo.DEncoder(50,500)
    Giro.Grados(20,-20,90)
    
  EndIf
  
EndSub

Sub MainPrueba
  
    Recto.Tiempo(-40,800)
    Giro.Encoder(59,60,39)
    
    Soltar(4)
    
    Giro.Encoder(-40,-5,7)
    Giro.Grados(-35,35,37)
    
    Recto.Encoder(50,9.5)
    Soltar(4)
  
    Brazo.DEncoder(50,10)
    Recto.Encoder(-40,7.5)
    
    'Gira hacia grúa
    Giro.Grados(-30,30,56)
    
    Recto.Encoder(-60,24)
  
    Siguelineas.Encoder31F(20,5)
    Siguelineas.Color31F(70,5)
    Thread.Run = Detecta
    Recto.Encoder(60,59)
  
    Giro.Grados(-10,10,10)
    Recto.Encoder(20,2)
    Giro.Grados(10,-10,5)
    'Levanta grúa
    Brazo.DEncoder(50,500)
    Giro.Grados(20,-20,90)
EndSub

Sub PruebaSensor
  While "True"
    RGB.Detect(2,5,color)
    RGB.Gritar(color)
    Program.Delay(100)
  EndWhile
  
EndSub

Sub ControlBrazo
  
  While "True"
    errorA = encoderA - MotorA.GetTacho()
    'errorD = encoderD - MotorD.GetTacho()
    correccionA = errorA * 1 + (errorA - olderrorA) * 0.6
    'correccionD = errorD * 1 + (errorD - olderrorD) * 0.3
    MotorA.StartSpeed(correccionA)
    'MotorD.StartSpeed(correccionD)
  EndWhile
  
EndSub

Sub Display
  While "True"
    LCD.StopUpdate()
    LCD.Clear()
    LCD.Write(5,5,"Encoder B: "+ MotorB.GetTacho()*-1)
    LCD.Write(5,15,"Encoder C: "+ MotorC.GetTacho())
    LCD.Write(5,30,"Diferencia: "+ (MotorB.GetTacho()*-1 -MotorC.GetTacho()))
    LCD.Update()
    Program.Delay(100)
  EndWhile
EndSub

Function Coger()
  Brazo.DEncoder(50,350)
  
  Recto.AccelDecel(15,30,5,0,4.75)
  Brazo.DEncoder(50,250)
  AEncoder(50,0)
  
  Brazo.DEncoder(50,-10)
  
  AEncoder(50,-175)
  
  Brazo.DEncoder(50,100)
  
EndFunction

Function Soltar(in number altura)
  
  'Numero de bloques que suelta
  altura*=0.75
  Brazo.DEncoder(50,50)
  AEncoder(50,50)
  Brazo.DEncoder(50,Math.Min(245*(altura),2000))
  AEncoder(50,-250)
  
  Brazo.DEncoder(50,MotorD.GetTacho()+200)
  Program.Delay(500)
  Recto.Encoder(-10,10)
  
  Brazo.DEncoder(50,350)
EndFunction

Function AEncoder(in number Velocidad, in number Encoder)
  
  encDiff = Encoder - MotorA.GetTacho()
  
  signo = Math.Abs(encDiff)/encDiff
  
  safetyTimer = 1200
  Time.Reset3()
  
  ' Solo ejecuta el movimiento si hay diferencia en el encoder
  If encDiff <> 0 Then
    
    While Math.Abs(MotorA.GetTacho() - Encoder) > 15 And Time.Get3() < safetyTimer
      
      ' Ajuste del encoder actual con control de velocidad
      @encoderA = @encoderA + (Velocidad / 15.5 * signo)
      
      ' Límite para evitar sobrepasar el encoder objetivo
      If signo > 0 Then
        @encoderA = Math.Min(@encoderA, Encoder)
      Else
        @encoderA = Math.Max(@encoderA, Encoder)
      EndIf
      
    EndWhile
    
    ' Asegura que el valor final del encoder sea el exacto
    @encoderA = Encoder
    MotorA.OffAndBrake()
    
  EndIf
  
EndFunction

Function DEncoder(in number Velocidad, in number Encoder)
  
  encDiff = Encoder - MotorD.GetTacho()
  
  signo = Math.Abs(encDiff)/encDiff
  
  safetyTimer = 2400
  Time.Reset4()
  
  ' Solo ejecuta el movimiento si hay diferencia en el encoder
  If encDiff <> 0 Then
    
    While (Math.Abs(MotorD.GetTacho() - Encoder) > 15) And Time.Get3() < safetyTimer
      
      ' Ajuste del encoder actual con control de velocidad
      @encoderD =  @encoderD + (Velocidad / 15.5 * signo)
      
      ' Límite para evitar sobrepasar el encoder objetivo
      If signo > 0 Then
        @encoderD = Math.Min(@encoderD, Encoder)
      Else
        @encoderD = Math.Max(@encoderD, Encoder)
      EndIf
      
    EndWhile
    
    ' Asegura que el valor final del encoder sea el exacto
    @encoderD = Encoder
    MotorD.OffAndBrake()
    
  EndIf
EndFunction

Sub Detecta
  Speaker.Play(100,"Connect")
EndSub
