folder "prjs""WRO2024"


import "modules/Siguelineas"
import "modules/Giro"
import "modules/Recto"
import "modules/Shift"
import "modules/Brazo"
import "modules/Smart"
import "modules/RGB"

encoderA = 0
encoderD = 0
  
errorA = 0
olderrorA = 0
  
errorD = 0
olderrorD = 0

setup()
Thread.Run = ControlBrazo
Main()



Sub Main

  StartArm()
  Recto.Tiempo(-80,800)
  Giro.Grados(60,-7,93)
  
  'Recto.AccelDecel(15,80,10,0,10)
  Brazo.DEncoder(50,320)
  
  Recto.AccelDecel(15,30,4,0,3)
  
  Brazo.DEncoder(50,-20)
  AEncoder(50,-200)
  
  For i = 0 To 2
    Coger()
  EndFor
  
  Recto.Encoder(-20,3)
  Brazo.DEncoder(60,200)
  Giro.Grados(-80,0,110)
  
  Recto.Tiempo(-80,500)
  
  Recto.AccelDecelF(15,89,10,0,0)
  Recto.EncoderF(89,42)
  Recto.Blanco1F(50,3)
  
  Giro.Grados(60,-55,105)
  Smart.Cruce_ExternoF(40,4)
  Siguelineas.Encoder31F(40,20)
  
  Recto.EncoderF(40,25)
  Giro.Grados(60,-65,130)
  
  Recto.Tiempo(-80,1200)
  
  Giro.Grados(60,-5,110)
  
  Brazo.DEncoder(50,320)

  Recto.AccelDecel(15,30,3,0,4)
  
  Brazo.DEncoder(50,-20)
  AEncoder(50,-200)
  
  For i = 0 To 2
    Coger()
  EndFor
  
  Giro.Grados(-80,0,120)
  Recto.Tiempo(-80,400)
  
  Recto.AccelDecel(15,80,8,21,8)
  Giro.Grados(-80,-40,20)
  
  Soltar(2,0)
  Giro.Grados(80,40,40)
  
  Recto.AccelDecel(15,30,5,0,5)
  Soltar(2,0)
  
  Giro.Grados(40,80,40)
  
  Recto.AccelDecel(15,30,5,0,5)
  Soltar(2,2)

  Giro.Grados(80,40,40)
  
  Recto.AccelDecel(15,30,5,0,5)
  
  Brazo.DEncoder(50,640)
  AEncoder(50,-50)
  Coger()

EndSub

Sub ControlBrazo
  
  While "True"
    errorA = encoderA - MotorA.GetTacho()
    'errorD = encoderD - MotorD.GetTacho()
    correccionA = errorA * 1 + (errorA - olderrorA) * 0.6
    'correccionD = errorD * 1 + (errorD - olderrorD) * 0.3
    MotorA.StartSpeed(correccionA)
    'MotorD.StartSpeed(correccionD)
  EndWhile
  
EndSub


Sub StartArm
  Brazo.DTimer(-50,800)
  AEncoder(50,-800)
  encoderA = 0
  'encoderD = 0
  MotorA.ResetCount()
  MotorD.ResetCount()
  AEncoder(50,650)
  MotorA.ResetCount()
  MotorD.ResetCount()
  encoderA = 0
  'encoderD = 0
  Brazo.DEncoder(50,130)

EndSub

Sub Display
  While "True"
    LCD.StopUpdate()
    LCD.Clear()
    LCD.Write(5,5,"Encoder B: "+ MotorB.GetTacho()*-1)
    LCD.Write(5,15,"Encoder C: "+ MotorC.GetTacho())
    LCD.Write(5,30,"Diferencia: "+ (MotorB.GetTacho()*-1 -MotorC.GetTacho()))
    LCD.Update()
    Program.Delay(100)
   EndWhile
EndSub

Sub Setup
  Sensor.SetMode(1,0)
  Sensor.SetMode(2,3)
  Sensor.SetMode(3,0)
  Sensor.SetMode(4,0)
EndSub

Function Coger()
  Brazo.DEncoder(50,330)
  
  
  Recto.AccelDecel(15,30,5,0,5)
  Brazo.DEncoder(50,300)
  AEncoder(50,50)
  
  Brazo.DEncoder(50,-20)
  
  AEncoder(50,-200)
  
  Brazo.DEncoder(50,100)
  
EndFunction

Function Soltar(in number bloques, in number altura)
  
  Brazo.DEncoder(50,340*altura)
  AEncoder(50,-50)
  Brazo.DEncoder(50,340*(bloques+altura))
  AEncoder(50,400)
  Program.Delay(500)
  
  Recto.AccelDecel(-15,30,5,0,5)
  
  Brazo.DEncoder(50,50)
EndFunction

Function AEncoder(in number Velocidad, in number Encoder)
  
  encDiff = Encoder - MotorA.GetTacho()
  
  signo = Math.Abs(encDiff)/encDiff
  
  safetyTimer = 1200
  Time.Reset3()
  
  ' Solo ejecuta el movimiento si hay diferencia en el encoder
  If encDiff <> 0 Then
    
    While Math.Abs(MotorA.GetTacho() - Encoder) > 15 And Time.Get3() < safetyTimer
      
      ' Ajuste del encoder actual con control de velocidad
      @encoderA = @encoderA + (Velocidad / 15.5 * signo)
      
      ' Límite para evitar sobrepasar el encoder objetivo
      If signo > 0 Then
        @encoderA = Math.Min(@encoderA, Encoder)
      Else
        @encoderA = Math.Max(@encoderA, Encoder)
      EndIf
      
    EndWhile
    
    ' Asegura que el valor final del encoder sea el exacto
    @encoderA = Encoder
    MotorA.OffAndBrake()
    
  EndIf
  
EndFunction


Function DEncoder(in number Velocidad, in number Encoder)
  
  encDiff = Encoder - MotorD.GetTacho()
  
  signo = Math.Abs(encDiff)/encDiff
  
  safetyTimer = 2400
  Time.Reset4()
  
  ' Solo ejecuta el movimiento si hay diferencia en el encoder
  If encDiff <> 0 Then
    
    While (Math.Abs(MotorD.GetTacho() - Encoder) > 15) And Time.Get3() < safetyTimer
      
      ' Ajuste del encoder actual con control de velocidad
      @encoderD =  @encoderD + (Velocidad / 15.5 * signo)
      
      ' Límite para evitar sobrepasar el encoder objetivo
      If signo > 0 Then
        @encoderD = Math.Min(@encoderD, Encoder)
      Else
        @encoderD = Math.Max(@encoderD, Encoder)
      EndIf
      
    EndWhile
    
    ' Asegura que el valor final del encoder sea el exacto
    @encoderD = Encoder
    MotorD.OffAndBrake()
    
  EndIf
EndFunction
