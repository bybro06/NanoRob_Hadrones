folder "prjs""WRO2024"

import "modules/Siguelineas"
import "modules/Giro"
import "modules/Recto"
import "modules/Shift"
import "modules/Brazo"
import "modules/Smart"
import "modules/RGB"

encoderA = 0
encoderD = 0

errorA = 0
olderrorA = 0

errorD = 0
olderrorD = 0

Sub Setup
  
  Sensor.SetMode(1,0)
  Sensor.SetMode(2,4)
  Sensor.SetMode(3,0)
  Sensor.SetMode(4,0)
  
  diametro = 6.24
  
  '965
  Giro.G1 = 1025/360
  
  negro1 = 8
  negro3 = 9
  negro4 = 6
  
  blanco1 = 53
  blanco3 = 60
  blanco4 = 49
  
  RGB.VALUENEGRO = 4
  RGB.VALUEBLANCO = 52
  
  'Auto definición de propiedades
  
  Recto.diametro = diametro
  Giro.diametro = diametro
  Siguelineas.diametro = diametro
  Smart.diametro = diametro
  
  Siguelineas.negro1 = negro1
  Siguelineas.negro3 = negro3
  Siguelineas.negro4 = negro4
  
  Siguelineas.blanco1 = blanco1
  Siguelineas.blanco3 = blanco3
  Siguelineas.blanco4 = blanco4
  
  Smart.negro1 = negro1
  Smart.negro3 = negro3
  Smart.negro4 = negro4
  
  Smart.blanco1 = blanco1
  Smart.blanco3 = blanco3
  Smart.blanco4 = blanco4
  
  Recto.negro = (negro1+negro3+negro4)/3
  Recto.blanco = (blanco1+blanco3+blanco4)/3
  
  Giro.negro = (negro1+negro3+negro4)/3
  Giro.blanco = (blanco1+blanco3+blanco4)/3
  
EndSub

Sub StartArm
  Brazo.DTimer(-50,800)
  AEncoder(50,-1300)
  encoderA = 0
  'encoderD = 0
  MotorA.ResetCount()
  MotorD.ResetCount()
  AEncoder(50,650)
  MotorA.ResetCount()
  MotorD.ResetCount()
  encoderA = 0
  'encoderD = 0
  Brazo.DEncoder(50,80)
  
EndSub

Setup()
Thread.Run = ControlBrazo
Main()

Sub Main
  
  GritarVoltaje()
  StartArm()
  Recto.Tiempo(-80,600)
  Recto.Encoder(55,4.5)
  Brazo.DEncoder(50,320)
  Giro.GradosF(70,-21,90)
  Giro.TiempoF(70*0.3,-21*0.3,250)
  
  Recto.AccelDecel(15,30,3.5,0,3.5)
  
  Brazo.DEncoder(50,-20)
  AEncoder(50,-200)
  
  Coger()
  
  Recto.Encoder(-60,14.5)
  Brazo.DEncoder(60,200)
  Giro.Grados(-80,40,105)
  
  Giro.Tiempo(-80,-20,800)
  
  'Cuadra con pared para irse a por la segunda fila
  
  Recto.AccelDecelF(15,89,10,0,0)
  Recto.EncoderF(89,54)
  Recto.Blanco1F(50,3)
  
  'llega a línea
  
  Giro.Grados(45,-22,92)
  
  Time.Reset1()
  
  Smart.Encoder31F(80,8)
  Siguelineas.Cruce_ExternoF(80,4)
  
  tiempoHastaCruce = Time.Get1()

  If tiempoHastaCruce > 1400 Then 'Calcular tiempo en ambos cruces
    'Caso VOX
    Siguelineas.Encoder31F(80,5) 'llegar hasta salida opuesta
    
    Recto.Encoder(80,23)
    Giro.Grados(30,-27,89)
    
    Recto.EncoderF(50,20)
    
    'Choca con rampa
    'Giro.EncoderF(40,52,20)
    'Recto.EncoderF(45,1)
    'Giro.Encoder(52/2,40/2,39)
    
    'Giro.EncoderF(-86,-77,56)
    
    Recto.Tiempo(-50,1500)
    Recto.Encoder(50,5)
    
    Giro.Grados(-60,60,115)
    Giro.EncoderF(65,70,35)
    
    Brazo.DEncoder(50,750)
    Recto.Encoder(-60,10)
    Giro.GradosF(50,-20,215)
    Recto.Encoder(55,15)
    Recto.Color1(30,3,5)
    Recto.Encoder(30,2)
    
    Brazo.DEncoder(50,260)
    AEncoder(50,0)
    Brazo.DEncoder(50,-10)
    AEncoder(50,-150)
    
    'Coge los otros 3 bloques
    
    For i = 0 To 2
      Coger()
    EndFor
    
    'Giro abierto y lanzamiento a por los dos ultimos amarillos
    
    Giro.Grados(56,81.25,90)
    
    Recto.AccelDecelF(15,89,8,0,0)
    Recto.Encoder(89,28)
    
    'Gira 180 para cudrar de espaldas
    
    Giro.Grados(-40,40,250)
    
    Recto.Tiempo(-65,1000)
    
    'Sale de pared
    
    Recto.Encoder(20,4.5)
    
    Giro.Grados(50*0.6,-18*0.6,135)
    
    Brazo.DEncoder(50,400)
    
    'Anda hasta primer cuadrado rojo
    
    Giro.EncoderF(30,25,8)
    Giro.Color1F(30,25,4,5)
    Giro.EncoderF(30,25,8)
    Giro.Color1(23,20,4,5)
    Thread.Run = Detecta
    
    Brazo.DEncoder(50,350)
    Recto.AccelDecel(15,30,11.5,0,0)
    
    'Coge 3er amarillo
    
    Brazo.DEncoder(50,240)
    AEncoder(50,0)
    
    Brazo.DEncoder(50,-10)
    
    AEncoder(50,-150)
    
    Brazo.DEncoder(50,350)
    
    'Coge 4º amarillo
    
    Coger()
    
    Brazo.DEncoder (60,400)
    'Gira a línea
    
    Giro.Encoder(0,30,5)
    
    Giro.Grados(-50,20,40)
    Recto.Encoder(30,3)
    Giro.Grados(-50,20,105)
    
    Giro.Tiempo(-40,-20,800)
    
    Giro.Grados(50,20,34)
    Giro.Grados(20,50,34)
    Siguelineas.Encoder14(20,12)
    Giro.Encoder(16,40,5)
    
    Soltar(4)
    
    Giro.Grados(0,-60,90)
    
    Recto.Encoder(50,32)
    
    Giro.Grados(-30,30,102)
    
    Recto.Encoder(50,9)
    
    Soltar(4)
    
    Giro.Grados(-60,22,100)
    
    Siguelineas.Color31(70,5)
    
    Giro.Grados(8,20,44)
    
    Giro.Grados(20,8,44)
    Brazo.DEncoder(50,600)
    Recto.Encoder(30,9)
    Brazo.DEncoder(50,400)
    
    CogerAlto()
    
    Giro.Grados(40,-40,90)
    Recto.EncoderF(-60,15)
    Recto.Tiempo(-40,500)
    
    Recto.Encoder(40,35.5)
    Giro.Grados(-20,40,95)
    
    Recto.Encoder(40,15)
    Giro.Grados(0,15,14)
    
    Brazo.DEncoder(50,320)
    
    Recto.Encoder(10,11)
    
    Brazo.DEncoder(50,800)
    
    Giro.Grados(30,-40,50)
    
    Giro.Grados(-30,40,50)
    
    Brazo.DEncoder(50,320)
    
    Recto.Encoder(-10,11)
    
  Else
    'Caso PSOE
    
    'Speaker.Play(100,"No")
    'Speaker.Wait()
    'Speaker.Play(100,"Dog growl")
    'Speaker.Wait()
    Siguelineas.Encoder31F(85,30)
    Recto.Encoder(50,15)
    
    'Pilla basura amarilla
    
    Giro.Grados(50,-10,94)
    
    Recto.Encoder(40,12)
    Giro.Encoder(-45,-80,21)
    Giro.Encoder(-80,-54,18)
    
    Recto.Tiempo(-40,700)
    
    'Sale de pared
    Recto.Encoder(20,3.5)
    
    Brazo.DEncoder(50,400)
    
    Giro.Grados(50,-18,110)
    
    'Anda hasta primer cuadrado rojo
    
    Recto.Color1F(20,3,5)
    Recto.Encoder(20,2)
    Brazo.DEncoder(50,260)
    AEncoder(50,0)
    Brazo.DEncoder(50,-10)
    AEncoder(50,-150)
    
    'Coge los otros 3 bloques
    
    For i = 0 To 2
      Coger()
    EndFor
    
    'Apunta a basura
    Giro.Grados(0,60,40)
    Recto.Encoder(80,111)
    Recto.Encoder(-60,2)
    Giro.Grados(60,40,15)
    
    'Sube brazo y gira dejando basuras
    Brazo.DEncoder(80,700)
    Giro.Grados(-25,-60,130)
    
    'Cuadra con pared
    Brazo.DEncoder(70,50)
    
    Recto.Tiempo(-70,500)
    
    'Gira hacia los últimos amarillos
    'Sale de pared
    
    Recto.Encoder(50,4)
    Brazo.DEncoder(50,350)
    Giro.Tiempo(50,-15,1100)
    
    'Anda hasta primer cuadrado rojo
    
    Giro.EncoderF(30,27,7)
    Giro.Color1(30,20,4,5)
    Thread.Run = Detecta
    
    Brazo.DEncoder(50,350)
    Recto.AccelDecel(15,30,8,0,0)
    Giro.EncoderF(30,27,16)
    
    'Coge 3er amarillo
    
    Brazo.DEncoder(50,240)
    AEncoder(50,0)
    
    Brazo.DEncoder(50,-10)
    
    AEncoder(50,-150)
    
    Brazo.DEncoder(50,350)
    
    'Coge 4º amarillo
    
    Brazo.DEncoder(70,350)
  
  Giro.Encoder(30,25,9.75)
  Brazo.DEncoder(70,250)
  AEncoder(50,0)
  
  Brazo.DEncoder(70,-10)
  
  AEncoder(50,-175)
  
  Brazo.DEncoder(70,100)
    
    Brazo.DEncoder(50,10)
    Giro.Encoder(-30,-39,23)
    
    'Gira hacia amarillo
    Giro.Grados(-10,40,105)
    Recto.Tiempo(-30,800)
    Giro.Encoder(49,50,37)
    
    Soltar(4)
    
    Giro.Encoder(-40,-5,7)
    Giro.Grados(-35,35,40.5)
    
    Recto.Encoder(50,12.5)
    Soltar(4)
    
    Brazo.DEncoder(50,10)
    Recto.Encoder(-40,5)
    
    'Gira hacia grúa
    Giro.Grados(-30,30,48)
    
    Recto.Encoder(-30,22)
    
    Siguelineas.Encoder31F(20,5)
  Siguelineas.Color31F(70,5)
  Thread.Run = Detecta
  Recto.Encoder(60,54)
  
  Giro.Grados(-10,10,10)
  Recto.Encoder(20,9)
  Giro.Tiempo(10,-10,500)
  
  'Levanta grúa
  Brazo.DEncoder(50,700)
  Giro.Grados(20,-3,25)
  
  Giro.Grados(20,-40,10)
  Recto.Encoder(-70,20)
  Giro.Grados(70,-70,160)
  Recto.Encoder(60,50)
  
  Recto.Color1(30,4,4)
  
  Brazo.DEncoder(50,300)
  Recto.EncoderF(30,10)
  Coger()
  Coger()
  
  Giro.Grados(41.5,80,90)
 
  Giro.Grados(80,41.5,90)
  
  Recto.Encoder(20,13)
  Brazo.DEncoder(80,650)
  Brazo.DEncoder(80,0)
  Program.Delay(150)
  
  Recto.Encoder(-70,25)
  Program.Delay(150)
  Giro.grados(40,-40,88)
  Program.Delay(150)
  Recto.encoder(-50,45)
  'cuadra con pared
  Recto.Tiempo(-50,750)
  Recto.Encoder(70,12)
  Giro.Grados(-40,40,90)
  
  Brazo.DEncoder(50,700)
  Recto.Encoder(60,13)
  
  RGB.Detect(2,5,bloque[0])
  RGB.Gritar(bloque[0])
  CogerColor()
  
  EndIf
  
EndSub

Sub MainPrueba
  
  StartArm()
  Giro.Grados(50,20,50)
Giro.Grados(20,50,50)
EndSub

Sub PruebaSensor
  While "True"
    RGB.Detect(2,5,color)
    RGB.Gritar(color)
    Program.Delay(100)
  EndWhile
  
EndSub

Sub ControlBrazo
  
  While "True"
    errorA = encoderA - MotorA.GetTacho()
    'errorD = encoderD - MotorD.GetTacho()
    correccionA = errorA * 1 + (errorA - olderrorA) * 0.6
    'correccionD = errorD * 1 + (errorD - olderrorD) * 0.3
    MotorA.StartSpeed(correccionA)
    'MotorD.StartSpeed(correccionD)
  EndWhile
  
EndSub

Sub Display
  While "True"
    LCD.StopUpdate()
    LCD.Clear()
    LCD.Write(5,5,"Encoder B: "+ MotorB.GetTacho()*-1)
    LCD.Write(5,15,"Encoder C: "+ MotorC.GetTacho())
    LCD.Write(5,30,"Diferencia: "+ (MotorB.GetTacho()*-1 -MotorC.GetTacho()))
    LCD.Update()
    Program.Delay(100)
  EndWhile
EndSub

Function Coger()
  Brazo.DEncoder(70,350)
  
  Recto.AccelDecel(15,30,5,0,4.75)
  Brazo.DEncoder(70,250)
  AEncoder(50,0)
  
  Brazo.DEncoder(70,-10)
  
  AEncoder(50,-200)
  
  Brazo.DEncoder(70,100)
  
EndFunction

Function CogerAlto()
  
  Recto.Encoder(20,6)
  
  Brazo.DEncoder(50,400)
  AEncoder(50,0)
  
  Brazo.DEncoder(50,140)
  
  AEncoder(50,-175)
  
  Brazo.DEncoder(50,500)
  
  Recto.Encoder(-40,20)
  Brazo.DEncoder(50,100)
EndFunction

Function Soltar(in number altura)
  
  'Numero de bloques que suelta
  altura*=0.75
  Brazo.DEncoder(70,50)
  AEncoder(50,50)
  Brazo.DEncoder(70,Math.Min(245*(altura),2000))
  AEncoder(50,-200)
  
  Brazo.DEncoder(50,MotorD.GetTacho()+200)
  Program.Delay(200)
  Recto.Encoder(-10,10)
  
  Brazo.DEncoder(50,350)
EndFunction

Function AEncoder(in number Velocidad, in number Encoder)
  
  encDiff = Encoder - MotorA.GetTacho()
  
  signo = Math.Abs(encDiff)/encDiff
  
  safetyTimer = 1200
  Time.Reset3()
  
  ' Solo ejecuta el movimiento si hay diferencia en el encoder
  If encDiff <> 0 Then
    
    While Math.Abs(MotorA.GetTacho() - Encoder) > 15 And Time.Get3() < safetyTimer
      
      ' Ajuste del encoder actual con control de velocidad
      @encoderA = @encoderA + (Velocidad / 15.5 * signo)
      
      ' Límite para evitar sobrepasar el encoder objetivo
      If signo > 0 Then
        @encoderA = Math.Min(@encoderA, Encoder)
      Else
        @encoderA = Math.Max(@encoderA, Encoder)
      EndIf
      
    EndWhile
    
    ' Asegura que el valor final del encoder sea el exacto
    @encoderA = Encoder
    MotorA.OffAndBrake()
    
  EndIf
  
EndFunction

Function DEncoder(in number Velocidad, in number Encoder)
  
  encDiff = Encoder - MotorD.GetTacho()
  
  signo = Math.Abs(encDiff)/encDiff
  
  safetyTimer = 2400
  Time.Reset4()
  
  ' Solo ejecuta el movimiento si hay diferencia en el encoder
  If encDiff <> 0 Then
    
    While (Math.Abs(MotorD.GetTacho() - Encoder) > 15) And Time.Get3() < safetyTimer
      
      ' Ajuste del encoder actual con control de velocidad
      @encoderD =  @encoderD + (Velocidad / 15.5 * signo)
      
      ' Límite para evitar sobrepasar el encoder objetivo
      If signo > 0 Then
        @encoderD = Math.Min(@encoderD, Encoder)
      Else
        @encoderD = Math.Max(@encoderD, Encoder)
      EndIf
      
    EndWhile
    
    ' Asegura que el valor final del encoder sea el exacto
    @encoderD = Encoder
    MotorD.OffAndBrake()
    
  EndIf
EndFunction

Sub Detecta
  Speaker.Play(100,"Connect")
EndSub

Function CogerColor()
  Brazo.DEncoder(50,350)
  Recto.Encoder(50,5)
  Brazo.DEncoder(50,250)
  AEncoder(50,0)
  
  Brazo.DEncoder(50,-35)
  
  AEncoder(50,-175)
  
  Brazo.DEncoder(50,300)
  
EndFunction

Function GritarNumero(in number numero)
  If numero = 0 Then
    Speaker.Play(100,"ZERO")
  ElseIf numero = 1 Then
    Speaker.Play(100,"One")
  ElseIf numero = 2 Then
    Speaker.Play(100,"Two")
  ElseIf numero = 3 Then
    Speaker.Play(100,"Three")
  ElseIf numero = 4 Then
    Speaker.Play(100,"Four")
  ElseIf numero = 5 Then
    Speaker.Play(100,"Five")
  ElseIf numero = 6 Then
    Speaker.Play(100,"Six")
  ElseIf numero = 7 Then
    Speaker.Play(100,"Seven")
  ElseIf numero = 8 Then
    Speaker.Play(100,"Eight")
  ElseIf numero = 9 Then
    Speaker.Play(100,"Nine")
  ElseIf numero = 10 Then
    Speaker.Play(100,"Ten")
  EndIf
  Speaker.Wait()
EndFunction

Function GritarVoltaje()
  
  voltaje = EV3.BatteryVoltage
  GritarNumero(Math.Floor(voltaje))
  GritarNumero(Math.Floor(voltaje*10)-Math.Floor(voltaje)*10)
  GritarNumero(Math.Floor(voltaje*100)-Math.Floor(voltaje*10)*10)
  
EndFunction