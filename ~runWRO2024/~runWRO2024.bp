pr_giro_g1 = 0
pr_rgb_valuenegro = 0
pr_rgb_valueblanco = 0
pr_recto_diametro = 0
pr_giro_diametro = 0
pr_siguelineas_diametro = 0
pr_smart_diametro = 0
pr_siguelineas_negro1 = 0
pr_siguelineas_negro3 = 0
pr_siguelineas_negro4 = 0
pr_siguelineas_blanco1 = 0
pr_siguelineas_blanco3 = 0
pr_siguelineas_blanco4 = 0
pr_smart_negro1 = 0
pr_smart_negro3 = 0
pr_smart_negro4 = 0
pr_smart_blanco1 = 0
pr_smart_blanco3 = 0
pr_smart_blanco4 = 0
pr_recto_negro = 0
pr_recto_blanco = 0
pr_giro_negro = 0
pr_giro_blanco = 0
lv_velocidad_5 = 0
lv_timer_5 = 0
lv_velocidad_3 = 0
lv_encoder_3 = 0
lv_velocidad_6 = 0
lv_encoder_6 = 0
lv_velocidad_7 = 0
lv_tiempo_7 = 0
lv_velocidad_8 = 0
lv_distancia_8 = 0
lv_velocidad1_16 = 0
lv_velocidad2_16 = 0
lv_grados_16 = 0
lv_v0_9 = 0
lv_vmax_9 = 0
lv_distanciaaccel_9 = 0
lv_distanciacrucero_9 = 0
lv_distanciadecel_9 = 0
lv_velocidad1_17 = 0
lv_velocidad2_17 = 0
lv_tiempo_17 = 0
lv_v0_10 = 0
lv_vmax_10 = 0
lv_distanciaaccel_10 = 0
lv_distanciacrucero_10 = 0
lv_distanciadecel_10 = 0
lv_velocidad_11 = 0
lv_distancia_11 = 0
lv_velocidad_12 = 0
lv_sensor_12 = 0
lv_velocidad_21 = 0
lv_encoder_21 = 0
lv_velocidad_22 = 0
lv_reader_22 = 0
lv_velocidad_23 = 0
lv_encoder_23 = 0
lv_velocidad_13 = 0
lv_sensor_13 = 0
lv_velocidad_14 = 0
lv_sensor_14 = 0
lv_color_14 = 0
lv_altura_2 = 0
lv_sens_26 = 0
lv_reps_26 = 0
lv_color_26 = 0
lv_color_27 = 0
lv_velocidad1_18 = 0
lv_velocidad2_18 = 0
lv_grados_18 = 0
lv_velocidad_24 = 0
lv_encoder_24 = 0
lv_velocidad1_19 = 0
lv_velocidad2_19 = 0
lv_tiempo_19 = 0
lv_velocidad_15 = 0
lv_sensor_15 = 0
lv_color_15 = 0
lv_velocidad1_20 = 0
lv_velocidad2_20 = 0
lv_distancia_20 = 0
lv_velocidad_25 = 0
lv_color_25 = 0
gv_color = 0
gv_encodera = 0
gv_encoderd = 0
gv_errora = 0
gv_olderrora = 0
gv_errord = 0
gv_olderrord = 0
gv_diametro = 0
gv_negro1 = 0
gv_negro3 = 0
gv_negro4 = 0
gv_blanco1 = 0
gv_blanco3 = 0
gv_blanco4 = 0
gv_tiempohastacruce = 0
gv_i = 0
gv_encodera = 0
gv_encoderd = 0
gv_errora = 0
gv_olderrora = 0
gv_errord = 0
gv_olderrord = 0
f_setup_0 ()
Thread.Run = f_controlbrazo_0
f_main_0 ()
Sub f_setup_0
Sensor.SetMode ( 1 , 0 )
Sensor.SetMode ( 2 , 2 )
Sensor.SetMode ( 3 , 0 )
Sensor.SetMode ( 4 , 0 )
gv_diametro = 6.24
pr_giro_g1 = 965 / 360
gv_negro1 = 10
gv_negro3 = 10
gv_negro4 = 8
gv_blanco1 = 76
gv_blanco3 = 76
gv_blanco4 = 61
pr_rgb_valuenegro = 10
pr_rgb_valueblanco = 100
pr_recto_diametro = gv_diametro
pr_giro_diametro = gv_diametro
pr_siguelineas_diametro = gv_diametro
pr_smart_diametro = gv_diametro
pr_siguelineas_negro1 = gv_negro1
pr_siguelineas_negro3 = gv_negro3
pr_siguelineas_negro4 = gv_negro4
pr_siguelineas_blanco1 = gv_blanco1
pr_siguelineas_blanco3 = gv_blanco3
pr_siguelineas_blanco4 = gv_blanco4
pr_smart_negro1 = gv_negro1
pr_smart_negro3 = gv_negro3
pr_smart_negro4 = gv_negro4
pr_smart_blanco1 = gv_blanco1
pr_smart_blanco3 = gv_blanco3
pr_smart_blanco4 = gv_blanco4
pr_recto_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_recto_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
pr_giro_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_giro_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
EndSub
Sub f_startarm_0
lv_velocidad_5 = - 50
lv_timer_5 = 800
m_brazo_dtimer_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = - 1300
f_aencoder_2 ()
gv_encodera = 0
MotorA.ResetCount ()
MotorD.ResetCount ()
lv_velocidad_3 = 50
lv_encoder_3 = 650
f_aencoder_2 ()
MotorA.ResetCount ()
MotorD.ResetCount ()
gv_encodera = 0
lv_velocidad_6 = 50
lv_encoder_6 = 80
m_brazo_dencoder_2 ()
EndSub
Sub f_main_0
f_startarm_0 ()
lv_velocidad_7 = - 80
lv_tiempo_7 = 800
m_recto_tiempo_2 ()
lv_velocidad_8 = 55
lv_distancia_8 = 2
m_recto_encoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 320
m_brazo_dencoder_2 ()
lv_velocidad1_16 = 70
lv_velocidad2_16 = - 21
lv_grados_16 = 94
m_giro_grados_3 ()
lv_v0_9 = 15
lv_vmax_9 = 30
lv_distanciaaccel_9 = 3.5
lv_distanciacrucero_9 = 0
lv_distanciadecel_9 = 3.5
m_recto_acceldecel_5 ()
lv_velocidad_6 = 50
lv_encoder_6 = - 20
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = - 200
f_aencoder_2 ()
f_coger_0 ()
lv_velocidad_8 = - 20
lv_distancia_8 = 14.5
m_recto_encoder_2 ()
lv_velocidad_6 = 60
lv_encoder_6 = 200
m_brazo_dencoder_2 ()
lv_velocidad1_16 = - 80
lv_velocidad2_16 = 40
lv_grados_16 = 105
m_giro_grados_3 ()
lv_velocidad1_17 = - 80
lv_velocidad2_17 = - 20
lv_tiempo_17 = 800
m_giro_tiempo_3 ()
lv_v0_10 = 15
lv_vmax_10 = 89
lv_distanciaaccel_10 = 10
lv_distanciacrucero_10 = 0
lv_distanciadecel_10 = 0
m_recto_acceldecelf_5 ()
lv_velocidad_11 = 89
lv_distancia_11 = 52
m_recto_encoderf_2 ()
lv_velocidad_12 = 50
lv_sensor_12 = 3
m_recto_blanco1f_2 ()
lv_velocidad1_16 = 45
lv_velocidad2_16 = - 18
lv_grados_16 = 95
m_giro_grados_3 ()
Time.Reset1 ()
lv_velocidad_21 = 80
lv_encoder_21 = 8
m_smart_encoder31f_2 ()
lv_velocidad_22 = 80
lv_reader_22 = 4
m_siguelineas_cruce_externof_2 ()
gv_tiempohastacruce = Time.Get1 ()
If gv_tiempohastacruce > 1200 Then
lv_velocidad_23 = 80
lv_encoder_23 = 5
m_siguelineas_encoder31f_2 ()
lv_velocidad_8 = 80
lv_distancia_8 = 23
m_recto_encoder_2 ()
lv_velocidad1_16 = 60
lv_velocidad2_16 = - 55
lv_grados_16 = 96
m_giro_grados_3 ()
lv_velocidad_6 = 50
lv_encoder_6 = 400
m_brazo_dencoder_2 ()
lv_velocidad_8 = 50
lv_distancia_8 = 16
m_recto_encoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 0
m_brazo_dencoder_2 ()
lv_velocidad_7 = - 50
lv_tiempo_7 = 1500
m_recto_tiempo_2 ()
lv_velocidad_8 = 50
lv_distancia_8 = 5
m_recto_encoder_2 ()
lv_velocidad1_16 = - 60
lv_velocidad2_16 = 60
lv_grados_16 = 95
m_giro_grados_3 ()
lv_velocidad_11 = 70
lv_distancia_11 = 40
m_recto_encoderf_2 ()
lv_velocidad_13 = 70
lv_sensor_13 = 3
m_recto_blanco1_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 650
m_brazo_dencoder_2 ()
lv_velocidad_8 = - 60
lv_distancia_8 = 10
m_recto_encoder_2 ()
lv_velocidad1_16 = 50
lv_velocidad2_16 = - 50
lv_grados_16 = 210
m_giro_grados_3 ()
lv_velocidad_14 = 30
lv_sensor_14 = 3
lv_color_14 = 5
m_recto_color1_3 ()
lv_velocidad_8 = 55
lv_distancia_8 = 20
m_recto_encoder_2 ()
lv_velocidad_14 = 30
lv_sensor_14 = 3
lv_color_14 = 5
m_recto_color1_3 ()
lv_velocidad_8 = 30
lv_distancia_8 = 2
m_recto_encoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 260
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = 0
f_aencoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = - 10
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = - 150
f_aencoder_2 ()
For gv_i = 0 To 2
f_coger_0 ()
EndFor
lv_velocidad1_16 = 52.75
lv_velocidad2_16 = 81.25
lv_grados_16 = 98
m_giro_grados_3 ()
lv_v0_10 = 15
lv_vmax_10 = 89
lv_distanciaaccel_10 = 8
lv_distanciacrucero_10 = 0
lv_distanciadecel_10 = 0
m_recto_acceldecelf_5 ()
lv_velocidad_8 = 89
lv_distancia_8 = 30
m_recto_encoder_2 ()
lv_velocidad1_16 = - 50
lv_velocidad2_16 = 50
lv_grados_16 = 220
m_giro_grados_3 ()
lv_velocidad_7 = - 65
lv_tiempo_7 = 800
m_recto_tiempo_2 ()
lv_velocidad1_16 = 50
lv_velocidad2_16 = - 8
lv_grados_16 = 100
m_giro_grados_3 ()
lv_velocidad_6 = 50
lv_encoder_6 = 400
m_brazo_dencoder_2 ()
lv_velocidad_11 = 30
lv_distancia_11 = 3
m_recto_encoderf_2 ()
lv_velocidad_14 = 20
lv_sensor_14 = 4
lv_color_14 = 5
m_recto_color1_3 ()
Thread.Run = f_detecta_0
lv_velocidad_6 = 50
lv_encoder_6 = 350
m_brazo_dencoder_2 ()
lv_v0_9 = 15
lv_vmax_9 = 30
lv_distanciaaccel_9 = 11.5
lv_distanciacrucero_9 = 0
lv_distanciadecel_9 = 0
m_recto_acceldecel_5 ()
lv_velocidad_6 = 50
lv_encoder_6 = 240
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = 0
f_aencoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = - 10
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = - 150
f_aencoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 350
m_brazo_dencoder_2 ()
f_coger_0 ()
lv_velocidad_8 = - 60
lv_distancia_8 = 12
m_recto_encoder_2 ()
lv_velocidad1_16 = 14
lv_velocidad2_16 = 50
lv_grados_16 = 100
m_giro_grados_3 ()
lv_velocidad_8 = 60
lv_distancia_8 = 13.5
m_recto_encoder_2 ()
lv_altura_2 = 4
f_soltar_1 ()
lv_velocidad1_16 = 0
lv_velocidad2_16 = - 60
lv_grados_16 = 90
m_giro_grados_3 ()
lv_velocidad_8 = 50
lv_distancia_8 = 21
m_recto_encoder_2 ()
lv_velocidad1_16 = - 60
lv_velocidad2_16 = 60
lv_grados_16 = 95
m_giro_grados_3 ()
lv_velocidad_8 = 50
lv_distancia_8 = 14
m_recto_encoder_2 ()
lv_altura_2 = 4
f_soltar_1 ()
lv_velocidad1_16 = - 60
lv_velocidad2_16 = - 10
lv_grados_16 = 90
m_giro_grados_3 ()
lv_sens_26 = 2
lv_reps_26 = 5
m_rgb_detect_3 ()
gv_bloque [ 0 ] = lv_color_26
lv_color_27 = gv_bloque [ 0 ]
m_rgb_gritar_1 ()
lv_velocidad_8 = 40
lv_distancia_8 = 10
m_recto_encoder_2 ()
lv_sens_26 = 2
lv_reps_26 = 5
m_rgb_detect_3 ()
gv_bloque [ 1 ] = lv_color_26
lv_color_27 = gv_bloque [ 1 ]
m_rgb_gritar_1 ()
lv_velocidad1_18 = 50
lv_velocidad2_18 = 0
lv_grados_18 = 50
m_giro_gradosf_3 ()
lv_velocidad1_16 = 0
lv_velocidad2_16 = 50
lv_grados_16 = 50
m_giro_grados_3 ()
lv_velocidad_22 = 50
lv_reader_22 = 4
m_siguelineas_cruce_externof_2 ()
lv_velocidad_24 = 70
lv_encoder_24 = 15
m_siguelineas_encoder31_2 ()
lv_velocidad1_16 = 50
lv_velocidad2_16 = 0
lv_grados_16 = 90
m_giro_grados_3 ()
lv_velocidad_7 = - 80
lv_tiempo_7 = 800
m_recto_tiempo_2 ()
lv_velocidad1_16 = 60
lv_velocidad2_16 = - 5
lv_grados_16 = 95
m_giro_grados_3 ()
Else
lv_velocidad_23 = 85
lv_encoder_23 = 30
m_siguelineas_encoder31f_2 ()
lv_velocidad_8 = 50
lv_distancia_8 = 17
m_recto_encoder_2 ()
lv_velocidad1_16 = 50
lv_velocidad2_16 = - 10
lv_grados_16 = 100
m_giro_grados_3 ()
lv_velocidad_8 = 80
lv_distancia_8 = 25
m_recto_encoder_2 ()
lv_velocidad1_19 = - 81
lv_velocidad2_19 = - 80
lv_tiempo_19 = 1300
m_giro_tiempof_3 ()
lv_velocidad_7 = - 35
lv_tiempo_7 = 400
m_recto_tiempo_2 ()
lv_velocidad1_16 = 50
lv_velocidad2_16 = - 8
lv_grados_16 = 100
m_giro_grados_3 ()
lv_velocidad_6 = 50
lv_encoder_6 = 400
m_brazo_dencoder_2 ()
lv_velocidad_15 = 20
lv_sensor_15 = 4
lv_color_15 = 5
m_recto_color1f_3 ()
lv_velocidad_8 = 20
lv_distancia_8 = 2
m_recto_encoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 260
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = 0
f_aencoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = - 10
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = - 150
f_aencoder_2 ()
For gv_i = 0 To 2
f_coger_0 ()
EndFor
lv_velocidad1_16 = 0
lv_velocidad2_16 = 60
lv_grados_16 = 38
m_giro_grados_3 ()
lv_velocidad_8 = 80
lv_distancia_8 = 110
m_recto_encoder_2 ()
lv_velocidad_8 = - 30
lv_distancia_8 = 5
m_recto_encoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 500
m_brazo_dencoder_2 ()
lv_velocidad1_16 = - 20
lv_velocidad2_16 = - 60
lv_grados_16 = 130
m_giro_grados_3 ()
lv_velocidad_6 = 50
lv_encoder_6 = 50
m_brazo_dencoder_2 ()
lv_velocidad_7 = - 70
lv_tiempo_7 = 500
m_recto_tiempo_2 ()
lv_velocidad_8 = 50
lv_distancia_8 = 2
m_recto_encoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 350
m_brazo_dencoder_2 ()
lv_velocidad1_17 = 50
lv_velocidad2_17 = - 15
lv_tiempo_17 = 1200
m_giro_tiempo_3 ()
lv_velocidad_11 = 30
lv_distancia_11 = 7
m_recto_encoderf_2 ()
lv_velocidad_14 = 20
lv_sensor_14 = 4
lv_color_14 = 5
m_recto_color1_3 ()
Thread.Run = f_detecta_0
lv_velocidad_6 = 50
lv_encoder_6 = 350
m_brazo_dencoder_2 ()
lv_v0_9 = 15
lv_vmax_9 = 30
lv_distanciaaccel_9 = 8
lv_distanciacrucero_9 = 15
lv_distanciadecel_9 = 0
m_recto_acceldecel_5 ()
lv_velocidad_6 = 50
lv_encoder_6 = 240
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = 0
f_aencoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = - 10
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = - 150
f_aencoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 350
m_brazo_dencoder_2 ()
f_coger_0 ()
lv_velocidad_6 = 50
lv_encoder_6 = 10
m_brazo_dencoder_2 ()
lv_velocidad1_20 = - 50
lv_velocidad2_20 = - 60
lv_distancia_20 = 19.5
m_giro_encoder_3 ()
lv_velocidad1_16 = - 10
lv_velocidad2_16 = 40
lv_grados_16 = 105
m_giro_grados_3 ()
lv_velocidad_7 = - 40
lv_tiempo_7 = 800
m_recto_tiempo_2 ()
lv_velocidad1_20 = 59
lv_velocidad2_20 = 60
lv_distancia_20 = 39
m_giro_encoder_3 ()
lv_altura_2 = 4
f_soltar_1 ()
lv_velocidad1_20 = - 40
lv_velocidad2_20 = - 5
lv_distancia_20 = 7
m_giro_encoder_3 ()
lv_velocidad1_16 = - 35
lv_velocidad2_16 = 35
lv_grados_16 = 37
m_giro_grados_3 ()
lv_velocidad_8 = 50
lv_distancia_8 = 9.5
m_recto_encoder_2 ()
lv_altura_2 = 4
f_soltar_1 ()
lv_velocidad_6 = 50
lv_encoder_6 = 10
m_brazo_dencoder_2 ()
lv_velocidad_8 = - 40
lv_distancia_8 = 7.5
m_recto_encoder_2 ()
lv_velocidad1_16 = - 30
lv_velocidad2_16 = 30
lv_grados_16 = 56
m_giro_grados_3 ()
lv_velocidad_8 = - 60
lv_distancia_8 = 24
m_recto_encoder_2 ()
lv_velocidad_23 = 20
lv_encoder_23 = 5
m_siguelineas_encoder31f_2 ()
lv_velocidad_25 = 70
lv_color_25 = 5
m_siguelineas_color31f_2 ()
Thread.Run = f_detecta_0
lv_velocidad_8 = 60
lv_distancia_8 = 59
m_recto_encoder_2 ()
lv_velocidad1_16 = - 10
lv_velocidad2_16 = 10
lv_grados_16 = 10
m_giro_grados_3 ()
lv_velocidad_8 = 20
lv_distancia_8 = 2
m_recto_encoder_2 ()
lv_velocidad1_16 = 10
lv_velocidad2_16 = - 10
lv_grados_16 = 5
m_giro_grados_3 ()
lv_velocidad_6 = 50
lv_encoder_6 = 500
m_brazo_dencoder_2 ()
lv_velocidad1_16 = 20
lv_velocidad2_16 = - 20
lv_grados_16 = 90
m_giro_grados_3 ()
EndIf
EndSub
Sub f_controlbrazo_0
While "True"
gv_errora = gv_encodera - MotorA.GetTacho ()
gv_correcciona = gv_errora * 1 + ( gv_errora - gv_olderrora ) * 0.6
MotorA.StartSpeed ( gv_correcciona )
EndWhile
EndSub
Sub f_detecta_0
Speaker.Play ( 100 , "WRO2024/Media/Connect" )
EndSub
Sub f_coger_0
lv_velocidad_6 = 50
lv_encoder_6 = 350
m_brazo_dencoder_2 ()
lv_v0_9 = 15
lv_vmax_9 = 30
lv_distanciaaccel_9 = 5
lv_distanciacrucero_9 = 0
lv_distanciadecel_9 = 4.75
m_recto_acceldecel_5 ()
lv_velocidad_6 = 50
lv_encoder_6 = 250
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = 0
f_aencoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = - 10
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = - 150
f_aencoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 100
m_brazo_dencoder_2 ()
EndSub
Sub f_soltar_1
lv_altura_2 = lv_altura_2 * 0.75
lv_velocidad_6 = 50
lv_encoder_6 = 50
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = 50
f_aencoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = Math.Min ( 245 * ( lv_altura_2 ) , 2000 )
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = - 250
f_aencoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = MotorD.GetTacho () + 200
m_brazo_dencoder_2 ()
lv_velocidad_8 = - 30
lv_distancia_8 = 10
m_recto_encoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 350
m_brazo_dencoder_2 ()
EndSub
Sub f_aencoder_2
lv_encdiff_3 = lv_encoder_3 - MotorA.GetTacho ()
lv_signo_3 = Math.Abs ( lv_encdiff_3 ) / lv_encdiff_3
lv_safetytimer_3 = 1200
Time.Reset3 ()
If lv_encdiff_3 <> 0 Then
While Math.Abs ( MotorA.GetTacho () - lv_encoder_3 ) > 15 And Time.Get3 () < lv_safetytimer_3
gv_encodera = gv_encodera + ( lv_velocidad_3 / 15.5 * lv_signo_3 )
If lv_signo_3 > 0 Then
gv_encodera = Math.Min ( gv_encodera , lv_encoder_3 )
Else
gv_encodera = Math.Max ( gv_encodera , lv_encoder_3 )
EndIf
EndWhile
gv_encodera = lv_encoder_3
MotorA.OffAndBrake ()
EndIf
EndSub
Sub m_brazo_dtimer_2
Time.Reset1 ()
While Time.Get1 () < lv_timer_5
MotorD.StartSpeed ( lv_velocidad_5 )
EndWhile
MotorD.OffAndBrake ()
EndSub
Sub m_brazo_dencoder_2
lv_encdiff_6 = lv_encoder_6 - Motor.GetCount ( "D" )
lv_signo_6 = lv_encdiff_6 / Math.Abs ( lv_encdiff_6 )
lv_safetytimer_6 = Math.Max ( ( ( Math.abs ( lv_encdiff_6 ) / 100 ) / ( lv_velocidad_6 / 20 ) * 650 * 2 ) , 400 )
Time.Reset3 ()
If lv_encdiff_6 <> 0 Then
While Math.Abs ( Motor.GetCount ( "D" ) - lv_encoder_6 ) > 15 and Time.Get3 () < lv_safetytimer_6
MotorD.StartSpeed ( lv_signo_6 * lv_velocidad_6 )
LCD.Clear ()
LCD.Write ( 5 , 30 , "safetyTimer: " + lv_safetytimer_6 )
EndWhile
Motor.Stop ( "D" , "True" )
EndIf
EndSub
Sub m_recto_tiempo_2
lv_correccion_7 = 0
Time.Reset3 ()
MotorBC.Off ()
While Time.Get3 () < lv_tiempo_7
Motor.StartSync ( "BC" , - lv_velocidad_7 + lv_correccion_7 , lv_velocidad_7 + lv_correccion_7 )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_encoder_2
lv_correccion_8 = 0
lv_enc_8 = lv_distancia_8 * 360 / Math.Pi / pr_recto_diametro
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad_8 + lv_correccion_8 , lv_velocidad_8 + lv_correccion_8 , lv_enc_8 , "True" )
EndSub
Sub m_recto_acceldecel_5
lv_startb_9 = Motor.GetCount ( "B" )
lv_startc_9 = Motor.GetCount ( "C" )
lv_encoderb_9 = 0
lv_encoderc_9 = 0
lv_signo_9 = lv_v0_9 / Math.Abs ( lv_v0_9 )
lv_v0_9 = Math.Max ( 8 , Math.Abs ( lv_v0_9 ) ) * lv_signo_9
lv_vmax_9 = Math.Min ( 90 , Math.Abs ( lv_vmax_9 ) ) * lv_signo_9
lv_vel_9 = 0
lv_kp_9 = 0.4
lv_kd_9 = 0.5
lv_error_9 = 0
lv_olderror_9 = 0
lv_gradosaccel_9 = lv_distanciaaccel_9 * 360 / ( pr_recto_diametro * math.pi )
lv_gradoscrucero_9 = lv_distanciacrucero_9 * 360 / ( pr_recto_diametro * math.pi )
lv_gradosdecel_9 = lv_distanciadecel_9 * 360 / ( pr_recto_diametro * math.pi )
While Math.Abs ( lv_encoderc_9 ) < lv_gradosaccel_9 + lv_gradoscrucero_9 + lv_gradosdecel_9
lv_encoderb_9 = Motor.GetCount ( "B" ) * 1 - lv_startb_9
lv_encoderc_9 = Motor.GetCount ( "C" ) - lv_startc_9
If Math.Abs ( lv_encoderc_9 ) < lv_gradosaccel_9 + lv_gradoscrucero_9 Then
lv_pendiente_9 = ( lv_vmax_9 - lv_v0_9 ) / lv_gradosaccel_9 * lv_signo_9
If lv_signo_9 > 0 Then
lv_vel_9 = Math.Min ( lv_vmax_9 , lv_pendiente_9 * lv_encoderc_9 + lv_v0_9 )
Else
lv_vel_9 = Math.Max ( lv_vmax_9 , lv_pendiente_9 * lv_encoderc_9 + lv_v0_9 )
EndIf
Else
lv_pendiente_9 = ( lv_v0_9 - lv_vmax_9 ) / lv_gradosdecel_9 * lv_signo_9
If lv_signo_9 > 0 Then
lv_vel_9 = Math.Max ( lv_v0_9 , lv_pendiente_9 * ( lv_encoderc_9 - lv_gradosaccel_9 - lv_gradoscrucero_9 ) + lv_vmax_9 )
Else
lv_vel_9 = Math.Min ( lv_v0_9 , lv_pendiente_9 * ( lv_encoderc_9 + lv_gradosaccel_9 + lv_gradoscrucero_9 ) + lv_vmax_9 )
EndIf
EndIf
lv_error_9 = ( - 1 * lv_encoderb_9 - lv_encoderc_9 ) * 1
lv_correccion_9 = lv_error_9 * lv_kp_9 + ( lv_error_9 - lv_olderror_9 ) * lv_kd_9
Motor.StartSync ( "BC" , - ( lv_vel_9 - lv_correccion_9 ) , ( lv_vel_9 + lv_correccion_9 ) )
lv_olderror_9 = lv_error_9
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_acceldecelf_5
lv_startb_10 = Motor.GetCount ( "B" )
lv_startc_10 = Motor.GetCount ( "C" )
lv_encoderb_10 = 0
lv_encoderc_10 = 0
lv_signo_10 = lv_v0_10 / Math.Abs ( lv_v0_10 )
lv_v0_10 = Math.Max ( 8 , Math.Abs ( lv_v0_10 ) ) * lv_signo_10
lv_vmax_10 = Math.Min ( 90 , Math.Abs ( lv_vmax_10 ) ) * lv_signo_10
lv_vel_10 = 0
lv_kp_10 = 0.4
lv_kd_10 = 0.5
lv_error_10 = 0
lv_olderror_10 = 0
lv_gradosaccel_10 = lv_distanciaaccel_10 * 360 / ( pr_recto_diametro * math.pi )
lv_gradoscrucero_10 = lv_distanciacrucero_10 * 360 / ( pr_recto_diametro * math.pi )
lv_gradosdecel_10 = lv_distanciadecel_10 * 360 / ( pr_recto_diametro * math.pi )
While Math.Abs ( lv_encoderc_10 ) < lv_gradosaccel_10 + lv_gradoscrucero_10 + lv_gradosdecel_10
lv_encoderb_10 = Motor.GetCount ( "B" ) * 1 - lv_startb_10
lv_encoderc_10 = Motor.GetCount ( "C" ) - lv_startc_10
If Math.Abs ( lv_encoderc_10 ) < lv_gradosaccel_10 + lv_gradoscrucero_10 Then
lv_pendiente_10 = ( lv_vmax_10 - lv_v0_10 ) / lv_gradosaccel_10 * lv_signo_10
If lv_signo_10 > 0 Then
lv_vel_10 = Math.Min ( lv_vmax_10 , lv_pendiente_10 * lv_encoderc_10 + lv_v0_10 )
Else
lv_vel_10 = Math.Max ( lv_vmax_10 , lv_pendiente_10 * lv_encoderc_10 + lv_v0_10 )
EndIf
Else
lv_pendiente_10 = ( lv_v0_10 - lv_vmax_10 ) / lv_gradosdecel_10 * lv_signo_10
If lv_signo_10 > 0 Then
lv_vel_10 = Math.Max ( lv_v0_10 , lv_pendiente_10 * ( lv_encoderc_10 - lv_gradosaccel_10 - lv_gradoscrucero_10 ) + lv_vmax_10 )
Else
lv_vel_10 = Math.Min ( lv_v0_10 , lv_pendiente_10 * ( lv_encoderc_10 + lv_gradosaccel_10 + lv_gradoscrucero_10 ) + lv_vmax_10 )
EndIf
EndIf
lv_error_10 = ( - 1 * lv_encoderb_10 - lv_encoderc_10 ) * 1
lv_correccion_10 = lv_error_10 * lv_kp_10 + ( lv_error_10 - lv_olderror_10 ) * lv_kd_10
Motor.StartSync ( "BC" , - ( lv_vel_10 - lv_correccion_10 ) , ( lv_vel_10 + lv_correccion_10 ) )
lv_olderror_10 = lv_error_10
EndWhile
MotorBC.Off ()
EndSub
Sub m_recto_encoderf_2
lv_correccion_11 = 0
lv_enc_11 = lv_distancia_11 * 360 / Math.Pi / pr_recto_diametro
MotorBC.Off ()
Motor.MoveSync ( "BC" , - lv_velocidad_11 + lv_correccion_11 , lv_velocidad_11 + lv_correccion_11 , lv_enc_11 , "False" )
EndSub
Sub m_recto_blanco1f_2
lv_correccion_12 = 0
MotorBC.Off ()
lv_lectura_12 = 50
While lv_lectura_12 < 60
lv_lectura_12 = ( Sensor.ReadPercent ( lv_sensor_12 ) - pr_recto_negro ) / pr_recto_blanco * ( 100 - pr_recto_negro )
Motor.StartSync ( "BC" , - lv_velocidad_12 + lv_correccion_12 , lv_velocidad_12 + lv_correccion_12 )
EndWhile
MotorBC.Off ()
EndSub
Sub m_recto_blanco1_2
lv_correccion_13 = 0
MotorBC.Off ()
lv_lectura_13 = 50
While lv_lectura_13 < 60
lv_lectura_13 = ( Sensor.ReadPercent ( lv_sensor_13 ) - pr_recto_negro ) / pr_recto_blanco * ( 100 - pr_recto_negro )
Motor.StartSync ( "BC" , - lv_velocidad_13 + lv_correccion_13 , lv_velocidad_13 + lv_correccion_13 )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_color1_3
lv_correccion_14 = 0
lv_mode_14 = Sensor.GetMode ( lv_sensor_14 )
Sensor.SetMode ( lv_sensor_14 , 2 )
MotorBC.Off ()
While Sensor.ReadRawValue ( lv_sensor_14 , 0 ) <> lv_color_14
Motor.StartSync ( "BC" , - lv_velocidad_14 + lv_correccion_14 , lv_velocidad_14 + lv_correccion_14 )
EndWhile
MotorBC.OffAndBrake ()
Sensor.SetMode ( lv_sensor_14 , lv_mode_14 )
EndSub
Sub m_recto_color1f_3
lv_correccion_15 = 0
lv_mode_15 = Sensor.GetMode ( lv_sensor_15 )
Sensor.SetMode ( lv_sensor_15 , 2 )
MotorBC.Off ()
While Sensor.ReadRawValue ( lv_sensor_15 , 0 ) <> lv_color_15
Motor.StartSync ( "BC" , - lv_velocidad_15 + lv_correccion_15 , lv_velocidad_15 + lv_correccion_15 )
EndWhile
MotorBC.Off ()
Sensor.SetMode ( lv_sensor_15 , lv_mode_15 )
EndSub
Sub m_giro_grados_3
lv_signo_16 = ( lv_velocidad1_16 / lv_velocidad2_16 ) / Math.Abs ( lv_velocidad1_16 / lv_velocidad2_16 )
lv_vmin_16 = Math.Min ( Math.Abs ( lv_velocidad1_16 ) , Math.Abs ( lv_velocidad2_16 ) )
lv_vmax_16 = Math.Max ( Math.Abs ( lv_velocidad1_16 ) , Math.Abs ( lv_velocidad2_16 ) )
lv_encoder_16 = lv_grados_16 * pr_giro_g1 * ( - 2 / ( lv_signo_16 * lv_vmin_16 / lv_vmax_16 - 1 ) )
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad1_16 , lv_velocidad2_16 , lv_encoder_16 , "True" )
lv_velocidad1_16 = 0
lv_velocidad2_16 = 0
lv_grados_16 = 0
Program.Delay ( 100 )
EndSub
Sub m_giro_tiempo_3
Time.Reset3 ()
While Time.Get3 () < lv_tiempo_17
Motor.StartSync ( "BC" , - lv_velocidad1_17 , lv_velocidad2_17 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub m_giro_gradosf_3
lv_signo_18 = ( lv_velocidad1_18 / lv_velocidad2_18 ) / Math.Abs ( lv_velocidad1_18 / lv_velocidad2_18 )
lv_vmin_18 = Math.Min ( Math.Abs ( lv_velocidad1_18 ) , Math.Abs ( lv_velocidad2_18 ) )
lv_vmax_18 = Math.Max ( Math.Abs ( lv_velocidad1_18 ) , Math.Abs ( lv_velocidad2_18 ) )
lv_encoder_18 = lv_grados_18 * pr_giro_g1 * ( - 2 / ( lv_signo_18 * lv_vmin_18 / lv_vmax_18 - 1 ) )
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad1_18 , lv_velocidad2_18 , lv_encoder_18 , "False" )
lv_velocidad1_18 = 0
lv_velocidad2_18 = 0
lv_grados_18 = 0
Program.Delay ( 100 )
EndSub
Sub m_giro_tiempof_3
Time.Reset3 ()
While Time.Get3 () < lv_tiempo_19
Motor.StartSync ( "BC" , - lv_velocidad1_19 , lv_velocidad2_19 )
EndWhile
Motor.Stop ( "BC" , "False" )
EndSub
Sub m_giro_encoder_3
lv_encoder_20 = lv_distancia_20 / ( pr_giro_diametro * Math.Pi ) * 360
MotorBC.Off ()
Motor.MoveSync ( "BC" , - lv_velocidad1_20 , lv_velocidad2_20 , lv_encoder_20 , "True" )
EndSub
Sub m_smart_encoder31f_2
lv_velocidad_21 = lv_velocidad_21 * 1
lv_lectura1_21 = 50
lv_lectura3_21 = 50
lv_lectura4_21 = 50
lv_kp_21 = lv_velocidad_21 / 220
lv_kd_21 = lv_kp_21 * 28
lv_distancia_21 = 7 * 360 / ( pr_smart_diametro * Math.Pi )
lv_error_21 = 0
lv_olderror_21 = 0
lv_u_21 = 0
lv_sentido_21 = lv_velocidad_21 / Math.Abs ( lv_velocidad_21 )
lv_startvelocidad_21 = lv_velocidad_21
lv_startkp_21 = lv_kp_21
lv_startkd_21 = lv_kd_21
lv_encoder_21 = lv_encoder_21 / ( pr_smart_diametro * Math.Pi ) * 360
lv_startc_21 = Motor.GetCount ( "C" )
lv_encoderc_21 = 0
While Math.Abs ( lv_encoderc_21 ) < lv_encoder_21
lv_encoderc_21 = Motor.GetCount ( "C" ) - lv_startc_21
If lv_encoderc_21 < lv_distancia_21 Then
lv_velocidad_21 = 20
lv_kp_21 = 20 / 200
lv_kd_21 = lv_kp_21 * 28
Else
lv_velocidad_21 = lv_startvelocidad_21
lv_kp_21 = lv_startkp_21
lv_kd_21 = lv_startkd_21
EndIf
lv_lectura1_21 = ( Sensor.ReadPercent ( 1 ) - pr_smart_negro1 ) / pr_smart_blanco1 * ( 100 - pr_smart_negro1 )
lv_lectura3_21 = ( Sensor.ReadPercent ( 3 ) - pr_smart_negro3 ) / pr_smart_blanco3 * ( 100 - pr_smart_negro3 )
lv_error_21 = ( lv_lectura3_21 - lv_lectura1_21 ) * lv_sentido_21 * 1
lv_u_21 = lv_error_21 * lv_kp_21 + ( lv_error_21 - lv_olderror_21 ) * lv_kd_21
Motor.StartSync ( "BC" , - ( lv_velocidad_21 + lv_u_21 ) , lv_velocidad_21 - lv_u_21 )
lv_olderror_21 = lv_error_21
EndWhile
MotorBC.Off ()
EndSub
Sub m_siguelineas_cruce_externof_2
lv_velocidad_22 = lv_velocidad_22 * 1
lv_lectura1_22 = 50
lv_lectura3_22 = 50
lv_lectura4_22 = 50
lv_kp_22 = lv_velocidad_22 / 220
lv_kd_22 = lv_kp_22 * 24
lv_error_22 = 0
lv_olderror_22 = 0
lv_u_22 = 0
lv_sentido_22 = lv_velocidad_22 / Math.Abs ( lv_velocidad_22 )
lv_lectura_22 = 50
While lv_lectura_22 > 10
If lv_reader_22 = 3 Then
lv_lectura_22 = lv_lectura3_22
lv_lecturaizq_22 = lv_lectura1_22
lv_lecturadch_22 = lv_lectura4_22
Else
lv_lectura_22 = lv_lectura4_22
lv_lecturaizq_22 = lv_lectura3_22
lv_lecturadch_22 = lv_lectura1_22
EndIf
lv_lectura1_22 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_22 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_lectura4_22 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_22 = ( lv_lecturaizq_22 - lv_lecturadch_22 ) * lv_sentido_22 * 1
lv_u_22 = lv_error_22 * lv_kp_22 + ( lv_error_22 - lv_olderror_22 ) * lv_kd_22
Motor.StartSync ( "BC" , - ( lv_velocidad_22 + lv_u_22 ) , lv_velocidad_22 - lv_u_22 )
lv_olderror_22 = lv_error_22
EndWhile
MotorBC.Off ()
EndSub
Sub m_siguelineas_encoder31f_2
lv_velocidad_23 = lv_velocidad_23 * 1
lv_lectura1_23 = 50
lv_lectura3_23 = 50
lv_lectura4_23 = 50
lv_kp_23 = lv_velocidad_23 / 220
lv_kd_23 = lv_kp_23 * 24
lv_error_23 = 0
lv_olderror_23 = 0
lv_u_23 = 0
lv_sentido_23 = lv_velocidad_23 / Math.Abs ( lv_velocidad_23 )
lv_encoder_23 = lv_encoder_23 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_23 = MotorC.GetTacho ()
lv_encoderc_23 = 0
While Math.Abs ( lv_encoderc_23 ) < lv_encoder_23
lv_encoderc_23 = MotorC.GetTacho () - lv_startc_23
lv_lectura1_23 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_23 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_error_23 = ( lv_lectura3_23 - lv_lectura1_23 ) * lv_sentido_23 * 1
lv_u_23 = lv_error_23 * lv_kp_23 + ( lv_error_23 - lv_olderror_23 ) * lv_kd_23
Motor.StartSync ( "BC" , - ( lv_velocidad_23 + lv_u_23 ) , lv_velocidad_23 - lv_u_23 )
lv_olderror_23 = lv_error_23
EndWhile
MotorBC.Off ()
EndSub
Sub m_siguelineas_encoder31_2
lv_velocidad_24 = lv_velocidad_24 * 1
lv_lectura1_24 = 50
lv_lectura3_24 = 50
lv_lectura4_24 = 50
lv_kp_24 = lv_velocidad_24 / 220
lv_kd_24 = lv_kp_24 * 24
lv_error_24 = 0
lv_olderror_24 = 0
lv_u_24 = 0
lv_sentido_24 = lv_velocidad_24 / Math.Abs ( lv_velocidad_24 )
lv_encoder_24 = lv_encoder_24 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_24 = MotorC.GetTacho ()
lv_encoderc_24 = 0
While Math.Abs ( lv_encoderc_24 ) < lv_encoder_24
lv_encoderc_24 = MotorC.GetTacho () - lv_startc_24
lv_lectura1_24 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_24 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_error_24 = ( lv_lectura3_24 - lv_lectura1_24 ) * lv_sentido_24 * 1
lv_u_24 = lv_error_24 * lv_kp_24 + ( lv_error_24 - lv_olderror_24 ) * lv_kd_24
Motor.StartSync ( "BC" , - ( lv_velocidad_24 + lv_u_24 ) , lv_velocidad_24 - lv_u_24 )
lv_olderror_24 = lv_error_24
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_color31f_2
lv_mode_25 = Sensor.GetMode ( 4 )
Sensor.SetMode ( 4 , 2 )
lv_velocidad_25 = lv_velocidad_25 * 1
lv_lectura1_25 = 50
lv_lectura3_25 = 50
lv_lectura4_25 = 50
lv_kp_25 = lv_velocidad_25 / 220
lv_kd_25 = lv_kp_25 * 24
lv_error_25 = 0
lv_olderror_25 = 0
lv_u_25 = 0
lv_sentido_25 = lv_velocidad_25 / Math.Abs ( lv_velocidad_25 )
While Sensor.ReadRawValue ( 4 , 0 ) <> lv_color_25
lv_lectura1_25 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_25 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_25 = ( lv_lectura3_25 - lv_lectura1_25 ) * lv_sentido_25 * 1
lv_u_25 = lv_error_25 * lv_kp_25 + ( lv_error_25 - lv_olderror_25 ) * lv_kd_25
Motor.StartSync ( "BC" , - ( lv_velocidad_25 + lv_u_25 ) , lv_velocidad_25 - lv_u_25 )
lv_olderror_25 = lv_error_25
EndWhile
MotorBC.Off ()
Sensor.SetMode ( 4 , lv_mode_25 )
EndSub
Sub m_rgb_detect_3
lv_sens_mode_26 = Sensor.GetMode ( lv_sens_26 )
Sensor.SetMode ( lv_sens_26 , 4 )
lv_red_26 = 30
lv_yellow_26 = 60
lv_green_26 = 170
lv_blue_26 = 330
lv_rwhite_26 = 40
lv_gwhite_26 = 52
lv_bwhite_26 = 41
lv_hue_26 = 0
lv_sat_26 = 0
lv_value_26 = 0
lv_color_26 = 0
lv_rnormarray_26 [ 0 ] = 0
lv_gnormarray_26 [ 0 ] = 0
lv_bnormarray_26 [ 0 ] = 0
LCD.Clear ()
For lv_j_26 = 1 To lv_reps_26 Step 1
lv_rgb_26 = Sensor.ReadRaw ( lv_sens_26 , 3 )
lv_rraw_26 = lv_rgb_26 [ 0 ]
lv_graw_26 = lv_rgb_26 [ 1 ]
lv_braw_26 = lv_rgb_26 [ 2 ]
lv_rnormarray_26 [ lv_j_26 ] = Math.Round ( lv_rraw_26 / lv_rwhite_26 * 255 )
lv_gnormarray_26 [ lv_j_26 ] = Math.Round ( lv_graw_26 / lv_gwhite_26 * 255 )
lv_bnormarray_26 [ lv_j_26 ] = Math.Round ( lv_braw_26 / lv_bwhite_26 * 255 )
Program.Delay ( 5 )
EndFor
For lv_j_26 = 1 To lv_reps_26 Step 2
lv_rnorm_26 = lv_rnormarray_26 [ lv_j_26 ] + lv_rnormarray_26 [ lv_j_26 + 1 ]
lv_gnorm_26 = lv_gnormarray_26 [ lv_j_26 ] + lv_gnormarray_26 [ lv_j_26 + 1 ]
lv_bnorm_26 = lv_bnormarray_26 [ lv_j_26 ] + lv_bnormarray_26 [ lv_j_26 + 1 ]
EndFor
lv_rnorm_26 = lv_rnorm_26 / lv_reps_26
lv_gnorm_26 = lv_gnorm_26 / lv_reps_26
lv_bnorm_26 = lv_bnorm_26 / lv_reps_26
lv_max_26 = Math.Max ( Math.Max ( lv_rnorm_26 , lv_gnorm_26 ) , lv_bnorm_26 )
lv_min_26 = Math.Min ( Math.Min ( lv_rnorm_26 , lv_gnorm_26 ) , lv_bnorm_26 )
If lv_max_26 = lv_min_26 Then
lv_hue_26 = 0
ElseIf lv_max_26 = lv_rnorm_26 Then
If lv_gnorm_26 >= lv_bnorm_26 Then
lv_hue_26 = 60 * ( lv_gnorm_26 - lv_bnorm_26 ) / ( lv_max_26 - lv_min_26 )
Else
lv_hue_26 = 60 * ( lv_gnorm_26 - lv_bnorm_26 ) / ( lv_max_26 - lv_min_26 ) + 360
EndIf
ElseIf lv_max_26 = lv_gnorm_26 Then
lv_hue_26 = 60 * ( lv_bnorm_26 - lv_rnorm_26 ) / ( lv_max_26 - lv_min_26 ) + 120
Else
lv_hue_26 = 60 * ( lv_rnorm_26 - lv_gnorm_26 ) / ( lv_max_26 - lv_min_26 ) + 240
EndIf
If lv_max_26 = 0 Then
lv_sat_26 = 0
Else
lv_sat_26 = 1 - lv_min_26 / lv_max_26
EndIf
lv_value_26 = lv_max_26
lv_rgbgrey_26 = ( pr_rgb_valueblanco + pr_rgb_valuenegro ) / 2
If lv_rnorm_26 + lv_gnorm_26 + lv_bnorm_26 <= 3 Then
lv_color_26 = 0
Else
If lv_sat_26 < 0.2 Then
If lv_value_26 > lv_rgbgrey_26 Then
lv_color_26 = 6
Else
lv_color_26 = 1
EndIf
Else
If lv_hue_26 >= 0 And lv_hue_26 < lv_red_26 Then
lv_color_26 = 5
ElseIf lv_hue_26 >= lv_red_26 And lv_hue_26 < lv_yellow_26 Then
lv_color_26 = 4
ElseIf lv_hue_26 >= lv_yellow_26 And lv_hue_26 < lv_green_26 Then
lv_color_26 = 3
ElseIf lv_hue_26 >= lv_green_26 And lv_hue_26 < lv_blue_26 Then
lv_color_26 = 2
Else
lv_color_26 = 5
EndIf
EndIf
EndIf
LCD.StopUpdate ()
LCD.Clear ()
LCD.Write ( 33 , 20 , "R: " + lv_rraw_26 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_26 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_26 )
LCD.Write ( 33 , 70 , "color: " + lv_color_26 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_26 )
LCD.Update ()
Sensor.SetMode ( lv_sens_26 , lv_sens_mode_26 )
EndSub
Sub m_rgb_gritar_1
If lv_color_27 = 0 Then
Speaker.Play ( 100 , "WRO2024/Media/Zero" )
ElseIf lv_color_27 = 1 Then
Speaker.Play ( 100 , "WRO2024/Media/Black" )
ElseIf lv_color_27 = 2 Then
Speaker.Play ( 100 , "WRO2024/Media/BLUE" )
ElseIf lv_color_27 = 3 Then
Speaker.Play ( 100 , "WRO2024/Media/GREEN" )
ElseIf lv_color_27 = 4 Then
Speaker.Play ( 100 , "WRO2024/Media/YELLOW" )
ElseIf lv_color_27 = 5 Then
Speaker.Play ( 100 , "WRO2024/Media/RED" )
ElseIf lv_color_27 = 6 Then
Speaker.Play ( 100 , "WRO2024/Media/White" )
ElseIf lv_color_27 = 7 Then
Speaker.Play ( 100 , "WRO2024/Media/Brown" )
EndIf
Speaker.Wait ()
EndSub
