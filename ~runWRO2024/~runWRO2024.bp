pr_giro_g1 = 0
pr_rgb_valuenegro = 0
pr_rgb_valueblanco = 0
pr_rgb_rwhite = 0
pr_rgb_gwhite = 0
pr_rgb_bwhite = 0
pr_recto_diametro = 0
pr_giro_diametro = 0
pr_siguelineas_diametro = 0
pr_smart_diametro = 0
pr_siguelineas_negro1 = 0
pr_siguelineas_negro3 = 0
pr_siguelineas_negro4 = 0
pr_siguelineas_blanco1 = 0
pr_siguelineas_blanco3 = 0
pr_siguelineas_blanco4 = 0
pr_smart_negro1 = 0
pr_smart_negro3 = 0
pr_smart_negro4 = 0
pr_smart_blanco1 = 0
pr_smart_blanco3 = 0
pr_smart_blanco4 = 0
pr_recto_negro = 0
pr_recto_blanco = 0
pr_giro_negro = 0
pr_giro_blanco = 0
lv_velocidad_11 = 0
lv_timer_11 = 0
lv_velocidad_4 = 0
lv_encoder_4 = 0
lv_velocidad_12 = 0
lv_encoder_12 = 0
lv_velocidad_13 = 0
lv_tiempo_13 = 0
lv_velocidad_14 = 0
lv_distancia_14 = 0
lv_velocidad1_22 = 0
lv_velocidad2_22 = 0
lv_grados_22 = 0
lv_velocidad1_23 = 0
lv_velocidad2_23 = 0
lv_tiempo_23 = 0
lv_v0_15 = 0
lv_vmax_15 = 0
lv_distanciaaccel_15 = 0
lv_distanciacrucero_15 = 0
lv_distanciadecel_15 = 0
lv_velocidad1_24 = 0
lv_velocidad2_24 = 0
lv_grados_24 = 0
lv_velocidad1_25 = 0
lv_velocidad2_25 = 0
lv_tiempo_25 = 0
lv_v0_16 = 0
lv_vmax_16 = 0
lv_distanciaaccel_16 = 0
lv_distanciacrucero_16 = 0
lv_distanciadecel_16 = 0
lv_velocidad_17 = 0
lv_distancia_17 = 0
lv_velocidad_29 = 0
lv_encoder_29 = 0
lv_velocidad_30 = 0
lv_velocidad_31 = 0
lv_color_31 = 0
lv_velocidad_18 = 0
lv_sensor_18 = 0
lv_color_18 = 0
lv_velocidad_32 = 0
lv_color_32 = 0
lv_altura_3 = 0
lv_velocidad_19 = 0
lv_sensor_19 = 0
lv_color_19 = 0
lv_velocidad_20 = 0
lv_sensor_20 = 0
lv_velocidad_33 = 0
lv_reader_33 = 0
lv_velocidad_21 = 0
lv_sensor_21 = 0
lv_velocidad1_26 = 0
lv_velocidad2_26 = 0
lv_distancia_26 = 0
lv_velocidad_34 = 0
lv_encoder_34 = 0
lv_velocidad_35 = 0
lv_color_35 = 0
lv_velocidad1_27 = 0
lv_velocidad2_27 = 0
lv_distancia_27 = 0
lv_velocidad1_28 = 0
lv_velocidad2_28 = 0
lv_sens_28 = 0
lv_sens_36 = 0
lv_reps_36 = 0
lv_color_36 = 0
lv_color_37 = 0
lv_numero_7 = 0
gv_base = 0
gv_color = 0
lv_color_6 = 0
gv_encodera = 0
gv_encoderd = 0
gv_errora = 0
gv_olderrora = 0
gv_errord = 0
gv_olderrord = 0
gv_diametro = 0
gv_negro1 = 0
gv_negro3 = 0
gv_negro4 = 0
gv_blanco1 = 0
gv_blanco3 = 0
gv_blanco4 = 0
gv_encodera = 0
gv_encoderd = 0
gv_errora = 0
gv_olderrora = 0
gv_errord = 0
gv_olderrord = 0
f_setup_0 ()
Thread.Run = f_controlbrazo_0
f_main_0 ()
Sub f_setup_0
Sensor.SetMode ( 1 , 0 )
Sensor.SetMode ( 2 , 4 )
Sensor.SetMode ( 3 , 0 )
Sensor.SetMode ( 4 , 0 )
gv_diametro = 6.24
pr_giro_g1 = 965 / 360
gv_negro1 = 29
gv_negro3 = 29
gv_negro4 = 23
gv_blanco1 = 80
gv_blanco3 = 84
gv_blanco4 = 62
pr_rgb_valuenegro = 4
pr_rgb_valueblanco = 32
pr_rgb_rwhite = 57
pr_rgb_gwhite = 71
pr_rgb_bwhite = 73
pr_recto_diametro = gv_diametro
pr_giro_diametro = gv_diametro
pr_siguelineas_diametro = gv_diametro
pr_smart_diametro = gv_diametro
pr_siguelineas_negro1 = gv_negro1
pr_siguelineas_negro3 = gv_negro3
pr_siguelineas_negro4 = gv_negro4
pr_siguelineas_blanco1 = gv_blanco1
pr_siguelineas_blanco3 = gv_blanco3
pr_siguelineas_blanco4 = gv_blanco4
pr_smart_negro1 = gv_negro1
pr_smart_negro3 = gv_negro3
pr_smart_negro4 = gv_negro4
pr_smart_blanco1 = gv_blanco1
pr_smart_blanco3 = gv_blanco3
pr_smart_blanco4 = gv_blanco4
pr_recto_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_recto_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
pr_giro_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_giro_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
EndSub
Sub f_startarm_0
lv_velocidad_11 = - 50
lv_timer_11 = 800
m_brazo_dtimer_2 ()
lv_velocidad_4 = 50
lv_encoder_4 = - 1100
f_aencoder_2 ()
gv_encodera = 0
MotorA.ResetCount ()
MotorD.ResetCount ()
lv_velocidad_4 = 50
lv_encoder_4 = 650
f_aencoder_2 ()
MotorA.ResetCount ()
MotorD.ResetCount ()
gv_encodera = 0
lv_velocidad_12 = 50
lv_encoder_12 = 80
m_brazo_dencoder_2 ()
Buttons.Wait ()
Program.Delay ( 250 )
EndSub
Sub f_main_0
f_gritarvoltaje_0 ()
f_startarm_0 ()
lv_velocidad_13 = - 80
lv_tiempo_13 = 600
m_recto_tiempo_2 ()
lv_velocidad_14 = 55
lv_distancia_14 = 4.5
m_recto_encoder_2 ()
lv_velocidad_12 = 50
lv_encoder_12 = 320
m_brazo_dencoder_2 ()
lv_velocidad1_22 = 70
lv_velocidad2_22 = - 21
lv_grados_22 = 90
m_giro_gradosf_3 ()
lv_velocidad1_23 = 70 * 0.3
lv_velocidad2_23 = - 21 * 0.3
lv_tiempo_23 = 200
m_giro_tiempof_3 ()
lv_v0_15 = 15
lv_vmax_15 = 30
lv_distanciaaccel_15 = 3.5
lv_distanciacrucero_15 = 20
lv_distanciadecel_15 = 3
m_recto_acceldecel_5 ()
lv_velocidad_12 = 50
lv_encoder_12 = - 20
m_brazo_dencoder_2 ()
lv_velocidad_4 = 50
lv_encoder_4 = - 200
f_aencoder_2 ()
f_coger_0 ()
f_coger_0 ()
lv_velocidad_14 = 30
lv_distancia_14 = 1
m_recto_encoder_2 ()
lv_velocidad1_24 = - 40
lv_velocidad2_24 = 40
lv_grados_24 = 100
m_giro_grados_3 ()
lv_velocidad1_25 = - 80
lv_velocidad2_25 = - 60
lv_tiempo_25 = 800
m_giro_tiempo_3 ()
lv_v0_16 = 15
lv_vmax_16 = 89
lv_distanciaaccel_16 = 10
lv_distanciacrucero_16 = 0
lv_distanciadecel_16 = 0
m_recto_acceldecelf_5 ()
lv_velocidad_17 = 100
lv_distancia_17 = 28
m_recto_encoderf_2 ()
lv_velocidad_29 = 80
lv_encoder_29 = 10
m_siguelineas_encoder14f_2 ()
lv_velocidad_17 = 80
lv_distancia_17 = 20
m_recto_encoderf_2 ()
Thread.Run = f_levanta_0
lv_velocidad_30 = 70
m_siguelineas_cruce14_1 ()
lv_velocidad1_24 = 45
lv_velocidad2_24 = - 15
lv_grados_24 = 92
m_giro_grados_3 ()
lv_velocidad_12 = 80
lv_encoder_12 = 13
m_brazo_dencoder_2 ()
lv_velocidad_31 = 50
lv_color_31 = 5
m_siguelineas_color14f_2 ()
lv_velocidad_14 = 50
lv_distancia_14 = 10
m_recto_encoder_2 ()
lv_velocidad1_24 = 50
lv_velocidad2_24 = - 10
lv_grados_24 = 98
m_giro_grados_3 ()
lv_velocidad_14 = - 80
lv_distancia_14 = 21
m_recto_encoder_2 ()
lv_velocidad_13 = - 40
lv_tiempo_13 = 500
m_recto_tiempo_2 ()
lv_velocidad_14 = 20
lv_distancia_14 = 3.5
m_recto_encoder_2 ()
lv_velocidad_12 = 50
lv_encoder_12 = 400
m_brazo_dencoder_2 ()
lv_velocidad1_24 = 50
lv_velocidad2_24 = - 18
lv_grados_24 = 110
m_giro_grados_3 ()
lv_velocidad_18 = 20
lv_sensor_18 = 3
lv_color_18 = 5
m_recto_color1f_3 ()
lv_velocidad_14 = 20
lv_distancia_14 = 22.5
m_recto_encoder_2 ()
lv_velocidad_12 = 50
lv_encoder_12 = 260
m_brazo_dencoder_2 ()
lv_velocidad_4 = 50
lv_encoder_4 = 0
f_aencoder_2 ()
lv_velocidad_12 = 50
lv_encoder_12 = - 10
m_brazo_dencoder_2 ()
lv_velocidad_4 = 50
lv_encoder_4 = - 150
f_aencoder_2 ()
f_coger_0 ()
lv_velocidad1_24 = 3
lv_velocidad2_24 = 90
lv_grados_24 = 196
m_giro_grados_3 ()
lv_velocidad_32 = 70
lv_color_32 = 5
m_siguelineas_color14_2 ()
lv_velocidad_14 = 30
lv_distancia_14 = 6
m_recto_encoder_2 ()
lv_velocidad1_24 = - 10
lv_velocidad2_24 = 30
lv_grados_24 = 35
m_giro_grados_3 ()
lv_velocidad_14 = 50
lv_distancia_14 = 55
m_recto_encoder_2 ()
lv_altura_3 = 5
f_soltar_1 ()
lv_velocidad_14 = - 40
lv_distancia_14 = 10
m_recto_encoder_2 ()
lv_velocidad1_25 = 50
lv_velocidad2_25 = - 20
lv_tiempo_25 = 1000
m_giro_tiempo_3 ()
lv_velocidad_18 = 50
lv_sensor_18 = 1
lv_color_18 = 5
m_recto_color1f_3 ()
lv_velocidad_17 = 50
lv_distancia_17 = 15
m_recto_encoderf_2 ()
lv_velocidad1_24 = - 5
lv_velocidad2_24 = 90
lv_grados_24 = 87
m_giro_grados_3 ()
lv_velocidad_13 = - 40
lv_tiempo_13 = 800
m_recto_tiempo_2 ()
lv_velocidad_12 = 80
lv_encoder_12 = 1000
m_brazo_dencoder_2 ()
lv_velocidad_14 = 70
lv_distancia_14 = 41.5
m_recto_encoder_2 ()
lv_velocidad_4 = 60
lv_encoder_4 = 50
f_aencoder_2 ()
lv_velocidad_12 = 80
lv_encoder_12 = 10
m_brazo_dencoder_2 ()
lv_velocidad_4 = 60
lv_encoder_4 = - 200
f_aencoder_2 ()
lv_velocidad_12 = 80
lv_encoder_12 = 200
m_brazo_dencoder_2 ()
lv_velocidad_17 = - 80
lv_distancia_17 = 30
m_recto_encoderf_2 ()
lv_velocidad_13 = - 40
lv_tiempo_13 = 600
m_recto_tiempo_2 ()
lv_velocidad_19 = 60
lv_sensor_19 = 4
lv_color_19 = 4
m_recto_color1_3 ()
lv_velocidad_14 = - 70
lv_distancia_14 = 25
m_recto_encoder_2 ()
lv_altura_3 = 1
f_soltar_1 ()
lv_altura_3 = 1
f_soltar_1 ()
lv_velocidad_14 = - 40
lv_distancia_14 = 6
m_recto_encoder_2 ()
lv_velocidad1_24 = 10
lv_velocidad2_24 = 90
lv_grados_24 = 92
m_giro_grados_3 ()
lv_velocidad_17 = 90
lv_distancia_17 = 45
m_recto_encoderf_2 ()
lv_velocidad_20 = 40
lv_sensor_20 = 1
m_recto_negro1_2 ()
lv_velocidad1_24 = 56
lv_velocidad2_24 = - 16
lv_grados_24 = 80
m_giro_grados_3 ()
lv_velocidad_33 = 50
lv_reader_33 = 4
m_siguelineas_cruce_externof_2 ()
lv_velocidad_14 = 50
lv_distancia_14 = 25
m_recto_encoder_2 ()
lv_velocidad1_24 = 5
lv_velocidad2_24 = 60
lv_grados_24 = 92
m_giro_grados_3 ()
lv_velocidad_14 = 50
lv_distancia_14 = 16
m_recto_encoder_2 ()
lv_altura_3 = 1
f_soltar_1 ()
lv_velocidad1_24 = - 30
lv_velocidad2_24 = 30
lv_grados_24 = 10
m_giro_grados_3 ()
lv_velocidad_12 = 80
lv_encoder_12 = 500
m_brazo_dencoder_2 ()
lv_velocidad_4 = 60
lv_encoder_4 = 50
f_aencoder_2 ()
lv_velocidad1_24 = 30
lv_velocidad2_24 = - 30
lv_grados_24 = 10
m_giro_grados_3 ()
lv_velocidad_14 = - 50
lv_distancia_14 = 16
m_recto_encoder_2 ()
lv_velocidad1_24 = - 10
lv_velocidad2_24 = - 60
lv_grados_24 = 92
m_giro_grados_3 ()
lv_velocidad_32 = 60
lv_color_32 = 5
m_siguelineas_color14_2 ()
lv_velocidad_14 = 60
lv_distancia_14 = 20
m_recto_encoder_2 ()
lv_velocidad1_24 = 30
lv_velocidad2_24 = - 30
lv_grados_24 = 91
m_giro_grados_3 ()
lv_velocidad_12 = 80
lv_encoder_12 = 1000
m_brazo_dencoder_2 ()
lv_velocidad_14 = 30
lv_distancia_14 = 30
m_recto_encoder_2 ()
lv_velocidad1_24 = 20
lv_velocidad2_24 = - 20
lv_grados_24 = 109
m_giro_grados_3 ()
lv_velocidad_13 = 70
lv_tiempo_13 = 1500
m_recto_tiempo_2 ()
lv_velocidad1_24 = - 30
lv_velocidad2_24 = 30
lv_grados_24 = 20
m_giro_grados_3 ()
lv_velocidad_14 = - 70
lv_distancia_14 = 20
m_recto_encoder_2 ()
lv_velocidad1_24 = 50
lv_velocidad2_24 = - 50
lv_grados_24 = 180
m_giro_grados_3 ()
lv_velocidad_14 = 80
lv_distancia_14 = 54
m_recto_encoder_2 ()
lv_velocidad_21 = 40
lv_sensor_21 = 1
m_recto_blanco1_2 ()
lv_velocidad1_24 = 60
lv_velocidad2_24 = - 15
lv_grados_24 = 100
m_giro_grados_3 ()
lv_velocidad_32 = 60
lv_color_32 = 5
m_siguelineas_color14_2 ()
lv_velocidad_14 = 80
lv_distancia_14 = 50
m_recto_encoder_2 ()
lv_velocidad_12 = 80
lv_encoder_12 = 300
m_brazo_dencoder_2 ()
lv_velocidad_4 = 50
lv_encoder_4 = - 300
f_aencoder_2 ()
lv_velocidad_14 = - 80
lv_distancia_14 = 50
m_recto_encoder_2 ()
lv_velocidad_4 = 50
lv_encoder_4 = 10
f_aencoder_2 ()
lv_velocidad_12 = 80
lv_encoder_12 = 50
m_brazo_dencoder_2 ()
lv_velocidad1_24 = 50
lv_velocidad2_24 = - 50
lv_grados_24 = 160
m_giro_grados_3 ()
lv_velocidad_14 = 80
lv_distancia_14 = 80
m_recto_encoder_2 ()
lv_velocidad1_24 = - 30
lv_velocidad2_24 = 30
lv_grados_24 = 90
m_giro_grados_3 ()
lv_velocidad1_26 = 60
lv_velocidad2_26 = 80
lv_distancia_26 = 30
m_giro_encoder_3 ()
lv_velocidad_14 = 80
lv_distancia_14 = 30
m_recto_encoder_2 ()
lv_velocidad1_24 = 0
lv_velocidad2_24 = 40
lv_grados_24 = 94
m_giro_grados_3 ()
lv_velocidad_21 = 40
lv_sensor_21 = 1
m_recto_blanco1_2 ()
lv_velocidad1_24 = 56
lv_velocidad2_24 = - 14
lv_grados_24 = 92
m_giro_grados_3 ()
lv_velocidad_30 = 50
m_siguelineas_cruce14_1 ()
lv_velocidad1_24 = 0
lv_velocidad2_24 = 60
lv_grados_24 = 45
m_giro_grados_3 ()
lv_velocidad1_26 = 60
lv_velocidad2_26 = 10
lv_distancia_26 = 50
m_giro_encoder_3 ()
lv_velocidad_14 = 30
lv_distancia_14 = 15
m_recto_encoder_2 ()
lv_velocidad_12 = 80
lv_encoder_12 = 0
m_brazo_dencoder_2 ()
lv_velocidad_4 = 60
lv_encoder_4 = 0
f_aencoder_2 ()
EndSub
Sub f_controlbrazo_0
While "True"
gv_errora = gv_encodera - MotorA.GetTacho ()
gv_correcciona = gv_errora * 1 + ( gv_errora - gv_olderrora ) * 0.6
MotorA.StartSpeed ( gv_correcciona )
EndWhile
EndSub
Sub f_detecta_0
Speaker.Play ( 100 , "WRO2024/Media/Connect" )
EndSub
Sub f_levanta_0
lv_velocidad_12 = 80
lv_encoder_12 = 600
m_brazo_dencoder_2 ()
EndSub
Sub f_coger_0
lv_velocidad_12 = 70
lv_encoder_12 = 350
m_brazo_dencoder_2 ()
lv_v0_15 = 15
lv_vmax_15 = 30
lv_distanciaaccel_15 = 5
lv_distanciacrucero_15 = 0
lv_distanciadecel_15 = 4.75
m_recto_acceldecel_5 ()
lv_velocidad_12 = 70
lv_encoder_12 = 250
m_brazo_dencoder_2 ()
lv_velocidad_4 = 50
lv_encoder_4 = 0
f_aencoder_2 ()
lv_velocidad_12 = 70
lv_encoder_12 = - 10
m_brazo_dencoder_2 ()
lv_velocidad_4 = 50
lv_encoder_4 = - 220
f_aencoder_2 ()
lv_velocidad_12 = 70
lv_encoder_12 = 100
m_brazo_dencoder_2 ()
EndSub
Sub f_soltar_1
lv_altura_3 = lv_altura_3 * 0.75
lv_velocidad_12 = 70
lv_encoder_12 = 50
m_brazo_dencoder_2 ()
lv_velocidad_4 = 50
lv_encoder_4 = 50
f_aencoder_2 ()
lv_velocidad_12 = 70
lv_encoder_12 = Math.Min ( 254 * ( lv_altura_3 ) , 2000 )
m_brazo_dencoder_2 ()
lv_velocidad_4 = 50
lv_encoder_4 = - 200
f_aencoder_2 ()
lv_velocidad_12 = 50
lv_encoder_12 = MotorD.GetTacho () + 200
m_brazo_dencoder_2 ()
Program.Delay ( 200 )
lv_velocidad_14 = - 10
lv_distancia_14 = 11
m_recto_encoder_2 ()
lv_velocidad_12 = 50
lv_encoder_12 = 200
m_brazo_dencoder_2 ()
EndSub
Sub f_aencoder_2
lv_encdiff_4 = lv_encoder_4 - MotorA.GetTacho ()
lv_signo_4 = Math.Abs ( lv_encdiff_4 ) / lv_encdiff_4
lv_safetytimer_4 = 1200
Time.Reset3 ()
If lv_encdiff_4 <> 0 Then
While Math.Abs ( MotorA.GetTacho () - lv_encoder_4 ) > 15 And Time.Get3 () < lv_safetytimer_4
gv_encodera = gv_encodera + ( lv_velocidad_4 / 15.5 * lv_signo_4 )
If lv_signo_4 > 0 Then
gv_encodera = Math.Min ( gv_encodera , lv_encoder_4 )
Else
gv_encodera = Math.Max ( gv_encodera , lv_encoder_4 )
EndIf
EndWhile
gv_encodera = lv_encoder_4
MotorA.OffAndBrake ()
EndIf
EndSub
Sub f_gritarnumero_1
If lv_numero_7 = 0 Then
Speaker.Play ( 100 , "WRO2024/Media/ZERO" )
ElseIf lv_numero_7 = 1 Then
Speaker.Play ( 100 , "WRO2024/Media/One" )
ElseIf lv_numero_7 = 2 Then
Speaker.Play ( 100 , "WRO2024/Media/Two" )
ElseIf lv_numero_7 = 3 Then
Speaker.Play ( 100 , "WRO2024/Media/Three" )
ElseIf lv_numero_7 = 4 Then
Speaker.Play ( 100 , "WRO2024/Media/Four" )
ElseIf lv_numero_7 = 5 Then
Speaker.Play ( 100 , "WRO2024/Media/Five" )
ElseIf lv_numero_7 = 6 Then
Speaker.Play ( 100 , "WRO2024/Media/Six" )
ElseIf lv_numero_7 = 7 Then
Speaker.Play ( 100 , "WRO2024/Media/Seven" )
ElseIf lv_numero_7 = 8 Then
Speaker.Play ( 100 , "WRO2024/Media/Eight" )
ElseIf lv_numero_7 = 9 Then
Speaker.Play ( 100 , "WRO2024/Media/Nine" )
ElseIf lv_numero_7 = 10 Then
Speaker.Play ( 100 , "WRO2024/Media/Ten" )
EndIf
Speaker.Wait ()
EndSub
Sub f_gritarvoltaje_0
lv_voltaje_8 = EV3.BatteryVoltage
lv_numero_7 = Math.Floor ( lv_voltaje_8 )
f_gritarnumero_1 ()
lv_numero_7 = Math.Floor ( lv_voltaje_8 * 10 ) - Math.Floor ( lv_voltaje_8 ) * 10
f_gritarnumero_1 ()
lv_numero_7 = Math.Floor ( lv_voltaje_8 * 100 ) - Math.Floor ( lv_voltaje_8 * 10 ) * 10
f_gritarnumero_1 ()
EndSub
Sub m_brazo_dtimer_2
Time.Reset1 ()
While Time.Get1 () < lv_timer_11
MotorD.StartSpeed ( lv_velocidad_11 )
EndWhile
MotorD.OffAndBrake ()
EndSub
Sub m_brazo_dencoder_2
lv_encdiff_12 = lv_encoder_12 - Motor.GetCount ( "D" )
lv_signo_12 = lv_encdiff_12 / Math.Abs ( lv_encdiff_12 )
lv_safetytimer_12 = Math.Max ( ( ( Math.abs ( lv_encdiff_12 ) / 100 ) / ( lv_velocidad_12 / 20 ) * 650 * 2 ) , 400 )
Time.Reset3 ()
If lv_encdiff_12 <> 0 Then
While Math.Abs ( Motor.GetCount ( "D" ) - lv_encoder_12 ) > 25 and Time.Get3 () < lv_safetytimer_12
MotorD.StartSpeed ( lv_signo_12 * lv_velocidad_12 )
LCD.Clear ()
LCD.Write ( 5 , 30 , "safetyTimer: " + lv_safetytimer_12 )
EndWhile
Motor.Stop ( "D" , "True" )
EndIf
EndSub
Sub m_recto_tiempo_2
lv_correccion_13 = 0
Time.Reset3 ()
MotorBC.Off ()
While Time.Get3 () < lv_tiempo_13
Motor.StartSync ( "BC" , - lv_velocidad_13 + lv_correccion_13 , lv_velocidad_13 + lv_correccion_13 )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_encoder_2
lv_correccion_14 = ( Math.abs ( lv_velocidad_14 ) - 20 ) * 0.05
lv_enc_14 = ( lv_distancia_14 - lv_correccion_14 ) * 360 / Math.Pi / pr_recto_diametro
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad_14 , lv_velocidad_14 , lv_enc_14 , "True" )
EndSub
Sub m_recto_acceldecel_5
lv_startb_15 = Motor.GetCount ( "B" )
lv_startc_15 = Motor.GetCount ( "C" )
lv_encoderb_15 = 0
lv_encoderc_15 = 0
lv_signo_15 = lv_v0_15 / Math.Abs ( lv_v0_15 )
lv_v0_15 = Math.Max ( 8 , Math.Abs ( lv_v0_15 ) ) * lv_signo_15
lv_vmax_15 = Math.Min ( 90 , Math.Abs ( lv_vmax_15 ) ) * lv_signo_15
lv_vel_15 = 0
lv_kp_15 = 0.4
lv_kd_15 = 0.5
lv_error_15 = 0
lv_olderror_15 = 0
lv_gradosaccel_15 = lv_distanciaaccel_15 * 360 / ( pr_recto_diametro * math.pi )
lv_gradoscrucero_15 = lv_distanciacrucero_15 * 360 / ( pr_recto_diametro * math.pi )
lv_gradosdecel_15 = lv_distanciadecel_15 * 360 / ( pr_recto_diametro * math.pi )
While Math.Abs ( lv_encoderc_15 ) < lv_gradosaccel_15 + lv_gradoscrucero_15 + lv_gradosdecel_15
lv_encoderb_15 = Motor.GetCount ( "B" ) * 1 - lv_startb_15
lv_encoderc_15 = Motor.GetCount ( "C" ) - lv_startc_15
If Math.Abs ( lv_encoderc_15 ) < lv_gradosaccel_15 + lv_gradoscrucero_15 Then
lv_pendiente_15 = ( lv_vmax_15 - lv_v0_15 ) / lv_gradosaccel_15 * lv_signo_15
If lv_signo_15 > 0 Then
lv_vel_15 = Math.Min ( lv_vmax_15 , lv_pendiente_15 * lv_encoderc_15 + lv_v0_15 )
Else
lv_vel_15 = Math.Max ( lv_vmax_15 , lv_pendiente_15 * lv_encoderc_15 + lv_v0_15 )
EndIf
Else
lv_pendiente_15 = ( lv_v0_15 - lv_vmax_15 ) / lv_gradosdecel_15 * lv_signo_15
If lv_signo_15 > 0 Then
lv_vel_15 = Math.Max ( lv_v0_15 , lv_pendiente_15 * ( lv_encoderc_15 - lv_gradosaccel_15 - lv_gradoscrucero_15 ) + lv_vmax_15 )
Else
lv_vel_15 = Math.Min ( lv_v0_15 , lv_pendiente_15 * ( lv_encoderc_15 + lv_gradosaccel_15 + lv_gradoscrucero_15 ) + lv_vmax_15 )
EndIf
EndIf
lv_error_15 = ( - 1 * lv_encoderb_15 - lv_encoderc_15 ) * 1
lv_correccion_15 = lv_error_15 * lv_kp_15 + ( lv_error_15 - lv_olderror_15 ) * lv_kd_15
Motor.StartSync ( "BC" , - ( lv_vel_15 - lv_correccion_15 ) , ( lv_vel_15 + lv_correccion_15 ) )
lv_olderror_15 = lv_error_15
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_acceldecelf_5
lv_startb_16 = Motor.GetCount ( "B" )
lv_startc_16 = Motor.GetCount ( "C" )
lv_encoderb_16 = 0
lv_encoderc_16 = 0
lv_signo_16 = lv_v0_16 / Math.Abs ( lv_v0_16 )
lv_v0_16 = Math.Max ( 8 , Math.Abs ( lv_v0_16 ) ) * lv_signo_16
lv_vmax_16 = Math.Min ( 90 , Math.Abs ( lv_vmax_16 ) ) * lv_signo_16
lv_vel_16 = 0
lv_kp_16 = 0.4
lv_kd_16 = 0.5
lv_error_16 = 0
lv_olderror_16 = 0
lv_gradosaccel_16 = lv_distanciaaccel_16 * 360 / ( pr_recto_diametro * math.pi )
lv_gradoscrucero_16 = lv_distanciacrucero_16 * 360 / ( pr_recto_diametro * math.pi )
lv_gradosdecel_16 = lv_distanciadecel_16 * 360 / ( pr_recto_diametro * math.pi )
While Math.Abs ( lv_encoderc_16 ) < lv_gradosaccel_16 + lv_gradoscrucero_16 + lv_gradosdecel_16
lv_encoderb_16 = Motor.GetCount ( "B" ) * 1 - lv_startb_16
lv_encoderc_16 = Motor.GetCount ( "C" ) - lv_startc_16
If Math.Abs ( lv_encoderc_16 ) < lv_gradosaccel_16 + lv_gradoscrucero_16 Then
lv_pendiente_16 = ( lv_vmax_16 - lv_v0_16 ) / lv_gradosaccel_16 * lv_signo_16
If lv_signo_16 > 0 Then
lv_vel_16 = Math.Min ( lv_vmax_16 , lv_pendiente_16 * lv_encoderc_16 + lv_v0_16 )
Else
lv_vel_16 = Math.Max ( lv_vmax_16 , lv_pendiente_16 * lv_encoderc_16 + lv_v0_16 )
EndIf
Else
lv_pendiente_16 = ( lv_v0_16 - lv_vmax_16 ) / lv_gradosdecel_16 * lv_signo_16
If lv_signo_16 > 0 Then
lv_vel_16 = Math.Max ( lv_v0_16 , lv_pendiente_16 * ( lv_encoderc_16 - lv_gradosaccel_16 - lv_gradoscrucero_16 ) + lv_vmax_16 )
Else
lv_vel_16 = Math.Min ( lv_v0_16 , lv_pendiente_16 * ( lv_encoderc_16 + lv_gradosaccel_16 + lv_gradoscrucero_16 ) + lv_vmax_16 )
EndIf
EndIf
lv_error_16 = ( - 1 * lv_encoderb_16 - lv_encoderc_16 ) * 1
lv_correccion_16 = lv_error_16 * lv_kp_16 + ( lv_error_16 - lv_olderror_16 ) * lv_kd_16
Motor.StartSync ( "BC" , - ( lv_vel_16 - lv_correccion_16 ) , ( lv_vel_16 + lv_correccion_16 ) )
lv_olderror_16 = lv_error_16
EndWhile
MotorBC.Off ()
EndSub
Sub m_recto_encoderf_2
lv_correccion_17 = ( Math.abs ( lv_velocidad_17 ) - 20 ) * 0.05
lv_enc_17 = ( lv_distancia_17 - lv_correccion_17 ) * 360 / Math.Pi / pr_recto_diametro
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad_17 , lv_velocidad_17 , lv_enc_17 , "False" )
EndSub
Sub m_recto_color1f_3
lv_correccion_18 = 0
lv_mode_18 = Sensor.GetMode ( lv_sensor_18 )
Sensor.SetMode ( lv_sensor_18 , 2 )
MotorBC.Off ()
While Sensor.ReadRawValue ( lv_sensor_18 , 0 ) <> lv_color_18
Motor.StartSync ( "BC" , - lv_velocidad_18 + lv_correccion_18 , lv_velocidad_18 + lv_correccion_18 )
EndWhile
MotorBC.Off ()
Sensor.SetMode ( lv_sensor_18 , lv_mode_18 )
EndSub
Sub m_recto_color1_3
lv_correccion_19 = 0
lv_mode_19 = Sensor.GetMode ( lv_sensor_19 )
Sensor.SetMode ( lv_sensor_19 , 2 )
MotorBC.Off ()
While Sensor.ReadRawValue ( lv_sensor_19 , 0 ) <> lv_color_19
Motor.StartSync ( "BC" , - lv_velocidad_19 + lv_correccion_19 , lv_velocidad_19 + lv_correccion_19 )
EndWhile
MotorBC.OffAndBrake ()
Sensor.SetMode ( lv_sensor_19 , lv_mode_19 )
EndSub
Sub m_recto_negro1_2
lv_correccion_20 = 0
MotorBC.Off ()
lv_lectura_20 = 50
While lv_lectura_20 > 15
lv_lectura_20 = ( Sensor.ReadPercent ( lv_sensor_20 ) - pr_recto_negro ) / pr_recto_blanco * ( 100 - pr_recto_negro )
Motor.StartSync ( "BC" , - lv_velocidad_20 + lv_correccion_20 , lv_velocidad_20 + lv_correccion_20 )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_blanco1_2
lv_correccion_21 = 0
MotorBC.Off ()
lv_lectura_21 = 50
While lv_lectura_21 < 60
lv_lectura_21 = ( Sensor.ReadPercent ( lv_sensor_21 ) - pr_recto_negro ) / pr_recto_blanco * ( 100 - pr_recto_negro )
Motor.StartSync ( "BC" , - lv_velocidad_21 + lv_correccion_21 , lv_velocidad_21 + lv_correccion_21 )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_giro_gradosf_3
lv_signo_22 = ( lv_velocidad1_22 / lv_velocidad2_22 ) / Math.Abs ( lv_velocidad1_22 / lv_velocidad2_22 )
lv_vmin_22 = Math.Min ( Math.Abs ( lv_velocidad1_22 ) , Math.Abs ( lv_velocidad2_22 ) )
lv_vmax_22 = Math.Max ( Math.Abs ( lv_velocidad1_22 ) , Math.Abs ( lv_velocidad2_22 ) )
lv_encoder_22 = lv_grados_22 * pr_giro_g1 * ( - 2 / ( lv_signo_22 * lv_vmin_22 / lv_vmax_22 - 1 ) )
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad1_22 , lv_velocidad2_22 , lv_encoder_22 , "False" )
lv_velocidad1_22 = 0
lv_velocidad2_22 = 0
lv_grados_22 = 0
Program.Delay ( 100 )
EndSub
Sub m_giro_tiempof_3
Time.Reset3 ()
While Time.Get3 () < lv_tiempo_23
Motor.StartSync ( "BC" , - lv_velocidad1_23 , lv_velocidad2_23 )
EndWhile
Motor.Stop ( "BC" , "False" )
EndSub
Sub m_giro_grados_3
lv_signo_24 = ( lv_velocidad1_24 / lv_velocidad2_24 ) / Math.Abs ( lv_velocidad1_24 / lv_velocidad2_24 )
lv_vmin_24 = Math.Min ( Math.Abs ( lv_velocidad1_24 ) , Math.Abs ( lv_velocidad2_24 ) )
lv_vmax_24 = Math.Max ( Math.Abs ( lv_velocidad1_24 ) , Math.Abs ( lv_velocidad2_24 ) )
lv_encoder_24 = lv_grados_24 * pr_giro_g1 * ( - 2 / ( lv_signo_24 * lv_vmin_24 / lv_vmax_24 - 1 ) )
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad1_24 , lv_velocidad2_24 , lv_encoder_24 , "True" )
lv_velocidad1_24 = 0
lv_velocidad2_24 = 0
lv_grados_24 = 0
Program.Delay ( 100 )
EndSub
Sub m_giro_tiempo_3
Time.Reset3 ()
While Time.Get3 () < lv_tiempo_25
Motor.StartSync ( "BC" , - lv_velocidad1_25 , lv_velocidad2_25 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub m_giro_encoder_3
lv_encoder_26 = lv_distancia_26 / ( pr_giro_diametro * Math.Pi ) * 360
MotorBC.Off ()
Motor.MoveSync ( "BC" , - lv_velocidad1_26 , lv_velocidad2_26 , lv_encoder_26 , "True" )
EndSub
Sub m_giro_encoderf_3
lv_encoder_27 = lv_distancia_27 / ( pr_giro_diametro * Math.Pi ) * 360
MotorBC.Off ()
Motor.MoveSync ( "BC" , - lv_velocidad1_27 , lv_velocidad2_27 , lv_encoder_27 , "False" )
EndSub
Sub m_giro_blanco1_3
lv_lectura_28 = 50
While lv_lectura_28 < 60
lv_lectura_28 = ( Sensor.ReadPercent ( lv_sens_28 ) - pr_giro_negro ) / pr_giro_blanco * ( 100 - pr_giro_negro )
Motor.StartSync ( "BC" , - lv_velocidad1_28 , lv_velocidad2_28 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub m_siguelineas_encoder14f_2
lv_velocidad_29 = lv_velocidad_29 * 1
lv_lectura1_29 = 50
lv_lectura3_29 = 50
lv_lectura4_29 = 50
lv_kp_29 = lv_velocidad_29 / 220
lv_kd_29 = lv_kp_29 * 24
lv_error_29 = 0
lv_olderror_29 = 0
lv_u_29 = 0
lv_sentido_29 = lv_velocidad_29 / Math.Abs ( lv_velocidad_29 )
lv_encoder_29 = lv_encoder_29 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_29 = MotorC.GetTacho ()
lv_encoderc_29 = 0
While Math.Abs ( lv_encoderc_29 ) < lv_encoder_29
lv_encoderc_29 = MotorC.GetTacho () - lv_startc_29
lv_lectura1_29 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura4_29 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_29 = ( lv_lectura1_29 - lv_lectura4_29 ) * lv_sentido_29 * 1
lv_u_29 = lv_error_29 * lv_kp_29 + ( lv_error_29 - lv_olderror_29 ) * lv_kd_29
Motor.StartSync ( "BC" , - ( lv_velocidad_29 + lv_u_29 ) , lv_velocidad_29 - lv_u_29 )
lv_olderror_29 = lv_error_29
EndWhile
MotorBC.Off ()
EndSub
Sub m_siguelineas_cruce14_1
lv_velocidad_30 = lv_velocidad_30 * 1
lv_lectura1_30 = 50
lv_lectura3_30 = 50
lv_lectura4_30 = 50
lv_kp_30 = lv_velocidad_30 / 220
lv_kd_30 = lv_kp_30 * 24
lv_error_30 = 0
lv_olderror_30 = 0
lv_u_30 = 0
lv_sentido_30 = lv_velocidad_30 / Math.Abs ( lv_velocidad_30 )
While lv_lectura1_30 > 10 Or lv_lectura4_30 > 10
lv_lectura1_30 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura4_30 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_30 = ( lv_lectura1_30 - lv_lectura4_30 ) * lv_sentido_30 * 1
lv_u_30 = lv_error_30 * lv_kp_30 + ( lv_error_30 - lv_olderror_30 ) * lv_kd_30
Motor.StartSync ( "BC" , - ( lv_velocidad_30 + lv_u_30 ) , lv_velocidad_30 - lv_u_30 )
lv_olderror_30 = lv_error_30
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_color14f_2
lv_mode_31 = Sensor.GetMode ( 3 )
Sensor.SetMode ( 3 , 2 )
lv_velocidad_31 = lv_velocidad_31 * 1
lv_lectura1_31 = 50
lv_lectura3_31 = 50
lv_lectura4_31 = 50
lv_kp_31 = lv_velocidad_31 / 220
lv_kd_31 = lv_kp_31 * 24
lv_error_31 = 0
lv_olderror_31 = 0
lv_u_31 = 0
lv_sentido_31 = lv_velocidad_31 / Math.Abs ( lv_velocidad_31 )
While Sensor.ReadRawValue ( 3 , 0 ) <> lv_color_31
lv_lectura1_31 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura4_31 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_31 = ( lv_lectura1_31 - lv_lectura4_31 ) * lv_sentido_31 * 1
lv_u_31 = lv_error_31 * lv_kp_31 + ( lv_error_31 - lv_olderror_31 ) * lv_kd_31
Motor.StartSync ( "BC" , - ( lv_velocidad_31 + lv_u_31 ) , lv_velocidad_31 - lv_u_31 )
lv_olderror_31 = lv_error_31
EndWhile
MotorBC.Off ()
Sensor.SetMode ( 3 , lv_mode_31 )
EndSub
Sub m_siguelineas_color14_2
lv_mode_32 = Sensor.GetMode ( 3 )
Sensor.SetMode ( 3 , 2 )
lv_velocidad_32 = lv_velocidad_32 * 1
lv_lectura1_32 = 50
lv_lectura3_32 = 50
lv_lectura4_32 = 50
lv_kp_32 = lv_velocidad_32 / 220
lv_kd_32 = lv_kp_32 * 24
lv_error_32 = 0
lv_olderror_32 = 0
lv_u_32 = 0
lv_sentido_32 = lv_velocidad_32 / Math.Abs ( lv_velocidad_32 )
While Sensor.ReadRawValue ( 3 , 0 ) <> lv_color_32
lv_lectura1_32 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura4_32 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_32 = ( lv_lectura1_32 - lv_lectura4_32 ) * lv_sentido_32 * 1
lv_u_32 = lv_error_32 * lv_kp_32 + ( lv_error_32 - lv_olderror_32 ) * lv_kd_32
Motor.StartSync ( "BC" , - ( lv_velocidad_32 + lv_u_32 ) , lv_velocidad_32 - lv_u_32 )
lv_olderror_32 = lv_error_32
EndWhile
MotorBC.OffAndBrake ()
Sensor.SetMode ( 3 , lv_mode_32 )
EndSub
Sub m_siguelineas_cruce_externof_2
lv_velocidad_33 = lv_velocidad_33 * 1
lv_lectura1_33 = 50
lv_lectura3_33 = 50
lv_lectura4_33 = 50
lv_kp_33 = lv_velocidad_33 / 220
lv_kd_33 = lv_kp_33 * 24
lv_error_33 = 0
lv_olderror_33 = 0
lv_u_33 = 0
lv_sentido_33 = lv_velocidad_33 / Math.Abs ( lv_velocidad_33 )
lv_lectura_33 = 50
While lv_lectura_33 > 10
If lv_reader_33 = 3 Then
lv_lectura_33 = lv_lectura3_33
lv_lecturaizq_33 = lv_lectura1_33
lv_lecturadch_33 = lv_lectura4_33
Else
lv_lectura_33 = lv_lectura4_33
lv_lecturaizq_33 = lv_lectura3_33
lv_lecturadch_33 = lv_lectura1_33
EndIf
lv_lectura1_33 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_33 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_lectura4_33 = ( Sensor.ReadPercent ( 4 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_33 = ( lv_lecturaizq_33 - lv_lecturadch_33 ) * lv_sentido_33 * 1
lv_u_33 = lv_error_33 * lv_kp_33 + ( lv_error_33 - lv_olderror_33 ) * lv_kd_33
Motor.StartSync ( "BC" , - ( lv_velocidad_33 + lv_u_33 ) , lv_velocidad_33 - lv_u_33 )
lv_olderror_33 = lv_error_33
EndWhile
MotorBC.Off ()
EndSub
Sub m_siguelineas_encoder31_2
lv_velocidad_34 = lv_velocidad_34 * 1
lv_lectura1_34 = 50
lv_lectura3_34 = 50
lv_lectura4_34 = 50
lv_kp_34 = lv_velocidad_34 / 220
lv_kd_34 = lv_kp_34 * 24
lv_error_34 = 0
lv_olderror_34 = 0
lv_u_34 = 0
lv_sentido_34 = lv_velocidad_34 / Math.Abs ( lv_velocidad_34 )
lv_encoder_34 = lv_encoder_34 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_34 = MotorC.GetTacho ()
lv_encoderc_34 = 0
While Math.Abs ( lv_encoderc_34 ) < lv_encoder_34
lv_encoderc_34 = MotorC.GetTacho () - lv_startc_34
lv_lectura1_34 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_34 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_error_34 = ( lv_lectura3_34 - lv_lectura1_34 ) * lv_sentido_34 * 1
lv_u_34 = lv_error_34 * lv_kp_34 + ( lv_error_34 - lv_olderror_34 ) * lv_kd_34
Motor.StartSync ( "BC" , - ( lv_velocidad_34 + lv_u_34 ) , lv_velocidad_34 - lv_u_34 )
lv_olderror_34 = lv_error_34
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_color31_2
lv_mode_35 = Sensor.GetMode ( 4 )
Sensor.SetMode ( 4 , 2 )
lv_velocidad_35 = lv_velocidad_35 * 1
lv_lectura1_35 = 50
lv_lectura3_35 = 50
lv_lectura4_35 = 50
lv_kp_35 = lv_velocidad_35 / 220
lv_kd_35 = lv_kp_35 * 24
lv_error_35 = 0
lv_olderror_35 = 0
lv_u_35 = 0
lv_sentido_35 = lv_velocidad_35 / Math.Abs ( lv_velocidad_35 )
While Sensor.ReadRawValue ( 4 , 0 ) <> lv_color_35
lv_lectura1_35 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_35 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro4 ) / pr_siguelineas_blanco4 * ( 100 - pr_siguelineas_negro4 )
lv_error_35 = ( lv_lectura3_35 - lv_lectura1_35 ) * lv_sentido_35 * 1
lv_u_35 = lv_error_35 * lv_kp_35 + ( lv_error_35 - lv_olderror_35 ) * lv_kd_35
Motor.StartSync ( "BC" , - ( lv_velocidad_35 + lv_u_35 ) , lv_velocidad_35 - lv_u_35 )
lv_olderror_35 = lv_error_35
EndWhile
MotorBC.OffAndBrake ()
Sensor.SetMode ( 4 , lv_mode_35 )
EndSub
Sub m_rgb_detect_3
lv_sens_mode_36 = Sensor.GetMode ( lv_sens_36 )
Sensor.SetMode ( lv_sens_36 , 4 )
lv_red_36 = 15
lv_yellow_36 = 60
lv_green_36 = 170
lv_blue_36 = 330
lv_hue_36 = 0
lv_sat_36 = 0
lv_value_36 = 0
lv_color_36 = 0
lv_rnormarray_36 [ 0 ] = 0
lv_gnormarray_36 [ 0 ] = 0
lv_bnormarray_36 [ 0 ] = 0
LCD.Clear ()
For lv_j_36 = 1 To lv_reps_36 Step 1
lv_rgb_36 = Sensor.ReadRaw ( lv_sens_36 , 3 )
lv_rraw_36 = lv_rgb_36 [ 0 ]
lv_graw_36 = lv_rgb_36 [ 1 ]
lv_braw_36 = lv_rgb_36 [ 2 ]
lv_rnormarray_36 [ lv_j_36 ] = Math.Round ( lv_rraw_36 / pr_rgb_rwhite * 255 )
lv_gnormarray_36 [ lv_j_36 ] = Math.Round ( lv_graw_36 / pr_rgb_gwhite * 255 )
lv_bnormarray_36 [ lv_j_36 ] = Math.Round ( lv_braw_36 / pr_rgb_bwhite * 255 )
Program.Delay ( 5 )
EndFor
For lv_j_36 = 1 To lv_reps_36 Step 2
lv_rnorm_36 = lv_rnormarray_36 [ lv_j_36 ] + lv_rnormarray_36 [ lv_j_36 + 1 ]
lv_gnorm_36 = lv_gnormarray_36 [ lv_j_36 ] + lv_gnormarray_36 [ lv_j_36 + 1 ]
lv_bnorm_36 = lv_bnormarray_36 [ lv_j_36 ] + lv_bnormarray_36 [ lv_j_36 + 1 ]
EndFor
lv_rnorm_36 = lv_rnorm_36 / lv_reps_36
lv_gnorm_36 = lv_gnorm_36 / lv_reps_36
lv_bnorm_36 = lv_bnorm_36 / lv_reps_36
lv_max_36 = Math.Max ( Math.Max ( lv_rnorm_36 , lv_gnorm_36 ) , lv_bnorm_36 )
lv_min_36 = Math.Min ( Math.Min ( lv_rnorm_36 , lv_gnorm_36 ) , lv_bnorm_36 )
If lv_max_36 = lv_min_36 Then
lv_hue_36 = 0
ElseIf lv_max_36 = lv_rnorm_36 Then
If lv_gnorm_36 >= lv_bnorm_36 Then
lv_hue_36 = 60 * ( lv_gnorm_36 - lv_bnorm_36 ) / ( lv_max_36 - lv_min_36 )
Else
lv_hue_36 = 60 * ( lv_gnorm_36 - lv_bnorm_36 ) / ( lv_max_36 - lv_min_36 ) + 360
EndIf
ElseIf lv_max_36 = lv_gnorm_36 Then
lv_hue_36 = 60 * ( lv_bnorm_36 - lv_rnorm_36 ) / ( lv_max_36 - lv_min_36 ) + 120
Else
lv_hue_36 = 60 * ( lv_rnorm_36 - lv_gnorm_36 ) / ( lv_max_36 - lv_min_36 ) + 240
EndIf
If lv_max_36 = 0 Then
lv_sat_36 = 0
Else
lv_sat_36 = 1 - lv_min_36 / lv_max_36
EndIf
lv_value_36 = lv_max_36
lv_rgbgrey_36 = ( pr_rgb_valueblanco + pr_rgb_valuenegro ) / 2
If lv_rraw_36 + lv_graw_36 + lv_braw_36 <= 3 Then
lv_color_36 = 0
Else
If lv_sat_36 < 0.3 Then
If lv_value_36 > lv_rgbgrey_36 Then
lv_color_36 = 6
Else
lv_color_36 = 1
EndIf
Else
If lv_hue_36 >= 0 And lv_hue_36 < lv_red_36 Then
lv_color_36 = 5
ElseIf lv_hue_36 >= lv_red_36 And lv_hue_36 < lv_yellow_36 Then
lv_color_36 = 4
ElseIf lv_hue_36 >= lv_yellow_36 And lv_hue_36 < lv_green_36 Then
lv_color_36 = 3
ElseIf lv_hue_36 >= lv_green_36 And lv_hue_36 < lv_blue_36 Then
lv_color_36 = 2
Else
lv_color_36 = 5
EndIf
EndIf
EndIf
LCD.StopUpdate ()
LCD.Clear ()
LCD.Write ( 33 , 20 , "R: " + lv_rraw_36 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_36 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_36 )
LCD.Write ( 33 , 70 , "color: " + lv_color_36 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_36 )
LCD.Update ()
Sensor.SetMode ( lv_sens_36 , lv_sens_mode_36 )
EndSub
Sub m_rgb_gritar_1
If lv_color_37 = 0 Then
Speaker.Play ( 100 , "WRO2024/Media/Zero" )
ElseIf lv_color_37 = 1 Then
Speaker.Play ( 100 , "WRO2024/Media/Black" )
ElseIf lv_color_37 = 2 Then
Speaker.Play ( 100 , "WRO2024/Media/BLUE" )
ElseIf lv_color_37 = 3 Then
Speaker.Play ( 100 , "WRO2024/Media/GREEN" )
ElseIf lv_color_37 = 4 Then
Speaker.Play ( 100 , "WRO2024/Media/YELLOW" )
ElseIf lv_color_37 = 5 Then
Speaker.Play ( 100 , "WRO2024/Media/RED" )
ElseIf lv_color_37 = 6 Then
Speaker.Play ( 100 , "WRO2024/Media/White" )
ElseIf lv_color_37 = 7 Then
Speaker.Play ( 100 , "WRO2024/Media/Brown" )
EndIf
Speaker.Wait ()
EndSub
