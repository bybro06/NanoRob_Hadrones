pr_giro_g1 = 0
pr_rgb_valuenegro = 0
pr_rgb_valueblanco = 0
pr_recto_diametro = 0
pr_giro_diametro = 0
pr_siguelineas_diametro = 0
pr_smart_diametro = 0
pr_siguelineas_negro1 = 0
pr_siguelineas_negro3 = 0
pr_siguelineas_negro4 = 0
pr_siguelineas_blanco1 = 0
pr_siguelineas_blanco3 = 0
pr_siguelineas_blanco4 = 0
pr_smart_negro1 = 0
pr_smart_negro3 = 0
pr_smart_negro4 = 0
pr_smart_blanco1 = 0
pr_smart_blanco3 = 0
pr_smart_blanco4 = 0
pr_recto_negro = 0
pr_recto_blanco = 0
pr_giro_negro = 0
pr_giro_blanco = 0
lv_velocidad_5 = 0
lv_timer_5 = 0
lv_velocidad_3 = 0
lv_encoder_3 = 0
lv_velocidad_6 = 0
lv_encoder_6 = 0
lv_velocidad_7 = 0
lv_tiempo_7 = 0
lv_velocidad_8 = 0
lv_distancia_8 = 0
lv_velocidad1_15 = 0
lv_velocidad2_15 = 0
lv_grados_15 = 0
lv_v0_9 = 0
lv_vmax_9 = 0
lv_distanciaaccel_9 = 0
lv_distanciacrucero_9 = 0
lv_distanciadecel_9 = 0
lv_v0_10 = 0
lv_vmax_10 = 0
lv_distanciaaccel_10 = 0
lv_distanciacrucero_10 = 0
lv_distanciadecel_10 = 0
lv_velocidad_11 = 0
lv_distancia_11 = 0
lv_velocidad_12 = 0
lv_sensor_12 = 0
lv_velocidad_16 = 0
lv_reader_16 = 0
lv_velocidad_18 = 0
lv_encoder_18 = 0
lv_velocidad_13 = 0
lv_sensor_13 = 0
lv_color_13 = 0
lv_velocidad_14 = 0
lv_sensor_14 = 0
lv_velocidad_17 = 0
lv_reader_17 = 0
gv_encodera = 0
gv_encoderd = 0
gv_errora = 0
gv_olderrora = 0
gv_errord = 0
gv_olderrord = 0
gv_diametro = 0
gv_negro1 = 0
gv_negro3 = 0
gv_negro4 = 0
gv_blanco1 = 0
gv_blanco3 = 0
gv_blanco4 = 0
gv_i = 0
gv_encodera = 0
gv_encoderd = 0
gv_errora = 0
gv_olderrora = 0
gv_errord = 0
gv_olderrord = 0
f_setup_0 ()
Thread.Run = f_controlbrazo_0
f_main_0 ()
Sub f_setup_0
Sensor.SetMode ( 1 , 0 )
Sensor.SetMode ( 2 , 3 )
Sensor.SetMode ( 3 , 0 )
Sensor.SetMode ( 4 , 0 )
gv_diametro = 6.24
pr_giro_g1 = 965 / 360
gv_negro1 = 10
gv_negro3 = 8
gv_negro4 = 6
gv_blanco1 = 60
gv_blanco3 = 58
gv_blanco4 = 46
pr_rgb_valuenegro = 10
pr_rgb_valueblanco = 100
pr_recto_diametro = gv_diametro
pr_giro_diametro = gv_diametro
pr_siguelineas_diametro = gv_diametro
pr_smart_diametro = gv_diametro
pr_siguelineas_negro1 = gv_negro1
pr_siguelineas_negro3 = gv_negro3
pr_siguelineas_negro4 = gv_negro4
pr_siguelineas_blanco1 = gv_blanco1
pr_siguelineas_blanco3 = gv_blanco3
pr_siguelineas_blanco4 = gv_blanco4
pr_smart_negro1 = gv_negro1
pr_smart_negro3 = gv_negro3
pr_smart_negro4 = gv_negro4
pr_smart_blanco1 = gv_blanco1
pr_smart_blanco3 = gv_blanco3
pr_smart_blanco4 = gv_blanco4
pr_recto_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_recto_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
pr_giro_negro = ( gv_negro1 + gv_negro3 + gv_negro4 ) / 3
pr_giro_blanco = ( gv_blanco1 + gv_blanco3 + gv_blanco4 ) / 3
EndSub
Sub f_startarm_0
lv_velocidad_5 = - 50
lv_timer_5 = 800
m_brazo_dtimer_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = - 800
f_aencoder_2 ()
gv_encodera = 0
MotorA.ResetCount ()
MotorD.ResetCount ()
lv_velocidad_3 = 50
lv_encoder_3 = 650
f_aencoder_2 ()
MotorA.ResetCount ()
MotorD.ResetCount ()
gv_encodera = 0
lv_velocidad_6 = 50
lv_encoder_6 = 80
m_brazo_dencoder_2 ()
EndSub
Sub f_main_0
f_startarm_0 ()
lv_velocidad_7 = - 80
lv_tiempo_7 = 800
m_recto_tiempo_2 ()
lv_velocidad_8 = 20
lv_distancia_8 = 2.5
m_recto_encoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 320
m_brazo_dencoder_2 ()
lv_velocidad1_15 = 60
lv_velocidad2_15 = - 14
lv_grados_15 = 88
m_giro_grados_3 ()
lv_v0_9 = 15
lv_vmax_9 = 30
lv_distanciaaccel_9 = 3.5
lv_distanciacrucero_9 = 0
lv_distanciadecel_9 = 3
m_recto_acceldecel_5 ()
lv_velocidad_6 = 50
lv_encoder_6 = - 20
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = - 200
f_aencoder_2 ()
For gv_i = 0 To 2
f_coger_0 ()
EndFor
lv_velocidad_8 = - 20
lv_distancia_8 = 3
m_recto_encoder_2 ()
lv_velocidad_6 = 60
lv_encoder_6 = 200
m_brazo_dencoder_2 ()
lv_velocidad1_15 = - 80
lv_velocidad2_15 = 0
lv_grados_15 = 110
m_giro_grados_3 ()
lv_velocidad_7 = - 80
lv_tiempo_7 = 500
m_recto_tiempo_2 ()
lv_v0_10 = 15
lv_vmax_10 = 89
lv_distanciaaccel_10 = 10
lv_distanciacrucero_10 = 0
lv_distanciadecel_10 = 0
m_recto_acceldecelf_5 ()
lv_velocidad_11 = 89
lv_distancia_11 = 52
m_recto_encoderf_2 ()
lv_velocidad_12 = 50
lv_sensor_12 = 3
m_recto_blanco1f_2 ()
lv_velocidad1_15 = 45
lv_velocidad2_15 = - 35
lv_grados_15 = 90
m_giro_grados_3 ()
lv_velocidad_16 = 40
lv_reader_16 = 4
m_smart_cruce_externof_2 ()
lv_velocidad_18 = 40
lv_encoder_18 = 20
m_siguelineas_encoder31f_2 ()
lv_velocidad_11 = 40
lv_distancia_11 = 15
m_recto_encoderf_2 ()
lv_velocidad1_15 = 60
lv_velocidad2_15 = - 55
lv_grados_15 = 105
m_giro_grados_3 ()
lv_v0_9 = - 10
lv_vmax_9 = - 80
lv_distanciaaccel_9 = 3
lv_distanciacrucero_9 = 20
lv_distanciadecel_9 = 3
m_recto_acceldecel_5 ()
lv_velocidad_7 = - 20
lv_tiempo_7 = 800
m_recto_tiempo_2 ()
lv_velocidad_8 = 20
lv_distancia_8 = 2.5
m_recto_encoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 350
m_brazo_dencoder_2 ()
lv_velocidad1_15 = 60
lv_velocidad2_15 = - 14
lv_grados_15 = 90
m_giro_grados_3 ()
lv_velocidad_13 = 20
lv_sensor_13 = 1
lv_color_13 = 5
m_recto_color1_3 ()
lv_v0_9 = 15
lv_vmax_9 = 30
lv_distanciaaccel_9 = 1
lv_distanciacrucero_9 = 0
lv_distanciadecel_9 = 1
m_recto_acceldecel_5 ()
lv_velocidad_3 = 50
lv_encoder_3 = 0
f_aencoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 0
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = - 150
f_aencoder_2 ()
For gv_i = 0 To 2
f_coger_0 ()
EndFor
lv_velocidad1_15 = - 50
lv_velocidad2_15 = 50
lv_grados_15 = 90
m_giro_grados_3 ()
lv_velocidad_14 = 40
lv_sensor_14 = 4
m_recto_blanco1_2 ()
lv_velocidad_8 = 80
lv_distancia_8 = 3
m_recto_encoder_2 ()
lv_velocidad1_15 = - 50
lv_velocidad2_15 = 50
lv_grados_15 = 100
m_giro_grados_3 ()
lv_velocidad_17 = 70
lv_reader_17 = 3
m_smart_cruce_externo_2 ()
EndSub
Sub f_controlbrazo_0
While "True"
gv_errora = gv_encodera - MotorA.GetTacho ()
gv_correcciona = gv_errora * 1 + ( gv_errora - gv_olderrora ) * 0.6
MotorA.StartSpeed ( gv_correcciona )
EndWhile
EndSub
Sub f_coger_0
lv_velocidad_6 = 50
lv_encoder_6 = 330
m_brazo_dencoder_2 ()
lv_v0_9 = 15
lv_vmax_9 = 30
lv_distanciaaccel_9 = 5
lv_distanciacrucero_9 = 0
lv_distanciadecel_9 = 5
m_recto_acceldecel_5 ()
lv_velocidad_6 = 50
lv_encoder_6 = 280
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = 0
f_aencoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = - 10
m_brazo_dencoder_2 ()
lv_velocidad_3 = 50
lv_encoder_3 = - 150
f_aencoder_2 ()
lv_velocidad_6 = 50
lv_encoder_6 = 100
m_brazo_dencoder_2 ()
EndSub
Sub f_aencoder_2
lv_encdiff_3 = lv_encoder_3 - MotorA.GetTacho ()
lv_signo_3 = Math.Abs ( lv_encdiff_3 ) / lv_encdiff_3
lv_safetytimer_3 = 1200
Time.Reset3 ()
If lv_encdiff_3 <> 0 Then
While Math.Abs ( MotorA.GetTacho () - lv_encoder_3 ) > 15 And Time.Get3 () < lv_safetytimer_3
gv_encodera = gv_encodera + ( lv_velocidad_3 / 15.5 * lv_signo_3 )
If lv_signo_3 > 0 Then
gv_encodera = Math.Min ( gv_encodera , lv_encoder_3 )
Else
gv_encodera = Math.Max ( gv_encodera , lv_encoder_3 )
EndIf
EndWhile
gv_encodera = lv_encoder_3
MotorA.OffAndBrake ()
EndIf
EndSub
Sub m_brazo_dtimer_2
Time.Reset1 ()
While Time.Get1 () < lv_timer_5
MotorD.StartSpeed ( lv_velocidad_5 )
EndWhile
MotorD.OffAndBrake ()
EndSub
Sub m_brazo_dencoder_2
lv_encdiff_6 = lv_encoder_6 - Motor.GetCount ( "D" )
lv_signo_6 = lv_encdiff_6 / Math.Abs ( lv_encdiff_6 )
lv_safetytimer_6 = Math.Max ( ( ( Math.abs ( lv_encdiff_6 ) / 100 ) / ( lv_velocidad_6 / 20 ) * 650 * 2 ) , 400 )
Time.Reset3 ()
If lv_encdiff_6 <> 0 Then
While Math.Abs ( Motor.GetCount ( "D" ) - lv_encoder_6 ) > 15 and Time.Get3 () < lv_safetytimer_6
MotorD.StartSpeed ( lv_signo_6 * lv_velocidad_6 )
LCD.Clear ()
LCD.Write ( 5 , 30 , "safetyTimer: " + lv_safetytimer_6 )
EndWhile
Motor.Stop ( "D" , "True" )
EndIf
EndSub
Sub m_recto_tiempo_2
lv_correccion_7 = 0
Time.Reset3 ()
MotorBC.Off ()
While Time.Get3 () < lv_tiempo_7
Motor.StartSync ( "BC" , - lv_velocidad_7 + lv_correccion_7 , lv_velocidad_7 + lv_correccion_7 )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_encoder_2
lv_correccion_8 = 0
lv_enc_8 = lv_distancia_8 * 360 / Math.Pi / pr_recto_diametro
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad_8 + lv_correccion_8 , lv_velocidad_8 + lv_correccion_8 , lv_enc_8 , "True" )
EndSub
Sub m_recto_acceldecel_5
lv_startb_9 = Motor.GetCount ( "B" )
lv_startc_9 = Motor.GetCount ( "C" )
lv_encoderb_9 = 0
lv_encoderc_9 = 0
lv_signo_9 = lv_v0_9 / Math.Abs ( lv_v0_9 )
lv_v0_9 = Math.Max ( 8 , Math.Abs ( lv_v0_9 ) ) * lv_signo_9
lv_vmax_9 = Math.Min ( 90 , Math.Abs ( lv_vmax_9 ) ) * lv_signo_9
lv_vel_9 = 0
lv_kp_9 = 0.4
lv_kd_9 = 0.5
lv_error_9 = 0
lv_olderror_9 = 0
lv_gradosaccel_9 = lv_distanciaaccel_9 * 360 / ( pr_recto_diametro * math.pi )
lv_gradoscrucero_9 = lv_distanciacrucero_9 * 360 / ( pr_recto_diametro * math.pi )
lv_gradosdecel_9 = lv_distanciadecel_9 * 360 / ( pr_recto_diametro * math.pi )
While Math.Abs ( lv_encoderc_9 ) < lv_gradosaccel_9 + lv_gradoscrucero_9 + lv_gradosdecel_9
lv_encoderb_9 = Motor.GetCount ( "B" ) * 1 - lv_startb_9
lv_encoderc_9 = Motor.GetCount ( "C" ) - lv_startc_9
If Math.Abs ( lv_encoderc_9 ) < lv_gradosaccel_9 + lv_gradoscrucero_9 Then
lv_pendiente_9 = ( lv_vmax_9 - lv_v0_9 ) / lv_gradosaccel_9 * lv_signo_9
If lv_signo_9 > 0 Then
lv_vel_9 = Math.Min ( lv_vmax_9 , lv_pendiente_9 * lv_encoderc_9 + lv_v0_9 )
Else
lv_vel_9 = Math.Max ( lv_vmax_9 , lv_pendiente_9 * lv_encoderc_9 + lv_v0_9 )
EndIf
Else
lv_pendiente_9 = ( lv_v0_9 - lv_vmax_9 ) / lv_gradosdecel_9 * lv_signo_9
If lv_signo_9 > 0 Then
lv_vel_9 = Math.Max ( lv_v0_9 , lv_pendiente_9 * ( lv_encoderc_9 - lv_gradosaccel_9 - lv_gradoscrucero_9 ) + lv_vmax_9 )
Else
lv_vel_9 = Math.Min ( lv_v0_9 , lv_pendiente_9 * ( lv_encoderc_9 + lv_gradosaccel_9 + lv_gradoscrucero_9 ) + lv_vmax_9 )
EndIf
EndIf
lv_error_9 = ( - 1 * lv_encoderb_9 - lv_encoderc_9 ) * 1
lv_correccion_9 = lv_error_9 * lv_kp_9 + ( lv_error_9 - lv_olderror_9 ) * lv_kd_9
Motor.StartSync ( "BC" , - ( lv_vel_9 - lv_correccion_9 ) , ( lv_vel_9 + lv_correccion_9 ) )
lv_olderror_9 = lv_error_9
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_recto_acceldecelf_5
lv_startb_10 = Motor.GetCount ( "B" )
lv_startc_10 = Motor.GetCount ( "C" )
lv_encoderb_10 = 0
lv_encoderc_10 = 0
lv_signo_10 = lv_v0_10 / Math.Abs ( lv_v0_10 )
lv_v0_10 = Math.Max ( 8 , Math.Abs ( lv_v0_10 ) ) * lv_signo_10
lv_vmax_10 = Math.Min ( 90 , Math.Abs ( lv_vmax_10 ) ) * lv_signo_10
lv_vel_10 = 0
lv_kp_10 = 0.4
lv_kd_10 = 0.5
lv_error_10 = 0
lv_olderror_10 = 0
lv_gradosaccel_10 = lv_distanciaaccel_10 * 360 / ( pr_recto_diametro * math.pi )
lv_gradoscrucero_10 = lv_distanciacrucero_10 * 360 / ( pr_recto_diametro * math.pi )
lv_gradosdecel_10 = lv_distanciadecel_10 * 360 / ( pr_recto_diametro * math.pi )
While Math.Abs ( lv_encoderc_10 ) < lv_gradosaccel_10 + lv_gradoscrucero_10 + lv_gradosdecel_10
lv_encoderb_10 = Motor.GetCount ( "B" ) * 1 - lv_startb_10
lv_encoderc_10 = Motor.GetCount ( "C" ) - lv_startc_10
If Math.Abs ( lv_encoderc_10 ) < lv_gradosaccel_10 + lv_gradoscrucero_10 Then
lv_pendiente_10 = ( lv_vmax_10 - lv_v0_10 ) / lv_gradosaccel_10 * lv_signo_10
If lv_signo_10 > 0 Then
lv_vel_10 = Math.Min ( lv_vmax_10 , lv_pendiente_10 * lv_encoderc_10 + lv_v0_10 )
Else
lv_vel_10 = Math.Max ( lv_vmax_10 , lv_pendiente_10 * lv_encoderc_10 + lv_v0_10 )
EndIf
Else
lv_pendiente_10 = ( lv_v0_10 - lv_vmax_10 ) / lv_gradosdecel_10 * lv_signo_10
If lv_signo_10 > 0 Then
lv_vel_10 = Math.Max ( lv_v0_10 , lv_pendiente_10 * ( lv_encoderc_10 - lv_gradosaccel_10 - lv_gradoscrucero_10 ) + lv_vmax_10 )
Else
lv_vel_10 = Math.Min ( lv_v0_10 , lv_pendiente_10 * ( lv_encoderc_10 + lv_gradosaccel_10 + lv_gradoscrucero_10 ) + lv_vmax_10 )
EndIf
EndIf
lv_error_10 = ( - 1 * lv_encoderb_10 - lv_encoderc_10 ) * 1
lv_correccion_10 = lv_error_10 * lv_kp_10 + ( lv_error_10 - lv_olderror_10 ) * lv_kd_10
Motor.StartSync ( "BC" , - ( lv_vel_10 - lv_correccion_10 ) , ( lv_vel_10 + lv_correccion_10 ) )
lv_olderror_10 = lv_error_10
EndWhile
MotorBC.Off ()
EndSub
Sub m_recto_encoderf_2
lv_correccion_11 = 0
lv_enc_11 = lv_distancia_11 * 360 / Math.Pi / pr_recto_diametro
MotorBC.Off ()
Motor.MoveSync ( "BC" , - lv_velocidad_11 + lv_correccion_11 , lv_velocidad_11 + lv_correccion_11 , lv_enc_11 , "False" )
EndSub
Sub m_recto_blanco1f_2
lv_correccion_12 = 0
MotorBC.Off ()
lv_lectura_12 = 50
While lv_lectura_12 < 60
lv_lectura_12 = ( Sensor.ReadPercent ( lv_sensor_12 ) - pr_recto_negro ) / pr_recto_blanco * ( 100 - pr_recto_negro )
Motor.StartSync ( "BC" , - lv_velocidad_12 + lv_correccion_12 , lv_velocidad_12 + lv_correccion_12 )
EndWhile
MotorBC.Off ()
EndSub
Sub m_recto_color1_3
lv_correccion_13 = 0
lv_mode_13 = Sensor.GetMode ( lv_sensor_13 )
Sensor.SetMode ( lv_sensor_13 , 2 )
MotorBC.Off ()
While Sensor.ReadRawValue ( lv_sensor_13 , 0 ) <> lv_color_13
Motor.StartSync ( "BC" , - lv_velocidad_13 + lv_correccion_13 , lv_velocidad_13 + lv_correccion_13 )
EndWhile
MotorBC.OffAndBrake ()
Sensor.SetMode ( lv_sensor_13 , lv_mode_13 )
EndSub
Sub m_recto_blanco1_2
lv_correccion_14 = 0
MotorBC.Off ()
lv_lectura_14 = 50
While lv_lectura_14 < 60
lv_lectura_14 = ( Sensor.ReadPercent ( lv_sensor_14 ) - pr_recto_negro ) / pr_recto_blanco * ( 100 - pr_recto_negro )
Motor.StartSync ( "BC" , - lv_velocidad_14 + lv_correccion_14 , lv_velocidad_14 + lv_correccion_14 )
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_giro_grados_3
lv_signo_15 = ( lv_velocidad1_15 / lv_velocidad2_15 ) / Math.Abs ( lv_velocidad1_15 / lv_velocidad2_15 )
lv_vmin_15 = Math.Min ( Math.Abs ( lv_velocidad1_15 ) , Math.Abs ( lv_velocidad2_15 ) )
lv_vmax_15 = Math.Max ( Math.Abs ( lv_velocidad1_15 ) , Math.Abs ( lv_velocidad2_15 ) )
lv_encoder_15 = lv_grados_15 * pr_giro_g1 * ( - 2 / ( lv_signo_15 * lv_vmin_15 / lv_vmax_15 - 1 ) )
MotorBC.Off ()
Program.Delay ( 100 )
Motor.MoveSync ( "BC" , - lv_velocidad1_15 , lv_velocidad2_15 , lv_encoder_15 , "True" )
lv_velocidad1_15 = 0
lv_velocidad2_15 = 0
lv_grados_15 = 0
Program.Delay ( 100 )
EndSub
Sub m_smart_cruce_externof_2
lv_velocidad_16 = lv_velocidad_16 * 1
lv_lectura1_16 = 50
lv_lectura3_16 = 50
lv_lectura4_16 = 50
lv_lectura_16 = 50
lv_kp_16 = lv_velocidad_16 / 200
lv_kd_16 = lv_kp_16 * 28
lv_distancia_16 = 7 * 360 / ( pr_smart_diametro * Math.Pi )
lv_startvelocidad_16 = lv_velocidad_16
lv_startkp_16 = lv_kp_16
lv_startkd_16 = lv_kd_16
lv_error_16 = 0
lv_olderror_16 = 0
lv_u_16 = 0
lv_sentido_16 = lv_velocidad_16 / Math.Abs ( lv_velocidad_16 )
lv_encoderinicio_16 = MotorC.GetTacho ()
While lv_lectura_16 > 10
lv_encoderc_16 = MotorC.GetTacho () - lv_encoderinicio_16
If lv_encoderc_16 < lv_distancia_16 Then
lv_velocidad_16 = 20
lv_kp_16 = 20 / 200
lv_kd_16 = lv_kp_16 * 28
Else
lv_velocidad_16 = lv_startvelocidad_16
lv_kp_16 = lv_startkp_16
lv_kd_16 = lv_startkd_16
EndIf
lv_lectura1_16 = ( Sensor.ReadPercent ( 1 ) - pr_smart_negro1 ) / pr_smart_blanco1 * ( 100 - pr_smart_negro1 )
lv_lectura3_16 = ( Sensor.ReadPercent ( 3 ) - pr_smart_negro3 ) / pr_smart_blanco3 * ( 100 - pr_smart_negro3 )
lv_lectura4_16 = ( Sensor.ReadPercent ( 4 ) - pr_smart_negro4 ) / pr_smart_blanco4 * ( 100 - pr_smart_negro4 )
If lv_reader_16 = 3 Then
lv_lectura_16 = lv_lectura3_16
lv_lecturaizq_16 = lv_lectura1_16
lv_lecturadch_16 = lv_lectura4_16
Else
lv_lectura_16 = lv_lectura4_16
lv_lecturaizq_16 = lv_lectura3_16
lv_lecturadch_16 = lv_lectura1_16
EndIf
lv_error_16 = ( lv_lecturaizq_16 - lv_lecturadch_16 ) * lv_sentido_16 * 1
lv_u_16 = lv_error_16 * lv_kp_16 + ( lv_error_16 - lv_olderror_16 ) * lv_kd_16
Motor.StartSync ( "BC" , - ( lv_velocidad_16 + lv_u_16 ) , lv_velocidad_16 - lv_u_16 )
lv_olderror_16 = lv_error_16
EndWhile
MotorBC.Off ()
EndSub
Sub m_smart_cruce_externo_2
lv_velocidad_17 = lv_velocidad_17 * 1
lv_lectura1_17 = 50
lv_lectura3_17 = 50
lv_lectura4_17 = 50
lv_kp_17 = lv_velocidad_17 / 200
lv_kd_17 = lv_kp_17 * 28
lv_distancia_17 = 7 * 360 / ( pr_smart_diametro * Math.Pi )
lv_startvelocidad_17 = lv_velocidad_17
lv_startkp_17 = lv_kp_17
lv_startkd_17 = lv_kd_17
lv_error_17 = 0
lv_olderror_17 = 0
lv_u_17 = 0
lv_sentido_17 = lv_velocidad_17 / Math.Abs ( lv_velocidad_17 )
lv_lectura_17 = 50
lv_encoderinicio_17 = MotorC.GetTacho ()
While lv_lectura_17 > 10
lv_encoderc_17 = MotorC.GetTacho () - lv_encoderinicio_17
If lv_encoderc_17 < lv_distancia_17 Then
lv_velocidad_17 = 20
lv_kp_17 = 20 / 200
lv_kd_17 = lv_kp_17 * 28
Else
lv_velocidad_17 = lv_startvelocidad_17
lv_kp_17 = lv_startkp_17
lv_kd_17 = lv_startkd_17
EndIf
If lv_reader_17 = 3 Then
lv_lectura_17 = lv_lectura3_17
lv_lecturaizq_17 = lv_lectura1_17
lv_lecturadch_17 = lv_lectura4_17
Else
lv_lectura_17 = lv_lectura4_17
lv_lecturaizq_17 = lv_lectura3_17
lv_lecturadch_17 = lv_lectura1_17
EndIf
lv_lectura1_17 = ( Sensor.ReadPercent ( 1 ) - pr_smart_negro1 ) / pr_smart_blanco1 * ( 100 - pr_smart_negro1 )
lv_lectura3_17 = ( Sensor.ReadPercent ( 3 ) - pr_smart_negro3 ) / pr_smart_blanco3 * ( 100 - pr_smart_negro3 )
lv_lectura4_17 = ( Sensor.ReadPercent ( 4 ) - pr_smart_negro4 ) / pr_smart_blanco4 * ( 100 - pr_smart_negro4 )
lv_error_17 = ( lv_lecturaizq_17 - lv_lecturadch_17 ) * lv_sentido_17 * 1
lv_u_17 = lv_error_17 * lv_kp_17 + ( lv_error_17 - lv_olderror_17 ) * lv_kd_17
Motor.StartSync ( "BC" , - ( lv_velocidad_17 + lv_u_17 ) , lv_velocidad_17 - lv_u_17 )
lv_olderror_17 = lv_error_17
EndWhile
MotorBC.OffAndBrake ()
EndSub
Sub m_siguelineas_encoder31f_2
lv_velocidad_18 = lv_velocidad_18 * 1
lv_lectura1_18 = 50
lv_lectura3_18 = 50
lv_lectura4_18 = 50
lv_kp_18 = lv_velocidad_18 / 200
lv_kd_18 = lv_kp_18 * 28
lv_error_18 = 0
lv_olderror_18 = 0
lv_u_18 = 0
lv_sentido_18 = lv_velocidad_18 / Math.Abs ( lv_velocidad_18 )
lv_encoder_18 = lv_encoder_18 / ( pr_siguelineas_diametro * Math.Pi ) * 360
lv_startc_18 = MotorC.GetTacho ()
lv_encoderc_18 = 0
While Math.Abs ( lv_encoderc_18 ) < lv_encoder_18
lv_encoderc_18 = MotorC.GetTacho () - lv_startc_18
lv_lectura1_18 = ( Sensor.ReadPercent ( 1 ) - pr_siguelineas_negro1 ) / pr_siguelineas_blanco1 * ( 100 - pr_siguelineas_negro1 )
lv_lectura3_18 = ( Sensor.ReadPercent ( 3 ) - pr_siguelineas_negro3 ) / pr_siguelineas_blanco3 * ( 100 - pr_siguelineas_negro3 )
lv_error_18 = ( lv_lectura3_18 - lv_lectura1_18 ) * lv_sentido_18 * 1
lv_u_18 = lv_error_18 * lv_kp_18 + ( lv_error_18 - lv_olderror_18 ) * lv_kd_18
Motor.StartSync ( "BC" , - ( lv_velocidad_18 + lv_u_18 ) , lv_velocidad_18 - lv_u_18 )
lv_olderror_18 = lv_error_18
EndWhile
MotorBC.Off ()
EndSub
