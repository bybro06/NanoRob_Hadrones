lv_v_105 = 0
lv_aenc_105 = 0
lv_velocidad_1 = 0
lv_distancia_1 = 0
lv_v1_35 = 0
lv_v2_35 = 0
lv_angle_35 = 0
lv_v_95 = 0
lv_aenc_95 = 0
lv_velocidad1_25 = 0
lv_velocidad2_25 = 0
lv_tiempo_25 = 0
lv_velocidad_39 = 0
lv_v_101 = 0
lv_velocidad_6 = 0
lv_sens_6 = 0
lv_velocidad_4 = 0
lv_sens_4 = 0
lv_vel_33 = 0
lv_velocidad_75 = 0
lv_kp_75 = 0
lv_ki_75 = 0
lv_kd_75 = 0
lv_encoder_75 = 0
lv_velocidad_81 = 0
lv_kp_81 = 0
lv_ki_81 = 0
lv_kd_81 = 0
lv_lado_81 = 0
lv_sens_81 = 0
lv_velocidad1_15 = 0
lv_velocidad2_15 = 0
lv_encoder_15 = 0
lv_v_96 = 0
lv_velocidad_13 = 0
lv_tiempo_13 = 0
lv_velocidad_5 = 0
lv_sens_5 = 0
lv_v_106 = 0
lv_v_104 = 0
lv_grados_104 = 0
lv_v1_36 = 0
lv_v2_36 = 0
lv_angle_36 = 0
lv_v0_56 = 0
lv_vmax_56 = 0
lv_kp_56 = 0
lv_ki_56 = 0
lv_kd_56 = 0
lv_accelencoder_56 = 0
lv_velocidad_72 = 0
lv_kp_72 = 0
lv_ki_72 = 0
lv_kd_72 = 0
lv_velocidad_76 = 0
lv_kp_76 = 0
lv_ki_76 = 0
lv_kd_76 = 0
lv_encoder_76 = 0
lv_vmax_88 = 0
lv_kp_88 = 0
lv_ki_88 = 0
lv_kd_88 = 0
lv_color_122 = 0
lv_reps_110 = 0
lv_color_110 = 0
lv_reps_111 = 0
lv_color_111 = 0
lv_reps_112 = 0
lv_color_112 = 0
lv_reps_113 = 0
lv_color_113 = 0
lv_v_108 = 0
lv_t_108 = 0
lv_v_109 = 0
lv_aenc_109 = 0
lv_color_114 = 0
lv_color_115 = 0
lv_color_116 = 0
lv_color_117 = 0
lv_read_128 = 0
gv_centro = 0
gv_velocidad = 0
gv_kp = 0
gv_ki = 0
gv_kd = 0
gv_diameter = 0
gv_sentido_motores = 0
gv_correccion = 0
gv_g1 = 0
gv_centro = 0
gv_velocidad = 100
gv_kp = 0.2
gv_ki = 0.0001
gv_kd = 3
gv_diameter = 56
gv_sentido_motores = 1
gv_correccion = 0
gv_sentido_motores = 1
gv_sentido_motores = 1
gv_g1 = 125 / 36
gv_sentido_motores = 1
gv_sentido_motores = 1
gv_sentido_motores = 1
gv_sentido_motores = 1
f_setup_0 ()
Thread.Run = f_display_0
Thread.Run = f_stop_0
f_main_0 ()
Sub f_setup_0
Sensor.SetMode ( 1 , 0 )
Sensor.SetMode ( 2 , 4 )
Sensor.SetMode ( 3 , 4 )
Sensor.SetMode ( 4 , 0 )
EndSub
Sub f_display_0
gv_old_b = 0
gv_old_c = 0
While "True"
LCD.StopUpdate ()
LCD.Clear ()
LCD.Write ( 5 , 35 , "centro: " + gv_centro )
LCD.Write ( 5 , 45 , "Velocidad de B:  " + MotorB.GetSpeed () * - 1 )
LCD.Write ( 5 , 55 , "Velocidad de C:  " + MotorC.GetSpeed () )
LCD.Write ( 5 , 65 , "rad/s de B:  " + Math.GetRadians ( MotorB.GetTacho () - gv_old_b ) / 0.05 * - 1 )
LCD.Write ( 5 , 75 , "rad/s de C:  " + Math.GetRadians ( MotorC.GetTacho () - gv_old_c ) / 0.05 )
LCD.Write ( 5 , 85 , "Encoder de B:  " + MotorB.GetTacho () * - 1 )
LCD.Write ( 5 , 95 , "Encoder de C:  " + MotorC.GetTacho () )
LCD.Update ()
Program.Delay ( 50 )
gv_old_b = MotorB.GetTacho ()
gv_old_c = MotorC.GetTacho ()
EndWhile
EndSub
Sub f_main_0
lv_velocidad_1 = gv_velocidad * 0.4
lv_distancia_1 = 20
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * - 0.2
lv_v2_35 = gv_velocidad * 0.2
lv_angle_35 = 92
f_gunivencmm_3 ()
lv_velocidad_1 = gv_velocidad * 0.4
lv_distancia_1 = 42
f_encoderrectomm_2 ()
lv_v_105 = 20
lv_aenc_105 = - 300
f_bmoved_2 ()
lv_v_95 = 20
lv_aenc_95 = - 780
f_bmovea_2 ()
lv_v1_35 = gv_velocidad * - 0.1
lv_v2_35 = gv_velocidad * 0.1
lv_angle_35 = 30
f_gunivencmm_3 ()
lv_velocidad_1 = gv_velocidad * 0.12
lv_distancia_1 = 8.5
f_encoderrectomm_2 ()
lv_v_95 = 20
lv_aenc_95 = - 820
f_bmovea_2 ()
lv_velocidad1_25 = gv_velocidad * 0.1
lv_velocidad2_25 = gv_velocidad * - 0.1
lv_tiempo_25 = 1000
f_tiempogiromm_3 ()
Program.Delay ( 500 )
lv_v1_35 = gv_velocidad * - 0.1
lv_v2_35 = gv_velocidad * 0.1
lv_angle_35 = 6
f_gunivencmm_3 ()
lv_v_95 = 20
lv_aenc_95 = - 580
f_bmovea_2 ()
Program.Delay ( 1000 )
lv_velocidad_39 = 10
f_spin90_1 ()
lv_velocidad_39 = - 10
f_spin90_1 ()
lv_v_101 = 30
f_bmovead0_1 ()
lv_velocidad_1 = gv_velocidad * - 0.3
lv_distancia_1 = 30
f_encoderrectomm_2 ()
lv_v_101 = 30
f_bmovead0_1 ()
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 100
f_gunivencmm_3 ()
Program.Delay ( 1000 )
lv_velocidad_1 = gv_velocidad * 0.6
lv_distancia_1 = 30
f_encoderrectomm_2 ()
lv_velocidad_6 = gv_velocidad * 0.3
lv_sens_6 = 1
f_1blancorectommf_2 ()
lv_velocidad_4 = gv_velocidad * 0.2
lv_sens_4 = 1
f_1negrorectommf_2 ()
lv_velocidad_1 = gv_velocidad * 0.3
lv_distancia_1 = 4
f_encoderrectomm_2 ()
lv_vel_33 = gv_velocidad * 0.3
f_gperfddefinitivomm_1 ()
lv_velocidad_75 = gv_velocidad * 0.25
lv_kp_75 = gv_kp * 1.25
lv_ki_75 = gv_ki
lv_kd_75 = gv_kd
lv_encoder_75 = 10
f_sl14pidenc_5 ()
lv_velocidad_81 = gv_velocidad * 0.3
lv_kp_81 = gv_kp
lv_ki_81 = gv_ki
lv_kd_81 = gv_kd
lv_lado_81 = 4
lv_sens_81 = 1
f_sl1spidcross_6 ()
lv_velocidad_75 = gv_velocidad * 0.7
lv_kp_75 = gv_kp
lv_ki_75 = gv_ki
lv_kd_75 = gv_kd
lv_encoder_75 = 36
f_sl14pidenc_5 ()
lv_velocidad1_15 = gv_velocidad * 0.3
lv_velocidad2_15 = gv_velocidad * 0.2
lv_encoder_15 = 22
f_encodergiromm_3 ()
lv_velocidad1_15 = gv_velocidad * 0.2
lv_velocidad2_15 = gv_velocidad * 0.3
lv_encoder_15 = 25
f_encodergiromm_3 ()
lv_velocidad_1 = gv_velocidad * 0.2
lv_distancia_1 = 24
f_encoderrectomm_2 ()
f_coger_abajo_basura_0 ()
lv_velocidad_1 = gv_velocidad * - 0.3
lv_distancia_1 = 5
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 85
f_gunivencmm_3 ()
Program.Delay ( 250 )
lv_velocidad_1 = gv_velocidad * 0.3
lv_distancia_1 = 13
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 85
f_gunivencmm_3 ()
Program.Delay ( 250 )
lv_velocidad_1 = gv_velocidad * 0.3
lv_distancia_1 = 9
f_encoderrectomm_2 ()
lv_v_95 = 20
lv_aenc_95 = - 820
f_bmovea_2 ()
lv_v1_35 = gv_velocidad * - 0.1
lv_v2_35 = gv_velocidad * 0.1
lv_angle_35 = 30
f_gunivencmm_3 ()
Program.Delay ( 1000 )
lv_velocidad_1 = gv_velocidad * 0.12
lv_distancia_1 = 7
f_encoderrectomm_2 ()
lv_velocidad1_25 = gv_velocidad * 0.1
lv_velocidad2_25 = gv_velocidad * - 0.1
lv_tiempo_25 = 1500
f_tiempogiromm_3 ()
Program.Delay ( 500 )
lv_v1_35 = gv_velocidad * - 0.1
lv_v2_35 = gv_velocidad * 0.1
lv_angle_35 = 6
f_gunivencmm_3 ()
lv_v_95 = 20
lv_aenc_95 = - 580
f_bmovea_2 ()
Program.Delay ( 1000 )
lv_velocidad_39 = 10
f_spin90_1 ()
lv_velocidad_39 = - 10
f_spin90_1 ()
lv_v_96 = 30
f_bmovea0_1 ()
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 145
f_gunivencmm_3 ()
Program.Delay ( 250 )
lv_velocidad_1 = gv_velocidad * 0.9
lv_distancia_1 = 120
f_encoderrectomm_2 ()
lv_velocidad1_15 = gv_velocidad * 0.2
lv_velocidad2_15 = gv_velocidad * 0.23
lv_encoder_15 = 20
f_encodergiromm_3 ()
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 90
f_gunivencmm_3 ()
lv_velocidad_13 = gv_velocidad * - 0.55
lv_tiempo_13 = 2000
f_tiemporectomm_2 ()
lv_velocidad_1 = gv_velocidad * 0.25
lv_distancia_1 = 10
f_encoderrectomm_2 ()
lv_velocidad_13 = gv_velocidad * - 0.55
lv_tiempo_13 = 1000
f_tiemporectomm_2 ()
lv_velocidad_1 = gv_velocidad * 0.25
lv_distancia_1 = 8
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 90
f_gunivencmm_3 ()
lv_velocidad_5 = gv_velocidad * 0.3
lv_sens_5 = 1
f_1blancorectomm_2 ()
lv_velocidad_1 = gv_velocidad * 0.25
lv_distancia_1 = 5
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 20
f_gunivencmm_3 ()
lv_v_95 = 20
lv_aenc_95 = - 780
f_bmovea_2 ()
lv_v_106 = 20
f_bmoved0_1 ()
lv_velocidad_1 = gv_velocidad * 0.2
lv_distancia_1 = 6
f_encoderrectomm_2 ()
lv_velocidad_1 = gv_velocidad * - 0.2
lv_distancia_1 = 6
f_encoderrectomm_2 ()
EndSub
Sub f_stop_0
While "True"
if Buttons.Current = "E" Then
MotorBC.OffAndBrake ()
MotorAD.OffAndBrake ()
lv_v_104 = 20
lv_grados_104 = 0
f_bmoveadsafe_2 ()
Program.End ()
EndIf
EndWhile
EndSub
Sub f_encoderrectomm_2
lv_velocidad_1 = lv_velocidad_1 * gv_sentido_motores
lv_diametro_1 = 5.6
lv_enc_1 = lv_distancia_1 * 360 / Math.Pi / lv_diametro_1
lv_start_b_1 = Motor.GetCount ( "B" ) * - 1 + ( gv_correccion / 30 * lv_velocidad_1 )
lv_start_c_1 = Motor.GetCount ( "C" )
lv_encoder_c_1 = Motor.GetCount ( "C" ) - lv_start_c_1
While Math.abs ( lv_encoder_c_1 ) < lv_enc_1
lv_encoder_b_1 = Motor.GetCount ( "B" ) * - 1 - lv_start_b_1
lv_encoder_c_1 = Motor.GetCount ( "C" ) - lv_start_c_1
lv_error_1 = ( lv_encoder_b_1 - lv_encoder_c_1 ) * gv_sentido_motores
lv_proporcial_1 = lv_error_1 * 1.2
Motor.StartSync ( "BC" , - ( lv_velocidad_1 - lv_proporcial_1 ) , lv_velocidad_1 + lv_proporcial_1 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub f_1negrorectommf_2
lv_velocidad_4 = lv_velocidad_4 * gv_sentido_motores
lv_start_b_4 = Motor.GetCount ( "B" ) * - 1 + gv_correccion
lv_start_c_4 = Motor.GetCount ( "C" )
While Sensor.ReadPercent ( lv_sens_4 ) > 10
lv_encoder_b_4 = Motor.GetCount ( "B" ) * - 1 - lv_start_b_4
lv_encoder_c_4 = Motor.GetCount ( "C" ) - lv_start_c_4
lv_error_4 = ( lv_encoder_b_4 - lv_encoder_c_4 ) * gv_sentido_motores
lv_proporcial_4 = lv_error_4 * 1.2
Motor.StartSync ( "BC" , - ( lv_velocidad_4 - lv_proporcial_4 ) , lv_velocidad_4 + lv_proporcial_4 )
EndWhile
Motor.Stop ( "BC" , "False" )
EndSub
Sub f_1blancorectomm_2
lv_velocidad_5 = lv_velocidad_5 * gv_sentido_motores
lv_start_b_5 = Motor.GetCount ( "B" ) * - 1 + gv_correccion
lv_start_c_5 = Motor.GetCount ( "C" )
While Sensor.ReadPercent ( lv_sens_5 ) < 40
lv_encoder_b_5 = Motor.GetCount ( "B" ) * - 1 - lv_start_b_5
lv_encoder_c_5 = Motor.GetCount ( "C" ) - lv_start_c_5
lv_error_5 = ( lv_encoder_b_5 - lv_encoder_c_5 ) * gv_sentido_motores
lv_proporcial_5 = lv_error_5 * 1.2
Motor.StartSync ( "BC" , - ( lv_velocidad_5 - lv_proporcial_5 ) , lv_velocidad_5 + lv_proporcial_5 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub f_1blancorectommf_2
lv_velocidad_6 = lv_velocidad_6 * gv_sentido_motores
lv_start_b_6 = Motor.GetCount ( "B" ) * - 1 + gv_correccion
lv_start_c_6 = Motor.GetCount ( "C" )
While Sensor.ReadPercent ( lv_sens_6 ) < 40
lv_encoder_b_6 = Motor.GetCount ( "B" ) * - 1 - lv_start_b_6
lv_encoder_c_6 = Motor.GetCount ( "C" ) - lv_start_c_6
lv_error_6 = ( lv_encoder_b_6 - lv_encoder_c_6 ) * gv_sentido_motores
lv_proporcial_6 = lv_error_6 * 1.2
Motor.StartSync ( "BC" , - ( lv_velocidad_6 - lv_proporcial_6 ) , lv_velocidad_6 + lv_proporcial_6 )
EndWhile
Motor.Stop ( "BC" , "False" )
EndSub
Sub f_tiemporectomm_2
lv_velocidad_13 = lv_velocidad_13 * gv_sentido_motores
lv_start_b_13 = Motor.GetCount ( "B" ) * - 1 + gv_correccion
lv_start_c_13 = Motor.GetCount ( "C" )
Time.Reset3 ()
While Time.Get3 () < lv_tiempo_13
lv_encoder_b_13 = Motor.GetCount ( "B" ) * - 1 - lv_start_b_13
lv_encoder_c_13 = Motor.GetCount ( "C" ) - lv_start_c_13
lv_error_13 = ( lv_encoder_b_13 - lv_encoder_c_13 ) * gv_sentido_motores
lv_proporcial_13 = lv_error_13 * 1.2
Motor.StartSync ( "BC" , - ( lv_velocidad_13 - lv_proporcial_13 ) , lv_velocidad_13 + lv_proporcial_13 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub f_encodergiromm_3
lv_velocidad1_15 = lv_velocidad1_15 * gv_sentido_motores
lv_velocidad2_15 = lv_velocidad2_15 * gv_sentido_motores
lv_diametro_15 = 5.6
lv_distancia_15 = lv_encoder_15 / ( lv_diametro_15 * Math.Pi ) * 360
Motor.MoveSync ( "BC" , - lv_velocidad1_15 , lv_velocidad2_15 , lv_distancia_15 , "True" )
EndSub
Sub f_tiempogiromm_3
Time.Reset3 ()
lv_velocidad1_25 = lv_velocidad1_25 * gv_sentido_motores
lv_velocidad2_25 = lv_velocidad2_25 * gv_sentido_motores
While Time.Get3 () < lv_tiempo_25
Motor.StartSync ( "BC" , - lv_velocidad1_25 , lv_velocidad2_25 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub f_gperfddefinitivomm_1
lv_avance_33 = 100
lv_ginicio_33 = 200
lv_ajuste_33 = 70
lv_vel_33 = Math.Min ( 40 , lv_vel_33 )
lv_vel_33 = lv_vel_33 * 0.75
lv_vel_33 = lv_vel_33 * gv_sentido_motores
Motor.MoveSync ( "BC" , - lv_vel_33 , lv_vel_33 , lv_avance_33 , "True" )
Motor.Move ( "BC" , - lv_vel_33 , lv_ginicio_33 , "False" )
While Sensor.ReadPercent ( 4 ) > 10
Motor.StartSync ( "BC" , - lv_vel_33 , - lv_vel_33 )
EndWhile
Motor.Stop ( "BC" , "False" )
Motor.Move ( "BC" , - lv_vel_33 , lv_ajuste_33 , "True" )
EndSub
Sub f_gunivencmm_3
lv_i_35 = "B"
lv_d_35 = "C"
lv_signo_35 = ( lv_v1_35 / lv_v2_35 ) / Math.Abs ( lv_v1_35 / lv_v2_35 )
lv_vmin_35 = Math.Min ( Math.Abs ( lv_v1_35 ) , Math.Abs ( lv_v2_35 ) )
lv_vmax_35 = Math.Max ( Math.Abs ( lv_v1_35 ) , Math.Abs ( lv_v2_35 ) )
lv_encodr_35 = lv_angle_35 * gv_g1 * ( - 2 / ( lv_signo_35 * lv_vmin_35 / lv_vmax_35 - 1 ) )
Motor.MoveSync ( lv_i_35 + lv_d_35 , - lv_v1_35 , lv_v2_35 , lv_encodr_35 , "True" )
lv_v1_35 = 0
lv_v2_35 = 0
lv_angle_35 = 0
Program.Delay ( 200 )
EndSub
Sub f_gunivencmmf_3
lv_i_36 = "B"
lv_d_36 = "C"
lv_signo_36 = ( lv_v1_36 / lv_v2_36 ) / Math.Abs ( lv_v1_36 / lv_v2_36 )
lv_vmin_36 = Math.Min ( Math.Abs ( lv_v1_36 ) , Math.Abs ( lv_v2_36 ) )
lv_vmax_36 = Math.Max ( Math.Abs ( lv_v1_36 ) , Math.Abs ( lv_v2_36 ) )
lv_encodr_36 = lv_angle_36 * gv_g1 * ( - 2 / ( lv_signo_36 * lv_vmin_36 / lv_vmax_36 - 1 ) )
Motor.MoveSync ( lv_i_36 + lv_d_36 , - lv_v1_36 , lv_v2_36 , lv_encodr_36 , "False" )
lv_v1_36 = 0
lv_v2_36 = 0
lv_angle_36 = 0
EndSub
Sub f_spin90_1
lv_i_39 = "B"
lv_d_39 = "C"
lv_v1_35 = lv_velocidad_39
lv_v2_35 = lv_velocidad_39 * - 1
lv_angle_35 = 90
f_gunivencmm_3 ()
lv_angle_39 = 0
EndSub
Sub f_sl14sicf_6
lv_i_56 = "B"
lv_d_56 = "C"
lv_accelencoder_56 = ( lv_accelencoder_56 / ( 5.6 * Math.Pi ) ) * 360
lv_u_56 = 0
lv_error_56 = 0
lv_olderror_56 = 0
lv_errsum_56 = 0
Motor.ResetCount ( "C" )
While Sensor.ReadPercent ( 1 ) > 15 Or Sensor.ReadPercent ( 4 ) > 15
lv_vel_56 = ( Motor.GetCount ( "C" ) / lv_accelencoder_56 * 0.72 ) * ( lv_vmax_56 + lv_v0_56 ) + lv_v0_56
lv_vel_56 = Math.Min ( lv_vel_56 , lv_vmax_56 )
lv_sentido_56 = lv_vel_56 / Math.Abs ( lv_vel_56 )
lv_error_56 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_56
lv_errsum_56 = lv_errsum_56 + lv_error_56
lv_u_56 = lv_error_56 * lv_kp_56 + ( lv_error_56 - lv_olderror_56 ) * lv_kd_56 + lv_errsum_56 * lv_ki_56
Motor.StartSync ( lv_i_56 + lv_d_56 , - ( lv_vel_56 + lv_u_56 ) * gv_sentido_motores , ( lv_vel_56 - lv_u_56 ) * gv_sentido_motores )
lv_olderror_56 = lv_error_56
EndWhile
Motor.Stop ( lv_i_56 + lv_d_56 , "False" )
EndSub
Sub f_sl14pidf_4
lv_velocidad_72 = lv_velocidad_72 * gv_sentido_motores
lv_i_72 = "B"
lv_d_72 = "C"
lv_error_72 = 0
lv_olderror_72 = 0
lv_errsum_72 = 0
lv_u_72 = 0
lv_sentido_72 = lv_velocidad_72 / Math.Abs ( lv_velocidad_72 )
While Sensor.ReadPercent ( 1 ) > 15 Or Sensor.ReadPercent ( 4 ) > 15
lv_error_72 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_72 * gv_sentido_motores
lv_errsum_72 = lv_errsum_72 + lv_error_72
lv_u_72 = lv_error_72 * lv_kp_72 + ( lv_error_72 - lv_olderror_72 ) * lv_kd_72 + lv_errsum_72 * lv_ki_72
Motor.StartSync ( lv_i_72 + lv_d_72 , - ( lv_velocidad_72 + lv_u_72 ) , lv_velocidad_72 - lv_u_72 )
lv_olderror_72 = lv_error_72
EndWhile
Motor.Stop ( lv_i_72 + lv_d_72 , "False" )
EndSub
Sub f_sl14pidenc_5
lv_velocidad_75 = lv_velocidad_75 * gv_sentido_motores
lv_i_75 = "B"
lv_d_75 = "C"
lv_error_75 = 0
lv_olderror_75 = 0
lv_errsum_75 = 0
lv_u_75 = 0
lv_sentido_75 = lv_velocidad_75 / Math.Abs ( lv_velocidad_75 )
lv_encoder_75 = lv_encoder_75 / ( 5.6 * Math.Pi ) * 360
lv_start_c_75 = Motor.GetCount ( "C" )
lv_encoder_c_75 = 0
While Math.Abs ( lv_encoder_c_75 ) < lv_encoder_75
lv_encoder_c_75 = Motor.GetCount ( "C" ) - lv_start_c_75
lv_error_75 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_75 * gv_sentido_motores
lv_errsum_75 = lv_errsum_75 + lv_error_75
lv_u_75 = lv_error_75 * lv_kp_75 + ( lv_error_75 - lv_olderror_75 ) * lv_kd_75 + lv_errsum_75 * lv_ki_75
Motor.StartSync ( lv_i_75 + lv_d_75 , - ( lv_velocidad_75 + lv_u_75 ) , lv_velocidad_75 - lv_u_75 )
lv_olderror_75 = lv_error_75
EndWhile
Motor.Stop ( lv_i_75 + lv_d_75 , "True" )
EndSub
Sub f_sl14pidencf_5
lv_velocidad_76 = lv_velocidad_76 * gv_sentido_motores
lv_i_76 = "B"
lv_d_76 = "C"
lv_error_76 = 0
lv_olderror_76 = 0
lv_errsum_76 = 0
lv_u_76 = 0
lv_sentido_76 = lv_velocidad_76 / Math.Abs ( lv_velocidad_76 )
lv_encoder_76 = lv_encoder_76 / ( 5.6 * Math.Pi ) * 360
lv_start_c_76 = Motor.GetCount ( "C" )
lv_encoder_c_76 = 0
While Math.Abs ( lv_encoder_c_76 ) < lv_encoder_76
lv_encoder_c_76 = Motor.GetCount ( "C" ) - lv_start_c_76
lv_error_76 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_76 * gv_sentido_motores
lv_errsum_76 = lv_errsum_76 + lv_error_76
lv_u_76 = lv_error_76 * lv_kp_76 + ( lv_error_76 - lv_olderror_76 ) * lv_kd_76 + lv_errsum_76 * lv_ki_76
Motor.StartSync ( lv_i_76 + lv_d_76 , - ( lv_velocidad_76 + lv_u_76 ) , lv_velocidad_76 - lv_u_76 )
lv_olderror_76 = lv_error_76
EndWhile
Motor.Stop ( lv_i_76 + lv_d_76 , "False" )
EndSub
Sub f_sl1spidcross_6
lv_velocidad_81 = lv_velocidad_81 * gv_sentido_motores
lv_i_81 = "B"
lv_d_81 = "C"
lv_error_81 = 0
lv_olderror_81 = 0
lv_errsum_81 = 0
lv_u_81 = 0
lv_sentido_81 = lv_velocidad_81 / Math.Abs ( lv_velocidad_81 )
If lv_sens_81 = 1 Then
lv_reader_81 = 4
Else
lv_reader_81 = 1
EndIf
While Sensor.ReadPercent ( lv_reader_81 ) > 15
lv_error_81 = ( Sensor.ReadPercent ( lv_sens_81 ) - 50 ) * lv_sentido_81 * lv_lado_81 * gv_sentido_motores
lv_errsum_81 = lv_errsum_81 + lv_error_81
lv_u_81 = lv_error_81 * lv_kp_81 + ( lv_error_81 - lv_olderror_81 ) * lv_kd_81 + lv_errsum_81 * lv_ki_81
Motor.StartSync ( lv_i_81 + lv_d_81 , - ( lv_velocidad_81 + lv_u_81 ) , lv_velocidad_81 - lv_u_81 )
lv_olderror_81 = lv_error_81
EndWhile
Motor.Stop ( lv_i_81 + lv_d_81 , "True" )
EndSub
Sub f_smart14pidf_4
lv_vmax_88 = lv_vmax_88 * gv_sentido_motores
lv_i_88 = "B"
lv_d_88 = "C"
lv_v0_88 = 10 * gv_sentido_motores
lv_accelencoder_88 = 150
lv_u_88 = 0
lv_errsum_88 = 0
lv_olderror_88 = 0
Motor.ResetCount ( "C" )
While Sensor.ReadPercent ( 1 ) > 15 Or Sensor.ReadPercent ( 4 ) > 15
lv_vel_88 = ( Motor.GetCount ( "C" ) / lv_accelencoder_88 ) * ( lv_vmax_88 + lv_v0_88 ) + lv_v0_88
lv_vel_88 = Math.Min ( lv_vel_88 , lv_vmax_88 )
lv_sentido_88 = lv_vel_88 / Math.Abs ( lv_vel_88 )
lv_error_88 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_88 * gv_sentido_motores
lv_errsum_88 = lv_errsum_88 * 0.9 + lv_error_88
lv_u_88 = lv_error_88 * lv_kp_88 + ( lv_error_88 - lv_olderror_88 ) * lv_kd_88 + lv_errsum_88 * lv_ki_88
Motor.StartSync ( lv_i_88 + lv_d_88 , - ( lv_vel_88 + lv_u_88 ) , lv_vel_88 - lv_u_88 )
lv_olderror_88 = lv_error_88
EndWhile
Motor.Stop ( lv_i_88 + lv_d_88 , "False" )
EndSub
Sub f_bmovea_2
lv_encdiff_95 = lv_aenc_95 - Motor.GetCount ( "A" )
lv_signo_95 = lv_encdiff_95 / Math.Abs ( lv_encdiff_95 )
If lv_encdiff_95 <> 0 Then
While Math.Abs ( Motor.GetCount ( "A" ) - lv_aenc_95 ) > 10
MotorA.StartSpeed ( lv_signo_95 * lv_v_95 )
EndWhile
Motor.Stop ( "A" , "True" )
EndIf
EndSub
Sub f_bmovea0_1
lv_encdiff_96 = - 5 - Motor.GetCount ( "A" )
lv_signo_96 = lv_encdiff_96 / Math.Abs ( lv_encdiff_96 )
If lv_encdiff_96 <> 0 Then
MotorA.StartSpeed ( lv_signo_96 * lv_v_96 )
While Math.Abs ( Motor.GetCount ( "A" ) + 5 ) > 5
EndWhile
Motor.Stop ( "A" , "True" )
EndIf
EndSub
Sub f_bmovead0_1
lv_aenc_101 = 0
lv_encdiff_101 = lv_aenc_101 - Motor.GetCount ( "A" )
lv_signo_101 = lv_encdiff_101 / Math.Abs ( lv_encdiff_101 )
lv_safetytimer_101 = Math.Max ( ( ( Math.abs ( lv_encdiff_101 ) / 100 ) / ( lv_v_101 / 20 ) * 650 * 2 ) * 2 / 3 , 400 )
Time.Reset3 ()
While ( MotorA.GetTacho () <> lv_aenc_101 Or MotorD.GetTacho () <> lv_aenc_101 ) And Time.Get3 () < lv_safetytimer_101
If MotorA.GetTacho () < lv_aenc_101 Then
MotorA.StartSpeed ( Math.Min ( lv_v_101 , lv_v_101 / 2 + ( lv_aenc_101 - MotorA.GetTacho () ) / 10 ) )
ElseIf MotorA.GetTacho () > lv_aenc_101 Then
MotorA.StartSpeed ( - Math.Min ( lv_v_101 , lv_v_101 / 2 + ( MotorA.GetTacho () - lv_aenc_101 ) / 10 ) )
Else
MotorA.OffAndBrake ()
EndIf
If MotorD.GetTacho () < lv_aenc_101 Then
MotorD.StartSpeed ( Math.Min ( lv_v_101 , lv_v_101 / 2 + ( lv_aenc_101 - MotorD.GetTacho () ) / 10 ) )
ElseIf MotorD.GetTacho () > lv_aenc_101 Then
MotorD.StartSpeed ( - Math.Min ( lv_v_101 , lv_v_101 / 2 + ( MotorD.GetTacho () - lv_aenc_101 ) / 10 ) )
Else
MotorD.OffAndBrake ()
EndIf
EndWhile
MotorAD.OffAndBrake ()
EndSub
Sub f_bmoveadsafe_2
lv_diffa_104 = lv_grados_104 - MotorA.GetTacho ()
lv_diffd_104 = lv_grados_104 - MotorD.GetTacho ()
lv_safetytimer_104 = Math.Max ( ( ( Math.Max ( Math.abs ( lv_diffa_104 ) , Math.abs ( lv_diffd_104 ) ) / 100 ) / ( lv_v_104 / 20 ) * 650 * 2 ) , 400 )
lv_signoa_104 = lv_diffa_104 / Math.Abs ( lv_diffa_104 )
lv_signod_104 = lv_diffd_104 / Math.Abs ( lv_diffd_104 )
lv_vela_104 = lv_v_104 * lv_signoa_104
lv_veld_104 = lv_v_104 * lv_signod_104
Motor.MoveSync ( "AD" , lv_vela_104 , lv_veld_104 , 5 , "False" )
LCD.Clear ()
Time.Reset3 ()
While MotorA.GetSpeed () <> 0 Or MotorD.GetSpeed () <> 0
If lv_diffa_104 * lv_signoa_104 > 0 Then
MotorA.StartSpeed ( lv_vela_104 )
Else
MotorA.OffAndBrake ()
EndIf
If lv_diffd_104 * lv_signod_104 > 0 Then
MotorD.StartSpeed ( lv_veld_104 )
Else
MotorD.OffAndBrake ()
EndIf
If Time.Get3 () > lv_safetytimer_104 Then
MotorBC.OffAndBrake ()
EndIf
lv_diffa_104 = lv_grados_104 - MotorA.GetTacho ()
lv_diffd_104 = lv_grados_104 - MotorD.GetTacho ()
LCD.Clear ()
LCD.Write ( 5 , 30 , "SafetyTimer: " + lv_safetytimer_104 )
EndWhile
MotorAD.OffAndBrake ()
EndSub
Sub f_bmoved_2
lv_encdiff_105 = lv_aenc_105 - Motor.GetCount ( "D" )
lv_signo_105 = lv_encdiff_105 / Math.Abs ( lv_encdiff_105 )
If lv_encdiff_105 <> 0 Then
MotorD.StartSpeed ( lv_signo_105 * lv_v_105 )
While Math.Abs ( Motor.GetCount ( "D" ) - lv_aenc_105 ) > 10
EndWhile
Motor.Stop ( "D" , "True" )
EndIf
EndSub
Sub f_bmoved0_1
If Motor.GetCount ( "D" ) > - 10 Then
While Motor.GetCount ( "D" ) > - 10
MotorD.StartSpeed ( - lv_v_106 )
EndWhile
Motor.Stop ( "D" , "True" )
ElseIf Motor.GetCount ( "D" ) < - 10 Then
While Motor.GetCount ( "D" ) < - 10
MotorD.StartSpeed ( lv_v_106 )
EndWhile
Motor.Stop ( "D" , "True" )
Else
Motor.Stop ( "D" , "True" )
EndIf
EndSub
Sub f_bmovedtimer_2
Time.Reset1 ()
While Time.Get1 () < lv_t_108
MotorD.StartSpeed ( lv_v_108 )
EndWhile
MotorD.OffAndBrake ()
EndSub
Sub f_bmovedsafe_2
lv_encdiff_109 = lv_aenc_109 - Motor.GetCount ( "D" )
lv_signo_109 = lv_encdiff_109 / Math.Abs ( lv_encdiff_109 )
lv_safetytimer_109 = Math.Max ( ( ( Math.abs ( lv_encdiff_109 ) / 100 ) / ( lv_v_109 / 20 ) * 650 * 2 ) , 400 )
Time.Reset3 ()
If lv_encdiff_109 <> 0 Then
While Math.Abs ( Motor.GetCount ( "D" ) - lv_aenc_109 ) > 5 and Time.Get3 () < lv_safetytimer_109
MotorD.StartSpeed ( lv_signo_109 * lv_v_109 )
LCD.Clear ()
LCD.Write ( 5 , 30 , "SafetyTimer: " + lv_safetytimer_109 )
EndWhile
Motor.Stop ( "D" , "True" )
EndIf
EndSub
Sub f_rgbdetect1_2
Sensor.SetMode ( 1 , 4 )
lv_red_110 = 15
lv_yellow_110 = 60
lv_green_110 = 170
lv_blue_110 = 330
lv_valuenegro_110 = 10
lv_valueblanco_110 = 100
lv_rwhite_110 = 147
lv_gwhite_110 = 143
lv_bwhite_110 = 160
lv_hue_110 = 0
lv_sat_110 = 0
lv_value_110 = 0
lv_color_110 = 0
lv_rnorma_110 [ 0 ] = 0
lv_gnorma_110 [ 0 ] = 0
lv_bnorma_110 [ 0 ] = 0
lv_maxa_110 [ 0 ] = 0
LCD.Clear ()
For lv_j_110 = 1 To lv_reps_110 Step 1
lv_rgb_110 = Sensor.ReadRaw ( 1 , 3 )
lv_rraw_110 = lv_rgb_110 [ 0 ]
lv_graw_110 = lv_rgb_110 [ 1 ]
lv_braw_110 = lv_rgb_110 [ 2 ]
lv_rnorma_110 [ lv_j_110 ] = Math.Round ( lv_rraw_110 / lv_rwhite_110 * 255 )
lv_gnorma_110 [ lv_j_110 ] = Math.Round ( lv_graw_110 / lv_gwhite_110 * 255 )
lv_bnorma_110 [ lv_j_110 ] = Math.Round ( lv_braw_110 / lv_bwhite_110 * 255 )
lv_maxa_110 [ lv_j_110 ] = Math.Max ( Math.Max ( lv_rnorma_110 [ lv_j_110 ] , lv_gnorma_110 [ lv_j_110 ] ) , lv_bnorma_110 [ lv_j_110 ] )
Program.Delay ( 5 )
EndFor
For lv_j_110 = 1 To lv_reps_110 Step 2
lv_rnorm_110 = lv_rnorma_110 [ lv_j_110 ] + lv_rnorma_110 [ lv_j_110 + 1 ]
lv_gnorm_110 = lv_gnorma_110 [ lv_j_110 ] + lv_gnorma_110 [ lv_j_110 + 1 ]
lv_bnorm_110 = lv_bnorma_110 [ lv_j_110 ] + lv_bnorma_110 [ lv_j_110 + 1 ]
lv_max_110 = lv_maxa_110 [ lv_j_110 ] + lv_maxa_110 [ lv_j_110 + 1 ]
EndFor
lv_rnorm_110 = lv_rnorm_110 / lv_reps_110
lv_gnorm_110 = lv_gnorm_110 / lv_reps_110
lv_bnorm_110 = lv_bnorm_110 / lv_reps_110
lv_max_110 = lv_max_110 / lv_reps_110
lv_min_110 = Math.Min ( Math.Min ( lv_rnorm_110 , lv_gnorm_110 ) , lv_bnorm_110 )
If lv_max_110 = lv_min_110 Then
lv_hue_110 = 0
ElseIf lv_max_110 = lv_rnorm_110 Then
If lv_gnorm_110 >= lv_bnorm_110 Then
lv_hue_110 = 60 * ( lv_gnorm_110 - lv_bnorm_110 ) / ( lv_max_110 - lv_min_110 )
Else
lv_hue_110 = 60 * ( lv_gnorm_110 - lv_bnorm_110 ) / ( lv_max_110 - lv_min_110 ) + 360
EndIf
ElseIf lv_max_110 = lv_gnorm_110 Then
lv_hue_110 = 60 * ( lv_bnorm_110 - lv_rnorm_110 ) / ( lv_max_110 - lv_min_110 ) + 120
Else
lv_hue_110 = 60 * ( lv_rnorm_110 - lv_gnorm_110 ) / ( lv_max_110 - lv_min_110 ) + 240
EndIf
If lv_max_110 = 0 Then
lv_sat_110 = 0
Else
lv_sat_110 = 1 - lv_min_110 / lv_max_110
EndIf
lv_value_110 = lv_max_110
lv_rgbgrey_110 = ( lv_valueblanco_110 + lv_valuenegro_110 ) / 2
If lv_rnorm_110 + lv_gnorm_110 + lv_bnorm_110 <= 3 Then
lv_color_110 = 0
Else
If lv_sat_110 < 0.4 Then
If lv_value_110 > lv_rgbgrey_110 Then
lv_color_110 = 6
Else
lv_color_110 = 1
EndIf
Else
If lv_hue_110 >= 0 And lv_hue_110 < lv_red_110 Then
lv_color_110 = 5
ElseIf lv_hue_110 >= lv_red_110 And lv_hue_110 < lv_yellow_110 Then
lv_color_110 = 4
ElseIf lv_hue_110 >= lv_yellow_110 And lv_hue_110 < lv_green_110 Then
lv_color_110 = 3
ElseIf lv_hue_110 >= lv_green_110 And lv_hue_110 < lv_blue_110 Then
lv_color_110 = 2
Else
lv_color_110 = 5
EndIf
EndIf
EndIf
LCD.Write ( 33 , 20 , "R: " + lv_rraw_110 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_110 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_110 )
LCD.Write ( 33 , 70 , "Color: " + lv_color_110 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_110 )
lv_color_122 = lv_color_110
f_leercolor_1 ()
EndSub
Sub f_rgbdetect2_2
Sensor.SetMode ( 2 , 4 )
lv_red_111 = 15
lv_yellow_111 = 60
lv_green_111 = 170
lv_blue_111 = 330
lv_valuenegro_111 = 10
lv_valueblanco_111 = 100
lv_rwhite_111 = 147
lv_gwhite_111 = 143
lv_bwhite_111 = 160
lv_hue_111 = 0
lv_sat_111 = 0
lv_value_111 = 0
lv_color_111 = 0
lv_rnorma_111 [ 0 ] = 0
lv_gnorma_111 [ 0 ] = 0
lv_bnorma_111 [ 0 ] = 0
lv_maxa_111 [ 0 ] = 0
LCD.Clear ()
For lv_j_111 = 1 To lv_reps_111 Step 1
lv_rgb_111 = Sensor.ReadRaw ( 2 , 3 )
lv_rraw_111 = lv_rgb_111 [ 0 ]
lv_graw_111 = lv_rgb_111 [ 1 ]
lv_braw_111 = lv_rgb_111 [ 2 ]
lv_rnorma_111 [ lv_j_111 ] = Math.Round ( lv_rraw_111 / lv_rwhite_111 * 255 )
lv_gnorma_111 [ lv_j_111 ] = Math.Round ( lv_graw_111 / lv_gwhite_111 * 255 )
lv_bnorma_111 [ lv_j_111 ] = Math.Round ( lv_braw_111 / lv_bwhite_111 * 255 )
lv_maxa_111 [ lv_j_111 ] = Math.Max ( Math.Max ( lv_rnorma_111 [ lv_j_111 ] , lv_gnorma_111 [ lv_j_111 ] ) , lv_bnorma_111 [ lv_j_111 ] )
Program.Delay ( 5 )
EndFor
For lv_j_111 = 1 To lv_reps_111 Step 2
lv_rnorm_111 = lv_rnorma_111 [ lv_j_111 ] + lv_rnorma_111 [ lv_j_111 + 1 ]
lv_gnorm_111 = lv_gnorma_111 [ lv_j_111 ] + lv_gnorma_111 [ lv_j_111 + 1 ]
lv_bnorm_111 = lv_bnorma_111 [ lv_j_111 ] + lv_bnorma_111 [ lv_j_111 + 1 ]
lv_max_111 = lv_maxa_111 [ lv_j_111 ] + lv_maxa_111 [ lv_j_111 + 1 ]
EndFor
lv_rnorm_111 = lv_rnorm_111 / lv_reps_111
lv_gnorm_111 = lv_gnorm_111 / lv_reps_111
lv_bnorm_111 = lv_bnorm_111 / lv_reps_111
lv_max_111 = lv_max_111 / lv_reps_111
lv_min_111 = Math.Min ( Math.Min ( lv_rnorm_111 , lv_gnorm_111 ) , lv_bnorm_111 )
If lv_max_111 = lv_min_111 Then
lv_hue_111 = 0
ElseIf lv_max_111 = lv_rnorm_111 Then
If lv_gnorm_111 >= lv_bnorm_111 Then
lv_hue_111 = 60 * ( lv_gnorm_111 - lv_bnorm_111 ) / ( lv_max_111 - lv_min_111 )
Else
lv_hue_111 = 60 * ( lv_gnorm_111 - lv_bnorm_111 ) / ( lv_max_111 - lv_min_111 ) + 360
EndIf
ElseIf lv_max_111 = lv_gnorm_111 Then
lv_hue_111 = 60 * ( lv_bnorm_111 - lv_rnorm_111 ) / ( lv_max_111 - lv_min_111 ) + 120
Else
lv_hue_111 = 60 * ( lv_rnorm_111 - lv_gnorm_111 ) / ( lv_max_111 - lv_min_111 ) + 240
EndIf
If lv_max_111 = 0 Then
lv_sat_111 = 0
Else
lv_sat_111 = 1 - lv_min_111 / lv_max_111
EndIf
lv_value_111 = lv_max_111
lv_rgbgrey_111 = ( lv_valueblanco_111 + lv_valuenegro_111 ) / 2
If lv_rnorm_111 + lv_gnorm_111 + lv_bnorm_111 <= 3 Then
lv_color_111 = 0
Else
If lv_sat_111 < 0.4 Then
If lv_value_111 > lv_rgbgrey_111 Then
lv_color_111 = 6
Else
lv_color_111 = 1
EndIf
Else
If lv_hue_111 >= 0 And lv_hue_111 < lv_red_111 Then
lv_color_111 = 5
ElseIf lv_hue_111 >= lv_red_111 And lv_hue_111 < lv_yellow_111 Then
lv_color_111 = 4
ElseIf lv_hue_111 >= lv_yellow_111 And lv_hue_111 < lv_green_111 Then
lv_color_111 = 3
ElseIf lv_hue_111 >= lv_green_111 And lv_hue_111 < lv_blue_111 Then
lv_color_111 = 2
Else
lv_color_111 = 5
EndIf
EndIf
EndIf
LCD.Write ( 33 , 20 , "R: " + lv_rraw_111 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_111 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_111 )
LCD.Write ( 33 , 70 , "Color: " + lv_color_111 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_111 )
lv_color_122 = lv_color_111
f_leercolor_1 ()
EndSub
Sub f_rgbdetect3_2
Sensor.SetMode ( 3 , 4 )
lv_red_112 = 15
lv_yellow_112 = 60
lv_green_112 = 170
lv_blue_112 = 330
lv_valuenegro_112 = 10
lv_valueblanco_112 = 100
lv_rwhite_112 = 147
lv_gwhite_112 = 143
lv_bwhite_112 = 160
lv_hue_112 = 0
lv_sat_112 = 0
lv_value_112 = 0
lv_color_112 = 0
lv_rnorma_112 [ 0 ] = 0
lv_gnorma_112 [ 0 ] = 0
lv_bnorma_112 [ 0 ] = 0
lv_maxa_112 [ 0 ] = 0
LCD.Clear ()
For lv_j_112 = 1 To lv_reps_112 Step 1
lv_rgb_112 = Sensor.ReadRaw ( 3 , 3 )
lv_rraw_112 = lv_rgb_112 [ 0 ]
lv_graw_112 = lv_rgb_112 [ 1 ]
lv_braw_112 = lv_rgb_112 [ 2 ]
lv_rnorma_112 [ lv_j_112 ] = Math.Round ( lv_rraw_112 / lv_rwhite_112 * 255 )
lv_gnorma_112 [ lv_j_112 ] = Math.Round ( lv_graw_112 / lv_gwhite_112 * 255 )
lv_bnorma_112 [ lv_j_112 ] = Math.Round ( lv_braw_112 / lv_bwhite_112 * 255 )
lv_maxa_112 [ lv_j_112 ] = Math.Max ( Math.Max ( lv_rnorma_112 [ lv_j_112 ] , lv_gnorma_112 [ lv_j_112 ] ) , lv_bnorma_112 [ lv_j_112 ] )
Program.Delay ( 5 )
EndFor
For lv_j_112 = 1 To lv_reps_112 Step 2
lv_rnorm_112 = lv_rnorma_112 [ lv_j_112 ] + lv_rnorma_112 [ lv_j_112 + 1 ]
lv_gnorm_112 = lv_gnorma_112 [ lv_j_112 ] + lv_gnorma_112 [ lv_j_112 + 1 ]
lv_bnorm_112 = lv_bnorma_112 [ lv_j_112 ] + lv_bnorma_112 [ lv_j_112 + 1 ]
lv_max_112 = lv_maxa_112 [ lv_j_112 ] + lv_maxa_112 [ lv_j_112 + 1 ]
EndFor
lv_rnorm_112 = lv_rnorm_112 / lv_reps_112
lv_gnorm_112 = lv_gnorm_112 / lv_reps_112
lv_bnorm_112 = lv_bnorm_112 / lv_reps_112
lv_max_112 = lv_max_112 / lv_reps_112
lv_min_112 = Math.Min ( Math.Min ( lv_rnorm_112 , lv_gnorm_112 ) , lv_bnorm_112 )
If lv_max_112 = lv_min_112 Then
lv_hue_112 = 0
ElseIf lv_max_112 = lv_rnorm_112 Then
If lv_gnorm_112 >= lv_bnorm_112 Then
lv_hue_112 = 60 * ( lv_gnorm_112 - lv_bnorm_112 ) / ( lv_max_112 - lv_min_112 )
Else
lv_hue_112 = 60 * ( lv_gnorm_112 - lv_bnorm_112 ) / ( lv_max_112 - lv_min_112 ) + 360
EndIf
ElseIf lv_max_112 = lv_gnorm_112 Then
lv_hue_112 = 60 * ( lv_bnorm_112 - lv_rnorm_112 ) / ( lv_max_112 - lv_min_112 ) + 120
Else
lv_hue_112 = 60 * ( lv_rnorm_112 - lv_gnorm_112 ) / ( lv_max_112 - lv_min_112 ) + 240
EndIf
If lv_max_112 = 0 Then
lv_sat_112 = 0
Else
lv_sat_112 = 1 - lv_min_112 / lv_max_112
EndIf
lv_value_112 = lv_max_112
lv_rgbgrey_112 = ( lv_valueblanco_112 + lv_valuenegro_112 ) / 2
If lv_rnorm_112 + lv_gnorm_112 + lv_bnorm_112 <= 3 Then
lv_color_112 = 0
Else
If lv_sat_112 < 0.4 Then
If lv_value_112 > lv_rgbgrey_112 Then
lv_color_112 = 6
Else
lv_color_112 = 1
EndIf
Else
If lv_hue_112 >= 0 And lv_hue_112 < lv_red_112 Then
lv_color_112 = 5
ElseIf lv_hue_112 >= lv_red_112 And lv_hue_112 < lv_yellow_112 Then
lv_color_112 = 4
ElseIf lv_hue_112 >= lv_yellow_112 And lv_hue_112 < lv_green_112 Then
lv_color_112 = 3
ElseIf lv_hue_112 >= lv_green_112 And lv_hue_112 < lv_blue_112 Then
lv_color_112 = 2
Else
lv_color_112 = 5
EndIf
EndIf
EndIf
LCD.Write ( 33 , 20 , "R: " + lv_rraw_112 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_112 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_112 )
LCD.Write ( 33 , 70 , "Color: " + lv_color_112 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_112 )
lv_color_122 = lv_color_112
f_leercolor_1 ()
EndSub
Sub f_rgbdetect4_2
Sensor.SetMode ( 4 , 4 )
lv_red_113 = 15
lv_yellow_113 = 60
lv_green_113 = 170
lv_blue_113 = 330
lv_valuenegro_113 = 10
lv_valueblanco_113 = 100
lv_rwhite_113 = 147
lv_gwhite_113 = 143
lv_bwhite_113 = 160
lv_hue_113 = 0
lv_sat_113 = 0
lv_value_113 = 0
lv_color_113 = 0
lv_rnorma_113 [ 0 ] = 0
lv_gnorma_113 [ 0 ] = 0
lv_bnorma_113 [ 0 ] = 0
lv_maxa_113 [ 0 ] = 0
LCD.Clear ()
For lv_j_113 = 1 To lv_reps_113 Step 1
lv_rgb_113 = Sensor.ReadRaw ( 4 , 3 )
lv_rraw_113 = lv_rgb_113 [ 0 ]
lv_graw_113 = lv_rgb_113 [ 1 ]
lv_braw_113 = lv_rgb_113 [ 2 ]
lv_rnorma_113 [ lv_j_113 ] = Math.Round ( lv_rraw_113 / lv_rwhite_113 * 255 )
lv_gnorma_113 [ lv_j_113 ] = Math.Round ( lv_graw_113 / lv_gwhite_113 * 255 )
lv_bnorma_113 [ lv_j_113 ] = Math.Round ( lv_braw_113 / lv_bwhite_113 * 255 )
lv_maxa_113 [ lv_j_113 ] = Math.Max ( Math.Max ( lv_rnorma_113 [ lv_j_113 ] , lv_gnorma_113 [ lv_j_113 ] ) , lv_bnorma_113 [ lv_j_113 ] )
Program.Delay ( 5 )
EndFor
For lv_j_113 = 1 To lv_reps_113 Step 2
lv_rnorm_113 = lv_rnorma_113 [ lv_j_113 ] + lv_rnorma_113 [ lv_j_113 + 1 ]
lv_gnorm_113 = lv_gnorma_113 [ lv_j_113 ] + lv_gnorma_113 [ lv_j_113 + 1 ]
lv_bnorm_113 = lv_bnorma_113 [ lv_j_113 ] + lv_bnorma_113 [ lv_j_113 + 1 ]
lv_max_113 = lv_maxa_113 [ lv_j_113 ] + lv_maxa_113 [ lv_j_113 + 1 ]
EndFor
lv_rnorm_113 = lv_rnorm_113 / lv_reps_113
lv_gnorm_113 = lv_gnorm_113 / lv_reps_113
lv_bnorm_113 = lv_bnorm_113 / lv_reps_113
lv_max_113 = lv_max_113 / lv_reps_113
lv_min_113 = Math.Min ( Math.Min ( lv_rnorm_113 , lv_gnorm_113 ) , lv_bnorm_113 )
If lv_max_113 = lv_min_113 Then
lv_hue_113 = 0
ElseIf lv_max_113 = lv_rnorm_113 Then
If lv_gnorm_113 >= lv_bnorm_113 Then
lv_hue_113 = 60 * ( lv_gnorm_113 - lv_bnorm_113 ) / ( lv_max_113 - lv_min_113 )
Else
lv_hue_113 = 60 * ( lv_gnorm_113 - lv_bnorm_113 ) / ( lv_max_113 - lv_min_113 ) + 360
EndIf
ElseIf lv_max_113 = lv_gnorm_113 Then
lv_hue_113 = 60 * ( lv_bnorm_113 - lv_rnorm_113 ) / ( lv_max_113 - lv_min_113 ) + 120
Else
lv_hue_113 = 60 * ( lv_rnorm_113 - lv_gnorm_113 ) / ( lv_max_113 - lv_min_113 ) + 240
EndIf
If lv_max_113 = 0 Then
lv_sat_113 = 0
Else
lv_sat_113 = 1 - lv_min_113 / lv_max_113
EndIf
lv_value_113 = lv_max_113
lv_rgbgrey_113 = ( lv_valueblanco_113 + lv_valuenegro_113 ) / 2
If lv_rnorm_113 + lv_gnorm_113 + lv_bnorm_113 <= 3 Then
lv_color_113 = 0
Else
If lv_sat_113 < 0.4 Then
If lv_value_113 > lv_rgbgrey_113 Then
lv_color_113 = 6
Else
lv_color_113 = 1
EndIf
Else
If lv_hue_113 >= 0 And lv_hue_113 < lv_red_113 Then
lv_color_113 = 5
ElseIf lv_hue_113 >= lv_red_113 And lv_hue_113 < lv_yellow_113 Then
lv_color_113 = 4
ElseIf lv_hue_113 >= lv_yellow_113 And lv_hue_113 < lv_green_113 Then
lv_color_113 = 3
ElseIf lv_hue_113 >= lv_green_113 And lv_hue_113 < lv_blue_113 Then
lv_color_113 = 2
Else
lv_color_113 = 5
EndIf
EndIf
EndIf
LCD.Write ( 33 , 20 , "R: " + lv_rraw_113 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_113 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_113 )
LCD.Write ( 33 , 70 , "Color: " + lv_color_113 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_113 )
lv_color_122 = lv_color_113
f_leercolor_1 ()
EndSub
Sub f_leercolor_1
If lv_color_122 = 0 Then
Speaker.Play ( 100 , "WRO2023/Zero" )
ElseIf lv_color_122 = 1 Then
Speaker.Play ( 100 , "WRO2023/Black" )
ElseIf lv_color_122 = 2 Then
Speaker.Play ( 100 , "WRO2023/Blue" )
ElseIf lv_color_122 = 3 Then
Speaker.Play ( 100 , "WRO2023/Green" )
ElseIf lv_color_122 = 4 Then
Speaker.Play ( 100 , "WRO2023/Yellow" )
ElseIf lv_color_122 = 5 Then
Speaker.Play ( 100 , "WRO2023/Red" )
ElseIf lv_color_122 = 6 Then
Speaker.Play ( 100 , "WRO2023/White" )
ElseIf lv_color_122 = 7 Then
Speaker.Play ( 100 , "WRO2023/Brown" )
EndIf
EndSub
Sub f_coger_abajo_basura_0
lv_velocidad_1 = - 30
lv_distancia_1 = 2
f_encoderrectomm_2 ()
lv_v_105 = 40
lv_aenc_105 = - 130
f_bmoved_2 ()
lv_v_95 = 20
lv_aenc_95 = - 780
f_bmovea_2 ()
lv_v_108 = - 40
lv_t_108 = 500
f_bmovedtimer_2 ()
lv_v_95 = 20
lv_aenc_95 = - 500
f_bmovea_2 ()
EndSub
