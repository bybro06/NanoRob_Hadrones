folder "prjs""WRO2024"

#Hemos llegado hasta aquí gracias a:

'- Ignacio Rodríguez Gracia
'- Francisco José Rodríguez Montes
'- Inma Espinosa Sánchez
'- Juan José Tenorio Feixas
'- Jordin Van Weert
'- Francisco Torres
'- Cayetano Torres
'- Pau Moya Ales
'- Jaime Pérez Piedra
'- Carlos Palanca Cruz
'- Mai Anguita
'- Antonio Jesús Martínez Jaén
'- Tomás Manuel Expósito González
'- Francisco Reina Martín
'- Luis Miguel Simarro González
'- José Valverde
'- Ana María García Montesinos
'- Miguel López
'- Rafael Téllez

#Y a la financiación aportada por:

'- Universidad de Almería
'- EfilAlmería
'- Sercomm Corporation
'- Megal Energía
'- ModelBot

#Y la equipación otorgada por:

'- Diputación de Almería
'- La Salle Virgen del Mar

import "modules/Siguelineas"
import "modules/Giro"
import "modules/Recto"
import "modules/Shift"
import "modules/Brazo"
import "modules/Smart"
import "modules/RGB"

encoderA = 0
encoderD = 0

errorA = 0
olderrorA = 0

errorD = 0
olderrorD = 0

Sub Setup
  
  Sensor.SetMode(1,0)
  Sensor.SetMode(2,4)
  Sensor.SetMode(3,0)
  Sensor.SetMode(4,0)
  
  diametro = 6.24
  
  '965
  Giro.G1 = 965/360
  
  negro1 = 29
  negro3 = 29
  negro4 = 23
  
  blanco1 = 80
  blanco3 = 84
  blanco4 = 62
  
  RGB.VALUENEGRO = 4
  RGB.VALUEBLANCO = 32
  RGB.RWHITE = 57
  RGB.GWHITE = 71
  RGB.BWHITE = 73
  
  'Auto definición de propiedades
  
  Recto.diametro = diametro
  Giro.diametro = diametro
  Siguelineas.diametro = diametro
  Smart.diametro = diametro
  
  Siguelineas.negro1 = negro1
  Siguelineas.negro3 = negro3
  Siguelineas.negro4 = negro4
  
  Siguelineas.blanco1 = blanco1
  Siguelineas.blanco3 = blanco3
  Siguelineas.blanco4 = blanco4
  
  Smart.negro1 = negro1
  Smart.negro3 = negro3
  Smart.negro4 = negro4
  
  Smart.blanco1 = blanco1
  Smart.blanco3 = blanco3
  Smart.blanco4 = blanco4
  
  Recto.negro = (negro1+negro3+negro4)/3
  Recto.blanco = (blanco1+blanco3+blanco4)/3
  
  Giro.negro = (negro1+negro3+negro4)/3
  Giro.blanco = (blanco1+blanco3+blanco4)/3
  
EndSub

Sub StartArm
  
  Brazo.DTimer(-50,800)
  AEncoder(50,-1100)
  encoderA = 0
  'encoderD = 0
  MotorA.ResetCount()
  MotorD.ResetCount()
  AEncoder(50,650)
  MotorA.ResetCount()
  MotorD.ResetCount()
  encoderA = 0
  'encoderD = 0
  Brazo.DEncoder(50,80)
  
  Buttons.Wait()
  Program.Delay(250)
EndSub

Setup()
Thread.Run = ControlBrazo
Main()

Sub Main
  
  GritarVoltaje()
  StartArm()
  
  Recto.Tiempo(-80,600)
  Recto.Encoder(55,4.5)
  Brazo.DEncoder(50,320)
  Giro.GradosF(70,-21,90)
  Giro.TiempoF(70*0.3,-21*0.3,200)
  
  Recto.AccelDecel(15,30,3.5,20,3)
  
  Brazo.DEncoder(50,-20)
  AEncoder(50,-200)
  
  Coger()
  Coger()
  
  Recto.Encoder(30,1)
  Giro.Grados(-40,40,100)
  
  Giro.Tiempo(-80,-60,800)
  
  'Cuadra con pared para irse a por la segunda fila
  
  Recto.AccelDecelF(15,89,10,0,0)
  Recto.EncoderF(100,28)
  Siguelineas.Encoder14F(80,10)
  Recto.EncoderF(80,20)
  Thread.Run = Levanta
  Siguelineas.Cruce14(70)
  
  'llega a línea
  
  Giro.Grados(45,-15,92)
  Brazo.DEncoder(80,13)
  Siguelineas.Color14F(50,5)
  Recto.Encoder(50,10)
  Giro.Grados(50,-10,98)
  
  
  Recto.Encoder(-80,21)
  Recto.Tiempo(-40,500)
  
  'Sale de pared
  Recto.Encoder(20,3.5)
  
  Brazo.DEncoder(50,400)
  
  Giro.Grados(50,-18,110)
  
  'Anda hasta primer cuadrado rojo
  
  Recto.Color1F(20,3,5)
  Recto.Encoder(20,22.5)
  Brazo.DEncoder(50,260)
  AEncoder(50,0)
  Brazo.DEncoder(50,-10)
  AEncoder(50,-150)
  
  'Coge los otros 3 bloques
  
  Coger()
  
  Giro.Grados(3,90,196)
  
  Siguelineas.Color14(70,5)
  
  
  Recto.Encoder(30,6)
  Giro.Grados(-10,30,35)
  
  Recto.Encoder(50,55)
  
  Soltar(5)
  
  Recto.Encoder(-40,10)
  Giro.Tiempo(50,-20,1000)
  
  Recto.Color1F(50,1,5)
  Recto.EncoderF(50,15)
  Giro.Grados(-5,90,87)
  
  Recto.Tiempo(-40,800)
  Brazo.DEncoder(80,1000)
  Recto.Encoder(70,41.5)
  
  AEncoder(60,50)
  
  Brazo.DEncoder(80,10)
  
  AEncoder(60,-200)
  
  Brazo.DEncoder(80,200)
  
  Recto.EncoderF(-80,30)
  Recto.Tiempo(-40,600)
  
  Recto.Color1(60,4,4)
  Recto.Encoder(-70,25)
  
  Soltar(1)
  Soltar(1)
  
  Recto.Encoder(-40,6)
  Giro.Grados(10,90,92)
  
  Recto.EncoderF(90,45)
  Recto.Negro1(40,1)
  
  Giro.Grados(56,-16,80)
  Siguelineas.Cruce_ExternoF(50,4)
  Recto.Encoder(50,25)
  
  Giro.Grados(5,60,92)
  Recto.Encoder(50,16)
  
  Soltar(1)
  
  Giro.Grados(-30,30,10)
  
  Brazo.DEncoder(80,500)
  AEncoder(60,50)
  
  Giro.Grados(30,-30,10)
  
  Recto.Encoder(-50,16)
  Giro.Grados(-10,-60,92)
  
  Siguelineas.Color14(60,5)
  
  Recto.Encoder(60,20)
  Giro.Grados(30,-30,91)
  
  Brazo.DEncoder(80,1000)
  Recto.Encoder(30,30)
  
  Giro.Grados(20,-20,109)
  
  Recto.Tiempo(70,1500)
  Giro.Grados(-30,30,20)
  
  Recto.Encoder(-70,20)

  Giro.Grados(50,-50,180)
  Recto.Encoder(80,54)
  
  Recto.Blanco1(40,1)
  
  Giro.Grados(60,-15,100)
  Siguelineas.Color14(60,5)
  
  Recto.Encoder(80,50)
  
  Brazo.DEncoder(80,300)
  AEncoder(50,-300)
  Recto.Encoder(-80,50)
  
  AEncoder(50,10)
  
  Brazo.DEncoder(80,50)
  Giro.Grados(50,-50,160)
  Recto.Encoder(80,80)
  
  Giro.Grados(-30,30,90)
  Giro.Encoder(60,80,30)
  Recto.Encoder(80,30)
  
  Giro.Grados(0,40,94)
  Recto.Blanco1(40,1)
  
  Giro.Grados(56,-14,92)
  Siguelineas.Cruce14(50)
  
  Giro.Grados(0,60,45)
  Giro.Encoder(60,10,50)
  Recto.Encoder(30,15)
  
  Brazo.DEncoder(80,0)
  AEncoder(60,0)
EndSub

Sub MainPrueba
  
  GritarVoltaje()
  StartArm()
  Siguelineas.Encoder31(70,5)
  Siguelineas.Color31(70,5)
  Thread.Run = Detecta
  Recto.Encoder(60,54)
    
    'Avanza a grúa
  Giro.Grados(-10,10,16)
  Recto.Encoder(20,9)
  Giro.Tiempo(10,-10,500)
  
  'Levanta grúa
  Brazo.DEncoder(50,700)
  Giro.Grados(20,-3,26)
  
  Giro.Grados(20,-40,10)
  Recto.Encoder(-70,20)
    Giro.Grados(70,-70,170)
    
    'Anda hasta amarillo
    Giro.EncoderF(60,58,55)
    Giro.Blanco1(30,28,4.25)
    Thread.Run = Detecta
    'Coge verde y/o azul
  Brazo.DEncoder(80,300)
  Recto.EncoderF(30,1)
    Coger()
    Coger()
    
    'Levanta tubería
  Recto.Encoder(30,1)
  Giro.Grados(41.5*0.5,80*0.5,90)
    Recto.EncoderF(60*0.5,12)
  Giro.Grados(82*0.5,40*0.5,88)
  
   Brazo.DEncoder(80,260)
  Recto.Encoder(20,14.5)
  Giro.Grados(-20,20,5)
    Brazo.DEncoder(80,800)
    Giro.Grados(20,-20,15)
    Giro.Grados(-20,20,10)
  Brazo.DEncoder(80,200)
  
  'Se coloca hacia la seta
  Recto.Encoder(-20,12)
  Giro.Grados(-40,10,180)
  Recto.Encoder(-20,10)
  Giro.Grados(-10,-40,67.5)
  
  Brazo.DEncoder(70,450)
  
  Recto.Encoder(30,25)
  RGB.Detect(2,5,base)
  RGB.Gritar(base)
  Recto.Encoder(30,3.5)
  
  Brazo.DEncoder(70,350)
  AEncoder(60,0)
  Brazo.DEncoder(70,120)
  AEncoder(60,-200)
  
  Brazo.DEncoder(70,620)
  
  Recto.Encoder(-30,20)
  Brazo.DEncoder(80,100)
    AEncoder(30,50)
    Brazo.DEncoder(80,0)
    AEncoder(30,-200)
    Brazo.DEncoder(80,150)
  Giro.Grados(10,40,60)
  Giro.Encoder(54,60,70)
  Giro.Blanco1(58,60,4)
  Thread.Run = Detecta
  Giro.Encoder(60,58,37)
    
    'Cuadra con pared y enchufa con linea hasta cruce
    
    Recto.Encoder(-70,8)
    Giro.Grados(-40,80,100)
    Giro.Tiempo(-80,-70,600)
    Recto.Encoder(70,16)
    Giro.Grados(-5,70,97)
    Siguelineas.Cruce_ExternoF(50,4)
    
    'Piensa bien donde dejarlo
    
  If base = 2 Then 'Base = 2 es el color azul
    Recto.Encoder(50,4)
      Giro.Grados(80,33,75)
      
      Brazo.DEncoder(70,50)
      AEncoder(50,50)
      Brazo.DEncoder(90,1000)
    Else
      Siguelineas.Encoder31(60,20)
      Giro.Grados(80,35,77)
      
      Brazo.DEncoder(70,50)
      AEncoder(50,50)
      Brazo.DEncoder(90,1000)
    EndIf
    
EndSub

Sub PruebaSensor
  While "True"
    RGB.Detect(2,5,color)
    RGB.Gritar(color)
    Program.Delay(100)
  EndWhile
  
EndSub

Sub ControlBrazo
  
  While "True"
    errorA = encoderA - MotorA.GetTacho()
    'errorD = encoderD - MotorD.GetTacho()
    correccionA = errorA * 1 + (errorA - olderrorA) * 0.6
    'correccionD = errorD * 1 + (errorD - olderrorD) * 0.3
    MotorA.StartSpeed(correccionA)
    'MotorD.StartSpeed(correccionD)
  EndWhile
  
EndSub

Sub Display
  While "True"
    LCD.StopUpdate()
    LCD.Clear()
    LCD.Write(5,5,"Encoder B: "+ MotorB.GetTacho()*-1)
    LCD.Write(5,15,"Encoder C: "+ MotorC.GetTacho())
    LCD.Write(5,30,"Diferencia: "+ (MotorB.GetTacho()*-1 -MotorC.GetTacho()))
    LCD.Update()
    Program.Delay(100)
  EndWhile
EndSub

Function Coger()
  Brazo.DEncoder(70,350)
  
  Recto.AccelDecel(15,30,5,0,4.75)
  Brazo.DEncoder(70,250)
  AEncoder(50,0)
  
  Brazo.DEncoder(70,-10)
  
  AEncoder(50,-220)
  
  Brazo.DEncoder(70,100)
  
EndFunction

Function CogerAlto()
  
  Recto.Encoder(20,6)
  
  Brazo.DEncoder(50,400)
  AEncoder(50,0)
  
  Brazo.DEncoder(50,120)
  
  AEncoder(50,-225)
  
  Brazo.DEncoder(50,400)
  
  Recto.Encoder(-40,20)
  Brazo.DEncoder(50,100)
EndFunction

Function Soltar(in number altura)
  
  'Numero de bloques que suelta
  altura*=0.75
  Brazo.DEncoder(70,50)
  AEncoder(50,50)
  Brazo.DEncoder(70,Math.Min(254*(altura),2000))
  AEncoder(50,-200)
  
  Brazo.DEncoder(50,MotorD.GetTacho()+200)
  Program.Delay(200)
  Recto.Encoder(-10,11)
  
  Brazo.DEncoder(50,200)
EndFunction

Function AEncoder(in number Velocidad, in number Encoder)
  
  encDiff = Encoder - MotorA.GetTacho()
  
  signo = Math.Abs(encDiff)/encDiff
  
  safetyTimer = 1200
  Time.Reset3()
  
  ' Solo ejecuta el movimiento si hay diferencia en el encoder
  If encDiff <> 0 Then
    
    While Math.Abs(MotorA.GetTacho() - Encoder) > 15 And Time.Get3() < safetyTimer
      
      ' Ajuste del encoder actual con control de velocidad
      @encoderA = @encoderA + (Velocidad / 15.5 * signo)
      
      ' Límite para evitar sobrepasar el encoder objetivo
      If signo > 0 Then
        @encoderA = Math.Min(@encoderA, Encoder)
      Else
        @encoderA = Math.Max(@encoderA, Encoder)
      EndIf
      
    EndWhile
    
    ' Asegura que el valor final del encoder sea el exacto
    @encoderA = Encoder
    MotorA.OffAndBrake()
    
  EndIf
  
EndFunction

Function DEncoder(in number Velocidad, in number Encoder)
  
  encDiff = Encoder - MotorD.GetTacho()
  
  signo = Math.Abs(encDiff)/encDiff
  
  safetyTimer = 2400
  Time.Reset4()
  
  ' Solo ejecuta el movimiento si hay diferencia en el encoder
  If encDiff <> 0 Then
    
    While (Math.Abs(MotorD.GetTacho() - Encoder) > 15) And Time.Get3() < safetyTimer
      
      ' Ajuste del encoder actual con control de velocidad
      @encoderD =  @encoderD + (Velocidad / 15.5 * signo)
      
      ' Límite para evitar sobrepasar el encoder objetivo
      If signo > 0 Then
        @encoderD = Math.Min(@encoderD, Encoder)
      Else
        @encoderD = Math.Max(@encoderD, Encoder)
      EndIf
      
    EndWhile
    
    ' Asegura que el valor final del encoder sea el exacto
    @encoderD = Encoder
    MotorD.OffAndBrake()
    
  EndIf
EndFunction

Sub Detecta
  Speaker.Play(100,"Connect")
EndSub

Sub Levanta
  Brazo.DEncoder(80,600)
EndSub

Function CogerColor(out number color)
  
  Recto.Encoder(50,5)
  Brazo.DEncoder(50,200)
  Sensor.SetMode(2,4)
  RGB.Detect(2,5,color)
  'RGB.Gritar(color)
  Sensor.SetMode(2,4)
  Brazo.DEncoder(50,310)
  Recto.Encoder(50,7)
  Brazo.DEncoder(50,250)
  AEncoder(50,0)
  
  Brazo.DEncoder(50,0)
  
  AEncoder(50,-175)
  
  Brazo.DEncoder(50,300)
  
EndFunction

Function GritarNumero(in number numero)
  If numero = 0 Then
    Speaker.Play(100,"ZERO")
  ElseIf numero = 1 Then
    Speaker.Play(100,"One")
  ElseIf numero = 2 Then
    Speaker.Play(100,"Two")
  ElseIf numero = 3 Then
    Speaker.Play(100,"Three")
  ElseIf numero = 4 Then
    Speaker.Play(100,"Four")
  ElseIf numero = 5 Then
    Speaker.Play(100,"Five")
  ElseIf numero = 6 Then
    Speaker.Play(100,"Six")
  ElseIf numero = 7 Then
    Speaker.Play(100,"Seven")
  ElseIf numero = 8 Then
    Speaker.Play(100,"Eight")
  ElseIf numero = 9 Then
    Speaker.Play(100,"Nine")
  ElseIf numero = 10 Then
    Speaker.Play(100,"Ten")
  EndIf
  Speaker.Wait()
EndFunction

Function GritarVoltaje()
  
  voltaje = EV3.BatteryVoltage
  GritarNumero(Math.Floor(voltaje))
  GritarNumero(Math.Floor(voltaje*10)-Math.Floor(voltaje)*10)
  GritarNumero(Math.Floor(voltaje*100)-Math.Floor(voltaje*10)*10)
  
EndFunction

Function GritarSensores()
  Sensor.SetMode(2,0)
  s[1] = Sensor.ReadPercent(1)
  s[2] = Sensor.ReadPercent(2)
  s[3] = Sensor.ReadPercent(3)
  s[4] = Sensor.ReadPercent(4)
  
  for i=1 to 4
    If i=2 Then
      continue
    EndIf
    Program.Delay(1000)
    GritarNumero(i)
    GritarNumero(Math.Floor(s[i]/10))
    GritarNumero(Math.Floor(s[i])-Math.Floor(s[i]/10)*10)
  EndFor
  
  
EndFunction

Function GritarSensor(in number sens)
  Sensor.SetMode(sens,0)
    GritarNumero(sens)
  while "True"
    s = Sensor.ReadPercent(sens)
 
    Program.Delay(1000)
    GritarNumero(Math.Floor(s/10))
    GritarNumero(Math.Floor(s)-Math.Floor(s/10)*10)
  EndWhile
  
EndFunction
