lv_v_107 = 0
lv_aenc_107 = 0
lv_v_97 = 0
lv_aenc_97 = 0
lv_velocidad_1 = 0
lv_distancia_1 = 0
lv_v1_35 = 0
lv_v2_35 = 0
lv_angle_35 = 0
lv_velocidad1_25 = 0
lv_velocidad2_25 = 0
lv_tiempo_25 = 0
lv_velocidad_39 = 0
lv_v_108 = 0
lv_velocidad_13 = 0
lv_tiempo_13 = 0
lv_read_132 = 0
lv_velocidad_5 = 0
lv_sens_5 = 0
lv_velocidad_3 = 0
lv_sens_3 = 0
lv_v1_36 = 0
lv_v2_36 = 0
lv_angle_36 = 0
lv_velocidad1_17 = 0
lv_velocidad2_17 = 0
lv_sens_17 = 0
lv_velocidad_76 = 0
lv_kp_76 = 0
lv_ki_76 = 0
lv_kd_76 = 0
lv_encoder_76 = 0
lv_velocidad_81 = 0
lv_kp_81 = 0
lv_ki_81 = 0
lv_kd_81 = 0
lv_reader_81 = 0
lv_velocidad_75 = 0
lv_kp_75 = 0
lv_ki_75 = 0
lv_kd_75 = 0
lv_encoder_75 = 0
lv_v_103 = 0
lv_vel_33 = 0
lv_velocidad_82 = 0
lv_kp_82 = 0
lv_ki_82 = 0
lv_kd_82 = 0
lv_reader_82 = 0
lv_vel_31 = 0
lv_velocidad_71 = 0
lv_kp_71 = 0
lv_ki_71 = 0
lv_kd_71 = 0
lv_velocidad_37 = 0
lv_v_98 = 0
lv_velocidad_72 = 0
lv_kp_72 = 0
lv_ki_72 = 0
lv_kd_72 = 0
lv_velocidad1_15 = 0
lv_velocidad2_15 = 0
lv_encoder_15 = 0
lv_va_102 = 0
lv_vd_102 = 0
lv_aenca_102 = 0
lv_aencd_102 = 0
lv_v_106 = 0
lv_grados_106 = 0
lv_v0_56 = 0
lv_vmax_56 = 0
lv_kp_56 = 0
lv_ki_56 = 0
lv_kd_56 = 0
lv_accelencoder_56 = 0
lv_vmax_90 = 0
lv_kp_90 = 0
lv_ki_90 = 0
lv_kd_90 = 0
lv_color_124 = 0
lv_reps_112 = 0
lv_color_112 = 0
lv_reps_113 = 0
lv_color_113 = 0
lv_reps_114 = 0
lv_color_114 = 0
lv_reps_115 = 0
lv_color_115 = 0
lv_v_110 = 0
lv_t_110 = 0
lv_v_111 = 0
lv_aenc_111 = 0
gv_bloque = 0
lv_color_116 = 0
lv_color_117 = 0
lv_color_118 = 0
lv_color_119 = 0
lv_read_132 = 0
gv_velocidad = 0
gv_kp = 0
gv_ki = 0
gv_kd = 0
gv_diameter = 0
gv_centro = 0
gv_sentido_motores = 0
gv_correccion = 0
gv_g1 = 0
gv_rojos = 0
gv_amarillos = 0
gv_verdes = 0
gv_azules = 0
gv_numero_bloques = 0
gv_bomboclat [ 0 ] = 0
gv_velocidad = 100
gv_kp = 0.2
gv_ki = 0.0001
gv_kd = 3
gv_diameter = 56
gv_centro = 0
gv_sentido_motores = 1
gv_correccion = 0
gv_sentido_motores = 1
gv_sentido_motores = 1
gv_g1 = 124 / 36
gv_sentido_motores = 1
gv_sentido_motores = 1
gv_sentido_motores = 1
gv_sentido_motores = 1
f_setup_0 ()
Thread.Run = f_display_0
Thread.Run = f_stop_0
f_main_0 ()
Sub f_setup_0
Sensor.SetMode ( 1 , 0 )
Sensor.SetMode ( 2 , 4 )
Sensor.SetMode ( 3 , 0 )
Sensor.SetMode ( 4 , 0 )
EndSub
Sub f_startarm_0
Time.Reset1 ()
While Time.Get1 () < 850
MotorA.StartSpeed ( 30 )
MotorD.StartSpeed ( 30 )
EndWhile
MotorAD.OffAndBrake ()
MotorA.ResetCount ()
MotorD.ResetCount ()
lv_v_107 = 40
lv_aenc_107 = - 360
f_bmoved_2 ()
MotorD.ResetCount ()
Program.Delay ( 100 )
EndSub
Sub f_display_0
gv_old_b = 0
gv_old_c = 0
While "True"
LCD.StopUpdate ()
LCD.Clear ()
LCD.Write ( 5 , 35 , "centro: " + gv_centro )
LCD.Write ( 5 , 45 , "Velocidad de B:  " + MotorB.GetSpeed () * - 1 )
LCD.Write ( 5 , 55 , "Velocidad de C:  " + MotorC.GetSpeed () )
LCD.Write ( 5 , 65 , "rad/s de B:  " + Math.GetRadians ( MotorB.GetTacho () - gv_old_b ) / 0.05 * - 1 )
LCD.Write ( 5 , 75 , "rad/s de C:  " + Math.GetRadians ( MotorC.GetTacho () - gv_old_c ) / 0.05 )
LCD.Write ( 5 , 85 , "Encoder de B:  " + MotorB.GetTacho () * - 1 )
LCD.Write ( 5 , 95 , "Encoder de C:  " + MotorC.GetTacho () )
LCD.Update ()
Program.Delay ( 50 )
gv_old_b = MotorB.GetTacho ()
gv_old_c = MotorC.GetTacho ()
EndWhile
EndSub
Sub f_main_0
f_startarm_0 ()
lv_v_97 = 30
lv_aenc_97 = - 300
f_bmovea_2 ()
lv_velocidad_1 = gv_velocidad * 0.3
lv_distancia_1 = 30
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 90
f_gunivencmm_3 ()
lv_velocidad_1 = gv_velocidad * 0.3
lv_distancia_1 = 25
f_encoderrectomm_2 ()
gv_rojos = 0
gv_amarillos = 0
gv_verdes = 0
gv_azules = 0
lv_velocidad_1 = gv_velocidad * 0.3
lv_distancia_1 = 7
f_encoderrectomm_2 ()
Program.Delay ( 200 )
lv_v_107 = 20
lv_aenc_107 = - 300
f_bmoved_2 ()
lv_v_97 = 20
lv_aenc_97 = - 750
f_bmovea_2 ()
lv_v1_35 = gv_velocidad * - 0.1
lv_v2_35 = gv_velocidad * 0.1
lv_angle_35 = 25
f_gunivencmm_3 ()
Program.Delay ( 1000 )
lv_velocidad_1 = gv_velocidad * 0.12
lv_distancia_1 = 6
f_encoderrectomm_2 ()
lv_v_97 = 20
lv_aenc_97 = - 760
f_bmovea_2 ()
lv_velocidad1_25 = gv_velocidad * 0.1
lv_velocidad2_25 = gv_velocidad * - 0.1
lv_tiempo_25 = 1300
f_tiempogiromm_3 ()
lv_v1_35 = gv_velocidad * - 0.05
lv_v2_35 = gv_velocidad * 0.05
lv_angle_35 = 5
f_gunivencmm_3 ()
lv_v_97 = 20
lv_aenc_97 = - 510
f_bmovea_2 ()
Program.Delay ( 1000 )
lv_velocidad_39 = 10
f_spin90_1 ()
lv_velocidad_39 = - 10
f_spin90_1 ()
lv_velocidad_1 = gv_velocidad * - 0.3
lv_distancia_1 = 10
f_encoderrectomm_2 ()
lv_v_97 = 30
lv_aenc_97 = - 300
f_bmovea_2 ()
lv_v_108 = 40
f_bmoved0_1 ()
lv_v1_35 = gv_velocidad * 0.2
lv_v2_35 = gv_velocidad * - 0.2
lv_angle_35 = 80
f_gunivencmm_3 ()
lv_velocidad_13 = gv_velocidad * - 0.9
lv_tiempo_13 = 2000
f_tiemporectomm_2 ()
lv_velocidad_1 = gv_velocidad * 0.3
lv_distancia_1 = 3.5
f_encoderrectomm_2 ()
lv_velocidad_13 = gv_velocidad * - 0.8
lv_tiempo_13 = 500
f_tiemporectomm_2 ()
lv_velocidad_1 = gv_velocidad * 0.3
lv_distancia_1 = 5.5
f_encoderrectomm_2 ()
lv_v_97 = 20
lv_aenc_97 = - 300
f_bmovea_2 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 92
f_gunivencmm_3 ()
lv_velocidad_1 = gv_velocidad * 0.2
lv_distancia_1 = 18
f_encoderrectomm_2 ()
Program.Delay ( 200 )
f_lectura_1 ()
gv_bloque = lv_read_132
If gv_bloque <> 3 And gv_bloque <> 2 Then
gv_numero_bloques = 0
gv_bomboclat [ 0 ] = 0
Else
gv_bomboclat [ 0 ] = gv_bloque
gv_numero_bloques = 1
If gv_bloque = 3 Then
gv_verdes = gv_verdes + 1
Else
gv_azules = gv_azules + 1
EndIf
f_coger_abajo_0 ()
EndIf
lv_v_97 = 30
lv_aenc_97 = - 350
f_bmovea_2 ()
lv_velocidad_1 = gv_velocidad * - 0.2
lv_distancia_1 = 11
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * 0.2
lv_v2_35 = gv_velocidad * - 0.2
lv_angle_35 = 90
f_gunivencmm_3 ()
lv_velocidad_1 = gv_velocidad * 0.2
lv_distancia_1 = 10.5
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 88
f_gunivencmm_3 ()
lv_velocidad_1 = gv_velocidad * 0.2
lv_distancia_1 = 26
f_encoderrectomm_2 ()
f_lectura_1 ()
gv_bloque = lv_read_132
If gv_bloque <> 3 and gv_bloque <> 2 Then
gv_bomboclat [ 1 ] = gv_bomboclat [ 0 ]
gv_bomboclat [ 0 ] = 0
Else
gv_bomboclat [ 1 ] = gv_bloque
gv_numero_bloques = gv_numero_bloques + 1
If gv_numero_bloques = 1 Then
f_coger_abajo_0 ()
Else
f_coger_arriba_0 ()
EndIf
EndIf
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 171
f_gunivencmm_3 ()
lv_velocidad_1 = gv_velocidad * 0.9
lv_distancia_1 = 72
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * - 0.2
lv_v2_35 = gv_velocidad * 0.2
lv_angle_35 = 85
f_gunivencmm_3 ()
lv_velocidad_13 = gv_velocidad * - 0.7
lv_tiempo_13 = 600
f_tiemporectomm_2 ()
lv_velocidad_5 = gv_velocidad * 0.5
lv_sens_5 = 1
f_1blancorectomm_2 ()
lv_velocidad_3 = gv_velocidad * 0.2
lv_sens_3 = 1
f_1negrorectomm_2 ()
lv_velocidad_1 = gv_velocidad * 0.3
lv_distancia_1 = 6
f_encoderrectomm_2 ()
lv_v1_36 = 30
lv_v2_36 = - 30
lv_angle_36 = 50
f_gunivencmmf_3 ()
lv_velocidad1_17 = 30
lv_velocidad2_17 = - 30
lv_sens_17 = 1
f_1negrogiromm_3 ()
lv_velocidad_76 = gv_velocidad * 0.3
lv_kp_76 = gv_kp * 2
lv_ki_76 = gv_ki
lv_kd_76 = gv_kd
lv_encoder_76 = 5
f_sl14pidencf_5 ()
If gv_numero_bloques > 0 Then
lv_velocidad_81 = gv_velocidad * 0.4
lv_kp_81 = gv_kp
lv_ki_81 = gv_ki
lv_kd_81 = gv_kd
lv_reader_81 = 3
f_sl1spidcross_5 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 180
f_gunivencmm_3 ()
lv_velocidad_75 = gv_velocidad * 0.3
lv_kp_75 = gv_kp
lv_ki_75 = gv_ki
lv_kd_75 = gv_kd
lv_encoder_75 = 23
f_sl14pidenc_5 ()
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 84
f_gunivencmm_3 ()
lv_velocidad_1 = gv_velocidad * 0.3
lv_distancia_1 = 18.5
f_encoderrectomm_2 ()
if gv_numero_bloques = 1 Then
If gv_bomboclat [ 0 ] = 0 Then
gv_bomboclat [ 0 ] = gv_bomboclat [ 1 ]
gv_bomboclat [ 1 ] = 0
EndIf
if gv_bomboclat [ 0 ] = 2 Then
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
f_soltar_todo_0 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
Else
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
f_soltar_todo_0 ()
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
EndIf
Else
If gv_bomboclat [ 0 ] = gv_bomboclat [ 1 ] Then
If gv_bomboclat [ 0 ] = 2 Then
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
f_soltar_todo_0 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
Else
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
f_soltar_todo_0 ()
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
EndIf
Else
If gv_bomboclat [ 0 ] = 3 Then
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
f_soltar_uno_0 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
f_soltar_todo_0 ()
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
Else
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
f_soltar_uno_0 ()
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 40
f_gunivencmm_3 ()
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 25
f_gunivencmm_3 ()
f_soltar_todo_0 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 25
f_gunivencmm_3 ()
EndIf
EndIf
EndIf
lv_v_103 = 20
f_bmovead0_1 ()
lv_velocidad_5 = gv_velocidad * - 0.15
lv_sens_5 = 1
f_1blancorectomm_2 ()
lv_velocidad_3 = gv_velocidad * - 0.15
lv_sens_3 = 1
f_1negrorectomm_2 ()
lv_velocidad_1 = gv_velocidad * 0.15
lv_distancia_1 = 2
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 10
f_gunivencmm_3 ()
lv_vel_33 = gv_velocidad * 0.3
f_gperfddefinitivomm_1 ()
lv_velocidad_75 = gv_velocidad * 0.3
lv_kp_75 = gv_kp
lv_ki_75 = gv_ki
lv_kd_75 = gv_kd
lv_encoder_75 = 7
f_sl14pidenc_5 ()
lv_velocidad_82 = gv_velocidad * 0.4
lv_kp_82 = gv_kp
lv_ki_82 = gv_ki
lv_kd_82 = gv_kd
lv_reader_82 = 3
f_sl1spidcrossf_5 ()
Else
lv_velocidad_75 = gv_velocidad * 0.3
lv_kp_75 = gv_kp
lv_ki_75 = gv_ki
lv_kd_75 = gv_kd
lv_encoder_75 = 8
f_sl14pidenc_5 ()
lv_velocidad_82 = gv_velocidad * 0.4
lv_kp_82 = gv_kp
lv_ki_82 = gv_ki
lv_kd_82 = gv_kd
lv_reader_82 = 3
f_sl1spidcrossf_5 ()
EndIf
lv_vel_31 = gv_velocidad * 0.3
f_gperfidefinitivomm_1 ()
lv_velocidad_71 = gv_velocidad * 0.3
lv_kp_71 = gv_kp
lv_ki_71 = gv_ki
lv_kd_71 = gv_kd
f_sl14pid_4 ()
Motor.Stop ( "ABCD" , "True" )
lv_velocidad_1 = gv_velocidad * 0.2
lv_distancia_1 = 16.7
f_encoderrectomm_2 ()
f_coger_abajo_0 ()
lv_velocidad_5 = gv_velocidad * - 0.15
lv_sens_5 = 1
f_1blancorectomm_2 ()
lv_velocidad_3 = gv_velocidad * - 0.15
lv_sens_3 = 1
f_1negrorectomm_2 ()
lv_velocidad_1 = gv_velocidad * 0.15
lv_distancia_1 = 5
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 89
f_gunivencmm_3 ()
lv_velocidad_75 = gv_velocidad * 0.3
lv_kp_75 = gv_kp * 1.5
lv_ki_75 = gv_ki
lv_kd_75 = gv_kd
lv_encoder_75 = 12
f_sl14pidenc_5 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 87
f_gunivencmm_3 ()
lv_velocidad_1 = gv_velocidad * 0.2
lv_distancia_1 = 12
f_encoderrectomm_2 ()
f_coger_arriba_0 ()
lv_velocidad_37 = gv_velocidad * 0.3
f_spin180_1 ()
lv_velocidad_13 = gv_velocidad * - 0.3
lv_tiempo_13 = 1000
f_tiemporectomm_2 ()
lv_velocidad_1 = gv_velocidad * 0.4
lv_distancia_1 = 47
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 90
f_gunivencmm_3 ()
lv_velocidad_1 = gv_velocidad * 0.4
lv_distancia_1 = 30
f_encoderrectomm_2 ()
lv_velocidad_1 = gv_velocidad * - 0.4
lv_distancia_1 = 34
f_encoderrectomm_2 ()
f_soltar_todo_0 ()
lv_v_103 = 20
f_bmovead0_1 ()
lv_velocidad_5 = gv_velocidad * - 0.3
lv_sens_5 = 4
f_1blancorectomm_2 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 90
f_gunivencmm_3 ()
lv_v_98 = 30
f_bmovea0_1 ()
lv_velocidad_72 = gv_velocidad * 0.3
lv_kp_72 = gv_kp
lv_ki_72 = gv_ki
lv_kd_72 = gv_kd
f_sl14pidf_4 ()
lv_velocidad_1 = gv_velocidad * 0.3
lv_distancia_1 = 6
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 88
f_gunivencmm_3 ()
lv_velocidad_75 = gv_velocidad * 0.3
lv_kp_75 = gv_kp
lv_ki_75 = gv_ki
lv_kd_75 = gv_kd
lv_encoder_75 = 18
f_sl14pidenc_5 ()
lv_velocidad1_15 = gv_velocidad * 0.3
lv_velocidad2_15 = gv_velocidad * 0.2
lv_encoder_15 = 22
f_encodergiromm_3 ()
lv_velocidad1_15 = gv_velocidad * 0.2
lv_velocidad2_15 = gv_velocidad * 0.3
lv_encoder_15 = 25
f_encodergiromm_3 ()
lv_velocidad_1 = gv_velocidad * 0.5
lv_distancia_1 = 15
f_encoderrectomm_2 ()
lv_v_107 = 20
lv_aenc_107 = - 300
f_bmoved_2 ()
lv_v_97 = 20
lv_aenc_97 = - 780
f_bmovea_2 ()
lv_velocidad_1 = gv_velocidad * 0.3
lv_distancia_1 = 6
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * - 0.3
lv_v2_35 = gv_velocidad * 0.3
lv_angle_35 = 30
f_gunivencmm_3 ()
lv_velocidad_1 = gv_velocidad * 0.3
lv_distancia_1 = 4
f_encoderrectomm_2 ()
lv_v1_35 = gv_velocidad * 0.3
lv_v2_35 = gv_velocidad * - 0.3
lv_angle_35 = 45
f_gunivencmm_3 ()
lv_v_97 = 20
lv_aenc_97 = - 520
f_bmovea_2 ()
lv_velocidad1_15 = gv_velocidad * 0.3
lv_velocidad2_15 = gv_velocidad * 0.1
lv_encoder_15 = 14
f_encodergiromm_3 ()
lv_v_103 = 30
f_bmovead0_1 ()
EndSub
Sub f_stop_0
While "True"
if Buttons.Current = "E" Then
MotorBC.OffAndBrake ()
MotorAD.OffAndBrake ()
lv_v_106 = 20
lv_grados_106 = 0
f_bmoveadsafe_2 ()
Program.End ()
EndIf
EndWhile
EndSub
Sub f_encoderrectomm_2
lv_velocidad_1 = lv_velocidad_1 * gv_sentido_motores
lv_diametro_1 = 5.6
lv_enc_1 = lv_distancia_1 * 360 / Math.Pi / lv_diametro_1
lv_start_b_1 = Motor.GetCount ( "B" ) * - 1 + ( gv_correccion / 30 * lv_velocidad_1 )
lv_start_c_1 = Motor.GetCount ( "C" )
lv_encoder_c_1 = Motor.GetCount ( "C" ) - lv_start_c_1
While Math.abs ( lv_encoder_c_1 ) < lv_enc_1
lv_encoder_b_1 = Motor.GetCount ( "B" ) * - 1 - lv_start_b_1
lv_encoder_c_1 = Motor.GetCount ( "C" ) - lv_start_c_1
lv_error_1 = ( lv_encoder_b_1 - lv_encoder_c_1 ) * gv_sentido_motores
lv_proporcial_1 = lv_error_1 * 1.2
Motor.StartSync ( "BC" , - ( lv_velocidad_1 - lv_proporcial_1 ) , lv_velocidad_1 + lv_proporcial_1 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub f_1negrorectomm_2
lv_velocidad_3 = lv_velocidad_3 * gv_sentido_motores
lv_start_b_3 = Motor.GetCount ( "B" ) * - 1 + gv_correccion
lv_start_c_3 = Motor.GetCount ( "C" )
While Sensor.ReadPercent ( lv_sens_3 ) > 10
lv_encoder_b_3 = Motor.GetCount ( "B" ) * - 1 - lv_start_b_3
lv_encoder_c_3 = Motor.GetCount ( "C" ) - lv_start_c_3
lv_error_3 = ( lv_encoder_b_3 - lv_encoder_c_3 ) * gv_sentido_motores
lv_proporcial_3 = lv_error_3 * 1.2
Motor.StartSync ( "BC" , - ( lv_velocidad_3 - lv_proporcial_3 ) , ( lv_velocidad_3 + lv_proporcial_3 ) )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub f_1blancorectomm_2
lv_velocidad_5 = lv_velocidad_5 * gv_sentido_motores
lv_start_b_5 = Motor.GetCount ( "B" ) * - 1 + gv_correccion
lv_start_c_5 = Motor.GetCount ( "C" )
While Sensor.ReadPercent ( lv_sens_5 ) < 40
lv_encoder_b_5 = Motor.GetCount ( "B" ) * - 1 - lv_start_b_5
lv_encoder_c_5 = Motor.GetCount ( "C" ) - lv_start_c_5
lv_error_5 = ( lv_encoder_b_5 - lv_encoder_c_5 ) * gv_sentido_motores
lv_proporcial_5 = lv_error_5 * 1.2
Motor.StartSync ( "BC" , - ( lv_velocidad_5 - lv_proporcial_5 ) , lv_velocidad_5 + lv_proporcial_5 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub f_tiemporectomm_2
lv_velocidad_13 = lv_velocidad_13 * gv_sentido_motores
lv_start_b_13 = Motor.GetCount ( "B" ) * - 1 + gv_correccion
lv_start_c_13 = Motor.GetCount ( "C" )
Time.Reset3 ()
While Time.Get3 () < lv_tiempo_13
lv_encoder_b_13 = Motor.GetCount ( "B" ) * - 1 - lv_start_b_13
lv_encoder_c_13 = Motor.GetCount ( "C" ) - lv_start_c_13
lv_error_13 = ( lv_encoder_b_13 - lv_encoder_c_13 ) * gv_sentido_motores
lv_proporcial_13 = lv_error_13 * 1.2
Motor.StartSync ( "BC" , - ( lv_velocidad_13 - lv_proporcial_13 ) , lv_velocidad_13 + lv_proporcial_13 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub f_encodergiromm_3
lv_velocidad1_15 = lv_velocidad1_15 * gv_sentido_motores
lv_velocidad2_15 = lv_velocidad2_15 * gv_sentido_motores
lv_diametro_15 = 5.6
lv_distancia_15 = lv_encoder_15 / ( lv_diametro_15 * Math.Pi ) * 360
Motor.MoveSync ( "BC" , - lv_velocidad1_15 , lv_velocidad2_15 , lv_distancia_15 , "True" )
EndSub
Sub f_1negrogiromm_3
lv_velocidad1_17 = lv_velocidad1_17 * gv_sentido_motores
lv_velocidad2_17 = lv_velocidad2_17 * gv_sentido_motores
While Sensor.ReadPercent ( lv_sens_17 ) > 15
Motor.StartSync ( "BC" , - lv_velocidad1_17 , lv_velocidad2_17 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub f_tiempogiromm_3
Time.Reset3 ()
lv_velocidad1_25 = lv_velocidad1_25 * gv_sentido_motores
lv_velocidad2_25 = lv_velocidad2_25 * gv_sentido_motores
While Time.Get3 () < lv_tiempo_25
Motor.StartSync ( "BC" , - lv_velocidad1_25 , lv_velocidad2_25 )
EndWhile
Motor.Stop ( "BC" , "True" )
EndSub
Sub f_gperfidefinitivomm_1
lv_avance_31 = 100
lv_ginicio_31 = 200
lv_ajuste_31 = 70
lv_vel_31 = Math.Min ( 40 , lv_vel_31 )
lv_vel_31 = lv_vel_31 * 0.75
lv_vel_31 = lv_vel_31 * gv_sentido_motores
Motor.MoveSync ( "BC" , - lv_vel_31 , lv_vel_31 , lv_avance_31 , "True" )
Motor.Move ( "BC" , lv_vel_31 , lv_ginicio_31 , "False" )
While Sensor.ReadPercent ( 1 ) > 10
Motor.StartSync ( "BC" , lv_vel_31 , lv_vel_31 )
EndWhile
Motor.Stop ( "BC" , "False" )
Motor.Move ( "BC" , lv_vel_31 , lv_ajuste_31 , "True" )
EndSub
Sub f_gperfddefinitivomm_1
lv_avance_33 = 100
lv_ginicio_33 = 200
lv_ajuste_33 = 70
lv_vel_33 = Math.Min ( 40 , lv_vel_33 )
lv_vel_33 = lv_vel_33 * 0.75
lv_vel_33 = lv_vel_33 * gv_sentido_motores
Motor.MoveSync ( "BC" , - lv_vel_33 , lv_vel_33 , lv_avance_33 , "True" )
Motor.Move ( "BC" , - lv_vel_33 , lv_ginicio_33 , "False" )
While Sensor.ReadPercent ( 4 ) > 10
Motor.StartSync ( "BC" , - lv_vel_33 , - lv_vel_33 )
EndWhile
Motor.Stop ( "BC" , "False" )
Motor.Move ( "BC" , - lv_vel_33 , lv_ajuste_33 , "True" )
EndSub
Sub f_gunivencmm_3
lv_i_35 = "B"
lv_d_35 = "C"
lv_signo_35 = ( lv_v1_35 / lv_v2_35 ) / Math.Abs ( lv_v1_35 / lv_v2_35 )
lv_vmin_35 = Math.Min ( Math.Abs ( lv_v1_35 ) , Math.Abs ( lv_v2_35 ) )
lv_vmax_35 = Math.Max ( Math.Abs ( lv_v1_35 ) , Math.Abs ( lv_v2_35 ) )
lv_encodr_35 = lv_angle_35 * gv_g1 * ( - 2 / ( lv_signo_35 * lv_vmin_35 / lv_vmax_35 - 1 ) )
Motor.MoveSync ( lv_i_35 + lv_d_35 , - lv_v1_35 , lv_v2_35 , lv_encodr_35 , "True" )
lv_v1_35 = 0
lv_v2_35 = 0
lv_angle_35 = 0
Program.Delay ( 200 )
EndSub
Sub f_gunivencmmf_3
lv_i_36 = "B"
lv_d_36 = "C"
lv_signo_36 = ( lv_v1_36 / lv_v2_36 ) / Math.Abs ( lv_v1_36 / lv_v2_36 )
lv_vmin_36 = Math.Min ( Math.Abs ( lv_v1_36 ) , Math.Abs ( lv_v2_36 ) )
lv_vmax_36 = Math.Max ( Math.Abs ( lv_v1_36 ) , Math.Abs ( lv_v2_36 ) )
lv_encodr_36 = lv_angle_36 * gv_g1 * ( - 2 / ( lv_signo_36 * lv_vmin_36 / lv_vmax_36 - 1 ) )
Motor.MoveSync ( lv_i_36 + lv_d_36 , - lv_v1_36 , lv_v2_36 , lv_encodr_36 , "False" )
lv_v1_36 = 0
lv_v2_36 = 0
lv_angle_36 = 0
EndSub
Sub f_spin180_1
lv_i_37 = "B"
lv_d_37 = "C"
lv_v1_35 = lv_velocidad_37
lv_v2_35 = lv_velocidad_37 * - 1
lv_angle_35 = 176
f_gunivencmm_3 ()
lv_angle_37 = 0
EndSub
Sub f_spin90_1
lv_i_39 = "B"
lv_d_39 = "C"
lv_v1_35 = lv_velocidad_39
lv_v2_35 = lv_velocidad_39 * - 1
lv_angle_35 = 90
f_gunivencmm_3 ()
lv_angle_39 = 0
EndSub
Sub f_sl14sicf_6
lv_i_56 = "B"
lv_d_56 = "C"
lv_accelencoder_56 = ( lv_accelencoder_56 / ( 5.6 * Math.Pi ) ) * 360
lv_u_56 = 0
lv_error_56 = 0
lv_olderror_56 = 0
lv_errsum_56 = 0
Motor.ResetCount ( "C" )
While Sensor.ReadPercent ( 1 ) > 15 Or Sensor.ReadPercent ( 4 ) > 15
lv_vel_56 = ( Motor.GetCount ( "C" ) / lv_accelencoder_56 * 0.72 ) * ( lv_vmax_56 + lv_v0_56 ) + lv_v0_56
lv_vel_56 = Math.Min ( lv_vel_56 , lv_vmax_56 )
lv_sentido_56 = lv_vel_56 / Math.Abs ( lv_vel_56 )
lv_error_56 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_56
lv_errsum_56 = lv_errsum_56 + lv_error_56
lv_u_56 = lv_error_56 * lv_kp_56 + ( lv_error_56 - lv_olderror_56 ) * lv_kd_56 + lv_errsum_56 * lv_ki_56
Motor.StartSync ( lv_i_56 + lv_d_56 , - ( lv_vel_56 + lv_u_56 ) * gv_sentido_motores , ( lv_vel_56 - lv_u_56 ) * gv_sentido_motores )
lv_olderror_56 = lv_error_56
EndWhile
Motor.Stop ( lv_i_56 + lv_d_56 , "False" )
EndSub
Sub f_sl14pid_4
lv_velocidad_71 = lv_velocidad_71 * gv_sentido_motores
lv_i_71 = "B"
lv_d_71 = "C"
lv_error_71 = 0
lv_olderror_71 = 0
lv_errsum_71 = 0
lv_u_71 = 0
lv_sentido_71 = lv_velocidad_71 / Math.Abs ( lv_velocidad_71 )
While Sensor.ReadPercent ( 1 ) > 15 Or Sensor.ReadPercent ( 4 ) > 15
lv_error_71 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_71 * gv_sentido_motores
lv_errsum_71 = lv_errsum_71 + lv_error_71
lv_u_71 = lv_error_71 * lv_kp_71 + ( lv_error_71 - lv_olderror_71 ) * lv_kd_71 + lv_errsum_71 * lv_ki_71
Motor.StartSync ( lv_i_71 + lv_d_71 , - ( lv_velocidad_71 + lv_u_71 ) , lv_velocidad_71 - lv_u_71 )
lv_olderror_71 = lv_error_71
EndWhile
Motor.Stop ( lv_i_71 + lv_d_71 , "True" )
EndSub
Sub f_sl14pidf_4
lv_velocidad_72 = lv_velocidad_72 * gv_sentido_motores
lv_i_72 = "B"
lv_d_72 = "C"
lv_error_72 = 0
lv_olderror_72 = 0
lv_errsum_72 = 0
lv_u_72 = 0
lv_sentido_72 = lv_velocidad_72 / Math.Abs ( lv_velocidad_72 )
While Sensor.ReadPercent ( 1 ) > 15 Or Sensor.ReadPercent ( 4 ) > 15
lv_error_72 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_72 * gv_sentido_motores
lv_errsum_72 = lv_errsum_72 + lv_error_72
lv_u_72 = lv_error_72 * lv_kp_72 + ( lv_error_72 - lv_olderror_72 ) * lv_kd_72 + lv_errsum_72 * lv_ki_72
Motor.StartSync ( lv_i_72 + lv_d_72 , - ( lv_velocidad_72 + lv_u_72 ) , lv_velocidad_72 - lv_u_72 )
lv_olderror_72 = lv_error_72
EndWhile
Motor.Stop ( lv_i_72 + lv_d_72 , "False" )
EndSub
Sub f_sl14pidenc_5
lv_velocidad_75 = lv_velocidad_75 * gv_sentido_motores
lv_i_75 = "B"
lv_d_75 = "C"
lv_error_75 = 0
lv_olderror_75 = 0
lv_errsum_75 = 0
lv_u_75 = 0
lv_sentido_75 = lv_velocidad_75 / Math.Abs ( lv_velocidad_75 )
lv_encoder_75 = lv_encoder_75 / ( 5.6 * Math.Pi ) * 360
lv_start_c_75 = Motor.GetCount ( "C" )
lv_encoder_c_75 = 0
While Math.Abs ( lv_encoder_c_75 ) < lv_encoder_75
lv_encoder_c_75 = Motor.GetCount ( "C" ) - lv_start_c_75
lv_error_75 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_75 * gv_sentido_motores
lv_errsum_75 = lv_errsum_75 + lv_error_75
lv_u_75 = lv_error_75 * lv_kp_75 + ( lv_error_75 - lv_olderror_75 ) * lv_kd_75 + lv_errsum_75 * lv_ki_75
Motor.StartSync ( lv_i_75 + lv_d_75 , - ( lv_velocidad_75 + lv_u_75 ) , lv_velocidad_75 - lv_u_75 )
lv_olderror_75 = lv_error_75
EndWhile
Motor.Stop ( lv_i_75 + lv_d_75 , "True" )
EndSub
Sub f_sl14pidencf_5
lv_velocidad_76 = lv_velocidad_76 * gv_sentido_motores
lv_i_76 = "B"
lv_d_76 = "C"
lv_error_76 = 0
lv_olderror_76 = 0
lv_errsum_76 = 0
lv_u_76 = 0
lv_sentido_76 = lv_velocidad_76 / Math.Abs ( lv_velocidad_76 )
lv_encoder_76 = lv_encoder_76 / ( 5.6 * Math.Pi ) * 360
lv_start_c_76 = Motor.GetCount ( "C" )
lv_encoder_c_76 = 0
While Math.Abs ( lv_encoder_c_76 ) < lv_encoder_76
lv_encoder_c_76 = Motor.GetCount ( "C" ) - lv_start_c_76
lv_error_76 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_76 * gv_sentido_motores
lv_errsum_76 = lv_errsum_76 + lv_error_76
lv_u_76 = lv_error_76 * lv_kp_76 + ( lv_error_76 - lv_olderror_76 ) * lv_kd_76 + lv_errsum_76 * lv_ki_76
Motor.StartSync ( lv_i_76 + lv_d_76 , - ( lv_velocidad_76 + lv_u_76 ) , lv_velocidad_76 - lv_u_76 )
lv_olderror_76 = lv_error_76
EndWhile
Motor.Stop ( lv_i_76 + lv_d_76 , "False" )
EndSub
Sub f_sl1spidcross_5
lv_velocidad_81 = lv_velocidad_81 * gv_sentido_motores
lv_i_81 = "B"
lv_d_81 = "C"
lv_error_81 = 0
lv_olderror_81 = 0
lv_errsum_81 = 0
lv_u_81 = 0
lv_sentido_81 = lv_velocidad_81 / Math.Abs ( lv_velocidad_81 )
If lv_reader_81 = 3 Then
lv_reader1_81 = 1
lv_reader2_81 = 4
Else
lv_reader1_81 = 3
lv_reader2_81 = 1
EndIf
While Sensor.ReadPercent ( lv_reader_81 ) > 20
lv_error_81 = ( Sensor.ReadPercent ( lv_reader1_81 ) - Sensor.ReadPercent ( lv_reader2_81 ) ) * lv_sentido_81 * gv_sentido_motores
lv_errsum_81 = lv_errsum_81 + lv_error_81
lv_u_81 = lv_error_81 * lv_kp_81 + ( lv_error_81 - lv_olderror_81 ) * lv_kd_81 + lv_errsum_81 * lv_ki_81
Motor.StartSync ( lv_i_81 + lv_d_81 , - ( lv_velocidad_81 + lv_u_81 ) , lv_velocidad_81 - lv_u_81 )
lv_olderror_81 = lv_error_81
EndWhile
Motor.Stop ( lv_i_81 + lv_d_81 , "True" )
EndSub
Sub f_sl1spidcrossf_5
lv_velocidad_82 = lv_velocidad_82 * gv_sentido_motores
lv_i_82 = "B"
lv_d_82 = "C"
lv_error_82 = 0
lv_olderror_82 = 0
lv_errsum_82 = 0
lv_u_82 = 0
lv_sentido_82 = lv_velocidad_82 / Math.Abs ( lv_velocidad_82 )
If lv_reader_82 = 3 Then
lv_reader1_82 = 1
lv_reader2_82 = 4
Else
lv_reader1_82 = 3
lv_reader2_82 = 1
EndIf
While Sensor.ReadPercent ( lv_reader_82 ) > 20
lv_error_82 = ( Sensor.ReadPercent ( lv_reader1_82 ) - Sensor.ReadPercent ( lv_reader2_82 ) ) * lv_sentido_82 * gv_sentido_motores
lv_errsum_82 = lv_errsum_82 + lv_error_82
lv_u_82 = lv_error_82 * lv_kp_82 + ( lv_error_82 - lv_olderror_82 ) * lv_kd_82 + lv_errsum_82 * lv_ki_82
Motor.StartSync ( lv_i_82 + lv_d_82 , - ( lv_velocidad_82 + lv_u_82 ) , lv_velocidad_82 - lv_u_82 )
lv_olderror_82 = lv_error_82
EndWhile
Motor.Stop ( lv_i_82 + lv_d_82 , "False" )
EndSub
Sub f_smart14pidf_4
lv_vmax_90 = lv_vmax_90 * gv_sentido_motores
lv_i_90 = "B"
lv_d_90 = "C"
lv_v0_90 = 10 * gv_sentido_motores
lv_accelencoder_90 = 150
lv_u_90 = 0
lv_errsum_90 = 0
lv_olderror_90 = 0
Motor.ResetCount ( "C" )
While Sensor.ReadPercent ( 1 ) > 15 Or Sensor.ReadPercent ( 4 ) > 15
lv_vel_90 = ( Motor.GetCount ( "C" ) / lv_accelencoder_90 ) * ( lv_vmax_90 + lv_v0_90 ) + lv_v0_90
lv_vel_90 = Math.Min ( lv_vel_90 , lv_vmax_90 )
lv_sentido_90 = lv_vel_90 / Math.Abs ( lv_vel_90 )
lv_error_90 = ( Sensor.ReadPercent ( 1 ) - Sensor.ReadPercent ( 4 ) ) * lv_sentido_90 * gv_sentido_motores
lv_errsum_90 = lv_errsum_90 * 0.9 + lv_error_90
lv_u_90 = lv_error_90 * lv_kp_90 + ( lv_error_90 - lv_olderror_90 ) * lv_kd_90 + lv_errsum_90 * lv_ki_90
Motor.StartSync ( lv_i_90 + lv_d_90 , - ( lv_vel_90 + lv_u_90 ) , lv_vel_90 - lv_u_90 )
lv_olderror_90 = lv_error_90
EndWhile
Motor.Stop ( lv_i_90 + lv_d_90 , "False" )
EndSub
Sub f_bmovea_2
lv_encdiff_97 = lv_aenc_97 - Motor.GetCount ( "A" )
lv_signo_97 = lv_encdiff_97 / Math.Abs ( lv_encdiff_97 )
If lv_encdiff_97 <> 0 Then
While Math.Abs ( Motor.GetCount ( "A" ) - lv_aenc_97 ) > 10
MotorA.StartSpeed ( lv_signo_97 * lv_v_97 )
EndWhile
Motor.Stop ( "A" , "True" )
EndIf
EndSub
Sub f_bmovea0_1
lv_encdiff_98 = - 300 - Motor.GetCount ( "A" )
lv_signo_98 = lv_encdiff_98 / Math.Abs ( lv_encdiff_98 )
If lv_encdiff_98 <> 0 Then
MotorA.StartSpeed ( lv_signo_98 * lv_v_98 )
While Math.Abs ( Motor.GetCount ( "A" ) + 300 ) > 5
EndWhile
Motor.Stop ( "A" , "True" )
EndIf
EndSub
Sub f_bmovead_4
lv_encdiffa_102 = lv_aenca_102 - Motor.GetCount ( "A" )
lv_encdiffd_102 = lv_aencd_102 - Motor.GetCount ( "D" )
lv_signoa_102 = lv_encdiffa_102 / Math.Abs ( lv_encdiffa_102 )
lv_signod_102 = lv_encdiffd_102 / Math.Abs ( lv_encdiffd_102 )
lv_safetytimer_102 = Math.Max ( ( ( Math.abs ( Math.Max ( Math.Abs ( lv_encdiffa_102 ) , Math.Abs ( lv_encdiffd_102 ) ) ) / 100 ) / ( Math.Min ( lv_va_102 , lv_vd_102 ) / 20 ) * 650 * 2 ) * 2 / 3 , 400 )
Time.Reset3 ()
While ( MotorA.GetTacho () <> lv_aenca_102 Or MotorD.GetTacho () <> lv_aencd_102 ) And Time.Get3 () < lv_safetytimer_102
If MotorA.GetTacho () < lv_aenca_102 Then
MotorA.StartSpeed ( Math.Min ( lv_va_102 , lv_va_102 / 2 + ( lv_aenca_102 - MotorA.GetTacho () ) / 10 ) )
ElseIf MotorA.GetTacho () > lv_aenca_102 Then
MotorA.StartSpeed ( - Math.Min ( lv_va_102 , lv_va_102 / 2 + ( MotorA.GetTacho () - lv_aenca_102 ) / 10 ) )
Else
MotorA.OffAndBrake ()
EndIf
If MotorD.GetTacho () < lv_aencd_102 Then
MotorD.StartSpeed ( Math.Min ( lv_vd_102 , lv_vd_102 / 2 + ( lv_aencd_102 - MotorD.GetTacho () ) / 10 ) )
ElseIf MotorD.GetTacho () > lv_aencd_102 Then
MotorD.StartSpeed ( - Math.Min ( lv_vd_102 , lv_vd_102 / 2 + ( MotorD.GetTacho () - lv_aencd_102 ) / 10 ) )
Else
MotorD.OffAndBrake ()
EndIf
EndWhile
MotorAD.OffAndBrake ()
EndSub
Sub f_bmovead0_1
lv_aenca_103 = - 300
lv_aencd_103 = 0
lv_encdiffa_103 = lv_aenca_103 - Motor.GetCount ( "A" )
lv_encdiffd_103 = lv_aencd_103 - Motor.GetCount ( "D" )
lv_signoa_103 = lv_encdiffa_103 / Math.Abs ( lv_encdiffa_103 )
lv_signod_103 = lv_encdiffd_103 / Math.Abs ( lv_encdiffd_103 )
lv_safetytimer_103 = Math.Max ( ( ( Math.abs ( Math.Max ( Math.Abs ( lv_encdiffa_103 ) , Math.Abs ( lv_encdiffd_103 ) ) ) / 100 ) / ( lv_v_103 / 20 ) * 650 * 2 ) * 2 / 3 , 400 )
Time.Reset3 ()
While ( MotorA.GetTacho () <> lv_aenca_103 Or MotorD.GetTacho () <> lv_aencd_103 ) And Time.Get3 () < lv_safetytimer_103
If MotorA.GetTacho () < lv_aenca_103 Then
MotorA.StartSpeed ( Math.Min ( lv_v_103 , lv_v_103 / 2 + ( lv_aenca_103 - MotorA.GetTacho () ) / 10 ) )
ElseIf MotorA.GetTacho () > lv_aenca_103 Then
MotorA.StartSpeed ( - Math.Min ( lv_v_103 , lv_v_103 / 2 + ( MotorA.GetTacho () - lv_aenca_103 ) / 10 ) )
Else
MotorA.OffAndBrake ()
EndIf
If MotorD.GetTacho () < lv_aencd_103 Then
MotorD.StartSpeed ( Math.Min ( lv_v_103 , lv_v_103 / 2 + ( lv_aencd_103 - MotorD.GetTacho () ) / 10 ) )
ElseIf MotorD.GetTacho () > lv_aencd_103 Then
MotorD.StartSpeed ( - Math.Min ( lv_v_103 , lv_v_103 / 2 + ( MotorD.GetTacho () - lv_aencd_103 ) / 10 ) )
Else
MotorD.OffAndBrake ()
EndIf
EndWhile
MotorAD.OffAndBrake ()
EndSub
Sub f_bmoveadsafe_2
lv_diffa_106 = lv_grados_106 - MotorA.GetTacho ()
lv_diffd_106 = lv_grados_106 - MotorD.GetTacho ()
lv_safetytimer_106 = Math.Max ( ( ( Math.Max ( Math.abs ( lv_diffa_106 ) , Math.abs ( lv_diffd_106 ) ) / 100 ) / ( lv_v_106 / 20 ) * 650 * 2 ) , 400 )
lv_signoa_106 = lv_diffa_106 / Math.Abs ( lv_diffa_106 )
lv_signod_106 = lv_diffd_106 / Math.Abs ( lv_diffd_106 )
lv_vela_106 = lv_v_106 * lv_signoa_106
lv_veld_106 = lv_v_106 * lv_signod_106
Motor.MoveSync ( "AD" , lv_vela_106 , lv_veld_106 , 5 , "False" )
LCD.Clear ()
Time.Reset3 ()
While MotorA.GetSpeed () <> 0 Or MotorD.GetSpeed () <> 0
If lv_diffa_106 * lv_signoa_106 > 0 Then
MotorA.StartSpeed ( lv_vela_106 )
Else
MotorA.OffAndBrake ()
EndIf
If lv_diffd_106 * lv_signod_106 > 0 Then
MotorD.StartSpeed ( lv_veld_106 )
Else
MotorD.OffAndBrake ()
EndIf
If Time.Get3 () > lv_safetytimer_106 Then
MotorBC.OffAndBrake ()
EndIf
lv_diffa_106 = lv_grados_106 - MotorA.GetTacho ()
lv_diffd_106 = lv_grados_106 - MotorD.GetTacho ()
LCD.Clear ()
LCD.Write ( 5 , 30 , "SafetyTimer: " + lv_safetytimer_106 )
EndWhile
MotorAD.OffAndBrake ()
EndSub
Sub f_bmoved_2
lv_encdiff_107 = lv_aenc_107 - Motor.GetCount ( "D" )
lv_signo_107 = lv_encdiff_107 / Math.Abs ( lv_encdiff_107 )
If lv_encdiff_107 <> 0 Then
MotorD.StartSpeed ( lv_signo_107 * lv_v_107 )
While Math.Abs ( Motor.GetCount ( "D" ) - lv_aenc_107 ) > 10
EndWhile
Motor.Stop ( "D" , "True" )
EndIf
EndSub
Sub f_bmoved0_1
If Motor.GetCount ( "D" ) > - 10 Then
While Motor.GetCount ( "D" ) > - 10
MotorD.StartSpeed ( - lv_v_108 )
EndWhile
Motor.Stop ( "D" , "True" )
ElseIf Motor.GetCount ( "D" ) < - 10 Then
While Motor.GetCount ( "D" ) < - 10
MotorD.StartSpeed ( lv_v_108 )
EndWhile
Motor.Stop ( "D" , "True" )
Else
Motor.Stop ( "D" , "True" )
EndIf
EndSub
Sub f_bmovedtimer_2
Time.Reset1 ()
While Time.Get1 () < lv_t_110
MotorD.StartSpeed ( lv_v_110 )
EndWhile
MotorD.OffAndBrake ()
EndSub
Sub f_bmovedsafe_2
lv_encdiff_111 = lv_aenc_111 - Motor.GetCount ( "D" )
lv_signo_111 = lv_encdiff_111 / Math.Abs ( lv_encdiff_111 )
lv_safetytimer_111 = Math.Max ( ( ( Math.abs ( lv_encdiff_111 ) / 100 ) / ( lv_v_111 / 20 ) * 650 * 2 ) , 400 )
Time.Reset3 ()
If lv_encdiff_111 <> 0 Then
While Math.Abs ( Motor.GetCount ( "D" ) - lv_aenc_111 ) > 5 and Time.Get3 () < lv_safetytimer_111
MotorD.StartSpeed ( lv_signo_111 * lv_v_111 )
LCD.Clear ()
LCD.Write ( 5 , 30 , "SafetyTimer: " + lv_safetytimer_111 )
EndWhile
Motor.Stop ( "D" , "True" )
EndIf
EndSub
Sub f_rgbdetect1_2
Sensor.SetMode ( 1 , 4 )
lv_red_112 = 15
lv_yellow_112 = 60
lv_green_112 = 170
lv_blue_112 = 330
lv_valuenegro_112 = 10
lv_valueblanco_112 = 100
lv_rwhite_112 = 147
lv_gwhite_112 = 143
lv_bwhite_112 = 160
lv_hue_112 = 0
lv_sat_112 = 0
lv_value_112 = 0
lv_color_112 = 0
lv_rnorma_112 [ 0 ] = 0
lv_gnorma_112 [ 0 ] = 0
lv_bnorma_112 [ 0 ] = 0
lv_maxa_112 [ 0 ] = 0
LCD.Clear ()
For lv_j_112 = 1 To lv_reps_112 Step 1
lv_rgb_112 = Sensor.ReadRaw ( 1 , 3 )
lv_rraw_112 = lv_rgb_112 [ 0 ]
lv_graw_112 = lv_rgb_112 [ 1 ]
lv_braw_112 = lv_rgb_112 [ 2 ]
lv_rnorma_112 [ lv_j_112 ] = Math.Round ( lv_rraw_112 / lv_rwhite_112 * 255 )
lv_gnorma_112 [ lv_j_112 ] = Math.Round ( lv_graw_112 / lv_gwhite_112 * 255 )
lv_bnorma_112 [ lv_j_112 ] = Math.Round ( lv_braw_112 / lv_bwhite_112 * 255 )
lv_maxa_112 [ lv_j_112 ] = Math.Max ( Math.Max ( lv_rnorma_112 [ lv_j_112 ] , lv_gnorma_112 [ lv_j_112 ] ) , lv_bnorma_112 [ lv_j_112 ] )
Program.Delay ( 5 )
EndFor
For lv_j_112 = 1 To lv_reps_112 Step 2
lv_rnorm_112 = lv_rnorma_112 [ lv_j_112 ] + lv_rnorma_112 [ lv_j_112 + 1 ]
lv_gnorm_112 = lv_gnorma_112 [ lv_j_112 ] + lv_gnorma_112 [ lv_j_112 + 1 ]
lv_bnorm_112 = lv_bnorma_112 [ lv_j_112 ] + lv_bnorma_112 [ lv_j_112 + 1 ]
lv_max_112 = lv_maxa_112 [ lv_j_112 ] + lv_maxa_112 [ lv_j_112 + 1 ]
EndFor
lv_rnorm_112 = lv_rnorm_112 / lv_reps_112
lv_gnorm_112 = lv_gnorm_112 / lv_reps_112
lv_bnorm_112 = lv_bnorm_112 / lv_reps_112
lv_max_112 = lv_max_112 / lv_reps_112
lv_min_112 = Math.Min ( Math.Min ( lv_rnorm_112 , lv_gnorm_112 ) , lv_bnorm_112 )
If lv_max_112 = lv_min_112 Then
lv_hue_112 = 0
ElseIf lv_max_112 = lv_rnorm_112 Then
If lv_gnorm_112 >= lv_bnorm_112 Then
lv_hue_112 = 60 * ( lv_gnorm_112 - lv_bnorm_112 ) / ( lv_max_112 - lv_min_112 )
Else
lv_hue_112 = 60 * ( lv_gnorm_112 - lv_bnorm_112 ) / ( lv_max_112 - lv_min_112 ) + 360
EndIf
ElseIf lv_max_112 = lv_gnorm_112 Then
lv_hue_112 = 60 * ( lv_bnorm_112 - lv_rnorm_112 ) / ( lv_max_112 - lv_min_112 ) + 120
Else
lv_hue_112 = 60 * ( lv_rnorm_112 - lv_gnorm_112 ) / ( lv_max_112 - lv_min_112 ) + 240
EndIf
If lv_max_112 = 0 Then
lv_sat_112 = 0
Else
lv_sat_112 = 1 - lv_min_112 / lv_max_112
EndIf
lv_value_112 = lv_max_112
lv_rgbgrey_112 = ( lv_valueblanco_112 + lv_valuenegro_112 ) / 2
If lv_rnorm_112 + lv_gnorm_112 + lv_bnorm_112 <= 3 Then
lv_color_112 = 0
Else
If lv_sat_112 < 0.4 Then
If lv_value_112 > lv_rgbgrey_112 Then
lv_color_112 = 6
Else
lv_color_112 = 1
EndIf
Else
If lv_hue_112 >= 0 And lv_hue_112 < lv_red_112 Then
lv_color_112 = 5
ElseIf lv_hue_112 >= lv_red_112 And lv_hue_112 < lv_yellow_112 Then
lv_color_112 = 4
ElseIf lv_hue_112 >= lv_yellow_112 And lv_hue_112 < lv_green_112 Then
lv_color_112 = 3
ElseIf lv_hue_112 >= lv_green_112 And lv_hue_112 < lv_blue_112 Then
lv_color_112 = 2
Else
lv_color_112 = 5
EndIf
EndIf
EndIf
LCD.Write ( 33 , 20 , "R: " + lv_rraw_112 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_112 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_112 )
LCD.Write ( 33 , 70 , "Color: " + lv_color_112 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_112 )
lv_color_124 = lv_color_112
f_leercolor_1 ()
EndSub
Sub f_rgbdetect2_2
Sensor.SetMode ( 2 , 4 )
lv_red_113 = 15
lv_yellow_113 = 60
lv_green_113 = 170
lv_blue_113 = 330
lv_valuenegro_113 = 10
lv_valueblanco_113 = 100
lv_rwhite_113 = 147
lv_gwhite_113 = 143
lv_bwhite_113 = 160
lv_hue_113 = 0
lv_sat_113 = 0
lv_value_113 = 0
lv_color_113 = 0
lv_rnorma_113 [ 0 ] = 0
lv_gnorma_113 [ 0 ] = 0
lv_bnorma_113 [ 0 ] = 0
lv_maxa_113 [ 0 ] = 0
LCD.Clear ()
For lv_j_113 = 1 To lv_reps_113 Step 1
lv_rgb_113 = Sensor.ReadRaw ( 2 , 3 )
lv_rraw_113 = lv_rgb_113 [ 0 ]
lv_graw_113 = lv_rgb_113 [ 1 ]
lv_braw_113 = lv_rgb_113 [ 2 ]
lv_rnorma_113 [ lv_j_113 ] = Math.Round ( lv_rraw_113 / lv_rwhite_113 * 255 )
lv_gnorma_113 [ lv_j_113 ] = Math.Round ( lv_graw_113 / lv_gwhite_113 * 255 )
lv_bnorma_113 [ lv_j_113 ] = Math.Round ( lv_braw_113 / lv_bwhite_113 * 255 )
lv_maxa_113 [ lv_j_113 ] = Math.Max ( Math.Max ( lv_rnorma_113 [ lv_j_113 ] , lv_gnorma_113 [ lv_j_113 ] ) , lv_bnorma_113 [ lv_j_113 ] )
Program.Delay ( 5 )
EndFor
For lv_j_113 = 1 To lv_reps_113 Step 2
lv_rnorm_113 = lv_rnorma_113 [ lv_j_113 ] + lv_rnorma_113 [ lv_j_113 + 1 ]
lv_gnorm_113 = lv_gnorma_113 [ lv_j_113 ] + lv_gnorma_113 [ lv_j_113 + 1 ]
lv_bnorm_113 = lv_bnorma_113 [ lv_j_113 ] + lv_bnorma_113 [ lv_j_113 + 1 ]
lv_max_113 = lv_maxa_113 [ lv_j_113 ] + lv_maxa_113 [ lv_j_113 + 1 ]
EndFor
lv_rnorm_113 = lv_rnorm_113 / lv_reps_113
lv_gnorm_113 = lv_gnorm_113 / lv_reps_113
lv_bnorm_113 = lv_bnorm_113 / lv_reps_113
lv_max_113 = lv_max_113 / lv_reps_113
lv_min_113 = Math.Min ( Math.Min ( lv_rnorm_113 , lv_gnorm_113 ) , lv_bnorm_113 )
If lv_max_113 = lv_min_113 Then
lv_hue_113 = 0
ElseIf lv_max_113 = lv_rnorm_113 Then
If lv_gnorm_113 >= lv_bnorm_113 Then
lv_hue_113 = 60 * ( lv_gnorm_113 - lv_bnorm_113 ) / ( lv_max_113 - lv_min_113 )
Else
lv_hue_113 = 60 * ( lv_gnorm_113 - lv_bnorm_113 ) / ( lv_max_113 - lv_min_113 ) + 360
EndIf
ElseIf lv_max_113 = lv_gnorm_113 Then
lv_hue_113 = 60 * ( lv_bnorm_113 - lv_rnorm_113 ) / ( lv_max_113 - lv_min_113 ) + 120
Else
lv_hue_113 = 60 * ( lv_rnorm_113 - lv_gnorm_113 ) / ( lv_max_113 - lv_min_113 ) + 240
EndIf
If lv_max_113 = 0 Then
lv_sat_113 = 0
Else
lv_sat_113 = 1 - lv_min_113 / lv_max_113
EndIf
lv_value_113 = lv_max_113
lv_rgbgrey_113 = ( lv_valueblanco_113 + lv_valuenegro_113 ) / 2
If lv_rnorm_113 + lv_gnorm_113 + lv_bnorm_113 <= 3 Then
lv_color_113 = 0
Else
If lv_sat_113 < 0.4 Then
If lv_value_113 > lv_rgbgrey_113 Then
lv_color_113 = 6
Else
lv_color_113 = 1
EndIf
Else
If lv_hue_113 >= 0 And lv_hue_113 < lv_red_113 Then
lv_color_113 = 5
ElseIf lv_hue_113 >= lv_red_113 And lv_hue_113 < lv_yellow_113 Then
lv_color_113 = 4
ElseIf lv_hue_113 >= lv_yellow_113 And lv_hue_113 < lv_green_113 Then
lv_color_113 = 3
ElseIf lv_hue_113 >= lv_green_113 And lv_hue_113 < lv_blue_113 Then
lv_color_113 = 2
Else
lv_color_113 = 5
EndIf
EndIf
EndIf
LCD.Write ( 33 , 20 , "R: " + lv_rraw_113 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_113 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_113 )
LCD.Write ( 33 , 70 , "Color: " + lv_color_113 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_113 )
lv_color_124 = lv_color_113
f_leercolor_1 ()
EndSub
Sub f_rgbdetect3_2
Sensor.SetMode ( 3 , 4 )
lv_red_114 = 15
lv_yellow_114 = 60
lv_green_114 = 170
lv_blue_114 = 330
lv_valuenegro_114 = 10
lv_valueblanco_114 = 100
lv_rwhite_114 = 147
lv_gwhite_114 = 143
lv_bwhite_114 = 160
lv_hue_114 = 0
lv_sat_114 = 0
lv_value_114 = 0
lv_color_114 = 0
lv_rnorma_114 [ 0 ] = 0
lv_gnorma_114 [ 0 ] = 0
lv_bnorma_114 [ 0 ] = 0
lv_maxa_114 [ 0 ] = 0
LCD.Clear ()
For lv_j_114 = 1 To lv_reps_114 Step 1
lv_rgb_114 = Sensor.ReadRaw ( 3 , 3 )
lv_rraw_114 = lv_rgb_114 [ 0 ]
lv_graw_114 = lv_rgb_114 [ 1 ]
lv_braw_114 = lv_rgb_114 [ 2 ]
lv_rnorma_114 [ lv_j_114 ] = Math.Round ( lv_rraw_114 / lv_rwhite_114 * 255 )
lv_gnorma_114 [ lv_j_114 ] = Math.Round ( lv_graw_114 / lv_gwhite_114 * 255 )
lv_bnorma_114 [ lv_j_114 ] = Math.Round ( lv_braw_114 / lv_bwhite_114 * 255 )
lv_maxa_114 [ lv_j_114 ] = Math.Max ( Math.Max ( lv_rnorma_114 [ lv_j_114 ] , lv_gnorma_114 [ lv_j_114 ] ) , lv_bnorma_114 [ lv_j_114 ] )
Program.Delay ( 5 )
EndFor
For lv_j_114 = 1 To lv_reps_114 Step 2
lv_rnorm_114 = lv_rnorma_114 [ lv_j_114 ] + lv_rnorma_114 [ lv_j_114 + 1 ]
lv_gnorm_114 = lv_gnorma_114 [ lv_j_114 ] + lv_gnorma_114 [ lv_j_114 + 1 ]
lv_bnorm_114 = lv_bnorma_114 [ lv_j_114 ] + lv_bnorma_114 [ lv_j_114 + 1 ]
lv_max_114 = lv_maxa_114 [ lv_j_114 ] + lv_maxa_114 [ lv_j_114 + 1 ]
EndFor
lv_rnorm_114 = lv_rnorm_114 / lv_reps_114
lv_gnorm_114 = lv_gnorm_114 / lv_reps_114
lv_bnorm_114 = lv_bnorm_114 / lv_reps_114
lv_max_114 = lv_max_114 / lv_reps_114
lv_min_114 = Math.Min ( Math.Min ( lv_rnorm_114 , lv_gnorm_114 ) , lv_bnorm_114 )
If lv_max_114 = lv_min_114 Then
lv_hue_114 = 0
ElseIf lv_max_114 = lv_rnorm_114 Then
If lv_gnorm_114 >= lv_bnorm_114 Then
lv_hue_114 = 60 * ( lv_gnorm_114 - lv_bnorm_114 ) / ( lv_max_114 - lv_min_114 )
Else
lv_hue_114 = 60 * ( lv_gnorm_114 - lv_bnorm_114 ) / ( lv_max_114 - lv_min_114 ) + 360
EndIf
ElseIf lv_max_114 = lv_gnorm_114 Then
lv_hue_114 = 60 * ( lv_bnorm_114 - lv_rnorm_114 ) / ( lv_max_114 - lv_min_114 ) + 120
Else
lv_hue_114 = 60 * ( lv_rnorm_114 - lv_gnorm_114 ) / ( lv_max_114 - lv_min_114 ) + 240
EndIf
If lv_max_114 = 0 Then
lv_sat_114 = 0
Else
lv_sat_114 = 1 - lv_min_114 / lv_max_114
EndIf
lv_value_114 = lv_max_114
lv_rgbgrey_114 = ( lv_valueblanco_114 + lv_valuenegro_114 ) / 2
If lv_rnorm_114 + lv_gnorm_114 + lv_bnorm_114 <= 3 Then
lv_color_114 = 0
Else
If lv_sat_114 < 0.4 Then
If lv_value_114 > lv_rgbgrey_114 Then
lv_color_114 = 6
Else
lv_color_114 = 1
EndIf
Else
If lv_hue_114 >= 0 And lv_hue_114 < lv_red_114 Then
lv_color_114 = 5
ElseIf lv_hue_114 >= lv_red_114 And lv_hue_114 < lv_yellow_114 Then
lv_color_114 = 4
ElseIf lv_hue_114 >= lv_yellow_114 And lv_hue_114 < lv_green_114 Then
lv_color_114 = 3
ElseIf lv_hue_114 >= lv_green_114 And lv_hue_114 < lv_blue_114 Then
lv_color_114 = 2
Else
lv_color_114 = 5
EndIf
EndIf
EndIf
LCD.Write ( 33 , 20 , "R: " + lv_rraw_114 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_114 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_114 )
LCD.Write ( 33 , 70 , "Color: " + lv_color_114 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_114 )
lv_color_124 = lv_color_114
f_leercolor_1 ()
EndSub
Sub f_rgbdetect4_2
Sensor.SetMode ( 4 , 4 )
lv_red_115 = 15
lv_yellow_115 = 60
lv_green_115 = 170
lv_blue_115 = 330
lv_valuenegro_115 = 10
lv_valueblanco_115 = 100
lv_rwhite_115 = 147
lv_gwhite_115 = 143
lv_bwhite_115 = 160
lv_hue_115 = 0
lv_sat_115 = 0
lv_value_115 = 0
lv_color_115 = 0
lv_rnorma_115 [ 0 ] = 0
lv_gnorma_115 [ 0 ] = 0
lv_bnorma_115 [ 0 ] = 0
lv_maxa_115 [ 0 ] = 0
LCD.Clear ()
For lv_j_115 = 1 To lv_reps_115 Step 1
lv_rgb_115 = Sensor.ReadRaw ( 4 , 3 )
lv_rraw_115 = lv_rgb_115 [ 0 ]
lv_graw_115 = lv_rgb_115 [ 1 ]
lv_braw_115 = lv_rgb_115 [ 2 ]
lv_rnorma_115 [ lv_j_115 ] = Math.Round ( lv_rraw_115 / lv_rwhite_115 * 255 )
lv_gnorma_115 [ lv_j_115 ] = Math.Round ( lv_graw_115 / lv_gwhite_115 * 255 )
lv_bnorma_115 [ lv_j_115 ] = Math.Round ( lv_braw_115 / lv_bwhite_115 * 255 )
lv_maxa_115 [ lv_j_115 ] = Math.Max ( Math.Max ( lv_rnorma_115 [ lv_j_115 ] , lv_gnorma_115 [ lv_j_115 ] ) , lv_bnorma_115 [ lv_j_115 ] )
Program.Delay ( 5 )
EndFor
For lv_j_115 = 1 To lv_reps_115 Step 2
lv_rnorm_115 = lv_rnorma_115 [ lv_j_115 ] + lv_rnorma_115 [ lv_j_115 + 1 ]
lv_gnorm_115 = lv_gnorma_115 [ lv_j_115 ] + lv_gnorma_115 [ lv_j_115 + 1 ]
lv_bnorm_115 = lv_bnorma_115 [ lv_j_115 ] + lv_bnorma_115 [ lv_j_115 + 1 ]
lv_max_115 = lv_maxa_115 [ lv_j_115 ] + lv_maxa_115 [ lv_j_115 + 1 ]
EndFor
lv_rnorm_115 = lv_rnorm_115 / lv_reps_115
lv_gnorm_115 = lv_gnorm_115 / lv_reps_115
lv_bnorm_115 = lv_bnorm_115 / lv_reps_115
lv_max_115 = lv_max_115 / lv_reps_115
lv_min_115 = Math.Min ( Math.Min ( lv_rnorm_115 , lv_gnorm_115 ) , lv_bnorm_115 )
If lv_max_115 = lv_min_115 Then
lv_hue_115 = 0
ElseIf lv_max_115 = lv_rnorm_115 Then
If lv_gnorm_115 >= lv_bnorm_115 Then
lv_hue_115 = 60 * ( lv_gnorm_115 - lv_bnorm_115 ) / ( lv_max_115 - lv_min_115 )
Else
lv_hue_115 = 60 * ( lv_gnorm_115 - lv_bnorm_115 ) / ( lv_max_115 - lv_min_115 ) + 360
EndIf
ElseIf lv_max_115 = lv_gnorm_115 Then
lv_hue_115 = 60 * ( lv_bnorm_115 - lv_rnorm_115 ) / ( lv_max_115 - lv_min_115 ) + 120
Else
lv_hue_115 = 60 * ( lv_rnorm_115 - lv_gnorm_115 ) / ( lv_max_115 - lv_min_115 ) + 240
EndIf
If lv_max_115 = 0 Then
lv_sat_115 = 0
Else
lv_sat_115 = 1 - lv_min_115 / lv_max_115
EndIf
lv_value_115 = lv_max_115
lv_rgbgrey_115 = ( lv_valueblanco_115 + lv_valuenegro_115 ) / 2
If lv_rnorm_115 + lv_gnorm_115 + lv_bnorm_115 <= 3 Then
lv_color_115 = 0
Else
If lv_sat_115 < 0.4 Then
If lv_value_115 > lv_rgbgrey_115 Then
lv_color_115 = 6
Else
lv_color_115 = 1
EndIf
Else
If lv_hue_115 >= 0 And lv_hue_115 < lv_red_115 Then
lv_color_115 = 5
ElseIf lv_hue_115 >= lv_red_115 And lv_hue_115 < lv_yellow_115 Then
lv_color_115 = 4
ElseIf lv_hue_115 >= lv_yellow_115 And lv_hue_115 < lv_green_115 Then
lv_color_115 = 3
ElseIf lv_hue_115 >= lv_green_115 And lv_hue_115 < lv_blue_115 Then
lv_color_115 = 2
Else
lv_color_115 = 5
EndIf
EndIf
EndIf
LCD.Write ( 33 , 20 , "R: " + lv_rraw_115 )
LCD.Write ( 33 , 35 , "G: " + lv_graw_115 )
LCD.Write ( 33 , 50 , "B: " + lv_braw_115 )
LCD.Write ( 33 , 70 , "Color: " + lv_color_115 )
LCD.Write ( 33 , 90 , "Value: " + lv_value_115 )
lv_color_124 = lv_color_115
f_leercolor_1 ()
EndSub
Sub f_leercolor_1
If lv_color_124 = 0 Then
Speaker.Play ( 100 , "WRO2023/Zero" )
ElseIf lv_color_124 = 1 Then
Speaker.Play ( 100 , "WRO2023/Black" )
ElseIf lv_color_124 = 2 Then
Speaker.Play ( 100 , "WRO2023/Blue" )
ElseIf lv_color_124 = 3 Then
Speaker.Play ( 100 , "WRO2023/Green" )
ElseIf lv_color_124 = 4 Then
Speaker.Play ( 100 , "WRO2023/Yellow" )
ElseIf lv_color_124 = 5 Then
Speaker.Play ( 100 , "WRO2023/Red" )
ElseIf lv_color_124 = 6 Then
Speaker.Play ( 100 , "WRO2023/White" )
ElseIf lv_color_124 = 7 Then
Speaker.Play ( 100 , "WRO2023/Brown" )
EndIf
EndSub
Sub f_coger_abajo_0
lv_velocidad_1 = - 30
lv_distancia_1 = 5
f_encoderrectomm_2 ()
lv_v_107 = 40
lv_aenc_107 = - 220
f_bmoved_2 ()
lv_v_97 = 20
lv_aenc_97 = - 780
f_bmovea_2 ()
lv_v_110 = - 40
lv_t_110 = 350
f_bmovedtimer_2 ()
lv_v_97 = 20
lv_aenc_97 = - 300
f_bmovea_2 ()
EndSub
Sub f_coger_arriba_0
lv_velocidad_1 = - 20
lv_distancia_1 = 6.5
f_encoderrectomm_2 ()
lv_v_97 = 10
lv_aenc_97 = - 670
f_bmovea_2 ()
lv_v_107 = 20
lv_aenc_107 = - 230
f_bmoved_2 ()
lv_v_97 = 10
lv_aenc_97 = - 780
f_bmovea_2 ()
lv_v_111 = 40
lv_aenc_111 = - 250
f_bmovedsafe_2 ()
lv_v_110 = - 40
lv_t_110 = 800
f_bmovedtimer_2 ()
lv_v_97 = 20
lv_aenc_97 = - 400
f_bmovea_2 ()
EndSub
Sub f_soltar_todo_0
lv_v_97 = 10
lv_aenc_97 = - 750
f_bmovea_2 ()
lv_v_111 = 40
lv_aenc_111 = - 200
f_bmovedsafe_2 ()
lv_v_97 = 10
lv_aenc_97 = - 500
f_bmovea_2 ()
EndSub
Sub f_soltar_uno_0
lv_v_97 = 10
lv_aenc_97 = - 760
f_bmovea_2 ()
lv_v_111 = 40
lv_aenc_111 = - 200
f_bmovedsafe_2 ()
lv_v_97 = 10
lv_aenc_97 = - 660
f_bmovea_2 ()
lv_v_111 = 40
lv_aenc_111 = - 250
f_bmovedsafe_2 ()
lv_v_110 = - 40
lv_t_110 = 500
f_bmovedtimer_2 ()
lv_v_97 = 10
lv_aenc_97 = - 500
f_bmovea_2 ()
EndSub
Sub f_lectura_1
lv_v_97 = 15
lv_aenc_97 = - 690
f_bmovea_2 ()
lv_reps_113 = 5
f_rgbdetect2_2 ()
lv_read_132 = lv_color_113
lv_color_124 = lv_read_132
f_leercolor_1 ()
lv_v_97 = 15
lv_aenc_97 = - 200
f_bmovea_2 ()
EndSub
