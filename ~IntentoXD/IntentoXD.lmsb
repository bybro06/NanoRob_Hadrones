DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_V0_1
DATAF VLV_VMAX_1
DATAF VLV_DISTANCIA1_1
DATAF VLV_DISTANCIA2_1
DATAF VLV_DISTANCIA3_1
DATAF VLV_START_B_1
DATAF VLV_START_C_1
DATAF VLV_ENCODER_B_1
DATAF VLV_ENCODER_C_1
DATAF VLV_VEL_1
DATAF VLV_KP_1
DATAF VLV_KI_1
DATAF VLV_KD_1
DATAF VLV_ERROR_1
DATAF VLV_OLDERROR_1
DATAF VLV_ERRSUM_1
DATAF VLV_GRADOS1_1
DATAF VLV_GRADOS2_1
DATAF VLV_GRADOS3_1
DATAF VLV_PENDIENTE_1
DATAF VLV_CORRECCION_1

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_V0_1
    MOVEF_F 0.0 VLV_VMAX_1
    MOVEF_F 0.0 VLV_DISTANCIA1_1
    MOVEF_F 0.0 VLV_DISTANCIA2_1
    MOVEF_F 0.0 VLV_DISTANCIA3_1
    MOVEF_F 0.0 VLV_START_B_1
    MOVEF_F 0.0 VLV_START_C_1
    MOVEF_F 0.0 VLV_ENCODER_B_1
    MOVEF_F 0.0 VLV_ENCODER_C_1
    MOVEF_F 0.0 VLV_VEL_1
    MOVEF_F 0.0 VLV_KP_1
    MOVEF_F 0.0 VLV_KI_1
    MOVEF_F 0.0 VLV_KD_1
    MOVEF_F 0.0 VLV_ERROR_1
    MOVEF_F 0.0 VLV_OLDERROR_1
    MOVEF_F 0.0 VLV_ERRSUM_1
    MOVEF_F 0.0 VLV_GRADOS1_1
    MOVEF_F 0.0 VLV_GRADOS2_1
    MOVEF_F 0.0 VLV_GRADOS3_1
    MOVEF_F 0.0 VLV_PENDIENTE_1
    MOVEF_F 0.0 VLV_CORRECCION_1
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VLV_V0_1
    MOVEF_F 0.0 VLV_VMAX_1
    MOVEF_F 0.0 VLV_DISTANCIA1_1
    MOVEF_F 0.0 VLV_DISTANCIA2_1
    MOVEF_F 0.0 VLV_DISTANCIA3_1
    MOVEF_F 15.0 VLV_V0_1
    MOVEF_F 90.0 VLV_VMAX_1
    MOVEF_F 20.0 VLV_DISTANCIA1_1
    MOVEF_F 150.0 VLV_DISTANCIA2_1
    MOVEF_F 20.0 VLV_DISTANCIA3_1
    WRITE32 ENDSUB_M_RECTO_ACCELDECEL_5:CALLSUB0 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_RECTO_ACCELDECEL_5
CALLSUB0:
ENDTHREAD:
    RETURN
SUB_M_RECTO_ACCELDECEL_5:
    CALL MOTOR.GETCOUNT 'B' VLV_START_B_1
    CALL MOTOR.GETCOUNT 'C' VLV_START_C_1
    MOVEF_F 0.0 VLV_ENCODER_B_1
    MOVEF_F 0.0 VLV_ENCODER_C_1
    DATA8 flag3
	CP_GTF 8.0 VLV_V0_1 flag3
	SELECTF flag3 8.0 VLV_V0_1 F.0
    MULF F.0 1.0 VLV_V0_1
    DATA8 flag5
	CP_LTF 90.0 VLV_VMAX_1 flag5
	SELECTF flag5 90.0 VLV_VMAX_1 F.0
    MULF F.0 1.0 VLV_VMAX_1
    MOVEF_F 0.0 VLV_VEL_1
    MOVEF_F 0.4 VLV_KP_1
    MOVEF_F 0.0001 VLV_KI_1
    MOVEF_F 0.5 VLV_KD_1
    MOVEF_F 0.0 VLV_ERROR_1
    MOVEF_F 0.0 VLV_OLDERROR_1
    MOVEF_F 0.0 VLV_ERRSUM_1
    MULF VLV_DISTANCIA1_1 360.0 F.0
    MOVEF_F 3.1415926535897932384 F.2
    MULF 5.6 F.2 F.1
    DATAF tmpf10
    DATA8 flag10
    DIVF F.0 F.1 tmpf10
    CP_EQF 0.0 F.1 flag10
    SELECTF flag10 0.0 tmpf10 VLV_GRADOS1_1

    MULF VLV_DISTANCIA2_1 360.0 F.0
    MOVEF_F 3.1415926535897932384 F.2
    MULF 5.6 F.2 F.1
    DATAF tmpf14
    DATA8 flag14
    DIVF F.0 F.1 tmpf14
    CP_EQF 0.0 F.1 flag14
    SELECTF flag14 0.0 tmpf14 VLV_GRADOS2_1

    MULF VLV_DISTANCIA3_1 360.0 F.0
    MOVEF_F 3.1415926535897932384 F.2
    MULF 5.6 F.2 F.1
    DATAF tmpf18
    DATA8 flag18
    DIVF F.0 F.1 tmpf18
    CP_EQF 0.0 F.1 flag18
    SELECTF flag18 0.0 tmpf18 VLV_GRADOS3_1

  while19:
    ADDF VLV_GRADOS1_1 VLV_GRADOS2_1 F.1
    ADDF F.1 VLV_GRADOS3_1 F.0
    JR_GTEQF VLV_ENCODER_C_1 F.0 endwhile19
  whilebody19:
    CALL MOTOR.GETCOUNT 'B' F.0
    SUBF F.0 VLV_START_B_1 VLV_ENCODER_B_1
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_1 VLV_ENCODER_C_1
    ADDF VLV_GRADOS1_1 VLV_GRADOS2_1 F.0
    JR_GTEQF VLV_ENCODER_C_1 F.0 else26_1
    SUBF VLV_VMAX_1 VLV_V0_1 F.0
    DATAF tmpf29
    DATA8 flag29
    DIVF F.0 VLV_GRADOS1_1 tmpf29
    CP_EQF 0.0 VLV_GRADOS1_1 flag29
    SELECTF flag29 0.0 tmpf29 VLV_PENDIENTE_1

    MULF VLV_PENDIENTE_1 VLV_ENCODER_C_1 F.1
    ADDF F.1 VLV_V0_1 F.0
    DATA8 flag32
	CP_LTF VLV_VMAX_1 F.0 flag32
	SELECTF flag32 VLV_VMAX_1 F.0 VLV_VEL_1
    JR endif26
  else26_1:
    SUBF VLV_V0_1 VLV_VMAX_1 F.0
    DATAF tmpf34
    DATA8 flag34
    DIVF F.0 VLV_GRADOS3_1 tmpf34
    CP_EQF 0.0 VLV_GRADOS3_1 flag34
    SELECTF flag34 0.0 tmpf34 VLV_PENDIENTE_1

    SUBF VLV_ENCODER_C_1 VLV_GRADOS1_1 F.3
    SUBF F.3 VLV_GRADOS2_1 F.2
    MULF VLV_PENDIENTE_1 F.2 F.1
    ADDF F.1 VLV_VMAX_1 F.0
    DATA8 flag39
	CP_GTF VLV_V0_1 F.0 flag39
	SELECTF flag39 VLV_V0_1 F.0 VLV_VEL_1
  else26_2:
  endif26:
    MULF -1.0 VLV_ENCODER_B_1 F.1
    SUBF F.1 VLV_ENCODER_C_1 F.0
    MULF F.0 1.0 VLV_ERROR_1
    ADDF VLV_ERRSUM_1 VLV_ERROR_1 VLV_ERRSUM_1
    MULF VLV_ERROR_1 VLV_KP_1 F.1
    SUBF VLV_ERROR_1 VLV_OLDERROR_1 F.3
    MULF F.3 VLV_KD_1 F.2
    ADDF F.1 F.2 F.0
    MULF VLV_ERRSUM_1 VLV_KI_1 F.1
    ADDF F.0 F.1 VLV_CORRECCION_1
    SUBF VLV_VEL_1 VLV_CORRECCION_1 F.1
    MATH NEGATE F.1 F.0
    ADDF VLV_VEL_1 VLV_CORRECCION_1 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    MOVEF_F VLV_ERROR_1 VLV_OLDERROR_1
    ADDF VLV_GRADOS1_1 VLV_GRADOS2_1 F.1
    ADDF F.1 VLV_GRADOS3_1 F.0
    JR_LTF VLV_ENCODER_C_1 F.0 whilebody19
  endwhile19:
    OUTPUT_POWER 0 6 0
	OUTPUT_STOP 0 6 1
    CALL LCD.CLEAR
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.3
    MULF F.3 5.6 F.2
    MOVEF_F 3.1415926535897932384 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf62
    DATA8 flag62
    DIVF F.1 360.0 tmpf62
    CP_EQF 0.0 360.0 flag62
    SELECTF flag62 0.0 tmpf62 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Distancia cm: ' S.1 S.0
    CALL LCD.WRITE 5.0 10.0 S.0
RETSUB_M_RECTO_ACCELDECEL_5:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_RECTO_ACCELDECEL_5:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
