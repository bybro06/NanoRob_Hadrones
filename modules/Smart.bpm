'Siguelíneas con Smart Inicio


'Siguelíneas hasta cruce

Function Cruce14(in number Velocidad, in number kp, in number ki, in number kd)
  ' Siguelíneas 14 PID Smart Inicio Encoder
  
  Velocidad *= 1
  
  I = "B"
  D = "C"
  
  distancia = 5 * 360 / (6.24 * Math.Pi)
  
  error = 0
  olderror = 0
  errsum = 0
  
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()
  
  While Sensor.ReadPercent(1) > 5 Or Sensor.ReadPercent(4) > 5
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = start_Velocidad * 0.65
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4))*sentido*1
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "True")
EndFunction

Function Cruce14F(in number Velocidad, in number kp, in number ki, in number kd)
  ' Siguelíneas 14 PID Smart Inicio Encoder
  
  Velocidad *= 1
  
  I = "B"
  D = "C"
  
  distancia = 5 * 360 / (6.24 * Math.Pi)
  
  error = 0
  olderror = 0
  errsum = 0
  
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()
  
  While Sensor.ReadPercent(1) > 5 Or Sensor.ReadPercent(4) > 5
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = start_Velocidad * 0.65
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4))*sentido*1
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "False")  ' Detener los motores sin frenar
EndFunction

'Siguelíneas hasta ambos blancos

Function Blanco14(in number Velocidad, in number kp, in number ki, in number kd)
  ' Siguelíneas 14 PID Smart Inicio Encoder
  
  Velocidad *= 1
  
  I = "B"
  D = "C"
  
  distancia = 5 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd

  encoder_inicio = MotorC.GetTacho()

  While Sensor.ReadPercent(1) < 90 Or Sensor.ReadPercent(4) < 90
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = start_Velocidad * 0.65
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4)) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")  ' Detener los motores frenando
EndFunction

Function Blanco14F(in number Velocidad, in number kp, in number ki, in number kd)
  'Siguelíneas 14 PID Smart Inicio Encoder
  
  Velocidad *= 1
  
  I = "B"
  D = "C"
  V0 = 10 * 1
  AccelEncoder = 150
  u = 0
  errsum = 0
  
  Motor.ResetCount("C")
  
  While Sensor.ReadPercent(1) < 90 Or Sensor.ReadPercent(4) < 90
    Vel = (Motor.GetCount("C") / AccelEncoder) * (Velocidad + V0) + V0
    Vel = Math.Min(Vel, Velocidad)  ' Limitar la velocidad a Velocidad
    
    sentido = Vel / Math.Abs(Vel)
    
    ' Siguelíneas 1-4 PID
    error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4)) * sentido * 1
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Vel+u), Vel-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "False")
  
EndFunction

'Siguelíneas por encoder

Function Encoder14(in number Velocidad, in number kp, in number ki, in number kd, in number Encoder)
  ' Siguelíneas 14 PID Smart Inicio Encoder
  
  Velocidad *= 1
  
  I = "B"
  D = "C"

  distancia = 5 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  Encoder = Encoder / (6.24 * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0

  While Math.Abs(encoder_C) < Encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    'Corrección fuerte los primeros 5 cm
    If encoder_C < distancia Then
      Velocidad = start_Velocidad * 0.65
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4)) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
  
EndFunction

Function Encoder14F(in number Velocidad, in number kp, in number ki, in number kd, in number Encoder)
  ' Siguelíneas 14 PID Smart Inicio Encoder
  
  
  Velocidad *= 1
  
  I = "B"
  D = "C"

  distancia = 5 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  Encoder = Encoder / (6.24 * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0

  While Math.Abs(encoder_C) < Encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    'Corrección fuerte los primeros 5 cm
    If encoder_C < distancia Then
      Velocidad = start_Velocidad * 0.65
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4)) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
  
EndFunction

'Siguelíneas hasta x cruces

Function Cruces14(in number Velocidad, in number kp, in number ki, in number kd, in number Cruces)
  
  Smart14PIDF(Velocidad,kp,ki,kd)
  
  Cruces --
  i=0
  
  Velocidad *= 1
  
  While i < Cruces
    Motor.MoveSync("BC",-Velocidad,Velocidad,100,"False")
    
    I = "B"
    D = "C"
    error = 0
    olderror = 0
    errsum = 0
    u = 0
    sentido = Velocidad / Math.Abs(Velocidad)
    
    While Sensor.ReadPercent(1) > 15 Or Sensor.ReadPercent(4) > 15
      error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4)) * sentido * 1
      errsum += error
      u = error*kp + (error-olderror)*kd + errsum*ki
      Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
      olderror = error
    EndWhile
    Motor.Stop(I+D, "False")
    i ++
  EndWhile
  
  
  MotorBC.OffAndBrake()
  
EndFunction

Function Cruces14F(in number Velocidad, in number kp, in number ki, in number kd, in number Cruces)
  
  Smart14PIDF(Velocidad,kp,ki,kd)
  
  Cruces --
  i=0
  
  Velocidad *= 1
  
  While i < Cruces
    Motor.MoveSync("BC",-Velocidad,Velocidad,100,"False")
    
    I = "B"
    D = "C"
    error = 0
    olderror = 0
    errsum = 0
    u = 0
    sentido = Velocidad / Math.Abs(Velocidad)
    
    While Sensor.ReadPercent(1) > 15 Or Sensor.ReadPercent(4) > 15
      error = (Sensor.ReadPercent(1) - Sensor.ReadPercent(4)) * sentido * 1
      errsum += error
      u = error*kp + (error-olderror)*kd + errsum*ki
      Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
      olderror = error
    EndWhile
    Motor.Stop(I+D, "False")
    i ++
  EndWhile
  
  
  MotorBC.Off()
  
EndFunction


'SIGUELINEAS 31
Function Cruce31(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= 1
  
  I = "B"
  D = "C"
  
  distancia = 5 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While Sensor.ReadPercent(3) > 15 Or Sensor.ReadPercent(1) > 15
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = start_Velocidad * 1
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(3) - Sensor.ReadPercent(1)) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
EndFunction

Function Cruce31F(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= 1
  
  I = "B"
  D = "C"
  
  distancia = 5 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While Sensor.ReadPercent(3) > 15 Or Sensor.ReadPercent(1) > 15
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = start_Velocidad * 1
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(3) - Sensor.ReadPercent(1)) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas hasta ambos blancos

Function Blanco31(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= 1
  
  I = "B"
  D = "C"
  
  distancia = 5 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While Sensor.ReadPercent(3) < 90 Or Sensor.ReadPercent(1) < 90
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = start_Velocidad * 1
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(3) - Sensor.ReadPercent(1)) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
EndFunction

Function Blanco31F(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= 1
  
  I = "B"
  D = "C"
  
  distancia = 5 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While Sensor.ReadPercent(3) < 90 Or Sensor.ReadPercent(1) < 90
    
    'Corrección fuerte los primeros 5 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = start_Velocidad * 1
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    error = (Sensor.ReadPercent(3) - Sensor.ReadPercent(1)) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas por encoder

Function Encoder31(in number Velocidad, in number kp, in number ki, in number kd, in number Encoder)

  Velocidad *= 1
  
  I = "B"
  D = "C"
  
  distancia = 5 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  Encoder = Encoder / (6.24 * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0

  While Math.Abs(encoder_C) < Encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    'Corrección fuerte los primeros 5 cm
    If encoder_C < distancia Then
      Velocidad = start_Velocidad * 1
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf    
    error = (Sensor.ReadPercent(3) - Sensor.ReadPercent(1)) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
EndFunction

Function Encoder31F(in number Velocidad, in number kp, in number ki, in number kd, in number Encoder)

  Velocidad *= 1
  
  I = "B"
  D = "C"
  
  distancia = 5 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  Encoder = Encoder / (6.24 * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0

  While Math.Abs(encoder_C) < Encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    'Corrección fuerte los primeros 5 cm
    If encoder_C < distancia Then
      Velocidad = start_Velocidad * 1
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf    
    error = (Sensor.ReadPercent(3) - Sensor.ReadPercent(1)) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas hasta x cruces

Function Cruces31(in number Velocidad, in number kp, in number ki, in number kd, in number Cruces)
  
  SL31PIDF(Velocidad,kp,ki,kd)
  
  i=1
  
  While i < Cruces
    SL31PIDEncF(Velocidad,kp,ki,kd,4)
    SL31PIDF(Velocidad,kp,ki,kd)
    i ++
  EndWhile
  
  MotorBC.OffAndBrake()
  
EndFunction

Function Cruces31F(in number Velocidad, in number kp, in number ki, in number kd, in number Cruces)
  
  SL31PIDF(Velocidad,kp,ki,kd)
  
  i=1
  
  While i < Cruces
    SL3PIDEncF(Velocidad,kp,ki,kd,4)
    SL31PIDF(Velocidad,kp,ki,kd)
    i ++
  EndWhile
  
  MotorBC.Off()
  
EndFunction
