
'Siguelíneas 1-4 con control Proporcional, integral y derivativo (PID)


'Siguelíneas hasta cruce

Function Cruce14(in number Velocidad, in number kp, in number ki, in number kd)
  'Siguelíneas 1-4 PID
  
  #Valores ideales:
  #KP = 0.18
  #KI = 0.00015
  #KD = 7
  
  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  
  distancia = 8 * 360 / (6.24 * Math.Pi)
  
  error = 0
  olderror = 0
  errsum = 0
  
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()
  
  While lectura1 > 1 Or lectura4 > 1
    
    'Corrección fuerte los primeros 8 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = 20
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura4 = (Sensor.ReadPercent(4) - negro4)/blanco4 * (100 - negro4) 'Normalización

    error = (lectura1 - lectura4)*sentido*1
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "True")
  LCD.Clear()
  LCD.Write(5,10,"Lectura 1: "+lectura1)
  LCD.Write(5,20,"Lectura 4: "+lectura4)
EndFunction

Function Cruce14F(in number Velocidad, in number kp, in number ki, in number kd)
  'Siguelíneas 1-4 PID Sin Frenos

  #Valores ideales:
  #KP = 0.18
  #KI = 0.00015
  #KD = 7

  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  
  distancia = 8 * 360 / (6.24 * Math.Pi)
  
  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While lectura1 > 5 Or lectura4 > 5
    
    'Corrección fuerte los primeros 8 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = 20
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura4 = (Sensor.ReadPercent(4) - negro4)/blanco4 * (100 - negro4) 'Normalización

    error = (lectura1 - lectura4) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas hasta ambos blancos

Function Blanco14(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  
  distancia = 8 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd

  encoder_inicio = MotorC.GetTacho()

  While lectura1 < 90 Or lectura4 < 90
    
    'Corrección fuerte los primeros 8 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = 20
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura4 = (Sensor.ReadPercent(4) - negro4)/blanco4 * (100 - negro4) 'Normalización

    error = (lectura1 - lectura4) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
EndFunction

Function Blanco14F(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  
  distancia = 8 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd

  encoder_inicio = MotorC.GetTacho()

  While lectura1 < 90 Or lectura4 < 90
    
    'Corrección fuerte los primeros 8 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = 20
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura4 = (Sensor.ReadPercent(4) - negro4)/blanco4 * (100 - negro4) 'Normalización

    error = (lectura1 - lectura4) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas por encoder

Function Encoder14(in number Velocidad, in number kp, in number ki, in number kd, in number Encoder)

  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  
  distancia = 8 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  Encoder = Encoder / (6.24 * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0

  While Math.Abs(encoder_C) < Encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    'Corrección fuerte los primeros 8 cm
    If encoder_C < distancia Then
      Velocidad = 20
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura4 = (Sensor.ReadPercent(4) - negro4)/blanco4 * (100 - negro4) 'Normalización

    error = (lectura1 - lectura4) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
EndFunction

Function Encoder14F(in number Velocidad, in number kp, in number ki, in number kd, in number Encoder)

  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  
  distancia = 8 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  Encoder = Encoder / (6.24 * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0

  While Math.Abs(encoder_C) < Encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    'Corrección fuerte los primeros 8 cm
    If encoder_C < distancia Then
      Velocidad = 20
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    
    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura4 = (Sensor.ReadPercent(4) - negro4)/blanco4 * (100 - negro4) 'Normalización
    EndIf    
    error = (lectura1 - lectura4) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas hasta x cruces

Function Cruces14(in number Velocidad, in number kp, in number ki, in number kd, in number Cruces)
  
  Cruce14F(Velocidad, kp, ki, kd)
  
  i = 1
  
  While i < Cruces
    Encoder14F(Velocidad, kp, ki, kd, 4)
    Cruce14F(Velocidad, kp, ki, kd)
    i++
  EndWhile
  
  MotorBC.OffAndBrake()
EndFunction

Function Cruces14F(in number Velocidad, in number kp, in number ki, in number kd, in number Cruces)
  
  Cruce14F(Velocidad, kp, ki, kd)
  
  i = 1
  
  While i < Cruces
    Encoder14F(Velocidad, kp, ki, kd, 4)
    Cruce14F(Velocidad, kp, ki, kd)
    i++
  EndWhile
  
  MotorBC.Off()
EndFunction

'SIGUELINEAS 31
Function Cruce31(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  
  distancia = 8 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While lectura3 > 15 Or lectura1 > 15
    
    'Corrección fuerte los primeros 8 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = 20
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura3 = (Sensor.ReadPercent(3) - negro3)/blanco3 * (100 - negro3) 'Normalización

    error = (lectura3 - lectura1) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
EndFunction

Function Cruce31F(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  
  distancia = 8 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While lectura3 > 15 Or lectura1 > 15
    
    'Corrección fuerte los primeros 8 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = 20
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura3 = (Sensor.ReadPercent(3) - negro3)/blanco3 * (100 - negro3) 'Normalización

    error = (lectura3 - lectura1) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas hasta ambos blancos

Function Blanco31(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  
  distancia = 8 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While lectura3 < 90 Or lectura1 < 90
    
    'Corrección fuerte los primeros 8 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = 20
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura3 = (Sensor.ReadPercent(3) - negro3)/blanco3 * (100 - negro3) 'Normalización

    error = (lectura3 - lectura1) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
EndFunction

Function Blanco31F(in number Velocidad, in number kp, in number ki, in number kd)

  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  
  distancia = 8 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  encoder_inicio = MotorC.GetTacho()

  While lectura3 < 90 Or lectura1 < 90
    
    'Corrección fuerte los primeros 8 cm
    If MotorC.GetTacho() - encoder_inicio < distancia Then
      Velocidad = 20
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf
    
    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura3 = (Sensor.ReadPercent(3) - negro3)/blanco3 * (100 - negro3) 'Normalización

    error = (lectura3 - lectura1) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas por encoder

Function Encoder31(in number Velocidad, in number kp, in number ki, in number kd, in number Encoder)

  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  
  distancia = 8 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  Encoder = Encoder / (6.24 * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0

  While Math.Abs(encoder_C) < Encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    'Corrección fuerte los primeros 8 cm
    If encoder_C < distancia Then
      Velocidad = 20
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf

    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura3 = (Sensor.ReadPercent(3) - negro3)/blanco3 * (100 - negro3) 'Normalización

    error = (lectura3 - lectura1) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "True")
EndFunction

Function Encoder31F(in number Velocidad, in number kp, in number ki, in number kd, in number Encoder)

  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  
  distancia = 8 * 360 / (6.24 * Math.Pi)

  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  start_Velocidad = Velocidad
  start_kp = kp
  start_ki = ki
  start_kd = kd
  
  Encoder = Encoder / (6.24 * Math.Pi) * 360
  
  Start_C = Motor.GetCount("C")
  encoder_C = 0

  While Math.Abs(encoder_C) < Encoder
    
    encoder_C = Motor.GetCount("C") - Start_C
    
    'Corrección fuerte los primeros 8 cm
    If encoder_C < distancia Then
      Velocidad = 20
      kp = start_kp * 1
      ki = start_ki * 1
      kd = start_kd * 1
    Else
      Velocidad = start_Velocidad
      kp = start_kp
      ki = start_ki
      kd = start_kd
    EndIf

    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura3 = (Sensor.ReadPercent(3) - negro3)/blanco3 * (100 - negro3) 'Normalización
       
    error = (lectura3 - lectura1) * sentido * 1
    errsum += error
    u = error * kp + (error - olderror) * kd + errsum * ki
    Motor.StartSync(I + D, -(Velocidad + u), Velocidad - u)
    olderror = error
  EndWhile
  Motor.Stop(I + D, "False")
EndFunction

'Siguelíneas hasta x cruces

Function Cruces31(in number Velocidad, in number kp, in number ki, in number kd, in number Cruces)
  
  Cruce31F(Velocidad,kp,ki,kd)
  
  i=1
  
  While i < Cruces
    Encoder31F(Velocidad,kp,ki,kd,4)
    Cruce31F(Velocidad,kp,ki,kd)
    i ++
  EndWhile
  
  MotorBC.OffAndBrake()
  
EndFunction

Function Cruces31F(in number Velocidad, in number kp, in number ki, in number kd, in number Cruces)
  
  Cruce31F(Velocidad,kp,ki,kd)
  
  i=1
  
  While i < Cruces
    Encoder31F(Velocidad,kp,ki,kd,4)
    Cruce31F(Velocidad,kp,ki,kd)
    i ++
  EndWhile
  
  MotorBC.Off()
  
EndFunction


'Siguelíneas hasta cruce unilateral
Function Cruce_Externo(in number Velocidad, in number kp, in number ki, in number kd, in number reader)
  'Siguelíneas PID

  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  'Asumiendo disposición de sensores 3-1-4
  
  'Si el cruce es a la derecha, lee con 3-1 y detecta con 4
  'Si el cruce es a la izquierda, lee con 1-4 y detecta con 3
  
  lectura = 50
  
  While lectura > 10
    
    If reader = 3 Then
      lectura = lectura3
      lecturaIzq = lectura1
      lecturaDch = lectura4
    Else
      lectura = lectura4
      lecturaIzq = lectura3
      lecturaDch = lectura1
    EndIf

    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura3 = (Sensor.ReadPercent(3) - negro3)/blanco3 * (100 - negro3) 'Normalización
    lectura4 = (Sensor.ReadPercent(4) - negro4)/blanco4 * (100 - negro4) 'Normalización
    
    error = (lecturaIzq - lecturaDch)*sentido*1
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "True")
EndFunction

Function Cruce_ExternoF(in number Velocidad, in number kp, in number ki, in number kd, in number reader)
  'Siguelíneas PID

  Velocidad *= 1

  negro1 = 0
  blanco1 = 99

  negro4 = 2
  blanco4 = 114

  negro3 = 0
  blanco3 = 114

  lectura1 = 50
  lectura3 = 50
  lectura4 = 50
  
  I = "B"
  D = "C"
  error = 0
  olderror = 0
  errsum = 0
  u = 0
  sentido = Velocidad / Math.Abs(Velocidad)
  
  'Asumiendo disposición de sensores 3-1-4
  
  'Si el cruce es a la derecha, lee con 3-1 y detecta con 4
  'Si el cruce es a la izquierda, lee con 1-4 y detecta con 3
  
  lectura = 50
  
  While lectura > 10
    
    If reader = 3 Then
      lectura = lectura3
      lecturaIzq = lectura1
      lecturaDch = lectura4
    Else
      lectura = lectura4
      lecturaIzq = lectura3
      lecturaDch = lectura1
    EndIf

    lectura1 = (Sensor.ReadPercent(1) - negro1)/blanco1 * (100 - negro1) 'Normalización
    lectura3 = (Sensor.ReadPercent(3) - negro3)/blanco3 * (100 - negro3) 'Normalización
    lectura4 = (Sensor.ReadPercent(4) - negro4)/blanco4 * (100 - negro4) 'Normalización
    
    error = (lecturaIzq - lecturaDch)*sentido*1
    errsum += error
    u = error*kp + (error-olderror)*kd + errsum*ki
    Motor.StartSync(I+D, -(Velocidad+u), Velocidad-u)
    olderror = error
  EndWhile
  Motor.Stop(I+D, "False")
EndFunction