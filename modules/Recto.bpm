'Movimiento Recto con Motores Medianos


'Por encoder
Function Encoder(in number Velocidad, in number Distancia)
  
  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 0.1
  ki = 0.0001
  kd = 0.1

  Enc = Distancia*360 / Math.Pi / 6.24
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")
  
  encoder_C = Motor.GetCount ("C") - Start_C
  
  While Math.abs(encoder_C) < Enc
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error
    
    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), Velocidad+correccion)
    
    olderror = error

  EndWhile

  Motor.Stop("BC", "True")

EndFunction

Function EncoderF(in number Velocidad, in number Distancia)

  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 1.5
  ki = 0.0001
  kd = 1

  Enc = Distancia*360 / Math.Pi / 6.24
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")
  
  encoder_C = Motor.GetCount ("C") - Start_C

  While Math.abs(encoder_C) < Enc
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error

    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), Velocidad+correccion)
    
    olderror = error

  EndWhile

  Motor.Stop("BC", "True")

EndFunction

'Hasta negro en 1 sensor
Function Negro1(in number Velocidad, in number sens)

  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 1.5
  ki = 0.0001
  kd = 1
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens) > 10
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error

    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), (Velocidad+correccion))

    olderror = error

  EndWhile
  Motor.Stop("BC", "True")
EndFunction

Function Negro1F(in number Velocidad, in number sens)  
  
  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 1.5
  ki = 0.0001
  kd = 1
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens) > 10
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error

    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), Velocidad+correccion)
    
    olderror = error
  EndWhile
  Motor.Stop("BC", "False")
EndFunction

'Hasta blanco en 1 sensor
Function Blanco1(in number Velocidad, in number sens)  
  
  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 1.5
  ki = 0.0001
  kd = 1
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens) < 40
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error

    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), Velocidad+correccion)
    
    olderror = error
  EndWhile
  Motor.Stop("BC", "True")
EndFunction

Function Blanco1F(in number Velocidad, in number sens)  
  
  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 1.5
  ki = 0.0001
  kd = 1
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens) < 40
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error

    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), Velocidad+correccion)
    
    olderror = error
  EndWhile
  Motor.Stop("BC", "False")
EndFunction

'Hasta negro en 2 sensores
Function Negros2(in number Velocidad, in number sens1, in number sens2)  
  
  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 1.5
  ki = 0.0001
  kd = 1
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens1) > 2 Or Sensor.ReadPercent(sens2) > 2
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error

    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), Velocidad+correccion)
    
    olderror = error
  EndWhile
  Motor.Stop("BC", "True")
EndFunction

Function Negros2F(in number Velocidad, in number sens1, in number sens2)  
  
  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 1.5
  ki = 0.0001
  kd = 1
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens1) > 5 Or Sensor.ReadPercent(sens2) > 5
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error

    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), Velocidad+correccion)
    
    olderror = error
  EndWhile
  Motor.Stop("BC", "False")
EndFunction

'Hasta blanco en 2 sensores
Function Blancos2(in number Velocidad, in number sens1, in number sens2)  
  
  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 1.5
  ki = 0.0001
  kd = 1
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens1) < 70 Or Sensor.ReadPercent(sens2) < 70
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error

    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), Velocidad+correccion)
    
    olderror = error
  EndWhile
  Motor.Stop("BC", "True")
EndFunction

Function Blancos2F(in number Velocidad, in number sens1, in number sens2)  
  
  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 1.5
  ki = 0.0001
  kd = 1
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")

  While Sensor.ReadPercent(sens1) < 70 Or Sensor.ReadPercent(sens2) < 70
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error

    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), Velocidad+correccion)
    
    olderror = error
  EndWhile
  Motor.Stop("BC", "False")
EndFunction

'Hasta color en 1 sensor
Function Color1(in number Velocidad, in number sens, in number Color)  
  
  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 1.5
  ki = 0.0001
  kd = 1
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")

  mode = Sensor.GetMode(sens)
  Sensor.SetMode(sens,2)
  
  While Sensor.ReadRawValue(sens,0) <> Color
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error

    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), Velocidad+correccion)
    
    olderror = error
  EndWhile
  Motor.Stop("BC", "True")
  Sensor.SetMode(sens,mode)
EndFunction

Function Color1F(in number Velocidad, in number sens, in number Color)  
  
  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 1.5
  ki = 0.0001
  kd = 1
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")

  mode = Sensor.GetMode(sens)
  Sensor.SetMode(sens,2)
  
  While Sensor.ReadRawValue(sens,0) <> Color
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error

    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), Velocidad+correccion)
    
    olderror = error
  EndWhile
  Motor.Stop("BC", "False")
  Sensor.SetMode(sens,mode)
EndFunction

'Por tiempo
Function Tiempo(in number Velocidad, in number Tiempo)  
  
  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 1.5
  ki = 0.0001
  kd = 1
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")

  Time.Reset3()
  
  While Time.Get3() < Tiempo
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error

    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), Velocidad+correccion)
    
    olderror = error
  EndWhile
  Motor.Stop("BC", "True")
EndFunction

Function TiempoF(in number Velocidad, in number Tiempo)  
  
  Velocidad *= 1

  olderror = 0
  errsum = 0

  kp = 1.5
  ki = 0.0001
  kd = 1
  
  Start_B = Motor.GetCount ("B") *-1
  Start_C = Motor.GetCount ("C")

  Time.Reset3()
  
  While Time.Get3() < Tiempo
    
    encoder_B = Motor.GetCount ("B")*-1 - Start_B
    encoder_C = Motor.GetCount ("C") - Start_C
    
    error = (encoder_B - encoder_C)*1
    errsum += error

    correccion = error*kp + errsum*ki + (error - olderror)*kd

    Motor.StartSync("BC", -(Velocidad-correccion), Velocidad+correccion)
    
    olderror = error
  EndWhile
  Motor.Stop("BC", "False")
EndFunction

'Con Aceleración y deceleración
Function AccelDecel(in number V0, in number VMax, in number distancia1,in number distancia2, in number distancia3)
  
  Start_B = Motor.GetCount("B")
  Start_C = Motor.GetCount("C")
  
  encoder_B = 0
  encoder_C = 0
  
  V0 = Math.Max(8,V0)*1
  VMax = Math.Min(90,VMax)*1 'Limitamos las potencias
  
  Vel = 0
  Kp = 0.4
  Ki = 0.0001
  Kd = 0.5
  
  error = 0
  olderror = 0
  errsum = 0

  
  grados1 = distancia1*360/(5.6*math.pi)
  grados2 = distancia2*360/(5.6*math.pi)
  grados3 = distancia3*360/(5.6*math.pi)
  
  While encoder_C < grados1 + grados2 + grados3
    
    encoder_B = Motor.GetCount("B") - Start_B
    encoder_C = Motor.GetCount("C") - Start_C
    
    #Acelera hasta la distancia de aceleración y se mantiene hasta la distancia de velocidad cte
    If encoder_C < grados1 + grados2 Then
      ' Aceleración y Velocidad Cte
      pendiente = (VMax - V0) / grados1
      Vel = Math.Min(VMax, pendiente * encoder_C + V0)
    Else
      ' Deceleración
      pendiente = (V0 - VMax) / grados3
      Vel = Math.Max(V0, pendiente * (encoder_C - grados1 - grados2) + VMax)
    EndIf
    
    #Correción PID para mantener el robot recto
    
    error = (-1*encoder_B - encoder_C)*1
    errsum += error
    correccion = error*Kp + (error-olderror)*Kd + errsum*Ki 
    
    Motor.StartSync("BC",-(Vel-correccion),(Vel+correccion))
    olderror = error
  EndWhile
  
  MotorBC.OffAndBrake()
  
  LCD.Clear()
  LCD.Write(5,10,"Distancia cm: " + MotorC.GetTacho() * 5.6 * Math.Pi /360)
EndFunction

Function AccelDecelF(in number V0, in number VMax, in number distancia1,in number distancia2, in number distancia3)
  
  Start_B = Motor.GetCount("B")
  Start_C = Motor.GetCount("C")
  
  encoder_B = 0
  encoder_C = 0
  
  V0 = Math.Max(8,V0)*1
  VMax = Math.Min(90,VMax)*1 'Limitamos las potencias
  
  Vel = 0
  Kp = 0.4
  Ki = 0.0001
  Kd = 0.5
  
  error = 0
  olderror = 0
  errsum = 0
  
  grados1 = distancia1*360/(5.6*math.pi)
  grados2 = distancia2*360/(5.6*math.pi)
  grados3 = distancia3*360/(5.6*math.pi)
  
  While encoder_C < grados1 + grados2 + grados3
    
    encoder_B = Motor.GetCount("B") - Start_B
    encoder_C = Motor.GetCount("C") - Start_C
    
    #Acelera hasta la distancia de aceleración y se mantiene hasta la distancia de velocidad cte
    If encoder_C < grados1 + grados2 Then
      ' Aceleración y Velocidad Cte
      pendiente = (VMax - V0) / grados1
      Vel = Math.Min(VMax, pendiente * encoder_C + V0)
    Else
      ' Deceleración
      pendiente = (V0 - VMax) / grados3
      Vel = Math.Max(V0, pendiente * (encoder_C - grados1 - grados2) + VMax)
    EndIf
    
    #Correción PID para mantener el robot recto
    
    error = (-1*encoder_B - encoder_C)*1
    errsum += error
    correccion = error*Kp + (error-olderror)*Kd + errsum*Ki 
    olderror = error
    Motor.StartSync("BC",-(Vel-correccion),(Vel+correccion))
    
  EndWhile
  
  MotorBC.Off()
  
  LCD.Clear()
  LCD.Write(5,10,"Distancia cm: " + MotorC.GetTacho() * 5.6 * Math.Pi /360)
EndFunction


Function Decel(in number V0, in number VMin, in number distancia1,in number distancia2)
  
  V0 = Math.Min(90,V0)
  VMin = Math.Max(8,VMin) 'Limitamos las potencias
  
  Vel = 0
  Kp = 0.4
  Ki = 0.0001
  Kd = 0.5
  
  error = 0
  olderror = 0
  errsum = 0

  grados1 = distancia1*360/(5.6*math.pi)
  grados2 = distancia2*360/(5.6*math.pi)
  
  MotorB.ResetCount()
  MotorC.ResetCount()
  
  While MotorC.GetTacho() < grados1 + grados2
    
    #Acelera hasta la distancia de aceleración y se mantiene hasta la distancia de velocidad cte
    pendiente = (VMin - V0) / grados1
    Vel = Math.Max(VMin, pendiente * MotorC.GetTacho() + V0)    
    #Correción PID para mantener el robot recto
    
    error = (-1*MotorB.GetTacho() - MotorC.GetTacho())*1
    errsum += error
    correccion = error*Kp + (error-olderror)*Kd + errsum*Ki 
    olderror = error
    Motor.StartSync("BC",-(Vel-correccion)*1,(Vel+correccion)*1)
    
  EndWhile
  
  MotorBC.OffAndBrake()
  
  LCD.Clear()
  LCD.Write(5,10,"Distancia cm: " + MotorC.GetTacho() * 5.6 * Math.Pi /360)
EndFunction

Function DecelF(in number V0, in number VMin, in number distancia1,in number distancia2)
  
  V0 = Math.Min(90,V0)
  VMin = Math.Max(8,VMin) 'Limitamos las potencias
  
  Vel = 0
  Kp = 0.4
  Ki = 0.0001
  Kd = 0.5
  
  error = 0
  olderror = 0
  errsum = 0
  
  grados1 = distancia1*360/(5.6*math.pi)
  grados2 = distancia2*360/(5.6*math.pi)
  
  MotorB.ResetCount()
  MotorC.ResetCount()
  
  While MotorC.GetTacho() < grados1 + grados2
    
    #Acelera hasta la distancia de aceleración y se mantiene hasta la distancia de velocidad cte
    pendiente = (VMin - V0) / grados1
    Vel = Math.Max(VMin, pendiente * MotorC.GetTacho() + V0)    
    #Correción PID para mantener el robot recto
    
    error = (-1*MotorB.GetTacho() - MotorC.GetTacho())*1
    errsum += error
    correccion = error*Kp + (error-olderror)*Kd + errsum*Ki 
    olderror = error
    Motor.StartSync("BC",-(Vel-correccion)*1,(Vel+correccion)*1)
    
  EndWhile
  
  MotorBC.Off()
  
  LCD.Clear()
  LCD.Write(5,10,"Distancia cm: " + MotorC.GetTacho() * 5.6 * Math.Pi /360)
EndFunction
