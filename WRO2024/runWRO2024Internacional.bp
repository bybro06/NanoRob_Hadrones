folder "prjs""WRO2024"

#Hemos llegado hasta aquí gracias a:

' - Ignacio Rodríguez Gracia
' - Francisco José Rodríguez Montes
' - Inma Espinosa Sánchez
' - Juan José Tenorio Feixas
' - Jordin Van Weert
' - Francisco Torres
' - Cayetano Torres
' - Pau Moya Ales
' - Jaime Pérez Piedra
' - Carlos Palanca Cruz
' - Mai Anguita
' - Antonio Jesús Martínez Jaén
' - Tomás Manuel Expósito González
' - Francisco Reina Martín
' - Luis Miguel Simarro González
' - José Valverde
' - Ana María García Montesinos
' - Miguel López
' - Rafael Téllez
' - Jesús Rodríguez Montes

#Y a la financiación aportada por:

' - Universidad de Almería
' - EfilAlmería
' - Sercomm Corporation
' - Megal Energía
' - ModelBot

#Y la equipación otorgada por:

' - Diputación de Almería
' - La Salle Virgen del Mar

import "modules/Siguelineas"
import "modules/Giro"
import "modules/Recto"
import "modules/Shift"
import "modules/Brazo"
import "modules/Smart"
import "modules/RGB"

encoderA = 0
encoderD = 0

errorA = 0
olderrorA = 0

errorD = 0
olderrorD = 0

Sub Setup

    Sensor.SetMode(1, 0)
    Sensor.SetMode(2, 4)
    Sensor.SetMode(3, 0)
    Sensor.SetMode(4, 0)

    diametro = 6.24

    '965
    Giro.G1 = 965 / 360

    negro1 = 29
    negro3 = 29
    negro4 = 23

    blanco1 = 80
    blanco3 = 84
    blanco4 = 62

    RGB.VALUENEGRO = 4
    RGB.VALUEBLANCO = 32
    RGB.RWHITE = 57
    RGB.GWHITE = 71
    RGB.BWHITE = 73

    'Auto definición de propiedades

    Recto.diametro = diametro
    Giro.diametro = diametro
    Siguelineas.diametro = diametro
    Smart.diametro = diametro

    Siguelineas.negro1 = negro1
    Siguelineas.negro3 = negro3
    Siguelineas.negro4 = negro4

    Siguelineas.blanco1 = blanco1
    Siguelineas.blanco3 = blanco3
    Siguelineas.blanco4 = blanco4

    Smart.negro1 = negro1
    Smart.negro3 = negro3
    Smart.negro4 = negro4

    Smart.blanco1 = blanco1
    Smart.blanco3 = blanco3
    Smart.blanco4 = blanco4

    Recto.negro = (negro1 + negro3 + negro4) / 3
    Recto.blanco = (blanco1 + blanco3 + blanco4) / 3

    Giro.negro = (negro1 + negro3 + negro4) / 3
    Giro.blanco = (blanco1 + blanco3 + blanco4) / 3

EndSub

Sub StartArm

    Brazo.DTimer( - 50, 800)
    AEncoder(50, - 1100)
    encoderA = 0
    'encoderD = 0
    MotorA.ResetCount()
    MotorD.ResetCount()
    AEncoder(50, 650)
    MotorA.ResetCount()
    MotorD.ResetCount()
    encoderA = 0
    'encoderD = 0
    Brazo.DEncoder(50, 80)

    Buttons.Wait()
    Program.Delay(250)
EndSub

Setup()
Thread.Run = ControlBrazo
Main()

Sub Main

    GritarVoltaje()
    StartArm()
    Recto.Tiempo( - 80, 600)
    Recto.Encoder(55, 4.5)
    Brazo.DEncoder(50, 320)
    Giro.GradosF(70, - 21, 90)
    Giro.TiempoF(70 * 0.3, - 21 * 0.3, 200)

    Recto.AccelDecel(15, 30, 3.5, 0, 3)

    Brazo.DEncoder(50, - 20)
    AEncoder(50, - 200)

    Coger()

    Recto.Encoder( - 80, 18)
    Brazo.DEncoder(60, 200)
    Giro.Grados( - 80, 40, 105)

    Giro.Tiempo( - 80, - 50, 800)

    'Cuadra con pared para irse a por la segunda fila

    Recto.AccelDecelF(15, 89, 10, 0, 0)
    Recto.EncoderF(100, 58)
    Recto.Blanco1F(60, 3)

    'llega a línea

    Giro.Grados(45, - 12, 92)

    Time.Reset1()

    Smart.Encoder31F(80, 8)
    Siguelineas.Cruce_ExternoF(80, 4)

    tiempoHastaCruce = Time.Get1()

    '1500
    If tiempoHastaCruce > 1 Then 'Calcular tiempo en ambos cruces
        'Caso VOX
        Recto.Encoder( - 30, 10)
        Giro.Grados(30, - 30, 90)
        Brazo.DEncoder(80, 850)

        Recto.Encoder(50, 25)
        Brazo.DEncoder(80, 350)

        Giro.Grados( - 30, 30, 88)
        Brazo.DEncoder(80, 850)
        Recto.Encoder(80, 35)

        Giro.Grados( - 30, 30, 36)
        Recto.Encoder(100, 63)

        Recto.Encoder( - 60, 2)
        Giro.Grados(60, 40, 5)

        'Sube brazo y gira dejando basuras
        Brazo.DEncoder(80, 700)
        Giro.Grados( - 25 * 1.5, - 60 * 1.5, 125)

        'Cuadra con pared
        Brazo.DEncoder(50, 350)

        Recto.Tiempo( - 70, 200)
        Recto.Encoder(30, 4)

        Giro.Tiempo(50, - 15, 800)

        Giro.Color1(30, 31, 3, 5)
        Giro.Encoder(30, 29, 2.75)

        Brazo.DEncoder(70, 260)
        AEncoder(50, 0)
        Brazo.DEncoder(70, 0)
        AEncoder(50, - 200)

        'Coge los otros 3 bloques

        For i = 0 To 2
            Coger()
        EndFor

        'Giro abierto y lanzamiento a por los dos ultimos amarillos

        Giro.Grados(57, 82, 90)

        Recto.AccelDecelF(15, 89, 8, 0, 0)
        Recto.Encoder(89, 28)

        'Gira 180 para cudrar de espaldas

        Giro.Grados( - 40, 40, 220)

        Recto.Tiempo( - 45, 600)

        'Sale de pared

        Recto.Encoder(20, 4.5)

        Giro.Grados(50, - 18, 118)

        Brazo.DEncoder(50, 400)

        'Anda hasta primer cuadrado rojo

        Giro.EncoderF(30, 28, 3)
        Giro.Color1F(30, 28, 4, 5)
        'Thread.Run = Detecta
        Giro.EncoderF(30, 25, 8)
        Giro.Color1(23, 20, 4, 5)
        'Thread.Run = Detecta

        Brazo.DEncoder(50, 350)
        Recto.AccelDecel(15, 30, 11.1, 0, 0)

        'Coge 3er amarillo

        Brazo.DEncoder(70, 240)
        AEncoder(50, 0)

        Brazo.DEncoder(70, 0)

        AEncoder(50, - 200)

        Brazo.DEncoder(80, 350)

        'Coge 4º amarillo

        Coger()

        Brazo.DEncoder (80, 400)
        'Gira a línea

        Giro.Encoder(0, 30, 5)

        Giro.Grados( - 50, 20, 40)
        Recto.Encoder(30, 3)
        Giro.Grados( - 50, 20, 105)

        Giro.Tiempo( - 40, - 20, 800)
        Brazo.DEncoder(80, 150)

        'Se coloca hacia la linea de amarillo
        Giro.Grados(50 * 1.5, 20 * 1.5, 31)
        Giro.Grados(20 * 1.5, 50 * 1.5, 31)

        'Se pone encima de la base amarilla
        Siguelineas.Encoder14(30, 20)
        Recto.Encoder(30, 7.5)

        Brazo.DEncoder(80, 150)
        Giro.Grados( - 20, 20, 103)

        'Suelta las dos torres
        Recto.Encoder( - 25, 16.5)
        Soltar(4)
        Recto.Encoder( - 50, 10)
        Soltar(4)

        'Va a línea

        Giro.Grados( - 20, 20, 43)
        Recto.EncoderF(30, 15)
        Recto.Negro1(30, 1)
        Recto.Encoder( - 20, 3)
        Giro.Grados(50, - 5, 28)

        'Llega a salida
        Siguelineas.Color31(90, 5)

        Giro.Grados(8 * 1.5, 20 * 1.5, 46)

        'Gira y coge seta de la derecha
        Giro.Grados(20 * 1.5, 8 * 1.5, 44)
        Brazo.DEncoder(80, 800)
        Recto.Encoder(50, 11)

        CogerAlto()
        Brazo.DEncoder(80, 50)
        AEncoder(30, 50)
        Brazo.DEncoder(80, 0)
        AEncoder(30, - 200)
        Brazo.DEncoder(80, 150)

        'Cuadra con pared y coge basura
        Giro.Grados(40, - 40, 85)
        Recto.EncoderF( - 60, 15)
        Recto.Tiempo( - 40, 600)

        Recto.Encoder(40, 36)
        Giro.Grados( - 10, 20, 95)

        'Anda hacia delante y levanta tuberia
        Recto.Encoder(40, 15.5)
        Giro.Grados(0, 15, 8)

        Brazo.DEncoder(50, 280)
        Recto.Encoder(10, 10.25)

        Brazo.DEncoder(80, 400)
        Giro.Grados( - 30, 40, 10)

        Brazo.DEncoder(80, 800)
        Giro.Grados(30, - 40, 20)

        'Grúa ya levantada
        Giro.Grados( - 30, 40, 12)

        Brazo.DEncoder(50, 240)
        Recto.Encoder( - 10, 3)

        Brazo.DEncoder(50, 180)
        Recto.Encoder( - 40, 11)

        'Cuadra con pared
        Giro.Grados( - 20, - 70, 90)
        Recto.Tiempo( - 60, 1200)

        Recto.Encoder(30, 4)
        Giro.Grados(50, - 16, 102)

        'Anda hasta espacios rojos
        Giro.EncoderF(60, 56, 35)

        'Anda hasta amarillo
        Recto.Color1(30, 4, 4) 'NO TOCAR, FUNCIONA ! ! ! ! ! ! ! ! ! ! ! ! 
        'Thread.Run = Detecta
        'Coge verde y / o azul
        Recto.Encoder(30, 13.5)
        Brazo.DEncoder(80, 300)
        Coger()
        Brazo.DEncoder(80, 300)
        CogerColor(base)

        'Empuja basura
        Brazo.DEncoder(60, 50)
        Recto.Encoder(30, 22)
        Brazo.DEncoder(80, 200)

        'Atrás y gira a basuras
        Giro.Encoder( - 28, - 30, 19)
        Brazo.DEncoder(80, 50)
        Giro.Grados( - 50, 70, 59)

        Recto.Encoder(70, 98)
        Brazo.DEncoder(80, 600)
        Recto.Encoder( - 30, 11)

        'Gira hacia tubería
        Giro.Grados(0, - 20, 33)

        Brazo.DEncoder(80, 10)

        Recto.Encoder(30, 12)

        Brazo.DEncoder(80, 280)
        Recto.Encoder(10, 5.5)

        Brazo.DEncoder(80, 900)

        Giro.Grados(30, - 40, 255)

        'Grúa ya levantada
        Brazo.DEncoder(80, 160)
        Recto.EncoderF(80, 10)
        Recto.Color1F(40, 4, 5)
        Recto.EncoderF(80, 8)
        Giro.Color1(40, 38, 4, 5)
        Recto.Encoder(40, 8)

        Giro.Grados( - 30, 40, 105)
        Recto.Blanco1(40, 4)

        Giro.Grados(40, - 5, 94)
        Siguelineas.Cruce_ExternoF(40, 3)

        Siguelineas.Encoder14(40, 40)

        If base = 2 Then
            Giro.Grados( - 30, 30, 135)
            Recto.Encoder(30, 16.5)

            Brazo.DEncoder(70, 50)
            AEncoder(50, 50)
            Brazo.DEncoder(90, 1000)
            Else

            Giro.Grados( - 30, 30, 98)
            Recto.Encoder(30, 13)

            Brazo.DEncoder(70, 50)
            AEncoder(50, 50)
            Brazo.DEncoder(90, 1000)
        EndIf

        Else
        'Caso PSOE

        'Speaker.Play(100, "No")
        'Speaker.Wait()
        'Speaker.Play(100, "Dog growl")
        'Speaker.Wait()
        Siguelineas.Encoder31F(85, 30)
        Recto.Encoder(50, 17)

        'Pilla basura amarilla

        Giro.Grados(50, - 10, 98)

        Recto.Encoder(40, 18)
        Giro.Encoder( - 45, - 80, 21)
        Giro.Encoder( - 80, - 54, 18)

        Recto.Tiempo( - 40, 900)

        'Sale de pared
        Recto.Encoder(20, 3.5)

        Brazo.DEncoder(50, 400)

        Giro.Grados(50, - 18, 110)

        'Anda hasta primer cuadrado rojo

        Recto.Color1F(20, 3, 5)
        Recto.Encoder(20, 2.5)
        Brazo.DEncoder(50, 260)
        AEncoder(50, 0)
        Brazo.DEncoder(50, - 10)
        AEncoder(50, - 150)

        'Coge los otros 3 bloques

        For i = 0 To 2
            Coger()
        EndFor

        'Apunta a basura
        Giro.Grados(0, 60, 45)
        Recto.Encoder(90, 113)
        Recto.Encoder( - 60, 2)
        Giro.Grados(60, 40, 5)

        'Sube brazo y gira dejando basuras
        Brazo.DEncoder(80, 700)
        Giro.Grados( - 25, - 60, 135)

        'Cuadra con pared
        Brazo.DEncoder(50, 350)

        Recto.Tiempo( - 70, 500)

        'Gira hacia los últimos amarillos
        'Sale de pared

        Recto.Encoder(30, 5.5)
        Giro.Tiempo(50, - 15, 1100)

        'Anda hasta primer cuadrado rojo

        Giro.EncoderF(30, 27, 2)
        Giro.Color1(30, 20, 4, 5)
        'Thread.Run = Detecta

        Brazo.DEncoder(50, 350)
        Recto.AccelDecel(15, 30, 8, 0, 0)
        Giro.EncoderF(30, 27, 16)

        'Coge 3er amarillo

        Brazo.DEncoder(50, 240)
        AEncoder(50, 0)

        Brazo.DEncoder(50, - 10)

        AEncoder(50, - 200)

        Brazo.DEncoder(50, 350)

        'Coge 4º amarillo

        Brazo.DEncoder(70, 350)

        Giro.Encoder(30, 25, 9.75)
        Brazo.DEncoder(70, 250)
        AEncoder(50, 0)

        Brazo.DEncoder(70, - 10)

        AEncoder(50, - 175)

        Brazo.DEncoder(70, 100)

        Brazo.DEncoder(50, 10)
        Giro.Encoder( - 30, - 39, 20.5)

        'Gira hacia amarillo
        Giro.Grados( - 10, 40, 105)
        Recto.Tiempo( - 30, 800)
        Giro.Encoder(49, 50, 39)

        Soltar(4)

        Brazo.DEncoder(60, 50)
        Giro.Encoder( - 40, - 5, 7)
        Giro.Grados( - 25, 25, 27)

        Recto.Encoder(50, 19.25)
        Soltar(4)

        Brazo.DEncoder(50, 10)
        Recto.Encoder( - 40, 5.5)

        'Gira hacia grúa
        Giro.Grados( - 30, 30, 53)

        Recto.Encoder( - 30, 26)

        Siguelineas.Encoder31(30, 5)
        Siguelineas.Color31(70, 5)
        'Thread.Run = Detecta
        Recto.Encoder(60, 54)

        'Avanza a grúa
        Giro.Grados( - 10, 10, 16)
        Recto.Encoder(20, 9)
        Giro.Tiempo(10, - 10, 500)

        'Levanta grúa
        Brazo.DEncoder(50, 700)
        Giro.Grados(20, - 3, 26)

        Giro.Grados(20, - 40, 10)
        Recto.Encoder( - 70, 20)
        Recto.Encoder(30, 3)
        Giro.Grados(70, - 70, 190)

        'Anda hasta amarillo
        Giro.EncoderF(60, 58, 55)
        Giro.Color1(30, 28, 4, 4)
        'Thread.Run = Detecta
        'Coge verde y / o azul
        Brazo.DEncoder(80, 300)
        Recto.EncoderF(30, 1)
        Coger()
        Coger()

        'Levanta tubería
        Recto.Encoder(30, 1)
        Giro.Grados(41.5 * 0.5, 80 * 0.5, 90)
        Recto.EncoderF(60 * 0.5, 12)
        Giro.Grados(82 * 0.5, 40 * 0.5, 88)

        Brazo.DEncoder(80, 260)
        Recto.Encoder(20, 14.5)
        Giro.Grados( - 20, 20, 5)
        Brazo.DEncoder(80, 800)
        Giro.Grados(20, - 20, 15)
        Giro.Grados( - 20, 20, 10)
        Brazo.DEncoder(80, 200)

        'Se coloca hacia la seta
        Recto.Encoder( - 20, 12)
        Giro.Grados( - 40, 10, 180)
        Recto.Encoder( - 20, 10)
        Giro.Grados( - 10, - 40, 67.5)

        Brazo.DEncoder(70, 450)

        Recto.Encoder(30, 25)
        RGB.Detect(2, 5, base)
        'RGB.Gritar(base)
        Recto.Encoder(30, 3.5)

        Brazo.DEncoder(70, 350)
        AEncoder(60, 0)
        Brazo.DEncoder(70, 120)
        AEncoder(60, - 200)

        Brazo.DEncoder(70, 620)

        Recto.Encoder( - 30, 20)
        Brazo.DEncoder(80, 100)
        AEncoder(30, 50)
        Brazo.DEncoder(80, 0)
        AEncoder(30, - 200)
        Brazo.DEncoder(80, 150)
        Giro.Grados(10, 40, 60)
        Giro.Encoder(54, 60, 70)
        Giro.Blanco1(58, 60, 4)
        'Thread.Run = Detecta
        Giro.Encoder(60, 58, 37)

        'Cuadra con pared y enchufa con linea hasta cruce

        Recto.Encoder( - 70, 8)
        Giro.Grados( - 40, 80, 100)
        Giro.Tiempo( - 80, - 70, 600)
        Recto.Encoder(70, 16)
        Giro.Grados( - 5, 70, 97)
        Siguelineas.Cruce_ExternoF(50, 4)

        'Piensa bien donde dejarlo

        If base = 2 Then 'Base = 2 es el color azul
            Recto.Encoder(50, 4)
            Giro.Grados(80, 33, 75)

            Brazo.DEncoder(70, 50)
            AEncoder(50, 50)
            Brazo.DEncoder(90, 1000)
            Else
            Siguelineas.Encoder31(60, 20)
            Giro.Grados(80, 35, 77)

            Brazo.DEncoder(70, 50)
            AEncoder(50, 50)
            Brazo.DEncoder(90, 1000)
        EndIf

    EndIf

EndSub

Sub MainPrueba

    GritarVoltaje()
    StartArm()
    Siguelineas.Encoder31(70, 5)
    Siguelineas.Color31(70, 5)
    Thread.Run = Detecta
    Recto.Encoder(60, 54)

    'Avanza a grúa
    Giro.Grados( - 10, 10, 16)
    Recto.Encoder(20, 9)
    Giro.Tiempo(10, - 10, 500)

    'Levanta grúa
    Brazo.DEncoder(50, 700)
    Giro.Grados(20, - 3, 26)

    Giro.Grados(20, - 40, 10)
    Recto.Encoder( - 70, 20)
    Giro.Grados(70, - 70, 170)

    'Anda hasta amarillo
    Giro.EncoderF(60, 58, 55)
    Giro.Blanco1(30, 28, 4.25)
    Thread.Run = Detecta
    'Coge verde y / o azul
    Brazo.DEncoder(80, 300)
    Recto.EncoderF(30, 1)
    Coger()
    Coger()

    'Levanta tubería
    Recto.Encoder(30, 1)
    Giro.Grados(41.5 * 0.5, 80 * 0.5, 90)
    Recto.EncoderF(60 * 0.5, 12)
    Giro.Grados(82 * 0.5, 40 * 0.5, 88)

    Brazo.DEncoder(80, 260)
    Recto.Encoder(20, 14.5)
    Giro.Grados( - 20, 20, 5)
    Brazo.DEncoder(80, 800)
    Giro.Grados(20, - 20, 15)
    Giro.Grados( - 20, 20, 10)
    Brazo.DEncoder(80, 200)

    'Se coloca hacia la seta
    Recto.Encoder( - 20, 12)
    Giro.Grados( - 40, 10, 180)
    Recto.Encoder( - 20, 10)
    Giro.Grados( - 10, - 40, 67.5)

    Brazo.DEncoder(70, 450)

    Recto.Encoder(30, 25)
    RGB.Detect(2, 5, base)
    RGB.Gritar(base)
    Recto.Encoder(30, 3.5)

    Brazo.DEncoder(70, 350)
    AEncoder(60, 0)
    Brazo.DEncoder(70, 120)
    AEncoder(60, - 200)

    Brazo.DEncoder(70, 620)

    Recto.Encoder( - 30, 20)
    Brazo.DEncoder(80, 100)
    AEncoder(30, 50)
    Brazo.DEncoder(80, 0)
    AEncoder(30, - 200)
    Brazo.DEncoder(80, 150)
    Giro.Grados(10, 40, 60)
    Giro.Encoder(54, 60, 70)
    Giro.Blanco1(58, 60, 4)
    Thread.Run = Detecta
    Giro.Encoder(60, 58, 37)

    'Cuadra con pared y enchufa con linea hasta cruce

    Recto.Encoder( - 70, 8)
    Giro.Grados( - 40, 80, 100)
    Giro.Tiempo( - 80, - 70, 600)
    Recto.Encoder(70, 16)
    Giro.Grados( - 5, 70, 97)
    Siguelineas.Cruce_ExternoF(50, 4)

    'Piensa bien donde dejarlo

    If base = 2 Then 'Base = 2 es el color azul
        Recto.Encoder(50, 4)
        Giro.Grados(80, 33, 75)

        Brazo.DEncoder(70, 50)
        AEncoder(50, 50)
        Brazo.DEncoder(90, 1000)
        Else
        Siguelineas.Encoder31(60, 20)
        Giro.Grados(80, 35, 77)

        Brazo.DEncoder(70, 50)
        AEncoder(50, 50)
        Brazo.DEncoder(90, 1000)
    EndIf

EndSub

Sub PruebaSensor
    While "True"
        RGB.Detect(2, 5, color)
        RGB.Gritar(color)
        Program.Delay(100)
    EndWhile

EndSub

Sub ControlBrazo

    While "True"
        errorA = encoderA - MotorA.GetTacho()
        'errorD = encoderD - MotorD.GetTacho()
        correccionA = errorA * 1 + (errorA - olderrorA) * 0.6
        'correccionD = errorD * 1 + (errorD - olderrorD) * 0.3
        MotorA.StartSpeed(correccionA)
        'MotorD.StartSpeed(correccionD)
    EndWhile

EndSub

Sub Display
    While "True"
        LCD.StopUpdate()
        LCD.Clear()
        LCD.Write(5, 5, "Encoder B: " + MotorB.GetTacho() *- 1)
        LCD.Write(5, 15, "Encoder C: " + MotorC.GetTacho())
        LCD.Write(5, 30, "Diferencia: " + (MotorB.GetTacho() *- 1 - MotorC.GetTacho()))
        LCD.Update()
        Program.Delay(100)
    EndWhile

EndSub

Function Coger()
    Brazo.DEncoder(70, 350)

    Recto.AccelDecel(15, 30, 5, 0, 4.75)
    Brazo.DEncoder(70, 250)
    AEncoder(50, 0)

    Brazo.DEncoder(70, - 10)

    AEncoder(50, - 220)

    Brazo.DEncoder(70, 100)

EndFunction

Function CogerAlto()

    Recto.Encoder(20, 6)

    Brazo.DEncoder(50, 400)
    AEncoder(50, 0)

    Brazo.DEncoder(50, 120)

    AEncoder(50, - 225)

    Brazo.DEncoder(50, 400)

    Recto.Encoder( - 40, 20)
    Brazo.DEncoder(50, 100)
EndFunction

Function Soltar(in number altura)

    'Numero de bloques que suelta
    altura *= 0.75
    Brazo.DEncoder(70, 50)
    AEncoder(50, 50)
    Brazo.DEncoder(70, Math.Min(254 * (altura), 2000))
    AEncoder(50, - 200)

    Brazo.DEncoder(50, MotorD.GetTacho() + 200)
    Program.Delay(200)
    Recto.Encoder( - 10, 11)

    Brazo.DEncoder(50, 200)
EndFunction

Function AEncoder(in number Velocidad, in number Encoder)

    encDiff = Encoder - MotorA.GetTacho()

    signo = Math.Abs(encDiff) / encDiff

    safetyTimer = 1200
    Time.Reset3()

    ' Solo ejecuta el movimiento si hay diferencia en el encoder
    If encDiff < > 0 Then

        While Math.Abs(MotorA.GetTacho() - Encoder) > 15 And Time.Get3() < safetyTimer

            ' Ajuste del encoder actual con control de velocidad
            @encoderA = @encoderA + (Velocidad / 15.5 * signo)

            ' Límite para evitar sobrepasar el encoder objetivo
            If signo > 0 Then
                @encoderA = Math.Min(@encoderA, Encoder)
                Else
                @encoderA = Math.Max(@encoderA, Encoder)
            EndIf

        EndWhile

        ' Asegura que el valor final del encoder sea el exacto
        @encoderA = Encoder
        MotorA.OffAndBrake()

    EndIf

EndFunction

Function DEncoder(in number Velocidad, in number Encoder)

    encDiff = Encoder - MotorD.GetTacho()

    signo = Math.Abs(encDiff) / encDiff

    safetyTimer = 2400
    Time.Reset4()

    ' Solo ejecuta el movimiento si hay diferencia en el encoder
    If encDiff < > 0 Then

        While (Math.Abs(MotorD.GetTacho() - Encoder) > 15) And Time.Get3() < safetyTimer

            ' Ajuste del encoder actual con control de velocidad
            @encoderD = @encoderD + (Velocidad / 15.5 * signo)

            ' Límite para evitar sobrepasar el encoder objetivo
            If signo > 0 Then
                @encoderD = Math.Min(@encoderD, Encoder)
                Else
                @encoderD = Math.Max(@encoderD, Encoder)
            EndIf

        EndWhile

        ' Asegura que el valor final del encoder sea el exacto
        @encoderD = Encoder
        MotorD.OffAndBrake()

    EndIf

EndFunction

Sub Detecta
    Speaker.Play(100, "Connect")
EndSub

Function CogerColor(out number color)

    Recto.Encoder(50, 5)
    Brazo.DEncoder(50, 200)
    Sensor.SetMode(2, 4)
    RGB.Detect(2, 5, color)
    'RGB.Gritar(color)
    Sensor.SetMode(2, 4)
    Brazo.DEncoder(50, 310)
    Recto.Encoder(50, 7)
    Brazo.DEncoder(50, 250)
    AEncoder(50, 0)

    Brazo.DEncoder(50, 0)

    AEncoder(50, - 175)

    Brazo.DEncoder(50, 300)

EndFunction

Function GritarNumero(in number numero)
    If numero = 0 Then
        Speaker.Play(100, "ZERO")
        Elseif numero = 1 Then
        Speaker.Play(100, "One")
        Elseif numero = 2 Then
        Speaker.Play(100, "Two")
        Elseif numero = 3 Then
        Speaker.Play(100, "Three")
        Elseif numero = 4 Then
        Speaker.Play(100, "Four")
        Elseif numero = 5 Then
        Speaker.Play(100, "Five")
        Elseif numero = 6 Then
        Speaker.Play(100, "Six")
        Elseif numero = 7 Then
        Speaker.Play(100, "Seven")
        Elseif numero = 8 Then
        Speaker.Play(100, "Eight")
        Elseif numero = 9 Then
        Speaker.Play(100, "Nine")
        Elseif numero = 10 Then
        Speaker.Play(100, "Ten")
    EndIf

    Speaker.Wait()
EndFunction

Function GritarVoltaje()

    voltaje = EV3.BatteryVoltage
    GritarNumero(Math.Floor(voltaje))
    GritarNumero(Math.Floor(voltaje * 10) - Math.Floor(voltaje) * 10)
    GritarNumero(Math.Floor(voltaje * 100) - Math.Floor(voltaje * 10) * 10)

EndFunction

Function GritarSensores()
    Sensor.SetMode(2, 0)
    s[1] = Sensor.ReadPercent(1)
    s[2] = Sensor.ReadPercent(2)
    s[3] = Sensor.ReadPercent(3)
    s[4] = Sensor.ReadPercent(4)

    For i = 1 To 4
        If i = 2 Then
            continue
        EndIf

        Program.Delay(1000)
        GritarNumero(i)
        GritarNumero(Math.Floor(s[i] / 10))
        GritarNumero(Math.Floor(s[i]) - Math.Floor(s[i] / 10) * 10)
    EndFor

EndFunction

Function GritarSensor(in number sens)
    Sensor.SetMode(sens, 0)
    GritarNumero(sens)
    While "True"
        s = Sensor.ReadPercent(sens)

        Program.Delay(1000)
        GritarNumero(Math.Floor(s / 10))
        GritarNumero(Math.Floor(s) - Math.Floor(s / 10) * 10)
    EndWhile

EndFunction

