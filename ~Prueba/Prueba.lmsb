DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_VELOCIDAD1_1
DATAF VLV_VELOCIDAD2_1
DATAF VLV_GRADOS_1
DATAF VLV_VELOCIDAD_3
DATAF VLV_KP_3
DATAF VLV_KI_3
DATAF VLV_KD_3
DATAF VLV_READER_3
DATAF VLV_VELOCIDAD1_2
DATAF VLV_VELOCIDAD2_2
DATAF VLV_GRADOS_2
DATAF VLV_VELOCIDAD_4
DATAF VLV_DISTANCIA_4
DATAF VLV_VELOCIDAD_5
DATAF VLV_DISTANCIA_5
DATAF VLV_VELOCIDAD_6
DATAF VLV_TIMER_6
DATAF VLV_VELOCIDADA_7
DATAF VLV_VELOCIDADD_7
DATAF VLV_TIMER_7
DATAF VLV_VELOCIDAD_8
DATAF VLV_ENCODER_8
DATAF VLV_VELOCIDAD_9
DATAF VLV_TIMER_9
DATAF VLV_VELOCIDAD_10
DATAF VLV_ENCODER_10
DATAS VLV_I_1 252
DATAS VLV_D_1 252
DATAF VLV_G1_1
DATAF VLV_SIGNO_1
DATAF VLV_VMIN_1
DATAF VLV_VMAX_1
DATAF VLV_ENCODER_1
DATAS VLV_I_2 252
DATAS VLV_D_2 252
DATAF VLV_G1_2
DATAF VLV_SIGNO_2
DATAF VLV_VMIN_2
DATAF VLV_VMAX_2
DATAF VLV_ENCODER_2
DATAF VLV_NEGRO1_3
DATAF VLV_BLANCO1_3
DATAF VLV_NEGRO4_3
DATAF VLV_BLANCO4_3
DATAF VLV_NEGRO3_3
DATAF VLV_BLANCO3_3
DATAF VLV_LECTURA1_3
DATAF VLV_LECTURA3_3
DATAF VLV_LECTURA4_3
DATAS VLV_I_3 252
DATAS VLV_D_3 252
DATAF VLV_ERROR_3
DATAF VLV_OLDERROR_3
DATAF VLV_ERRSUM_3
DATAF VLV_U_3
DATAF VLV_SENTIDO_3
DATAF VLV_LECTURA_3
DATAF VLV_LECTURAIZQ_3
DATAF VLV_LECTURADCH_3
DATAF VLV_OLDERROR_4
DATAF VLV_ERRSUM_4
DATAF VLV_KP_4
DATAF VLV_KI_4
DATAF VLV_KD_4
DATAF VLV_ENC_4
DATAF VLV_START_B_4
DATAF VLV_START_C_4
DATAF VLV_ENCODER_C_4
DATAF VLV_ENCODER_B_4
DATAF VLV_ERROR_4
DATAF VLV_CORRECCION_4
DATAF VLV_OLDERROR_5
DATAF VLV_ERRSUM_5
DATAF VLV_KP_5
DATAF VLV_KI_5
DATAF VLV_KD_5
DATAF VLV_ENC_5
DATAF VLV_START_B_5
DATAF VLV_START_C_5
DATAF VLV_ENCODER_C_5
DATAF VLV_ENCODER_B_5
DATAF VLV_ERROR_5
DATAF VLV_CORRECCION_5
DATAF VLV_ENCDIFF_8
DATAF VLV_SIGNO_8
DATAF VLV_SAFETYTIMER_8
DATAF VLV_ENCDIFF_10
DATAF VLV_SIGNO_10
DATAF VLV_SAFETYTIMER_10
DATA32 RUNCOUNTER_F_MOLINO_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_VELOCIDAD1_1
    MOVEF_F 0.0 VLV_VELOCIDAD2_1
    MOVEF_F 0.0 VLV_GRADOS_1
    MOVEF_F 0.0 VLV_VELOCIDAD_3
    MOVEF_F 0.0 VLV_KP_3
    MOVEF_F 0.0 VLV_KI_3
    MOVEF_F 0.0 VLV_KD_3
    MOVEF_F 0.0 VLV_READER_3
    MOVEF_F 0.0 VLV_VELOCIDAD1_2
    MOVEF_F 0.0 VLV_VELOCIDAD2_2
    MOVEF_F 0.0 VLV_GRADOS_2
    MOVEF_F 0.0 VLV_VELOCIDAD_4
    MOVEF_F 0.0 VLV_DISTANCIA_4
    MOVEF_F 0.0 VLV_VELOCIDAD_5
    MOVEF_F 0.0 VLV_DISTANCIA_5
    MOVEF_F 0.0 VLV_VELOCIDAD_6
    MOVEF_F 0.0 VLV_TIMER_6
    MOVEF_F 0.0 VLV_VELOCIDADA_7
    MOVEF_F 0.0 VLV_VELOCIDADD_7
    MOVEF_F 0.0 VLV_TIMER_7
    MOVEF_F 0.0 VLV_VELOCIDAD_8
    MOVEF_F 0.0 VLV_ENCODER_8
    MOVEF_F 0.0 VLV_VELOCIDAD_9
    MOVEF_F 0.0 VLV_TIMER_9
    MOVEF_F 0.0 VLV_VELOCIDAD_10
    MOVEF_F 0.0 VLV_ENCODER_10
    STRINGS DUPLICATE '' VLV_I_1
    STRINGS DUPLICATE '' VLV_D_1
    MOVEF_F 0.0 VLV_G1_1
    MOVEF_F 0.0 VLV_SIGNO_1
    MOVEF_F 0.0 VLV_VMIN_1
    MOVEF_F 0.0 VLV_VMAX_1
    MOVEF_F 0.0 VLV_ENCODER_1
    STRINGS DUPLICATE '' VLV_I_2
    STRINGS DUPLICATE '' VLV_D_2
    MOVEF_F 0.0 VLV_G1_2
    MOVEF_F 0.0 VLV_SIGNO_2
    MOVEF_F 0.0 VLV_VMIN_2
    MOVEF_F 0.0 VLV_VMAX_2
    MOVEF_F 0.0 VLV_ENCODER_2
    MOVEF_F 0.0 VLV_NEGRO1_3
    MOVEF_F 0.0 VLV_BLANCO1_3
    MOVEF_F 0.0 VLV_NEGRO4_3
    MOVEF_F 0.0 VLV_BLANCO4_3
    MOVEF_F 0.0 VLV_NEGRO3_3
    MOVEF_F 0.0 VLV_BLANCO3_3
    MOVEF_F 0.0 VLV_LECTURA1_3
    MOVEF_F 0.0 VLV_LECTURA3_3
    MOVEF_F 0.0 VLV_LECTURA4_3
    STRINGS DUPLICATE '' VLV_I_3
    STRINGS DUPLICATE '' VLV_D_3
    MOVEF_F 0.0 VLV_ERROR_3
    MOVEF_F 0.0 VLV_OLDERROR_3
    MOVEF_F 0.0 VLV_ERRSUM_3
    MOVEF_F 0.0 VLV_U_3
    MOVEF_F 0.0 VLV_SENTIDO_3
    MOVEF_F 0.0 VLV_LECTURA_3
    MOVEF_F 0.0 VLV_LECTURAIZQ_3
    MOVEF_F 0.0 VLV_LECTURADCH_3
    MOVEF_F 0.0 VLV_OLDERROR_4
    MOVEF_F 0.0 VLV_ERRSUM_4
    MOVEF_F 0.0 VLV_KP_4
    MOVEF_F 0.0 VLV_KI_4
    MOVEF_F 0.0 VLV_KD_4
    MOVEF_F 0.0 VLV_ENC_4
    MOVEF_F 0.0 VLV_START_B_4
    MOVEF_F 0.0 VLV_START_C_4
    MOVEF_F 0.0 VLV_ENCODER_C_4
    MOVEF_F 0.0 VLV_ENCODER_B_4
    MOVEF_F 0.0 VLV_ERROR_4
    MOVEF_F 0.0 VLV_CORRECCION_4
    MOVEF_F 0.0 VLV_OLDERROR_5
    MOVEF_F 0.0 VLV_ERRSUM_5
    MOVEF_F 0.0 VLV_KP_5
    MOVEF_F 0.0 VLV_KI_5
    MOVEF_F 0.0 VLV_KD_5
    MOVEF_F 0.0 VLV_ENC_5
    MOVEF_F 0.0 VLV_START_B_5
    MOVEF_F 0.0 VLV_START_C_5
    MOVEF_F 0.0 VLV_ENCODER_C_5
    MOVEF_F 0.0 VLV_ENCODER_B_5
    MOVEF_F 0.0 VLV_ERROR_5
    MOVEF_F 0.0 VLV_CORRECCION_5
    MOVEF_F 0.0 VLV_ENCDIFF_8
    MOVEF_F 0.0 VLV_SIGNO_8
    MOVEF_F 0.0 VLV_SAFETYTIMER_8
    MOVEF_F 0.0 VLV_ENCDIFF_10
    MOVEF_F 0.0 VLV_SIGNO_10
    MOVEF_F 0.0 VLV_SAFETYTIMER_10
    MOVE32_32 0 RUNCOUNTER_F_MOLINO_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_MOLINO_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_MOLINO_0 0
    CALL GETANDINC32 RUNCOUNTER_F_MOLINO_0 -1 RUNCOUNTER_F_MOLINO_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_MOLINO_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch238
    WRITE32 ENDSUB_F_MOLINO_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOLINO_0
  dispatch238:
    MOVEF_F 0.0 VLV_VELOCIDAD1_1
    MOVEF_F 0.0 VLV_VELOCIDAD2_1
    MOVEF_F 0.0 VLV_GRADOS_1
    MOVEF_F 0.0 VLV_VELOCIDAD_3
    MOVEF_F 0.0 VLV_KP_3
    MOVEF_F 0.0 VLV_KI_3
    MOVEF_F 0.0 VLV_KD_3
    MOVEF_F 0.0 VLV_READER_3
    MOVEF_F 0.0 VLV_VELOCIDAD1_2
    MOVEF_F 0.0 VLV_VELOCIDAD2_2
    MOVEF_F 0.0 VLV_GRADOS_2
    MOVEF_F 0.0 VLV_VELOCIDAD_4
    MOVEF_F 0.0 VLV_DISTANCIA_4
    MOVEF_F 0.0 VLV_VELOCIDAD_5
    MOVEF_F 0.0 VLV_DISTANCIA_5
    MOVEF_F 0.0 VLV_VELOCIDAD_6
    MOVEF_F 0.0 VLV_TIMER_6
    MOVEF_F 0.0 VLV_VELOCIDADA_7
    MOVEF_F 0.0 VLV_VELOCIDADD_7
    MOVEF_F 0.0 VLV_TIMER_7
    MOVEF_F 0.0 VLV_VELOCIDAD_8
    MOVEF_F 0.0 VLV_ENCODER_8
    MOVEF_F 0.0 VLV_VELOCIDAD_9
    MOVEF_F 0.0 VLV_TIMER_9
    MOVEF_F 0.0 VLV_VELOCIDAD_10
    MOVEF_F 0.0 VLV_ENCODER_10
    DATA32 tmp0
    CALL GETANDINC32 RUNCOUNTER_F_MOLINO_0 1  RUNCOUNTER_F_MOLINO_0 tmp0
    JR_NEQ32 0 tmp0 alreadylaunched0
    OBJECT_START TF_MOLINO_0
  alreadylaunched0:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB1 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB1:
ENDTHREAD:
    RETURN
SUB_F_MAIN_0:
    WRITE32 ENDSUB_F_SETUP_0:CALLSUB2 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SETUP_0
CALLSUB2:
    MOVEF_F 30.0 VLV_VELOCIDAD1_1
    MOVEF_F 6.5 VLV_VELOCIDAD2_1
    MOVEF_F 90.0 VLV_GRADOS_1
    WRITE32 ENDSUB_M_GIRO_GRADOSF_3:CALLSUB3 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_GIRO_GRADOSF_3
CALLSUB3:
    MOVEF_F 30.0 VLV_VELOCIDAD_3
    MOVEF_F 0.1 VLV_KP_3
    MOVEF_F 0.0002 VLV_KI_3
    MOVEF_F 3.0 VLV_KD_3
    MOVEF_F 3.0 VLV_READER_3
    WRITE32 ENDSUB_M_SIGUELINEAS_CRUCE_EXTERNO_5:CALLSUB4 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_SIGUELINEAS_CRUCE_EXTERNO_5
CALLSUB4:
    MOVEF_F -20.0 VLV_VELOCIDAD1_2
    MOVEF_F 30.0 VLV_VELOCIDAD2_2
    MOVEF_F 85.0 VLV_GRADOS_2
    WRITE32 ENDSUB_M_GIRO_GRADOS_3:CALLSUB5 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_GIRO_GRADOS_3
CALLSUB5:
    MOVEF_F 45.0 VLV_VELOCIDAD_4
    MOVEF_F 60.0 VLV_DISTANCIA_4
    WRITE32 ENDSUB_M_RECTO_ENCODERF_2:CALLSUB6 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_RECTO_ENCODERF_2
CALLSUB6:
    MOVEF_F 30.0 VLV_VELOCIDAD1_2
    MOVEF_F -30.0 VLV_VELOCIDAD2_2
    MOVEF_F 92.0 VLV_GRADOS_2
    WRITE32 ENDSUB_M_GIRO_GRADOS_3:CALLSUB7 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_GIRO_GRADOS_3
CALLSUB7:
    MOVEF_F 30.0 VLV_VELOCIDAD_5
    MOVEF_F 45.0 VLV_DISTANCIA_5
    WRITE32 ENDSUB_M_RECTO_ENCODER_2:CALLSUB8 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_RECTO_ENCODER_2
CALLSUB8:
    MOVEF_F 30.0 VLV_VELOCIDAD1_2
    MOVEF_F -30.0 VLV_VELOCIDAD2_2
    MOVEF_F 40.0 VLV_GRADOS_2
    WRITE32 ENDSUB_M_GIRO_GRADOS_3:CALLSUB9 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_GIRO_GRADOS_3
CALLSUB9:
    MOVEF_F -30.0 VLV_VELOCIDAD1_2
    MOVEF_F 30.0 VLV_VELOCIDAD2_2
    MOVEF_F 80.0 VLV_GRADOS_2
    WRITE32 ENDSUB_M_GIRO_GRADOS_3:CALLSUB10 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_GIRO_GRADOS_3
CALLSUB10:
    MOVEF_F 30.0 VLV_VELOCIDAD1_2
    MOVEF_F -30.0 VLV_VELOCIDAD2_2
    MOVEF_F 120.0 VLV_GRADOS_2
    WRITE32 ENDSUB_M_GIRO_GRADOS_3:CALLSUB11 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_GIRO_GRADOS_3
CALLSUB11:
    MOVEF_F -30.0 VLV_VELOCIDAD1_2
    MOVEF_F 30.0 VLV_VELOCIDAD2_2
    MOVEF_F 80.0 VLV_GRADOS_2
    WRITE32 ENDSUB_M_GIRO_GRADOS_3:CALLSUB12 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_GIRO_GRADOS_3
CALLSUB12:
    MOVEF_F 30.0 VLV_VELOCIDAD1_2
    MOVEF_F -30.0 VLV_VELOCIDAD2_2
    MOVEF_F 20.0 VLV_GRADOS_2
    WRITE32 ENDSUB_M_GIRO_GRADOS_3:CALLSUB13 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_GIRO_GRADOS_3
CALLSUB13:
    MOVEF_F -30.0 VLV_VELOCIDAD1_2
    MOVEF_F 30.0 VLV_VELOCIDAD2_2
    MOVEF_F 20.0 VLV_GRADOS_2
    WRITE32 ENDSUB_M_GIRO_GRADOS_3:CALLSUB14 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_GIRO_GRADOS_3
CALLSUB14:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_MOLINO_0:
    MOVEF_F 50.0 VLV_VELOCIDAD_6
    MOVEF_F 100000.0 VLV_TIMER_6
    WRITE32 ENDSUB_M_BRAZO_ATIMER_2:CALLSUB15 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_ATIMER_2
CALLSUB15:
RETSUB_F_MOLINO_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOLINO_0:
SUB_F_SETUP_0:
    DATA8 layer16
	DATA8 no16
	DATA8 mode816
	
	MOVEF_8 1.0 no16
	SUB8 no16 1 no16
	DIV8 no16 4 layer16
	MATH MOD8 no16 4 no16

	MOVEF_8 0.0 mode816
	
	INPUT_DEVICE READY_RAW layer16 no16 0 mode816 0
    DATA8 layer17
	DATA8 no17
	DATA8 mode817
	
	MOVEF_8 2.0 no17
	SUB8 no17 1 no17
	DIV8 no17 4 layer17
	MATH MOD8 no17 4 no17

	MOVEF_8 3.0 mode817
	
	INPUT_DEVICE READY_RAW layer17 no17 0 mode817 0
    DATA8 layer18
	DATA8 no18
	DATA8 mode818
	
	MOVEF_8 3.0 no18
	SUB8 no18 1 no18
	DIV8 no18 4 layer18
	MATH MOD8 no18 4 no18

	MOVEF_8 0.0 mode818
	
	INPUT_DEVICE READY_RAW layer18 no18 0 mode818 0
    DATA8 layer19
	DATA8 no19
	DATA8 mode819
	
	MOVEF_8 4.0 no19
	SUB8 no19 1 no19
	DIV8 no19 4 layer19
	MATH MOD8 no19 4 no19

	MOVEF_8 0.0 mode819
	
	INPUT_DEVICE READY_RAW layer19 no19 0 mode819 0
RETSUB_F_SETUP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SETUP_0:
SUB_M_GIRO_GRADOSF_3:
    STRINGS DUPLICATE 'B' VLV_I_1
    STRINGS DUPLICATE 'C' VLV_D_1
    MOVEF_F 2.875 VLV_G1_1
    DATAF tmpf20
    DATA8 flag20
    DIVF VLV_VELOCIDAD1_1 VLV_VELOCIDAD2_1 tmpf20
    CP_EQF 0.0 VLV_VELOCIDAD2_1 flag20
    SELECTF flag20 0.0 tmpf20 F.0

    DATAF tmpf21
    DATA8 flag21
    DIVF VLV_VELOCIDAD1_1 VLV_VELOCIDAD2_1 tmpf21
    CP_EQF 0.0 VLV_VELOCIDAD2_1 flag21
    SELECTF flag21 0.0 tmpf21 F.2

    MATH ABS F.2 F.1
    DATAF tmpf23
    DATA8 flag23
    DIVF F.0 F.1 tmpf23
    CP_EQF 0.0 F.1 flag23
    SELECTF flag23 0.0 tmpf23 VLV_SIGNO_1

    MATH ABS VLV_VELOCIDAD1_1 F.0
    MATH ABS VLV_VELOCIDAD2_1 F.1
    DATA8 flag26
	CP_LTF F.0 F.1 flag26
	SELECTF flag26 F.0 F.1 VLV_VMIN_1
    MATH ABS VLV_VELOCIDAD1_1 F.0
    MATH ABS VLV_VELOCIDAD2_1 F.1
    DATA8 flag29
	CP_GTF F.0 F.1 flag29
	SELECTF flag29 F.0 F.1 VLV_VMAX_1
    MULF VLV_GRADOS_1 VLV_G1_1 F.0
    MULF VLV_SIGNO_1 VLV_VMIN_1 F.4
    DATAF tmpf32
    DATA8 flag32
    DIVF F.4 VLV_VMAX_1 tmpf32
    CP_EQF 0.0 VLV_VMAX_1 flag32
    SELECTF flag32 0.0 tmpf32 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf34
    DATA8 flag34
    DIVF -2.0 F.2 tmpf34
    CP_EQF 0.0 F.2 flag34
    SELECTF flag34 0.0 tmpf34 F.1

    MULF F.0 F.1 VLV_ENCODER_1
    DATA32 milliseconds36
	MOVEF_32 100.0 milliseconds36
	DATA32 timer36
	TIMER_WAIT milliseconds36 timer36
	TIMER_READY timer36
    CALL TEXT.APPEND VLV_I_1 VLV_D_1 S.0
    MATH NEGATE VLV_VELOCIDAD1_1 F.0
    CALL MOTOR.SCHEDULESYNC S.0 F.0 VLV_VELOCIDAD2_1 VLV_ENCODER_1 'False'

	DATA8 layer39
	DATA8 nos39
	DATA8 busy39
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer39 nos39
	JR_EQ8 0 nos39 motornotbusy39
  motorwaiting39:
	OUTPUT_TEST layer39 nos39 busy39
	JR_EQ8 busy39 0 motornotbusy39
	SLEEP
	JR motorwaiting39
  motornotbusy39:
    MOVEF_F 0.0 VLV_VELOCIDAD1_1
    MOVEF_F 0.0 VLV_VELOCIDAD2_1
    MOVEF_F 0.0 VLV_GRADOS_1
    DATA32 milliseconds40
	MOVEF_32 100.0 milliseconds40
	DATA32 timer40
	TIMER_WAIT milliseconds40 timer40
	TIMER_READY timer40
RETSUB_M_GIRO_GRADOSF_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_GIRO_GRADOSF_3:
SUB_M_GIRO_GRADOS_3:
    STRINGS DUPLICATE 'B' VLV_I_2
    STRINGS DUPLICATE 'C' VLV_D_2
    MOVEF_F 2.875 VLV_G1_2
    DATAF tmpf41
    DATA8 flag41
    DIVF VLV_VELOCIDAD1_2 VLV_VELOCIDAD2_2 tmpf41
    CP_EQF 0.0 VLV_VELOCIDAD2_2 flag41
    SELECTF flag41 0.0 tmpf41 F.0

    DATAF tmpf42
    DATA8 flag42
    DIVF VLV_VELOCIDAD1_2 VLV_VELOCIDAD2_2 tmpf42
    CP_EQF 0.0 VLV_VELOCIDAD2_2 flag42
    SELECTF flag42 0.0 tmpf42 F.2

    MATH ABS F.2 F.1
    DATAF tmpf44
    DATA8 flag44
    DIVF F.0 F.1 tmpf44
    CP_EQF 0.0 F.1 flag44
    SELECTF flag44 0.0 tmpf44 VLV_SIGNO_2

    MATH ABS VLV_VELOCIDAD1_2 F.0
    MATH ABS VLV_VELOCIDAD2_2 F.1
    DATA8 flag47
	CP_LTF F.0 F.1 flag47
	SELECTF flag47 F.0 F.1 VLV_VMIN_2
    MATH ABS VLV_VELOCIDAD1_2 F.0
    MATH ABS VLV_VELOCIDAD2_2 F.1
    DATA8 flag50
	CP_GTF F.0 F.1 flag50
	SELECTF flag50 F.0 F.1 VLV_VMAX_2
    MULF VLV_GRADOS_2 VLV_G1_2 F.0
    MULF VLV_SIGNO_2 VLV_VMIN_2 F.4
    DATAF tmpf53
    DATA8 flag53
    DIVF F.4 VLV_VMAX_2 tmpf53
    CP_EQF 0.0 VLV_VMAX_2 flag53
    SELECTF flag53 0.0 tmpf53 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf55
    DATA8 flag55
    DIVF -2.0 F.2 tmpf55
    CP_EQF 0.0 F.2 flag55
    SELECTF flag55 0.0 tmpf55 F.1

    MULF F.0 F.1 VLV_ENCODER_2
    DATA32 milliseconds57
	MOVEF_32 100.0 milliseconds57
	DATA32 timer57
	TIMER_WAIT milliseconds57 timer57
	TIMER_READY timer57
    CALL TEXT.APPEND VLV_I_2 VLV_D_2 S.0
    MATH NEGATE VLV_VELOCIDAD1_2 F.0
    CALL MOTOR.SCHEDULESYNC S.0 F.0 VLV_VELOCIDAD2_2 VLV_ENCODER_2 'True'

	DATA8 layer60
	DATA8 nos60
	DATA8 busy60
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer60 nos60
	JR_EQ8 0 nos60 motornotbusy60
  motorwaiting60:
	OUTPUT_TEST layer60 nos60 busy60
	JR_EQ8 busy60 0 motornotbusy60
	SLEEP
	JR motorwaiting60
  motornotbusy60:
    MOVEF_F 0.0 VLV_VELOCIDAD1_2
    MOVEF_F 0.0 VLV_VELOCIDAD2_2
    MOVEF_F 0.0 VLV_GRADOS_2
    DATA32 milliseconds61
	MOVEF_32 100.0 milliseconds61
	DATA32 timer61
	TIMER_WAIT milliseconds61 timer61
	TIMER_READY timer61
RETSUB_M_GIRO_GRADOS_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_GIRO_GRADOS_3:
SUB_M_SIGUELINEAS_CRUCE_EXTERNO_5:
    MULF VLV_VELOCIDAD_3 1.0 VLV_VELOCIDAD_3
    MOVEF_F 0.0 VLV_NEGRO1_3
    MOVEF_F 99.0 VLV_BLANCO1_3
    MOVEF_F 2.0 VLV_NEGRO4_3
    MOVEF_F 114.0 VLV_BLANCO4_3
    MOVEF_F 0.0 VLV_NEGRO3_3
    MOVEF_F 114.0 VLV_BLANCO3_3
    MOVEF_F 50.0 VLV_LECTURA1_3
    MOVEF_F 50.0 VLV_LECTURA3_3
    MOVEF_F 50.0 VLV_LECTURA4_3
    STRINGS DUPLICATE 'B' VLV_I_3
    STRINGS DUPLICATE 'C' VLV_D_3
    MOVEF_F 0.0 VLV_ERROR_3
    MOVEF_F 0.0 VLV_OLDERROR_3
    MOVEF_F 0.0 VLV_ERRSUM_3
    MOVEF_F 0.0 VLV_U_3
    MATH ABS VLV_VELOCIDAD_3 F.0
    DATAF tmpf64
    DATA8 flag64
    DIVF VLV_VELOCIDAD_3 F.0 tmpf64
    CP_EQF 0.0 F.0 flag64
    SELECTF flag64 0.0 tmpf64 VLV_SENTIDO_3

    MOVEF_F 50.0 VLV_LECTURA_3
  while65:
    JR_LTEQF VLV_LECTURA_3 10.0 endwhile65
  whilebody65:
    JR_NEQF VLV_READER_3 3.0 else66_1
    MOVEF_F VLV_LECTURA3_3 VLV_LECTURA_3
    MOVEF_F VLV_LECTURA1_3 VLV_LECTURAIZQ_3
    MOVEF_F VLV_LECTURA4_3 VLV_LECTURADCH_3
    JR endif66
  else66_1:
    MOVEF_F VLV_LECTURA4_3 VLV_LECTURA_3
    MOVEF_F VLV_LECTURA3_3 VLV_LECTURAIZQ_3
    MOVEF_F VLV_LECTURA1_3 VLV_LECTURADCH_3
  else66_2:
  endif66:
    CALL SENSOR.READPERCENT 1.0 F.2
    SUBF F.2 VLV_NEGRO1_3 F.1
    DATAF tmpf69
    DATA8 flag69
    DIVF F.1 VLV_BLANCO1_3 tmpf69
    CP_EQF 0.0 VLV_BLANCO1_3 flag69
    SELECTF flag69 0.0 tmpf69 F.0

    SUBF 100.0 VLV_NEGRO1_3 F.1
    MULF F.0 F.1 VLV_LECTURA1_3
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VLV_NEGRO3_3 F.1
    DATAF tmpf74
    DATA8 flag74
    DIVF F.1 VLV_BLANCO3_3 tmpf74
    CP_EQF 0.0 VLV_BLANCO3_3 flag74
    SELECTF flag74 0.0 tmpf74 F.0

    SUBF 100.0 VLV_NEGRO3_3 F.1
    MULF F.0 F.1 VLV_LECTURA3_3
    CALL SENSOR.READPERCENT 4.0 F.2
    SUBF F.2 VLV_NEGRO4_3 F.1
    DATAF tmpf79
    DATA8 flag79
    DIVF F.1 VLV_BLANCO4_3 tmpf79
    CP_EQF 0.0 VLV_BLANCO4_3 flag79
    SELECTF flag79 0.0 tmpf79 F.0

    SUBF 100.0 VLV_NEGRO4_3 F.1
    MULF F.0 F.1 VLV_LECTURA4_3
    SUBF VLV_LECTURAIZQ_3 VLV_LECTURADCH_3 F.1
    MULF F.1 VLV_SENTIDO_3 F.0
    MULF F.0 1.0 VLV_ERROR_3
    ADDF VLV_ERRSUM_3 VLV_ERROR_3 VLV_ERRSUM_3
    MULF VLV_ERROR_3 VLV_KP_3 F.1
    SUBF VLV_ERROR_3 VLV_OLDERROR_3 F.3
    MULF F.3 VLV_KD_3 F.2
    ADDF F.1 F.2 F.0
    MULF VLV_ERRSUM_3 VLV_KI_3 F.1
    ADDF F.0 F.1 VLV_U_3
    CALL TEXT.APPEND VLV_I_3 VLV_D_3 S.0
    ADDF VLV_VELOCIDAD_3 VLV_U_3 F.1
    MATH NEGATE F.1 F.0
    SUBF VLV_VELOCIDAD_3 VLV_U_3 F.1
    CALL MOTOR.STARTSYNC S.0 F.0 F.1
    MOVEF_F VLV_ERROR_3 VLV_OLDERROR_3
    JR_GTF VLV_LECTURA_3 10.0 whilebody65
  endwhile65:
    CALL TEXT.APPEND VLV_I_3 VLV_D_3 S.0
    CALL MOTOR.STOP S.0 'True'
RETSUB_M_SIGUELINEAS_CRUCE_EXTERNO_5:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_SIGUELINEAS_CRUCE_EXTERNO_5:
SUB_M_RECTO_ENCODERF_2:
    MULF VLV_VELOCIDAD_4 1.0 VLV_VELOCIDAD_4
    MOVEF_F 0.0 VLV_OLDERROR_4
    MOVEF_F 0.0 VLV_ERRSUM_4
    MOVEF_F 1.5 VLV_KP_4
    MOVEF_F 0.0001 VLV_KI_4
    MOVEF_F 1.0 VLV_KD_4
    MULF VLV_DISTANCIA_4 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf102
    DATA8 flag102
    DIVF F.1 F.2 tmpf102
    CP_EQF 0.0 F.2 flag102
    SELECTF flag102 0.0 tmpf102 F.0

    DATAF tmpf103
    DATA8 flag103
    DIVF F.0 6.24 tmpf103
    CP_EQF 0.0 6.24 flag103
    SELECTF flag103 0.0 tmpf103 VLV_ENC_4

    CALL MOTOR.GETCOUNT 'B' F.0
    MULF F.0 -1.0 VLV_START_B_4
    CALL MOTOR.GETCOUNT 'C' VLV_START_C_4
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_4 VLV_ENCODER_C_4
  while109:
    MATH ABS VLV_ENCODER_C_4 F.0
    JR_GTEQF F.0 VLV_ENC_4 endwhile109
  whilebody109:
    CALL MOTOR.GETCOUNT 'B' F.1
    MULF F.1 -1.0 F.0
    SUBF F.0 VLV_START_B_4 VLV_ENCODER_B_4
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_4 VLV_ENCODER_C_4
    SUBF VLV_ENCODER_B_4 VLV_ENCODER_C_4 F.0
    MULF F.0 1.0 VLV_ERROR_4
    ADDF VLV_ERRSUM_4 VLV_ERROR_4 VLV_ERRSUM_4
    MULF VLV_ERROR_4 VLV_KP_4 F.1
    MULF VLV_ERRSUM_4 VLV_KI_4 F.2
    ADDF F.1 F.2 F.0
    SUBF VLV_ERROR_4 VLV_OLDERROR_4 F.2
    MULF F.2 VLV_KD_4 F.1
    ADDF F.0 F.1 VLV_CORRECCION_4
    SUBF VLV_VELOCIDAD_4 VLV_CORRECCION_4 F.1
    MATH NEGATE F.1 F.0
    ADDF VLV_VELOCIDAD_4 VLV_CORRECCION_4 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    MOVEF_F VLV_ERROR_4 VLV_OLDERROR_4
    MATH ABS VLV_ENCODER_C_4 F.0
    JR_LTF F.0 VLV_ENC_4 whilebody109
  endwhile109:
    CALL MOTOR.STOP 'BC' 'True'
RETSUB_M_RECTO_ENCODERF_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_RECTO_ENCODERF_2:
SUB_M_RECTO_ENCODER_2:
    MULF VLV_VELOCIDAD_5 1.0 VLV_VELOCIDAD_5
    MOVEF_F 0.0 VLV_OLDERROR_5
    MOVEF_F 0.0 VLV_ERRSUM_5
    MOVEF_F 0.0 VLV_KP_5
    MOVEF_F 0.0 VLV_KI_5
    MOVEF_F 0.0 VLV_KD_5
    MULF VLV_DISTANCIA_5 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf134
    DATA8 flag134
    DIVF F.1 F.2 tmpf134
    CP_EQF 0.0 F.2 flag134
    SELECTF flag134 0.0 tmpf134 F.0

    DATAF tmpf135
    DATA8 flag135
    DIVF F.0 6.24 tmpf135
    CP_EQF 0.0 6.24 flag135
    SELECTF flag135 0.0 tmpf135 VLV_ENC_5

    CALL MOTOR.GETCOUNT 'B' F.0
    MULF F.0 -1.0 VLV_START_B_5
    CALL MOTOR.GETCOUNT 'C' VLV_START_C_5
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_5 VLV_ENCODER_C_5
  while141:
    MATH ABS VLV_ENCODER_C_5 F.0
    JR_GTEQF F.0 VLV_ENC_5 endwhile141
  whilebody141:
    CALL MOTOR.GETCOUNT 'B' F.1
    MULF F.1 -0.99 F.0
    SUBF F.0 VLV_START_B_5 VLV_ENCODER_B_5
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_5 VLV_ENCODER_C_5
    SUBF VLV_ENCODER_B_5 VLV_ENCODER_C_5 F.0
    MULF F.0 1.0 VLV_ERROR_5
    ADDF VLV_ERRSUM_5 VLV_ERROR_5 VLV_ERRSUM_5
    MULF VLV_ERROR_5 VLV_KP_5 F.1
    MULF VLV_ERRSUM_5 VLV_KI_5 F.2
    ADDF F.1 F.2 F.0
    SUBF VLV_ERROR_5 VLV_OLDERROR_5 F.2
    MULF F.2 VLV_KD_5 F.1
    ADDF F.0 F.1 VLV_CORRECCION_5
    SUBF VLV_VELOCIDAD_5 VLV_CORRECCION_5 F.1
    MATH NEGATE F.1 F.0
    ADDF VLV_VELOCIDAD_5 VLV_CORRECCION_5 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    MOVEF_F VLV_ERROR_5 VLV_OLDERROR_5
    MATH ABS VLV_ENCODER_C_5 F.0
    JR_LTF F.0 VLV_ENC_5 whilebody141
  endwhile141:
    CALL MOTOR.STOP 'BC' 'True'
RETSUB_M_RECTO_ENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_RECTO_ENCODER_2:
SUB_M_BRAZO_ATIMER_2:
    TIMER_READ timeMC1
  while164:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 VLV_TIMER_6 endwhile164
  whilebody164:
    MOVEF_8 VLV_VELOCIDAD_6 setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 VLV_TIMER_6 whilebody164
  endwhile164:
    CALL MOTOR.STOP 'A' 'True'
RETSUB_M_BRAZO_ATIMER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_ATIMER_2:
SUB_M_BRAZO_ADTIMER_3:
    TIMER_READ timeMC1
  while170:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 VLV_TIMER_7 endwhile170
  whilebody170:
    MOVEF_8 VLV_VELOCIDADA_7 setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    MOVEF_8 VLV_VELOCIDADD_7 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 VLV_TIMER_7 whilebody170
  endwhile170:
    CALL MOTOR.STOP 'AD' 'True'
RETSUB_M_BRAZO_ADTIMER_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_ADTIMER_3:
SUB_M_BRAZO_AENCODER_2:
    CALL MOTOR.GETCOUNT 'A' F.0
    SUBF VLV_ENCODER_8 F.0 VLV_ENCDIFF_8
    MATH ABS VLV_ENCDIFF_8 F.0
    DATAF tmpf179
    DATA8 flag179
    DIVF VLV_ENCDIFF_8 F.0 tmpf179
    CP_EQF 0.0 F.0 flag179
    SELECTF flag179 0.0 tmpf179 VLV_SIGNO_8

    MATH ABS VLV_ENCDIFF_8 F.4
    DATAF tmpf181
    DATA8 flag181
    DIVF F.4 100.0 tmpf181
    CP_EQF 0.0 100.0 flag181
    SELECTF flag181 0.0 tmpf181 F.3

    DATAF tmpf182
    DATA8 flag182
    DIVF VLV_VELOCIDAD_8 20.0 tmpf182
    CP_EQF 0.0 20.0 flag182
    SELECTF flag182 0.0 tmpf182 F.4

    DATAF tmpf183
    DATA8 flag183
    DIVF F.3 F.4 tmpf183
    CP_EQF 0.0 F.4 flag183
    SELECTF flag183 0.0 tmpf183 F.2

    MULF F.2 650.0 F.1
    MULF F.1 2.0 F.0
    DATA8 flag186
	CP_GTF F.0 400.0 flag186
	SELECTF flag186 F.0 400.0 VLV_SAFETYTIMER_8
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_8 0.0 else188_1
  while189:
    CALL MOTOR.GETCOUNT 'A' F.2
    SUBF F.2 VLV_ENCODER_8 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 25.0 endwhile189
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 2000.0 endwhile189
  whilebody189:
    MULF VLV_SIGNO_8 VLV_VELOCIDAD_8 F.0
    MOVEF_8 F.0 setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    CALL MOTOR.GETCOUNT 'A' F.2
    SUBF F.2 VLV_ENCODER_8 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 25.0 and196
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 2000.0 whilebody189
  and196:
  endwhile189:
    CALL MOTOR.STOP 'A' 'True'
  else188_1:
  endif188:
RETSUB_M_BRAZO_AENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_AENCODER_2:
SUB_M_BRAZO_DTIMER_2:
    TIMER_READ timeMC1
  while203:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 VLV_TIMER_9 endwhile203
  whilebody203:
    MOVEF_8 VLV_VELOCIDAD_9 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 VLV_TIMER_9 whilebody203
  endwhile203:
    OUTPUT_POWER 0 8 0
	OUTPUT_STOP 0 8 1
RETSUB_M_BRAZO_DTIMER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_DTIMER_2:
SUB_M_BRAZO_DENCODER_2:
    CALL MOTOR.GETCOUNT 'D' F.0
    SUBF VLV_ENCODER_10 F.0 VLV_ENCDIFF_10
    MATH ABS VLV_ENCDIFF_10 F.0
    DATAF tmpf211
    DATA8 flag211
    DIVF VLV_ENCDIFF_10 F.0 tmpf211
    CP_EQF 0.0 F.0 flag211
    SELECTF flag211 0.0 tmpf211 VLV_SIGNO_10

    MATH ABS VLV_ENCDIFF_10 F.4
    DATAF tmpf213
    DATA8 flag213
    DIVF F.4 100.0 tmpf213
    CP_EQF 0.0 100.0 flag213
    SELECTF flag213 0.0 tmpf213 F.3

    DATAF tmpf214
    DATA8 flag214
    DIVF VLV_VELOCIDAD_10 20.0 tmpf214
    CP_EQF 0.0 20.0 flag214
    SELECTF flag214 0.0 tmpf214 F.4

    DATAF tmpf215
    DATA8 flag215
    DIVF F.3 F.4 tmpf215
    CP_EQF 0.0 F.4 flag215
    SELECTF flag215 0.0 tmpf215 F.2

    MULF F.2 650.0 F.1
    MULF F.1 2.0 F.0
    DATA8 flag218
	CP_GTF F.0 400.0 flag218
	SELECTF flag218 F.0 400.0 VLV_SAFETYTIMER_10
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_10 0.0 else220_1
  while221:
    CALL MOTOR.GETCOUNT 'D' F.2
    SUBF F.2 VLV_ENCODER_10 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 endwhile221
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 VLV_SAFETYTIMER_10 endwhile221
  whilebody221:
    MULF VLV_SIGNO_10 VLV_VELOCIDAD_10 F.0
    MOVEF_8 F.0 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VLV_SAFETYTIMER_10 '%g' 99 S.1
    CALL TEXT.APPEND 'SafetyTimer: ' S.1 S.0
    CALL LCD.WRITE 5.0 30.0 S.0
    CALL MOTOR.GETCOUNT 'D' F.2
    SUBF F.2 VLV_ENCODER_10 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 and232
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 VLV_SAFETYTIMER_10 whilebody221
  and232:
  endwhile221:
    CALL MOTOR.STOP 'D' 'True'
  else220_1:
  endif220:
RETSUB_M_BRAZO_DENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_DENCODER_2:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
