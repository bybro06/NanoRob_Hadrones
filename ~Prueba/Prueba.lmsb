DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_VELOCIDAD_2
DATAF VLV_ENCODER_2
DATAF VLV_VELOCIDAD_1
DATAF VLV_ENCODER_1
DATAF VLV_VELOCIDAD_3
DATAF VLV_ENCODER_3
DATAF VLV_VELOCIDAD_6
DATAF VLV_DISTANCIA_6
DATAF VLV_VELOCIDAD_4
DATAF VLV_TIMER_4
DATAF VLV_VELOCIDAD_5
DATAF VLV_ENCODER_5
DATAF VGV_ENCODERA
DATAF VGV_ENCODERD
DATAF VGV_ERRORA
DATAF VGV_OLDERRORA
DATAF VGV_ERRORD
DATAF VGV_OLDERRORD
DATAF VGV_CORRECCIONA
DATAF VGV_CORRECCIOND
DATAF VLV_ENCDIFF_1
DATAF VLV_SIGNO_1
DATAF VLV_SAFETYTIMER_1
DATAF VLV_ENCDIFF_2
DATAF VLV_SIGNO_2
DATAF VLV_SAFETYTIMER_2
DATAF VLV_ENCDIFF_3
DATAF VLV_SIGNO_3
DATAF VLV_SAFETYTIMER_3
DATAF VLV_ENCDIFF_5
DATAF VLV_SIGNO_5
DATAF VLV_SAFETYTIMER_5
DATAF VLV_CORRECCION_6
DATAF VLV_ENC_6
DATA32 RUNCOUNTER_F_CONTROLBRAZO_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_VELOCIDAD_2
    MOVEF_F 0.0 VLV_ENCODER_2
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_ENCODER_1
    MOVEF_F 0.0 VLV_VELOCIDAD_3
    MOVEF_F 0.0 VLV_ENCODER_3
    MOVEF_F 0.0 VLV_VELOCIDAD_6
    MOVEF_F 0.0 VLV_DISTANCIA_6
    MOVEF_F 0.0 VLV_VELOCIDAD_4
    MOVEF_F 0.0 VLV_TIMER_4
    MOVEF_F 0.0 VLV_VELOCIDAD_5
    MOVEF_F 0.0 VLV_ENCODER_5
    MOVEF_F 0.0 VGV_ENCODERA
    MOVEF_F 0.0 VGV_ENCODERD
    MOVEF_F 0.0 VGV_ERRORA
    MOVEF_F 0.0 VGV_OLDERRORA
    MOVEF_F 0.0 VGV_ERRORD
    MOVEF_F 0.0 VGV_OLDERRORD
    MOVEF_F 0.0 VGV_CORRECCIONA
    MOVEF_F 0.0 VGV_CORRECCIOND
    MOVEF_F 0.0 VLV_ENCDIFF_1
    MOVEF_F 0.0 VLV_SIGNO_1
    MOVEF_F 0.0 VLV_SAFETYTIMER_1
    MOVEF_F 0.0 VLV_ENCDIFF_2
    MOVEF_F 0.0 VLV_SIGNO_2
    MOVEF_F 0.0 VLV_SAFETYTIMER_2
    MOVEF_F 0.0 VLV_ENCDIFF_3
    MOVEF_F 0.0 VLV_SIGNO_3
    MOVEF_F 0.0 VLV_SAFETYTIMER_3
    MOVEF_F 0.0 VLV_ENCDIFF_5
    MOVEF_F 0.0 VLV_SIGNO_5
    MOVEF_F 0.0 VLV_SAFETYTIMER_5
    MOVEF_F 0.0 VLV_CORRECCION_6
    MOVEF_F 0.0 VLV_ENC_6
    MOVE32_32 0 RUNCOUNTER_F_CONTROLBRAZO_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_CONTROLBRAZO_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_CONTROLBRAZO_0 0
    CALL GETANDINC32 RUNCOUNTER_F_CONTROLBRAZO_0 -1 RUNCOUNTER_F_CONTROLBRAZO_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_CONTROLBRAZO_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch152
    WRITE32 ENDSUB_F_CONTROLBRAZO_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_CONTROLBRAZO_0
  dispatch152:
    MOVEF_F 0.0 VLV_VELOCIDAD_2
    MOVEF_F 0.0 VLV_ENCODER_2
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_ENCODER_1
    MOVEF_F 0.0 VLV_VELOCIDAD_3
    MOVEF_F 0.0 VLV_ENCODER_3
    MOVEF_F 0.0 VLV_VELOCIDAD_6
    MOVEF_F 0.0 VLV_DISTANCIA_6
    MOVEF_F 0.0 VLV_VELOCIDAD_4
    MOVEF_F 0.0 VLV_TIMER_4
    MOVEF_F 0.0 VLV_VELOCIDAD_5
    MOVEF_F 0.0 VLV_ENCODER_5
    MOVEF_F 0.0 VGV_ENCODERA
    MOVEF_F 0.0 VGV_ENCODERD
    MOVEF_F 0.0 VGV_ERRORA
    MOVEF_F 0.0 VGV_OLDERRORA
    MOVEF_F 0.0 VGV_ERRORD
    MOVEF_F 0.0 VGV_OLDERRORD
    MOVEF_F 0.0 VGV_ENCODERA
    MOVEF_F 0.0 VGV_ENCODERD
    MOVEF_F 0.0 VGV_ERRORA
    MOVEF_F 0.0 VGV_OLDERRORA
    MOVEF_F 0.0 VGV_ERRORD
    MOVEF_F 0.0 VGV_OLDERRORD
    WRITE32 ENDSUB_F_SETUP_0:CALLSUB0 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SETUP_0
CALLSUB0:
    DATA32 tmp1
    CALL GETANDINC32 RUNCOUNTER_F_CONTROLBRAZO_0 1  RUNCOUNTER_F_CONTROLBRAZO_0 tmp1
    JR_NEQ32 0 tmp1 alreadylaunched1
    OBJECT_START TF_CONTROLBRAZO_0
  alreadylaunched1:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB2 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB2:
ENDTHREAD:
    RETURN
SUB_F_MAIN_0:
    WRITE32 ENDSUB_F_STARTARM_0:CALLSUB3 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STARTARM_0
CALLSUB3:
    MOVEF_F 50.0 VLV_VELOCIDAD_2
    MOVEF_F 1000.0 VLV_ENCODER_2
    WRITE32 ENDSUB_F_DENCODER_2:CALLSUB4 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DENCODER_2
CALLSUB4:
    DATA32 milliseconds5
	MOVEF_32 5000.0 milliseconds5
	DATA32 timer5
	TIMER_WAIT milliseconds5 timer5
	TIMER_READY timer5
    MOVEF_F 50.0 VLV_VELOCIDAD_2
    MOVEF_F -400.0 VLV_ENCODER_2
    WRITE32 ENDSUB_F_DENCODER_2:CALLSUB6 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DENCODER_2
CALLSUB6:
    MOVEF_F 50.0 VLV_VELOCIDAD_1
    MOVEF_F -200.0 VLV_ENCODER_1
    WRITE32 ENDSUB_F_AENCODER_2:CALLSUB7 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_AENCODER_2
CALLSUB7:
    MOVEF_F 50.0 VLV_VELOCIDAD_2
    MOVEF_F 1000.0 VLV_ENCODER_2
    WRITE32 ENDSUB_F_DENCODER_2:CALLSUB8 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DENCODER_2
CALLSUB8:
    MOVEF_F 50.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_ENCODER_1
    WRITE32 ENDSUB_F_AENCODER_2:CALLSUB9 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_AENCODER_2
CALLSUB9:
    MOVEF_F 50.0 VLV_VELOCIDAD_2
    MOVEF_F 0.0 VLV_ENCODER_2
    WRITE32 ENDSUB_F_DENCODER_2:CALLSUB10 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DENCODER_2
CALLSUB10:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_CONTROLBRAZO_0:
  while11:
  whilebody11:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    SUBF VGV_ENCODERA F.0 VGV_ERRORA
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    SUBF VGV_ENCODERD F.0 VGV_ERRORD
    MULF VGV_ERRORA 1.0 F.0
    SUBF VGV_ERRORA VGV_OLDERRORA F.2
    MULF F.2 0.6 F.1
    ADDF F.0 F.1 VGV_CORRECCIONA
    MULF VGV_ERRORD 1.0 F.0
    SUBF VGV_ERRORD VGV_OLDERRORD F.2
    MULF F.2 0.3 F.1
    ADDF F.0 F.1 VGV_CORRECCIOND
    MOVEF_8 VGV_CORRECCIONA setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    MOVEF_8 VGV_CORRECCIOND setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    JR whilebody11
  endwhile11:
RETSUB_F_CONTROLBRAZO_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_CONTROLBRAZO_0:
SUB_F_STARTARM_0:
    MOVEF_F 20.0 VLV_VELOCIDAD_2
    MOVEF_F -300.0 VLV_ENCODER_2
    WRITE32 ENDSUB_F_DENCODER_2:CALLSUB26 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DENCODER_2
CALLSUB26:
    MOVEF_F 20.0 VLV_VELOCIDAD_1
    MOVEF_F -700.0 VLV_ENCODER_1
    WRITE32 ENDSUB_F_AENCODER_2:CALLSUB27 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_AENCODER_2
CALLSUB27:
    MOVEF_F 0.0 VGV_ENCODERA
    MOVEF_F 0.0 VGV_ENCODERD
    OUTPUT_CLR_COUNT 0 1
    OUTPUT_CLR_COUNT 0 8
    MOVEF_F 20.0 VLV_VELOCIDAD_1
    MOVEF_F 600.0 VLV_ENCODER_1
    WRITE32 ENDSUB_F_AENCODER_2:CALLSUB30 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_AENCODER_2
CALLSUB30:
    OUTPUT_CLR_COUNT 0 1
    OUTPUT_CLR_COUNT 0 8
    MOVEF_F 0.0 VGV_ENCODERA
    MOVEF_F 0.0 VGV_ENCODERD
RETSUB_F_STARTARM_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STARTARM_0:
SUB_F_SETUP_0:
    DATA8 layer33
	DATA8 no33
	DATA8 mode833
	
	MOVEF_8 1.0 no33
	SUB8 no33 1 no33
	DIV8 no33 4 layer33
	MATH MOD8 no33 4 no33

	MOVEF_8 0.0 mode833
	
	INPUT_DEVICE READY_RAW layer33 no33 0 mode833 0
    DATA8 layer34
	DATA8 no34
	DATA8 mode834
	
	MOVEF_8 2.0 no34
	SUB8 no34 1 no34
	DIV8 no34 4 layer34
	MATH MOD8 no34 4 no34

	MOVEF_8 3.0 mode834
	
	INPUT_DEVICE READY_RAW layer34 no34 0 mode834 0
    DATA8 layer35
	DATA8 no35
	DATA8 mode835
	
	MOVEF_8 3.0 no35
	SUB8 no35 1 no35
	DIV8 no35 4 layer35
	MATH MOD8 no35 4 no35

	MOVEF_8 0.0 mode835
	
	INPUT_DEVICE READY_RAW layer35 no35 0 mode835 0
    DATA8 layer36
	DATA8 no36
	DATA8 mode836
	
	MOVEF_8 4.0 no36
	SUB8 no36 1 no36
	DIV8 no36 4 layer36
	MATH MOD8 no36 4 no36

	MOVEF_8 0.0 mode836
	
	INPUT_DEVICE READY_RAW layer36 no36 0 mode836 0
RETSUB_F_SETUP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SETUP_0:
SUB_F_AENCODER_2:
    CALL MOTOR.GETCOUNT 'A' F.0
    SUBF VLV_ENCODER_1 F.0 VLV_ENCDIFF_1
    MATH ABS VLV_ENCDIFF_1 F.0
    DATAF tmpf40
    DATA8 flag40
    DIVF VLV_ENCDIFF_1 F.0 tmpf40
    CP_EQF 0.0 F.0 flag40
    SELECTF flag40 0.0 tmpf40 VLV_SIGNO_1

    MOVEF_F 1200.0 VLV_SAFETYTIMER_1
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_1 0.0 else42_1
  while43:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.2
    SUBF F.2 VLV_ENCODER_1 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 endwhile43
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 VLV_SAFETYTIMER_1 endwhile43
  whilebody43:
    DATAF tmpf48
    DATA8 flag48
    DIVF VLV_VELOCIDAD_1 15.5 tmpf48
    CP_EQF 0.0 15.5 flag48
    SELECTF flag48 0.0 tmpf48 F.1

    MULF F.1 VLV_SIGNO_1 F.0
    ADDF VGV_ENCODERA F.0 VGV_ENCODERA
    OUTPUT_POWER 0 8 0
	OUTPUT_STOP 0 8 1
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.2
    SUBF F.2 VLV_ENCODER_1 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 and52
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 VLV_SAFETYTIMER_1 whilebody43
  and52:
  endwhile43:
    MOVEF_F VLV_ENCODER_1 VGV_ENCODERA
    CALL MOTOR.STOP 'A' 'True'
  else42_1:
  endif42:
    CALL MOTOR.STOP 'A' 'True'
RETSUB_F_AENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_AENCODER_2:
SUB_F_DENCODER_2:
    CALL MOTOR.GETCOUNT 'D' F.0
    SUBF VLV_ENCODER_2 F.0 VLV_ENCDIFF_2
    MATH ABS VLV_ENCDIFF_2 F.0
    DATAF tmpf62
    DATA8 flag62
    DIVF VLV_ENCDIFF_2 F.0 tmpf62
    CP_EQF 0.0 F.0 flag62
    SELECTF flag62 0.0 tmpf62 VLV_SIGNO_2

    MOVEF_F 100.0 VLV_SAFETYTIMER_2
    TIMER_READ timeMC4
    JR_EQF VLV_ENCDIFF_2 0.0 else64_1
  while65:
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.2
    SUBF F.2 VLV_ENCODER_2 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 endwhile65
    TIMER_READ timeMC4tmp
	SUB32 timeMC4tmp timeMC4 timeMC4tmp
	MOVE32_F timeMC4tmp F.0
    JR_GTEQF F.0 VLV_SAFETYTIMER_2 endwhile65
  whilebody65:
    DATAF tmpf70
    DATA8 flag70
    DIVF VLV_VELOCIDAD_2 15.5 tmpf70
    CP_EQF 0.0 15.5 flag70
    SELECTF flag70 0.0 tmpf70 F.1

    MULF F.1 VLV_SIGNO_2 F.0
    ADDF VGV_ENCODERD F.0 VGV_ENCODERD
    OUTPUT_POWER 0 1 0
	OUTPUT_STOP 0 1 1
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.2
    SUBF F.2 VLV_ENCODER_2 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 and74
    TIMER_READ timeMC4tmp
	SUB32 timeMC4tmp timeMC4 timeMC4tmp
	MOVE32_F timeMC4tmp F.0
    JR_LTF F.0 VLV_SAFETYTIMER_2 whilebody65
  and74:
  endwhile65:
    MOVEF_F VLV_ENCODER_2 VGV_ENCODERD
    CALL MOTOR.STOP 'D' 'True'
  else64_1:
  endif64:
    CALL MOTOR.STOP 'D' 'True'
RETSUB_F_DENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DENCODER_2:
SUB_M_BRAZO_AENCODER_2:
    CALL MOTOR.GETCOUNT 'A' F.0
    SUBF VLV_ENCODER_3 F.0 VLV_ENCDIFF_3
    MATH ABS VLV_ENCDIFF_3 F.0
    DATAF tmpf84
    DATA8 flag84
    DIVF VLV_ENCDIFF_3 F.0 tmpf84
    CP_EQF 0.0 F.0 flag84
    SELECTF flag84 0.0 tmpf84 VLV_SIGNO_3

    MATH ABS VLV_ENCDIFF_3 F.4
    DATAF tmpf86
    DATA8 flag86
    DIVF F.4 100.0 tmpf86
    CP_EQF 0.0 100.0 flag86
    SELECTF flag86 0.0 tmpf86 F.3

    DATAF tmpf87
    DATA8 flag87
    DIVF VLV_VELOCIDAD_3 20.0 tmpf87
    CP_EQF 0.0 20.0 flag87
    SELECTF flag87 0.0 tmpf87 F.4

    DATAF tmpf88
    DATA8 flag88
    DIVF F.3 F.4 tmpf88
    CP_EQF 0.0 F.4 flag88
    SELECTF flag88 0.0 tmpf88 F.2

    MULF F.2 650.0 F.1
    MULF F.1 2.0 F.0
    DATA8 flag91
	CP_GTF F.0 400.0 flag91
	SELECTF flag91 F.0 400.0 VLV_SAFETYTIMER_3
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_3 0.0 else93_1
  while94:
    CALL MOTOR.GETCOUNT 'A' F.2
    SUBF F.2 VLV_ENCODER_3 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 25.0 endwhile94
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 2000.0 endwhile94
  whilebody94:
    MULF VLV_SIGNO_3 VLV_VELOCIDAD_3 F.0
    MOVEF_8 F.0 setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    CALL MOTOR.GETCOUNT 'A' F.2
    SUBF F.2 VLV_ENCODER_3 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 25.0 and101
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 2000.0 whilebody94
  and101:
  endwhile94:
    CALL MOTOR.STOP 'A' 'True'
  else93_1:
  endif93:
RETSUB_M_BRAZO_AENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_AENCODER_2:
SUB_M_BRAZO_DTIMER_2:
    TIMER_READ timeMC1
  while108:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 VLV_TIMER_4 endwhile108
  whilebody108:
    MOVEF_8 VLV_VELOCIDAD_4 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 VLV_TIMER_4 whilebody108
  endwhile108:
    OUTPUT_POWER 0 8 0
	OUTPUT_STOP 0 8 1
RETSUB_M_BRAZO_DTIMER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_DTIMER_2:
SUB_M_BRAZO_DENCODER_2:
    CALL MOTOR.GETCOUNT 'D' F.0
    SUBF VLV_ENCODER_5 F.0 VLV_ENCDIFF_5
    MATH ABS VLV_ENCDIFF_5 F.0
    DATAF tmpf116
    DATA8 flag116
    DIVF VLV_ENCDIFF_5 F.0 tmpf116
    CP_EQF 0.0 F.0 flag116
    SELECTF flag116 0.0 tmpf116 VLV_SIGNO_5

    MATH ABS VLV_ENCDIFF_5 F.4
    DATAF tmpf118
    DATA8 flag118
    DIVF F.4 100.0 tmpf118
    CP_EQF 0.0 100.0 flag118
    SELECTF flag118 0.0 tmpf118 F.3

    DATAF tmpf119
    DATA8 flag119
    DIVF VLV_VELOCIDAD_5 20.0 tmpf119
    CP_EQF 0.0 20.0 flag119
    SELECTF flag119 0.0 tmpf119 F.4

    DATAF tmpf120
    DATA8 flag120
    DIVF F.3 F.4 tmpf120
    CP_EQF 0.0 F.4 flag120
    SELECTF flag120 0.0 tmpf120 F.2

    MULF F.2 650.0 F.1
    MULF F.1 2.0 F.0
    DATA8 flag123
	CP_GTF F.0 400.0 flag123
	SELECTF flag123 F.0 400.0 VLV_SAFETYTIMER_5
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_5 0.0 else125_1
  while126:
    CALL MOTOR.GETCOUNT 'D' F.2
    SUBF F.2 VLV_ENCODER_5 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 endwhile126
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 VLV_SAFETYTIMER_5 endwhile126
  whilebody126:
    MULF VLV_SIGNO_5 VLV_VELOCIDAD_5 F.0
    MOVEF_8 F.0 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VLV_SAFETYTIMER_5 '%g' 99 S.1
    CALL TEXT.APPEND 'safetyTimer: ' S.1 S.0
    CALL LCD.WRITE 5.0 30.0 S.0
    CALL MOTOR.GETCOUNT 'D' F.2
    SUBF F.2 VLV_ENCODER_5 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 and137
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 VLV_SAFETYTIMER_5 whilebody126
  and137:
  endwhile126:
    CALL MOTOR.STOP 'D' 'True'
  else125_1:
  endif125:
RETSUB_M_BRAZO_DENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_DENCODER_2:
SUB_M_RECTO_ENCODER_2:
    MOVEF_F 0.0 VLV_CORRECCION_6
    MULF VLV_DISTANCIA_6 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf145
    DATA8 flag145
    DIVF F.1 F.2 tmpf145
    CP_EQF 0.0 F.2 flag145
    SELECTF flag145 0.0 tmpf145 F.0

    DATAF tmpf146
    DATA8 flag146
    DIVF F.0 6.24 tmpf146
    CP_EQF 0.0 6.24 flag146
    SELECTF flag146 0.0 tmpf146 VLV_ENC_6

    OUTPUT_POWER 0 6 0
	OUTPUT_STOP 0 6 0
    MATH NEGATE VLV_VELOCIDAD_6 F.1
    ADDF F.1 VLV_CORRECCION_6 F.0
    ADDF VLV_VELOCIDAD_6 VLV_CORRECCION_6 F.1
    CALL MOTOR.SCHEDULESYNC 'BC' F.0 F.1 VLV_ENC_6 'True'

	DATA8 layer151
	DATA8 nos151
	DATA8 busy151
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer151 nos151
	JR_EQ8 0 nos151 motornotbusy151
  motorwaiting151:
	OUTPUT_TEST layer151 nos151 busy151
	JR_EQ8 busy151 0 motornotbusy151
	SLEEP
	JR motorwaiting151
  motornotbusy151:
RETSUB_M_RECTO_ENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_RECTO_ENCODER_2:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
