DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_VELOCIDAD_1
DATAF VLV_DISTANCIA_1
DATAF VLV_VELOCIDAD1_2
DATAF VLV_VELOCIDAD2_2
DATAF VLV_GRADOS_2
DATAF VLV_VELOCIDAD_3
DATAF VLV_TIMER_3
DATAF VLV_VELOCIDADA_4
DATAF VLV_VELOCIDADD_4
DATAF VLV_TIMER_4
DATAF VLV_VELOCIDAD_5
DATAF VLV_ENCODER_5
DATAF VLV_VELOCIDAD_6
DATAF VLV_TIMER_6
DATAF VLV_VELOCIDAD_7
DATAF VLV_ENCODER_7
DATAF VLV_OLDERROR_1
DATAF VLV_ERRSUM_1
DATAF VLV_KP_1
DATAF VLV_KI_1
DATAF VLV_KD_1
DATAF VLV_ENC_1
DATAF VLV_START_B_1
DATAF VLV_START_C_1
DATAF VLV_ENCODER_C_1
DATAF VLV_ENCODER_B_1
DATAF VLV_ERROR_1
DATAF VLV_CORRECCION_1
DATAS VLV_I_2 252
DATAS VLV_D_2 252
DATAF VLV_G1_2
DATAF VLV_SIGNO_2
DATAF VLV_VMIN_2
DATAF VLV_VMAX_2
DATAF VLV_ENCODER_2
DATAF VLV_ENCDIFF_5
DATAF VLV_SIGNO_5
DATAF VLV_SAFETYTIMER_5
DATAF VLV_ENCDIFF_7
DATAF VLV_SIGNO_7
DATAF VLV_SAFETYTIMER_7

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_DISTANCIA_1
    MOVEF_F 0.0 VLV_VELOCIDAD1_2
    MOVEF_F 0.0 VLV_VELOCIDAD2_2
    MOVEF_F 0.0 VLV_GRADOS_2
    MOVEF_F 0.0 VLV_VELOCIDAD_3
    MOVEF_F 0.0 VLV_TIMER_3
    MOVEF_F 0.0 VLV_VELOCIDADA_4
    MOVEF_F 0.0 VLV_VELOCIDADD_4
    MOVEF_F 0.0 VLV_TIMER_4
    MOVEF_F 0.0 VLV_VELOCIDAD_5
    MOVEF_F 0.0 VLV_ENCODER_5
    MOVEF_F 0.0 VLV_VELOCIDAD_6
    MOVEF_F 0.0 VLV_TIMER_6
    MOVEF_F 0.0 VLV_VELOCIDAD_7
    MOVEF_F 0.0 VLV_ENCODER_7
    MOVEF_F 0.0 VLV_OLDERROR_1
    MOVEF_F 0.0 VLV_ERRSUM_1
    MOVEF_F 0.0 VLV_KP_1
    MOVEF_F 0.0 VLV_KI_1
    MOVEF_F 0.0 VLV_KD_1
    MOVEF_F 0.0 VLV_ENC_1
    MOVEF_F 0.0 VLV_START_B_1
    MOVEF_F 0.0 VLV_START_C_1
    MOVEF_F 0.0 VLV_ENCODER_C_1
    MOVEF_F 0.0 VLV_ENCODER_B_1
    MOVEF_F 0.0 VLV_ERROR_1
    MOVEF_F 0.0 VLV_CORRECCION_1
    STRINGS DUPLICATE '' VLV_I_2
    STRINGS DUPLICATE '' VLV_D_2
    MOVEF_F 0.0 VLV_G1_2
    MOVEF_F 0.0 VLV_SIGNO_2
    MOVEF_F 0.0 VLV_VMIN_2
    MOVEF_F 0.0 VLV_VMAX_2
    MOVEF_F 0.0 VLV_ENCODER_2
    MOVEF_F 0.0 VLV_ENCDIFF_5
    MOVEF_F 0.0 VLV_SIGNO_5
    MOVEF_F 0.0 VLV_SAFETYTIMER_5
    MOVEF_F 0.0 VLV_ENCDIFF_7
    MOVEF_F 0.0 VLV_SIGNO_7
    MOVEF_F 0.0 VLV_SAFETYTIMER_7
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_DISTANCIA_1
    MOVEF_F 0.0 VLV_VELOCIDAD1_2
    MOVEF_F 0.0 VLV_VELOCIDAD2_2
    MOVEF_F 0.0 VLV_GRADOS_2
    MOVEF_F 0.0 VLV_VELOCIDAD_3
    MOVEF_F 0.0 VLV_TIMER_3
    MOVEF_F 0.0 VLV_VELOCIDADA_4
    MOVEF_F 0.0 VLV_VELOCIDADD_4
    MOVEF_F 0.0 VLV_TIMER_4
    MOVEF_F 0.0 VLV_VELOCIDAD_5
    MOVEF_F 0.0 VLV_ENCODER_5
    MOVEF_F 0.0 VLV_VELOCIDAD_6
    MOVEF_F 0.0 VLV_TIMER_6
    MOVEF_F 0.0 VLV_VELOCIDAD_7
    MOVEF_F 0.0 VLV_ENCODER_7
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB0 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB0:
ENDTHREAD:
    RETURN
SUB_F_MAIN_0:
    WRITE32 ENDSUB_F_SETUP_0:CALLSUB1 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SETUP_0
CALLSUB1:
    MOVEF_F 90.0 VLV_VELOCIDAD_1
    MOVEF_F 200.0 VLV_DISTANCIA_1
    WRITE32 ENDSUB_M_RECTO_ENCODER_2:CALLSUB2 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_RECTO_ENCODER_2
CALLSUB2:
    MOVEF_F -100.0 VLV_VELOCIDAD_1
    MOVEF_F 2.0 VLV_DISTANCIA_1
    WRITE32 ENDSUB_M_RECTO_ENCODER_2:CALLSUB3 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_RECTO_ENCODER_2
CALLSUB3:
    MOVEF_F 80.0 VLV_VELOCIDAD1_2
    MOVEF_F -80.0 VLV_VELOCIDAD2_2
    MOVEF_F 180.0 VLV_GRADOS_2
    WRITE32 ENDSUB_M_GIRO_GRADOS_3:CALLSUB4 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_GIRO_GRADOS_3
CALLSUB4:
    MOVEF_F 90.0 VLV_VELOCIDAD_1
    MOVEF_F 200.0 VLV_DISTANCIA_1
    WRITE32 ENDSUB_M_RECTO_ENCODER_2:CALLSUB5 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_RECTO_ENCODER_2
CALLSUB5:
    MOVEF_F -100.0 VLV_VELOCIDAD_1
    MOVEF_F 2.0 VLV_DISTANCIA_1
    WRITE32 ENDSUB_M_RECTO_ENCODER_2:CALLSUB6 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_RECTO_ENCODER_2
CALLSUB6:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_SETUP_0:
    DATA8 layer7
	DATA8 no7
	DATA8 mode87
	
	MOVEF_8 1.0 no7
	SUB8 no7 1 no7
	DIV8 no7 4 layer7
	MATH MOD8 no7 4 no7

	MOVEF_8 0.0 mode87
	
	INPUT_DEVICE READY_RAW layer7 no7 0 mode87 0
    DATA8 layer8
	DATA8 no8
	DATA8 mode88
	
	MOVEF_8 2.0 no8
	SUB8 no8 1 no8
	DIV8 no8 4 layer8
	MATH MOD8 no8 4 no8

	MOVEF_8 3.0 mode88
	
	INPUT_DEVICE READY_RAW layer8 no8 0 mode88 0
    DATA8 layer9
	DATA8 no9
	DATA8 mode89
	
	MOVEF_8 3.0 no9
	SUB8 no9 1 no9
	DIV8 no9 4 layer9
	MATH MOD8 no9 4 no9

	MOVEF_8 0.0 mode89
	
	INPUT_DEVICE READY_RAW layer9 no9 0 mode89 0
    DATA8 layer10
	DATA8 no10
	DATA8 mode810
	
	MOVEF_8 4.0 no10
	SUB8 no10 1 no10
	DIV8 no10 4 layer10
	MATH MOD8 no10 4 no10

	MOVEF_8 0.0 mode810
	
	INPUT_DEVICE READY_RAW layer10 no10 0 mode810 0
RETSUB_F_SETUP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SETUP_0:
SUB_M_RECTO_ENCODER_2:
    MULF VLV_VELOCIDAD_1 1.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_OLDERROR_1
    MOVEF_F 0.0 VLV_ERRSUM_1
    MOVEF_F 0.0 VLV_KP_1
    MOVEF_F 0.0 VLV_KI_1
    MOVEF_F 0.0 VLV_KD_1
    MULF VLV_DISTANCIA_1 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf14
    DATA8 flag14
    DIVF F.1 F.2 tmpf14
    CP_EQF 0.0 F.2 flag14
    SELECTF flag14 0.0 tmpf14 F.0

    DATAF tmpf15
    DATA8 flag15
    DIVF F.0 6.24 tmpf15
    CP_EQF 0.0 6.24 flag15
    SELECTF flag15 0.0 tmpf15 VLV_ENC_1

    CALL MOTOR.GETCOUNT 'B' F.0
    MULF F.0 -1.0 VLV_START_B_1
    CALL MOTOR.GETCOUNT 'C' VLV_START_C_1
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_1 VLV_ENCODER_C_1
  while21:
    MATH ABS VLV_ENCODER_C_1 F.0
    JR_GTEQF F.0 VLV_ENC_1 endwhile21
  whilebody21:
    CALL MOTOR.GETCOUNT 'B' F.1
    MULF F.1 -0.98 F.0
    SUBF F.0 VLV_START_B_1 VLV_ENCODER_B_1
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_1 VLV_ENCODER_C_1
    SUBF VLV_ENCODER_B_1 VLV_ENCODER_C_1 F.0
    MULF F.0 1.0 VLV_ERROR_1
    ADDF VLV_ERRSUM_1 VLV_ERROR_1 VLV_ERRSUM_1
    MULF VLV_ERROR_1 VLV_KP_1 F.1
    MULF VLV_ERRSUM_1 VLV_KI_1 F.2
    ADDF F.1 F.2 F.0
    SUBF VLV_ERROR_1 VLV_OLDERROR_1 F.2
    MULF F.2 VLV_KD_1 F.1
    ADDF F.0 F.1 VLV_CORRECCION_1
    SUBF VLV_VELOCIDAD_1 VLV_CORRECCION_1 F.1
    MATH NEGATE F.1 F.0
    ADDF VLV_VELOCIDAD_1 VLV_CORRECCION_1 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    MOVEF_F VLV_ERROR_1 VLV_OLDERROR_1
    MATH ABS VLV_ENCODER_C_1 F.0
    JR_LTF F.0 VLV_ENC_1 whilebody21
  endwhile21:
    CALL MOTOR.STOP 'BC' 'True'
RETSUB_M_RECTO_ENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_RECTO_ENCODER_2:
SUB_M_GIRO_GRADOS_3:
    STRINGS DUPLICATE 'B' VLV_I_2
    STRINGS DUPLICATE 'C' VLV_D_2
    MOVEF_F 3.15277777777778 VLV_G1_2
    DATAF tmpf43
    DATA8 flag43
    DIVF VLV_VELOCIDAD1_2 VLV_VELOCIDAD2_2 tmpf43
    CP_EQF 0.0 VLV_VELOCIDAD2_2 flag43
    SELECTF flag43 0.0 tmpf43 F.0

    DATAF tmpf44
    DATA8 flag44
    DIVF VLV_VELOCIDAD1_2 VLV_VELOCIDAD2_2 tmpf44
    CP_EQF 0.0 VLV_VELOCIDAD2_2 flag44
    SELECTF flag44 0.0 tmpf44 F.2

    MATH ABS F.2 F.1
    DATAF tmpf46
    DATA8 flag46
    DIVF F.0 F.1 tmpf46
    CP_EQF 0.0 F.1 flag46
    SELECTF flag46 0.0 tmpf46 VLV_SIGNO_2

    MATH ABS VLV_VELOCIDAD1_2 F.0
    MATH ABS VLV_VELOCIDAD2_2 F.1
    DATA8 flag49
	CP_LTF F.0 F.1 flag49
	SELECTF flag49 F.0 F.1 VLV_VMIN_2
    MATH ABS VLV_VELOCIDAD1_2 F.0
    MATH ABS VLV_VELOCIDAD2_2 F.1
    DATA8 flag52
	CP_GTF F.0 F.1 flag52
	SELECTF flag52 F.0 F.1 VLV_VMAX_2
    MULF VLV_GRADOS_2 VLV_G1_2 F.0
    MULF VLV_SIGNO_2 VLV_VMIN_2 F.4
    DATAF tmpf55
    DATA8 flag55
    DIVF F.4 VLV_VMAX_2 tmpf55
    CP_EQF 0.0 VLV_VMAX_2 flag55
    SELECTF flag55 0.0 tmpf55 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf57
    DATA8 flag57
    DIVF -2.0 F.2 tmpf57
    CP_EQF 0.0 F.2 flag57
    SELECTF flag57 0.0 tmpf57 F.1

    MULF F.0 F.1 VLV_ENCODER_2
    DATA32 milliseconds59
	MOVEF_32 100.0 milliseconds59
	DATA32 timer59
	TIMER_WAIT milliseconds59 timer59
	TIMER_READY timer59
    CALL TEXT.APPEND VLV_I_2 VLV_D_2 S.0
    MATH NEGATE VLV_VELOCIDAD1_2 F.0
    CALL MOTOR.SCHEDULESYNC S.0 F.0 VLV_VELOCIDAD2_2 VLV_ENCODER_2 'True'

	DATA8 layer62
	DATA8 nos62
	DATA8 busy62
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer62 nos62
	JR_EQ8 0 nos62 motornotbusy62
  motorwaiting62:
	OUTPUT_TEST layer62 nos62 busy62
	JR_EQ8 busy62 0 motornotbusy62
	SLEEP
	JR motorwaiting62
  motornotbusy62:
    MOVEF_F 0.0 VLV_VELOCIDAD1_2
    MOVEF_F 0.0 VLV_VELOCIDAD2_2
    MOVEF_F 0.0 VLV_GRADOS_2
    DATA32 milliseconds63
	MOVEF_32 100.0 milliseconds63
	DATA32 timer63
	TIMER_WAIT milliseconds63 timer63
	TIMER_READY timer63
RETSUB_M_GIRO_GRADOS_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_GIRO_GRADOS_3:
SUB_M_BRAZO_ATIMER_2:
    TIMER_READ timeMC1
  while65:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 VLV_TIMER_3 endwhile65
  whilebody65:
    MOVEF_8 VLV_VELOCIDAD_3 setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 VLV_TIMER_3 whilebody65
  endwhile65:
    CALL MOTOR.STOP 'A' 'True'
RETSUB_M_BRAZO_ATIMER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_ATIMER_2:
SUB_M_BRAZO_ADTIMER_3:
    TIMER_READ timeMC1
  while71:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 VLV_TIMER_4 endwhile71
  whilebody71:
    MOVEF_8 VLV_VELOCIDADA_4 setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    MOVEF_8 VLV_VELOCIDADD_4 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 VLV_TIMER_4 whilebody71
  endwhile71:
    CALL MOTOR.STOP 'AD' 'True'
RETSUB_M_BRAZO_ADTIMER_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_ADTIMER_3:
SUB_M_BRAZO_AENCODER_2:
    CALL MOTOR.GETCOUNT 'A' F.0
    SUBF VLV_ENCODER_5 F.0 VLV_ENCDIFF_5
    MATH ABS VLV_ENCDIFF_5 F.0
    DATAF tmpf80
    DATA8 flag80
    DIVF VLV_ENCDIFF_5 F.0 tmpf80
    CP_EQF 0.0 F.0 flag80
    SELECTF flag80 0.0 tmpf80 VLV_SIGNO_5

    MATH ABS VLV_ENCDIFF_5 F.4
    DATAF tmpf82
    DATA8 flag82
    DIVF F.4 100.0 tmpf82
    CP_EQF 0.0 100.0 flag82
    SELECTF flag82 0.0 tmpf82 F.3

    DATAF tmpf83
    DATA8 flag83
    DIVF VLV_VELOCIDAD_5 20.0 tmpf83
    CP_EQF 0.0 20.0 flag83
    SELECTF flag83 0.0 tmpf83 F.4

    DATAF tmpf84
    DATA8 flag84
    DIVF F.3 F.4 tmpf84
    CP_EQF 0.0 F.4 flag84
    SELECTF flag84 0.0 tmpf84 F.2

    MULF F.2 650.0 F.1
    MULF F.1 2.0 F.0
    DATA8 flag87
	CP_GTF F.0 400.0 flag87
	SELECTF flag87 F.0 400.0 VLV_SAFETYTIMER_5
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_5 0.0 else89_1
  while90:
    CALL MOTOR.GETCOUNT 'A' F.2
    SUBF F.2 VLV_ENCODER_5 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 25.0 endwhile90
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 2000.0 endwhile90
  whilebody90:
    MULF VLV_SIGNO_5 VLV_VELOCIDAD_5 F.0
    MOVEF_8 F.0 setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    CALL MOTOR.GETCOUNT 'A' F.2
    SUBF F.2 VLV_ENCODER_5 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 25.0 and97
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 2000.0 whilebody90
  and97:
  endwhile90:
    CALL MOTOR.STOP 'A' 'True'
  else89_1:
  endif89:
RETSUB_M_BRAZO_AENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_AENCODER_2:
SUB_M_BRAZO_DTIMER_2:
    TIMER_READ timeMC1
  while104:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 VLV_TIMER_6 endwhile104
  whilebody104:
    MOVEF_8 VLV_VELOCIDAD_6 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 VLV_TIMER_6 whilebody104
  endwhile104:
    OUTPUT_POWER 0 8 0
	OUTPUT_STOP 0 8 1
RETSUB_M_BRAZO_DTIMER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_DTIMER_2:
SUB_M_BRAZO_DENCODER_2:
    CALL MOTOR.GETCOUNT 'D' F.0
    SUBF VLV_ENCODER_7 F.0 VLV_ENCDIFF_7
    MATH ABS VLV_ENCDIFF_7 F.0
    DATAF tmpf112
    DATA8 flag112
    DIVF VLV_ENCDIFF_7 F.0 tmpf112
    CP_EQF 0.0 F.0 flag112
    SELECTF flag112 0.0 tmpf112 VLV_SIGNO_7

    MATH ABS VLV_ENCDIFF_7 F.4
    DATAF tmpf114
    DATA8 flag114
    DIVF F.4 100.0 tmpf114
    CP_EQF 0.0 100.0 flag114
    SELECTF flag114 0.0 tmpf114 F.3

    DATAF tmpf115
    DATA8 flag115
    DIVF VLV_VELOCIDAD_7 20.0 tmpf115
    CP_EQF 0.0 20.0 flag115
    SELECTF flag115 0.0 tmpf115 F.4

    DATAF tmpf116
    DATA8 flag116
    DIVF F.3 F.4 tmpf116
    CP_EQF 0.0 F.4 flag116
    SELECTF flag116 0.0 tmpf116 F.2

    MULF F.2 650.0 F.1
    MULF F.1 2.0 F.0
    DATA8 flag119
	CP_GTF F.0 400.0 flag119
	SELECTF flag119 F.0 400.0 VLV_SAFETYTIMER_7
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_7 0.0 else121_1
  while122:
    CALL MOTOR.GETCOUNT 'D' F.2
    SUBF F.2 VLV_ENCODER_7 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 endwhile122
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 VLV_SAFETYTIMER_7 endwhile122
  whilebody122:
    MULF VLV_SIGNO_7 VLV_VELOCIDAD_7 F.0
    MOVEF_8 F.0 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VLV_SAFETYTIMER_7 '%g' 99 S.1
    CALL TEXT.APPEND 'SafetyTimer: ' S.1 S.0
    CALL LCD.WRITE 5.0 30.0 S.0
    CALL MOTOR.GETCOUNT 'D' F.2
    SUBF F.2 VLV_ENCODER_7 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 and133
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 VLV_SAFETYTIMER_7 whilebody122
  and133:
  endwhile122:
    CALL MOTOR.STOP 'D' 'True'
  else121_1:
  endif121:
RETSUB_M_BRAZO_DENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_DENCODER_2:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
