DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_VELOCIDAD_1
DATAF VLV_KP_1
DATAF VLV_KI_1
DATAF VLV_KD_1
DATAF VLV_ENCODER_1
DATAF VLV_V0_3
DATAF VLV_VMIN_3
DATAF VLV_DISTANCIA1_3
DATAF VLV_DISTANCIA2_3
DATAF VLV_VELOCIDAD1_4
DATAF VLV_VELOCIDAD2_4
DATAF VLV_GRADOS_4
DATAF VLV_VELOCIDAD_2
DATAF VLV_KP_2
DATAF VLV_KI_2
DATAF VLV_KD_2
DATAF VLV_ENCODER_2
DATAS VLV_I_1 252
DATAS VLV_D_1 252
DATAF VLV_DISTANCIA_1
DATAF VLV_ERROR_1
DATAF VLV_OLDERROR_1
DATAF VLV_ERRSUM_1
DATAF VLV_U_1
DATAF VLV_SENTIDO_1
DATAF VLV_START_VELOCIDAD_1
DATAF VLV_START_KP_1
DATAF VLV_START_KI_1
DATAF VLV_START_KD_1
DATAF VLV_START_C_1
DATAF VLV_ENCODER_C_1
DATAS VLV_I_2 252
DATAS VLV_D_2 252
DATAF VLV_DISTANCIA_2
DATAF VLV_ERROR_2
DATAF VLV_OLDERROR_2
DATAF VLV_ERRSUM_2
DATAF VLV_U_2
DATAF VLV_SENTIDO_2
DATAF VLV_START_VELOCIDAD_2
DATAF VLV_START_KP_2
DATAF VLV_START_KI_2
DATAF VLV_START_KD_2
DATAF VLV_START_C_2
DATAF VLV_ENCODER_C_2
DATAF VLV_VEL_3
DATAF VLV_KP_3
DATAF VLV_KI_3
DATAF VLV_KD_3
DATAF VLV_ERROR_3
DATAF VLV_OLDERROR_3
DATAF VLV_ERRSUM_3
DATAF VLV_GRADOS1_3
DATAF VLV_GRADOS2_3
DATAF VLV_PENDIENTE_3
DATAF VLV_CORRECCION_3
DATAS VLV_I_4 252
DATAS VLV_D_4 252
DATAF VLV_G1_4
DATAF VLV_SIGNO_4
DATAF VLV_VMIN_4
DATAF VLV_VMAX_4
DATAF VLV_ENCODER_4

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_KP_1
    MOVEF_F 0.0 VLV_KI_1
    MOVEF_F 0.0 VLV_KD_1
    MOVEF_F 0.0 VLV_ENCODER_1
    MOVEF_F 0.0 VLV_V0_3
    MOVEF_F 0.0 VLV_VMIN_3
    MOVEF_F 0.0 VLV_DISTANCIA1_3
    MOVEF_F 0.0 VLV_DISTANCIA2_3
    MOVEF_F 0.0 VLV_VELOCIDAD1_4
    MOVEF_F 0.0 VLV_VELOCIDAD2_4
    MOVEF_F 0.0 VLV_GRADOS_4
    MOVEF_F 0.0 VLV_VELOCIDAD_2
    MOVEF_F 0.0 VLV_KP_2
    MOVEF_F 0.0 VLV_KI_2
    MOVEF_F 0.0 VLV_KD_2
    MOVEF_F 0.0 VLV_ENCODER_2
    STRINGS DUPLICATE '' VLV_I_1
    STRINGS DUPLICATE '' VLV_D_1
    MOVEF_F 0.0 VLV_DISTANCIA_1
    MOVEF_F 0.0 VLV_ERROR_1
    MOVEF_F 0.0 VLV_OLDERROR_1
    MOVEF_F 0.0 VLV_ERRSUM_1
    MOVEF_F 0.0 VLV_U_1
    MOVEF_F 0.0 VLV_SENTIDO_1
    MOVEF_F 0.0 VLV_START_VELOCIDAD_1
    MOVEF_F 0.0 VLV_START_KP_1
    MOVEF_F 0.0 VLV_START_KI_1
    MOVEF_F 0.0 VLV_START_KD_1
    MOVEF_F 0.0 VLV_START_C_1
    MOVEF_F 0.0 VLV_ENCODER_C_1
    STRINGS DUPLICATE '' VLV_I_2
    STRINGS DUPLICATE '' VLV_D_2
    MOVEF_F 0.0 VLV_DISTANCIA_2
    MOVEF_F 0.0 VLV_ERROR_2
    MOVEF_F 0.0 VLV_OLDERROR_2
    MOVEF_F 0.0 VLV_ERRSUM_2
    MOVEF_F 0.0 VLV_U_2
    MOVEF_F 0.0 VLV_SENTIDO_2
    MOVEF_F 0.0 VLV_START_VELOCIDAD_2
    MOVEF_F 0.0 VLV_START_KP_2
    MOVEF_F 0.0 VLV_START_KI_2
    MOVEF_F 0.0 VLV_START_KD_2
    MOVEF_F 0.0 VLV_START_C_2
    MOVEF_F 0.0 VLV_ENCODER_C_2
    MOVEF_F 0.0 VLV_VEL_3
    MOVEF_F 0.0 VLV_KP_3
    MOVEF_F 0.0 VLV_KI_3
    MOVEF_F 0.0 VLV_KD_3
    MOVEF_F 0.0 VLV_ERROR_3
    MOVEF_F 0.0 VLV_OLDERROR_3
    MOVEF_F 0.0 VLV_ERRSUM_3
    MOVEF_F 0.0 VLV_GRADOS1_3
    MOVEF_F 0.0 VLV_GRADOS2_3
    MOVEF_F 0.0 VLV_PENDIENTE_3
    MOVEF_F 0.0 VLV_CORRECCION_3
    STRINGS DUPLICATE '' VLV_I_4
    STRINGS DUPLICATE '' VLV_D_4
    MOVEF_F 0.0 VLV_G1_4
    MOVEF_F 0.0 VLV_SIGNO_4
    MOVEF_F 0.0 VLV_VMIN_4
    MOVEF_F 0.0 VLV_VMAX_4
    MOVEF_F 0.0 VLV_ENCODER_4
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_KP_1
    MOVEF_F 0.0 VLV_KI_1
    MOVEF_F 0.0 VLV_KD_1
    MOVEF_F 0.0 VLV_ENCODER_1
    MOVEF_F 0.0 VLV_V0_3
    MOVEF_F 0.0 VLV_VMIN_3
    MOVEF_F 0.0 VLV_DISTANCIA1_3
    MOVEF_F 0.0 VLV_DISTANCIA2_3
    MOVEF_F 0.0 VLV_VELOCIDAD1_4
    MOVEF_F 0.0 VLV_VELOCIDAD2_4
    MOVEF_F 0.0 VLV_GRADOS_4
    MOVEF_F 0.0 VLV_VELOCIDAD_2
    MOVEF_F 0.0 VLV_KP_2
    MOVEF_F 0.0 VLV_KI_2
    MOVEF_F 0.0 VLV_KD_2
    MOVEF_F 0.0 VLV_ENCODER_2
    MOVEF_F 40.0 VLV_VELOCIDAD_1
    MOVEF_F 0.18 VLV_KP_1
    MOVEF_F 0.0004 VLV_KI_1
    MOVEF_F 5.0 VLV_KD_1
    MOVEF_F 80.0 VLV_ENCODER_1
    WRITE32 ENDSUB_M_SMART_ENCODER14_5:CALLSUB0 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_SMART_ENCODER14_5
CALLSUB0:
    MOVEF_F 40.0 VLV_V0_3
    MOVEF_F 10.0 VLV_VMIN_3
    MOVEF_F 15.0 VLV_DISTANCIA1_3
    MOVEF_F 0.0 VLV_DISTANCIA2_3
    WRITE32 ENDSUB_M_RECTO_DECEL_4:CALLSUB1 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_RECTO_DECEL_4
CALLSUB1:
    MOVEF_F 30.0 VLV_VELOCIDAD1_4
    MOVEF_F -30.0 VLV_VELOCIDAD2_4
    MOVEF_F 165.0 VLV_GRADOS_4
    WRITE32 ENDSUB_M_GIRO_GRADOS_3:CALLSUB2 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_GIRO_GRADOS_3
CALLSUB2:
    MOVEF_F 40.0 VLV_VELOCIDAD_2
    MOVEF_F 0.18 VLV_KP_2
    MOVEF_F 0.0004 VLV_KI_2
    MOVEF_F 5.0 VLV_KD_2
    MOVEF_F 80.0 VLV_ENCODER_2
    WRITE32 ENDSUB_M_SMART_ENCODER31_5:CALLSUB3 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_SMART_ENCODER31_5
CALLSUB3:
    MOVEF_F 40.0 VLV_V0_3
    MOVEF_F 10.0 VLV_VMIN_3
    MOVEF_F 15.0 VLV_DISTANCIA1_3
    MOVEF_F 0.0 VLV_DISTANCIA2_3
    WRITE32 ENDSUB_M_RECTO_DECEL_4:CALLSUB4 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_RECTO_DECEL_4
CALLSUB4:
    MOVEF_F 30.0 VLV_VELOCIDAD1_4
    MOVEF_F -30.0 VLV_VELOCIDAD2_4
    MOVEF_F 165.0 VLV_GRADOS_4
    WRITE32 ENDSUB_M_GIRO_GRADOS_3:CALLSUB5 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_GIRO_GRADOS_3
CALLSUB5:
ENDTHREAD:
    RETURN
SUB_M_SMART_ENCODER14_5:
    MULF VLV_VELOCIDAD_1 1.0 VLV_VELOCIDAD_1
    STRINGS DUPLICATE 'B' VLV_I_1
    STRINGS DUPLICATE 'C' VLV_D_1
    MOVEF_F 3.1415926535897932384 F.1
    MULF 6.24 F.1 F.0
    DATAF tmpf9
    DATA8 flag9
    DIVF 2880.0 F.0 tmpf9
    CP_EQF 0.0 F.0 flag9
    SELECTF flag9 0.0 tmpf9 VLV_DISTANCIA_1

    MOVEF_F 0.0 VLV_ERROR_1
    MOVEF_F 0.0 VLV_OLDERROR_1
    MOVEF_F 0.0 VLV_ERRSUM_1
    MOVEF_F 0.0 VLV_U_1
    MATH ABS VLV_VELOCIDAD_1 F.0
    DATAF tmpf11
    DATA8 flag11
    DIVF VLV_VELOCIDAD_1 F.0 tmpf11
    CP_EQF 0.0 F.0 flag11
    SELECTF flag11 0.0 tmpf11 VLV_SENTIDO_1

    MOVEF_F VLV_VELOCIDAD_1 VLV_START_VELOCIDAD_1
    MOVEF_F VLV_KP_1 VLV_START_KP_1
    MOVEF_F VLV_KI_1 VLV_START_KI_1
    MOVEF_F VLV_KD_1 VLV_START_KD_1
    MOVEF_F 3.1415926535897932384 F.2
    MULF 6.24 F.2 F.1
    DATAF tmpf14
    DATA8 flag14
    DIVF VLV_ENCODER_1 F.1 tmpf14
    CP_EQF 0.0 F.1 flag14
    SELECTF flag14 0.0 tmpf14 F.0

    MULF F.0 360.0 VLV_ENCODER_1
    CALL MOTOR.GETCOUNT 'C' VLV_START_C_1
    MOVEF_F 0.0 VLV_ENCODER_C_1
  while17:
    MATH ABS VLV_ENCODER_C_1 F.0
    JR_GTEQF F.0 VLV_ENCODER_1 endwhile17
  whilebody17:
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_1 VLV_ENCODER_C_1
    JR_GTEQF VLV_ENCODER_C_1 VLV_DISTANCIA_1 else21_1
    MOVEF_F 20.0 VLV_VELOCIDAD_1
    MULF VLV_START_KP_1 1.0 VLV_KP_1
    MULF VLV_START_KI_1 1.0 VLV_KI_1
    MULF VLV_START_KD_1 1.0 VLV_KD_1
    JR endif21
  else21_1:
    MOVEF_F VLV_START_VELOCIDAD_1 VLV_VELOCIDAD_1
    MOVEF_F VLV_START_KP_1 VLV_KP_1
    MOVEF_F VLV_START_KI_1 VLV_KI_1
    MOVEF_F VLV_START_KD_1 VLV_KD_1
  else21_2:
  endif21:
    CALL SENSOR.READPERCENT 1.0 F.2
    CALL SENSOR.READPERCENT 4.0 F.3
    SUBF F.2 F.3 F.1
    MULF F.1 VLV_SENTIDO_1 F.0
    MULF F.0 1.0 VLV_ERROR_1
    ADDF VLV_ERRSUM_1 VLV_ERROR_1 VLV_ERRSUM_1
    MULF VLV_ERROR_1 VLV_KP_1 F.1
    SUBF VLV_ERROR_1 VLV_OLDERROR_1 F.3
    MULF F.3 VLV_KD_1 F.2
    ADDF F.1 F.2 F.0
    MULF VLV_ERRSUM_1 VLV_KI_1 F.1
    ADDF F.0 F.1 VLV_U_1
    CALL TEXT.APPEND VLV_I_1 VLV_D_1 S.0
    ADDF VLV_VELOCIDAD_1 VLV_U_1 F.1
    MATH NEGATE F.1 F.0
    SUBF VLV_VELOCIDAD_1 VLV_U_1 F.1
    CALL MOTOR.STARTSYNC S.0 F.0 F.1
    MOVEF_F VLV_ERROR_1 VLV_OLDERROR_1
    MATH ABS VLV_ENCODER_C_1 F.0
    JR_LTF F.0 VLV_ENCODER_1 whilebody17
  endwhile17:
    CALL TEXT.APPEND VLV_I_1 VLV_D_1 S.0
    CALL MOTOR.STOP S.0 'True'
RETSUB_M_SMART_ENCODER14_5:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_SMART_ENCODER14_5:
SUB_M_SMART_ENCODER31_5:
    MULF VLV_VELOCIDAD_2 1.0 VLV_VELOCIDAD_2
    STRINGS DUPLICATE 'B' VLV_I_2
    STRINGS DUPLICATE 'C' VLV_D_2
    MOVEF_F 3.1415926535897932384 F.1
    MULF 6.24 F.1 F.0
    DATAF tmpf48
    DATA8 flag48
    DIVF 2880.0 F.0 tmpf48
    CP_EQF 0.0 F.0 flag48
    SELECTF flag48 0.0 tmpf48 VLV_DISTANCIA_2

    MOVEF_F 0.0 VLV_ERROR_2
    MOVEF_F 0.0 VLV_OLDERROR_2
    MOVEF_F 0.0 VLV_ERRSUM_2
    MOVEF_F 0.0 VLV_U_2
    MATH ABS VLV_VELOCIDAD_2 F.0
    DATAF tmpf50
    DATA8 flag50
    DIVF VLV_VELOCIDAD_2 F.0 tmpf50
    CP_EQF 0.0 F.0 flag50
    SELECTF flag50 0.0 tmpf50 VLV_SENTIDO_2

    MOVEF_F VLV_VELOCIDAD_2 VLV_START_VELOCIDAD_2
    MOVEF_F VLV_KP_2 VLV_START_KP_2
    MOVEF_F VLV_KI_2 VLV_START_KI_2
    MOVEF_F VLV_KD_2 VLV_START_KD_2
    MOVEF_F 3.1415926535897932384 F.2
    MULF 6.24 F.2 F.1
    DATAF tmpf53
    DATA8 flag53
    DIVF VLV_ENCODER_2 F.1 tmpf53
    CP_EQF 0.0 F.1 flag53
    SELECTF flag53 0.0 tmpf53 F.0

    MULF F.0 360.0 VLV_ENCODER_2
    CALL MOTOR.GETCOUNT 'C' VLV_START_C_2
    MOVEF_F 0.0 VLV_ENCODER_C_2
  while56:
    MATH ABS VLV_ENCODER_C_2 F.0
    JR_GTEQF F.0 VLV_ENCODER_2 endwhile56
  whilebody56:
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_2 VLV_ENCODER_C_2
    JR_GTEQF VLV_ENCODER_C_2 VLV_DISTANCIA_2 else60_1
    MULF VLV_START_VELOCIDAD_2 1.0 VLV_VELOCIDAD_2
    MULF VLV_START_KP_2 1.0 VLV_KP_2
    MULF VLV_START_KI_2 1.0 VLV_KI_2
    MULF VLV_START_KD_2 1.0 VLV_KD_2
    JR endif60
  else60_1:
    MOVEF_F VLV_START_VELOCIDAD_2 VLV_VELOCIDAD_2
    MOVEF_F VLV_START_KP_2 VLV_KP_2
    MOVEF_F VLV_START_KI_2 VLV_KI_2
    MOVEF_F VLV_START_KD_2 VLV_KD_2
  else60_2:
  endif60:
    CALL SENSOR.READPERCENT 3.0 F.2
    CALL SENSOR.READPERCENT 1.0 F.3
    SUBF F.2 F.3 F.1
    MULF F.1 VLV_SENTIDO_2 F.0
    MULF F.0 1.0 VLV_ERROR_2
    ADDF VLV_ERRSUM_2 VLV_ERROR_2 VLV_ERRSUM_2
    MULF VLV_ERROR_2 VLV_KP_2 F.1
    SUBF VLV_ERROR_2 VLV_OLDERROR_2 F.3
    MULF F.3 VLV_KD_2 F.2
    ADDF F.1 F.2 F.0
    MULF VLV_ERRSUM_2 VLV_KI_2 F.1
    ADDF F.0 F.1 VLV_U_2
    CALL TEXT.APPEND VLV_I_2 VLV_D_2 S.0
    ADDF VLV_VELOCIDAD_2 VLV_U_2 F.1
    MATH NEGATE F.1 F.0
    SUBF VLV_VELOCIDAD_2 VLV_U_2 F.1
    CALL MOTOR.STARTSYNC S.0 F.0 F.1
    MOVEF_F VLV_ERROR_2 VLV_OLDERROR_2
    MATH ABS VLV_ENCODER_C_2 F.0
    JR_LTF F.0 VLV_ENCODER_2 whilebody56
  endwhile56:
    CALL TEXT.APPEND VLV_I_2 VLV_D_2 S.0
    CALL MOTOR.STOP S.0 'True'
RETSUB_M_SMART_ENCODER31_5:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_SMART_ENCODER31_5:
SUB_M_RECTO_DECEL_4:
    DATA8 flag85
	CP_LTF 90.0 VLV_V0_3 flag85
	SELECTF flag85 90.0 VLV_V0_3 VLV_V0_3
    DATA8 flag86
	CP_GTF 8.0 VLV_VMIN_3 flag86
	SELECTF flag86 8.0 VLV_VMIN_3 VLV_VMIN_3
    MOVEF_F 0.0 VLV_VEL_3
    MOVEF_F 0.4 VLV_KP_3
    MOVEF_F 0.0001 VLV_KI_3
    MOVEF_F 0.5 VLV_KD_3
    MOVEF_F 0.0 VLV_ERROR_3
    MOVEF_F 0.0 VLV_OLDERROR_3
    MOVEF_F 0.0 VLV_ERRSUM_3
    MULF VLV_DISTANCIA1_3 360.0 F.0
    MOVEF_F 3.1415926535897932384 F.2
    MULF 5.6 F.2 F.1
    DATAF tmpf90
    DATA8 flag90
    DIVF F.0 F.1 tmpf90
    CP_EQF 0.0 F.1 flag90
    SELECTF flag90 0.0 tmpf90 VLV_GRADOS1_3

    MULF VLV_DISTANCIA2_3 360.0 F.0
    MOVEF_F 3.1415926535897932384 F.2
    MULF 5.6 F.2 F.1
    DATAF tmpf94
    DATA8 flag94
    DIVF F.0 F.1 tmpf94
    CP_EQF 0.0 F.1 flag94
    SELECTF flag94 0.0 tmpf94 VLV_GRADOS2_3

    OUTPUT_CLR_COUNT 0 2
    OUTPUT_CLR_COUNT 0 4
  while97:
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.0
    ADDF VLV_GRADOS1_3 VLV_GRADOS2_3 F.1
    JR_GTEQF F.0 F.1 endwhile97
  whilebody97:
    SUBF VLV_VMIN_3 VLV_V0_3 F.0
    DATAF tmpf101
    DATA8 flag101
    DIVF F.0 VLV_GRADOS1_3 tmpf101
    CP_EQF 0.0 VLV_GRADOS1_3 flag101
    SELECTF flag101 0.0 tmpf101 VLV_PENDIENTE_3

    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.2
    MULF VLV_PENDIENTE_3 F.2 F.1
    ADDF F.1 VLV_V0_3 F.0
    DATA8 flag105
	CP_GTF VLV_VMIN_3 F.0 flag105
	SELECTF flag105 VLV_VMIN_3 F.0 VLV_VEL_3
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.2
    MULF -1.0 F.2 F.1
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.2
    SUBF F.1 F.2 F.0
    MULF F.0 1.0 VLV_ERROR_3
    ADDF VLV_ERRSUM_3 VLV_ERROR_3 VLV_ERRSUM_3
    MULF VLV_ERROR_3 VLV_KP_3 F.1
    SUBF VLV_ERROR_3 VLV_OLDERROR_3 F.3
    MULF F.3 VLV_KD_3 F.2
    ADDF F.1 F.2 F.0
    MULF VLV_ERRSUM_3 VLV_KI_3 F.1
    ADDF F.0 F.1 VLV_CORRECCION_3
    MOVEF_F VLV_ERROR_3 VLV_OLDERROR_3
    SUBF VLV_VEL_3 VLV_CORRECCION_3 F.2
    MATH NEGATE F.2 F.1
    MULF F.1 1.0 F.0
    ADDF VLV_VEL_3 VLV_CORRECCION_3 F.2
    MULF F.2 1.0 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.0
    ADDF VLV_GRADOS1_3 VLV_GRADOS2_3 F.1
    JR_LTF F.0 F.1 whilebody97
  endwhile97:
    OUTPUT_POWER 0 6 0
	OUTPUT_STOP 0 6 1
    CALL LCD.CLEAR
    OUTPUT_GET_COUNT 0 2 getTachoC
	MOVE32_F getTachoC F.3
    MULF F.3 5.6 F.2
    MOVEF_F 3.1415926535897932384 F.3
    MULF F.2 F.3 F.1
    DATAF tmpf132
    DATA8 flag132
    DIVF F.1 360.0 tmpf132
    CP_EQF 0.0 360.0 flag132
    SELECTF flag132 0.0 tmpf132 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'Distancia cm: ' S.1 S.0
    CALL LCD.WRITE 5.0 10.0 S.0
RETSUB_M_RECTO_DECEL_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_RECTO_DECEL_4:
SUB_M_GIRO_GRADOS_3:
    STRINGS DUPLICATE 'B' VLV_I_4
    STRINGS DUPLICATE 'C' VLV_D_4
    MOVEF_F 3.44444444444444 VLV_G1_4
    DATAF tmpf136
    DATA8 flag136
    DIVF VLV_VELOCIDAD1_4 VLV_VELOCIDAD2_4 tmpf136
    CP_EQF 0.0 VLV_VELOCIDAD2_4 flag136
    SELECTF flag136 0.0 tmpf136 F.0

    DATAF tmpf137
    DATA8 flag137
    DIVF VLV_VELOCIDAD1_4 VLV_VELOCIDAD2_4 tmpf137
    CP_EQF 0.0 VLV_VELOCIDAD2_4 flag137
    SELECTF flag137 0.0 tmpf137 F.2

    MATH ABS F.2 F.1
    DATAF tmpf139
    DATA8 flag139
    DIVF F.0 F.1 tmpf139
    CP_EQF 0.0 F.1 flag139
    SELECTF flag139 0.0 tmpf139 VLV_SIGNO_4

    MATH ABS VLV_VELOCIDAD1_4 F.0
    MATH ABS VLV_VELOCIDAD2_4 F.1
    DATA8 flag142
	CP_LTF F.0 F.1 flag142
	SELECTF flag142 F.0 F.1 VLV_VMIN_4
    MATH ABS VLV_VELOCIDAD1_4 F.0
    MATH ABS VLV_VELOCIDAD2_4 F.1
    DATA8 flag145
	CP_GTF F.0 F.1 flag145
	SELECTF flag145 F.0 F.1 VLV_VMAX_4
    MULF VLV_GRADOS_4 VLV_G1_4 F.0
    MULF VLV_SIGNO_4 VLV_VMIN_4 F.4
    DATAF tmpf148
    DATA8 flag148
    DIVF F.4 VLV_VMAX_4 tmpf148
    CP_EQF 0.0 VLV_VMAX_4 flag148
    SELECTF flag148 0.0 tmpf148 F.3

    SUBF F.3 1.0 F.2
    DATAF tmpf150
    DATA8 flag150
    DIVF -2.0 F.2 tmpf150
    CP_EQF 0.0 F.2 flag150
    SELECTF flag150 0.0 tmpf150 F.1

    MULF F.0 F.1 VLV_ENCODER_4
    DATA32 milliseconds152
	MOVEF_32 100.0 milliseconds152
	DATA32 timer152
	TIMER_WAIT milliseconds152 timer152
	TIMER_READY timer152
    CALL TEXT.APPEND VLV_I_4 VLV_D_4 S.0
    MATH NEGATE VLV_VELOCIDAD1_4 F.0
    CALL MOTOR.SCHEDULESYNC S.0 F.0 VLV_VELOCIDAD2_4 VLV_ENCODER_4 'True'

	DATA8 layer155
	DATA8 nos155
	DATA8 busy155
	CALL MOTORDECODEPORTSDESCRIPTOR S.0 layer155 nos155
	JR_EQ8 0 nos155 motornotbusy155
  motorwaiting155:
	OUTPUT_TEST layer155 nos155 busy155
	JR_EQ8 busy155 0 motornotbusy155
	SLEEP
	JR motorwaiting155
  motornotbusy155:
    MOVEF_F 0.0 VLV_VELOCIDAD1_4
    MOVEF_F 0.0 VLV_VELOCIDAD2_4
    MOVEF_F 0.0 VLV_GRADOS_4
    DATA32 milliseconds156
	MOVEF_32 100.0 milliseconds156
	DATA32 timer156
	TIMER_WAIT milliseconds156 timer156
	TIMER_READY timer156
RETSUB_M_GIRO_GRADOS_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_GIRO_GRADOS_3:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
