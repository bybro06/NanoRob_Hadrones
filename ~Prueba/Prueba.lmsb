DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_V0_3
DATAF VLV_VMAX_3
DATAF VLV_DISTANCIA1_3
DATAF VLV_DISTANCIA2_3
DATAF VLV_DISTANCIA3_3
DATAF VLV_V0_4
DATAF VLV_VMIN_4
DATAF VLV_DISTANCIA1_4
DATAF VLV_DISTANCIA2_4
DATAF VLV_VELOCIDAD_6
DATAF VLV_TIMER_6
DATAF VLV_VELOCIDAD_1
DATAF VLV_ENCODER_1
DATAF VLV_VELOCIDAD_7
DATAF VLV_ENCODER_7
DATAF VLV_VELOCIDAD_5
DATAF VLV_DISTANCIA_5
DATAF VLV_VELOCIDAD_8
DATAF VLV_ENCODER_8
DATAF VGV_ENCODERA
DATAF VGV_ENCODERD
DATAF VGV_ERRORA
DATAF VGV_OLDERRORA
DATAF VGV_ERRORD
DATAF VGV_OLDERRORD
DATAF VGV_CORRECCIONA
DATAF VLV_ENCDIFF_1
DATAF VLV_SIGNO_1
DATAF VLV_SAFETYTIMER_1
DATAF VLV_STARTB_3
DATAF VLV_STARTC_3
DATAF VLV_ENCODERB_3
DATAF VLV_ENCODERC_3
DATAF VLV_SIGNO_3
DATAF VLV_VEL_3
DATAF VLV_KP_3
DATAF VLV_KD_3
DATAF VLV_ERROR_3
DATAF VLV_OLDERROR_3
DATAF VLV_GRADOS1_3
DATAF VLV_GRADOS2_3
DATAF VLV_GRADOS3_3
DATAF VLV_PENDIENTE_3
DATAF VLV_CORRECCION_3
DATAF VLV_STARTB_4
DATAF VLV_STARTC_4
DATAF VLV_SIGNO_4
DATAF VLV_VEL_4
DATAF VLV_KP_4
DATAF VLV_KD_4
DATAF VLV_ERROR_4
DATAF VLV_OLDERROR_4
DATAF VLV_GRADOS1_4
DATAF VLV_GRADOS2_4
DATAF VLV_ENCODERB_4
DATAF VLV_ENCODERC_4
DATAF VLV_PENDIENTE_4
DATAF VLV_CORRECCION_4
DATAF VLV_CORRECCION_5
DATAF VLV_ENC_5
DATAF VLV_ENCDIFF_7
DATAF VLV_SIGNO_7
DATAF VLV_SAFETYTIMER_7
DATAF VLV_ENCDIFF_8
DATAF VLV_SIGNO_8
DATAF VLV_SAFETYTIMER_8
DATA32 RUNCOUNTER_F_CONTROLBRAZO_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_V0_3
    MOVEF_F 0.0 VLV_VMAX_3
    MOVEF_F 0.0 VLV_DISTANCIA1_3
    MOVEF_F 0.0 VLV_DISTANCIA2_3
    MOVEF_F 0.0 VLV_DISTANCIA3_3
    MOVEF_F 0.0 VLV_V0_4
    MOVEF_F 0.0 VLV_VMIN_4
    MOVEF_F 0.0 VLV_DISTANCIA1_4
    MOVEF_F 0.0 VLV_DISTANCIA2_4
    MOVEF_F 0.0 VLV_VELOCIDAD_6
    MOVEF_F 0.0 VLV_TIMER_6
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_ENCODER_1
    MOVEF_F 0.0 VLV_VELOCIDAD_7
    MOVEF_F 0.0 VLV_ENCODER_7
    MOVEF_F 0.0 VLV_VELOCIDAD_5
    MOVEF_F 0.0 VLV_DISTANCIA_5
    MOVEF_F 0.0 VLV_VELOCIDAD_8
    MOVEF_F 0.0 VLV_ENCODER_8
    MOVEF_F 0.0 VGV_ENCODERA
    MOVEF_F 0.0 VGV_ENCODERD
    MOVEF_F 0.0 VGV_ERRORA
    MOVEF_F 0.0 VGV_OLDERRORA
    MOVEF_F 0.0 VGV_ERRORD
    MOVEF_F 0.0 VGV_OLDERRORD
    MOVEF_F 0.0 VGV_CORRECCIONA
    MOVEF_F 0.0 VLV_ENCDIFF_1
    MOVEF_F 0.0 VLV_SIGNO_1
    MOVEF_F 0.0 VLV_SAFETYTIMER_1
    MOVEF_F 0.0 VLV_STARTB_3
    MOVEF_F 0.0 VLV_STARTC_3
    MOVEF_F 0.0 VLV_ENCODERB_3
    MOVEF_F 0.0 VLV_ENCODERC_3
    MOVEF_F 0.0 VLV_SIGNO_3
    MOVEF_F 0.0 VLV_VEL_3
    MOVEF_F 0.0 VLV_KP_3
    MOVEF_F 0.0 VLV_KD_3
    MOVEF_F 0.0 VLV_ERROR_3
    MOVEF_F 0.0 VLV_OLDERROR_3
    MOVEF_F 0.0 VLV_GRADOS1_3
    MOVEF_F 0.0 VLV_GRADOS2_3
    MOVEF_F 0.0 VLV_GRADOS3_3
    MOVEF_F 0.0 VLV_PENDIENTE_3
    MOVEF_F 0.0 VLV_CORRECCION_3
    MOVEF_F 0.0 VLV_STARTB_4
    MOVEF_F 0.0 VLV_STARTC_4
    MOVEF_F 0.0 VLV_SIGNO_4
    MOVEF_F 0.0 VLV_VEL_4
    MOVEF_F 0.0 VLV_KP_4
    MOVEF_F 0.0 VLV_KD_4
    MOVEF_F 0.0 VLV_ERROR_4
    MOVEF_F 0.0 VLV_OLDERROR_4
    MOVEF_F 0.0 VLV_GRADOS1_4
    MOVEF_F 0.0 VLV_GRADOS2_4
    MOVEF_F 0.0 VLV_ENCODERB_4
    MOVEF_F 0.0 VLV_ENCODERC_4
    MOVEF_F 0.0 VLV_PENDIENTE_4
    MOVEF_F 0.0 VLV_CORRECCION_4
    MOVEF_F 0.0 VLV_CORRECCION_5
    MOVEF_F 0.0 VLV_ENC_5
    MOVEF_F 0.0 VLV_ENCDIFF_7
    MOVEF_F 0.0 VLV_SIGNO_7
    MOVEF_F 0.0 VLV_SAFETYTIMER_7
    MOVEF_F 0.0 VLV_ENCDIFF_8
    MOVEF_F 0.0 VLV_SIGNO_8
    MOVEF_F 0.0 VLV_SAFETYTIMER_8
    MOVE32_32 0 RUNCOUNTER_F_CONTROLBRAZO_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_CONTROLBRAZO_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_CONTROLBRAZO_0 0
    CALL GETANDINC32 RUNCOUNTER_F_CONTROLBRAZO_0 -1 RUNCOUNTER_F_CONTROLBRAZO_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_CONTROLBRAZO_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch235
    WRITE32 ENDSUB_F_CONTROLBRAZO_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_CONTROLBRAZO_0
  dispatch235:
    MOVEF_F 0.0 VLV_V0_3
    MOVEF_F 0.0 VLV_VMAX_3
    MOVEF_F 0.0 VLV_DISTANCIA1_3
    MOVEF_F 0.0 VLV_DISTANCIA2_3
    MOVEF_F 0.0 VLV_DISTANCIA3_3
    MOVEF_F 0.0 VLV_V0_4
    MOVEF_F 0.0 VLV_VMIN_4
    MOVEF_F 0.0 VLV_DISTANCIA1_4
    MOVEF_F 0.0 VLV_DISTANCIA2_4
    MOVEF_F 0.0 VLV_VELOCIDAD_6
    MOVEF_F 0.0 VLV_TIMER_6
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_ENCODER_1
    MOVEF_F 0.0 VLV_VELOCIDAD_7
    MOVEF_F 0.0 VLV_ENCODER_7
    MOVEF_F 0.0 VLV_VELOCIDAD_5
    MOVEF_F 0.0 VLV_DISTANCIA_5
    MOVEF_F 0.0 VLV_VELOCIDAD_8
    MOVEF_F 0.0 VLV_ENCODER_8
    MOVEF_F 0.0 VGV_ENCODERA
    MOVEF_F 0.0 VGV_ENCODERD
    MOVEF_F 0.0 VGV_ERRORA
    MOVEF_F 0.0 VGV_OLDERRORA
    MOVEF_F 0.0 VGV_ERRORD
    MOVEF_F 0.0 VGV_OLDERRORD
    MOVEF_F 0.0 VGV_ENCODERA
    MOVEF_F 0.0 VGV_ENCODERD
    MOVEF_F 0.0 VGV_ERRORA
    MOVEF_F 0.0 VGV_OLDERRORA
    MOVEF_F 0.0 VGV_ERRORD
    MOVEF_F 0.0 VGV_OLDERRORD
    WRITE32 ENDSUB_F_SETUP_0:CALLSUB0 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SETUP_0
CALLSUB0:
    DATA32 tmp1
    CALL GETANDINC32 RUNCOUNTER_F_CONTROLBRAZO_0 1  RUNCOUNTER_F_CONTROLBRAZO_0 tmp1
    JR_NEQ32 0 tmp1 alreadylaunched1
    OBJECT_START TF_CONTROLBRAZO_0
  alreadylaunched1:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB2 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB2:
ENDTHREAD:
    RETURN
SUB_F_MAIN_0:
    MOVEF_F 10.0 VLV_V0_3
    MOVEF_F 90.0 VLV_VMAX_3
    MOVEF_F 15.0 VLV_DISTANCIA1_3
    MOVEF_F 0.0 VLV_DISTANCIA2_3
    MOVEF_F 0.0 VLV_DISTANCIA3_3
    WRITE32 ENDSUB_M_RECTO_ACCELDECELF_5:CALLSUB3 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_RECTO_ACCELDECELF_5
CALLSUB3:
    MOVEF_F 90.0 VLV_V0_4
    MOVEF_F 10.0 VLV_VMIN_4
    MOVEF_F 35.0 VLV_DISTANCIA1_4
    MOVEF_F 0.0 VLV_DISTANCIA2_4
    WRITE32 ENDSUB_M_RECTO_DECEL_4:CALLSUB4 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_RECTO_DECEL_4
CALLSUB4:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_CONTROLBRAZO_0:
  while5:
  whilebody5:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    SUBF VGV_ENCODERA F.0 VGV_ERRORA
    MULF VGV_ERRORA 1.0 F.0
    SUBF VGV_ERRORA VGV_OLDERRORA F.2
    MULF F.2 0.6 F.1
    ADDF F.0 F.1 VGV_CORRECCIONA
    MOVEF_8 VGV_CORRECCIONA setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    JR whilebody5
  endwhile5:
RETSUB_F_CONTROLBRAZO_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_CONTROLBRAZO_0:
SUB_F_SETUP_0:
    DATA8 layer13
	DATA8 no13
	DATA8 mode813
	
	MOVEF_8 1.0 no13
	SUB8 no13 1 no13
	DIV8 no13 4 layer13
	MATH MOD8 no13 4 no13

	MOVEF_8 0.0 mode813
	
	INPUT_DEVICE READY_RAW layer13 no13 0 mode813 0
    DATA8 layer14
	DATA8 no14
	DATA8 mode814
	
	MOVEF_8 2.0 no14
	SUB8 no14 1 no14
	DIV8 no14 4 layer14
	MATH MOD8 no14 4 no14

	MOVEF_8 3.0 mode814
	
	INPUT_DEVICE READY_RAW layer14 no14 0 mode814 0
    DATA8 layer15
	DATA8 no15
	DATA8 mode815
	
	MOVEF_8 3.0 no15
	SUB8 no15 1 no15
	DIV8 no15 4 layer15
	MATH MOD8 no15 4 no15

	MOVEF_8 0.0 mode815
	
	INPUT_DEVICE READY_RAW layer15 no15 0 mode815 0
    DATA8 layer16
	DATA8 no16
	DATA8 mode816
	
	MOVEF_8 4.0 no16
	SUB8 no16 1 no16
	DIV8 no16 4 layer16
	MATH MOD8 no16 4 no16

	MOVEF_8 0.0 mode816
	
	INPUT_DEVICE READY_RAW layer16 no16 0 mode816 0
RETSUB_F_SETUP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SETUP_0:
SUB_F_AENCODER_2:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    SUBF VLV_ENCODER_1 F.0 VLV_ENCDIFF_1
    MATH ABS VLV_ENCDIFF_1 F.0
    DATAF tmpf20
    DATA8 flag20
    DIVF F.0 VLV_ENCDIFF_1 tmpf20
    CP_EQF 0.0 VLV_ENCDIFF_1 flag20
    SELECTF flag20 0.0 tmpf20 VLV_SIGNO_1

    MOVEF_F 1200.0 VLV_SAFETYTIMER_1
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_1 0.0 else22_1
  while23:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.2
    SUBF F.2 VLV_ENCODER_1 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 endwhile23
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 VLV_SAFETYTIMER_1 endwhile23
  whilebody23:
    DATAF tmpf28
    DATA8 flag28
    DIVF VLV_VELOCIDAD_1 15.5 tmpf28
    CP_EQF 0.0 15.5 flag28
    SELECTF flag28 0.0 tmpf28 F.1

    MULF F.1 VLV_SIGNO_1 F.0
    ADDF VGV_ENCODERA F.0 VGV_ENCODERA
    JR_LTEQF VLV_SIGNO_1 0.0 else31_1
    DATA8 flag32
	CP_LTF VGV_ENCODERA VLV_ENCODER_1 flag32
	SELECTF flag32 VGV_ENCODERA VLV_ENCODER_1 VGV_ENCODERA
    JR endif31
  else31_1:
    DATA8 flag33
	CP_GTF VGV_ENCODERA VLV_ENCODER_1 flag33
	SELECTF flag33 VGV_ENCODERA VLV_ENCODER_1 VGV_ENCODERA
  else31_2:
  endif31:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.2
    SUBF F.2 VLV_ENCODER_1 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 and34
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 VLV_SAFETYTIMER_1 whilebody23
  and34:
  endwhile23:
    MOVEF_F VLV_ENCODER_1 VGV_ENCODERA
    OUTPUT_POWER 0 1 0
	OUTPUT_STOP 0 1 1
  else22_1:
  endif22:
RETSUB_F_AENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_AENCODER_2:
SUB_M_RECTO_ACCELDECELF_5:
    CALL MOTOR.GETCOUNT 'B' VLV_STARTB_3
    CALL MOTOR.GETCOUNT 'C' VLV_STARTC_3
    MOVEF_F 0.0 VLV_ENCODERB_3
    MOVEF_F 0.0 VLV_ENCODERC_3
    MATH ABS VLV_V0_3 F.0
    DATAF tmpf43
    DATA8 flag43
    DIVF VLV_V0_3 F.0 tmpf43
    CP_EQF 0.0 F.0 flag43
    SELECTF flag43 0.0 tmpf43 VLV_SIGNO_3

    MATH ABS VLV_V0_3 F.1
    DATA8 flag45
	CP_GTF 8.0 F.1 flag45
	SELECTF flag45 8.0 F.1 F.0
    MULF F.0 VLV_SIGNO_3 VLV_V0_3
    MATH ABS VLV_VMAX_3 F.1
    DATA8 flag48
	CP_LTF 90.0 F.1 flag48
	SELECTF flag48 90.0 F.1 F.0
    MULF F.0 VLV_SIGNO_3 VLV_VMAX_3
    MOVEF_F 0.0 VLV_VEL_3
    MOVEF_F 0.4 VLV_KP_3
    MOVEF_F 0.5 VLV_KD_3
    MOVEF_F 0.0 VLV_ERROR_3
    MOVEF_F 0.0 VLV_OLDERROR_3
    MULF VLV_DISTANCIA1_3 360.0 F.0
    MOVEF_F 3.1415926535897932384 F.2
    MULF 6.24 F.2 F.1
    DATAF tmpf53
    DATA8 flag53
    DIVF F.0 F.1 tmpf53
    CP_EQF 0.0 F.1 flag53
    SELECTF flag53 0.0 tmpf53 VLV_GRADOS1_3

    MULF VLV_DISTANCIA2_3 360.0 F.0
    MOVEF_F 3.1415926535897932384 F.2
    MULF 6.24 F.2 F.1
    DATAF tmpf57
    DATA8 flag57
    DIVF F.0 F.1 tmpf57
    CP_EQF 0.0 F.1 flag57
    SELECTF flag57 0.0 tmpf57 VLV_GRADOS2_3

    MULF VLV_DISTANCIA3_3 360.0 F.0
    MOVEF_F 3.1415926535897932384 F.2
    MULF 6.24 F.2 F.1
    DATAF tmpf61
    DATA8 flag61
    DIVF F.0 F.1 tmpf61
    CP_EQF 0.0 F.1 flag61
    SELECTF flag61 0.0 tmpf61 VLV_GRADOS3_3

  while62:
    MATH ABS VLV_ENCODERC_3 F.0
    ADDF VLV_GRADOS1_3 VLV_GRADOS2_3 F.2
    ADDF F.2 VLV_GRADOS3_3 F.1
    JR_GTEQF F.0 F.1 endwhile62
  whilebody62:
    CALL MOTOR.GETCOUNT 'B' F.0
    SUBF F.0 VLV_STARTB_3 VLV_ENCODERB_3
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_STARTC_3 VLV_ENCODERC_3
    MATH ABS VLV_ENCODERC_3 F.0
    ADDF VLV_GRADOS1_3 VLV_GRADOS2_3 F.1
    JR_GTEQF F.0 F.1 else70_1
    SUBF VLV_VMAX_3 VLV_V0_3 F.1
    DATAF tmpf74
    DATA8 flag74
    DIVF F.1 VLV_GRADOS1_3 tmpf74
    CP_EQF 0.0 VLV_GRADOS1_3 flag74
    SELECTF flag74 0.0 tmpf74 F.0

    MULF F.0 VLV_SIGNO_3 VLV_PENDIENTE_3
    JR_LTEQF VLV_SIGNO_3 0.0 else76_1
    MULF VLV_PENDIENTE_3 VLV_ENCODERC_3 F.1
    ADDF F.1 VLV_V0_3 F.0
    DATA8 flag79
	CP_LTF VLV_VMAX_3 F.0 flag79
	SELECTF flag79 VLV_VMAX_3 F.0 VLV_VEL_3
    JR endif76
  else76_1:
    MULF VLV_PENDIENTE_3 VLV_ENCODERC_3 F.1
    ADDF F.1 VLV_V0_3 F.0
    DATA8 flag82
	CP_GTF VLV_VMAX_3 F.0 flag82
	SELECTF flag82 VLV_VMAX_3 F.0 VLV_VEL_3
  else76_2:
  endif76:
    JR endif70
  else70_1:
    SUBF VLV_V0_3 VLV_VMAX_3 F.1
    DATAF tmpf84
    DATA8 flag84
    DIVF F.1 VLV_GRADOS3_3 tmpf84
    CP_EQF 0.0 VLV_GRADOS3_3 flag84
    SELECTF flag84 0.0 tmpf84 F.0

    MULF F.0 VLV_SIGNO_3 VLV_PENDIENTE_3
    JR_LTEQF VLV_SIGNO_3 0.0 else86_1
    SUBF VLV_ENCODERC_3 VLV_GRADOS1_3 F.3
    SUBF F.3 VLV_GRADOS2_3 F.2
    MULF VLV_PENDIENTE_3 F.2 F.1
    ADDF F.1 VLV_VMAX_3 F.0
    DATA8 flag91
	CP_GTF VLV_V0_3 F.0 flag91
	SELECTF flag91 VLV_V0_3 F.0 VLV_VEL_3
    JR endif86
  else86_1:
    ADDF VLV_ENCODERC_3 VLV_GRADOS1_3 F.3
    ADDF F.3 VLV_GRADOS2_3 F.2
    MULF VLV_PENDIENTE_3 F.2 F.1
    ADDF F.1 VLV_VMAX_3 F.0
    DATA8 flag96
	CP_LTF VLV_V0_3 F.0 flag96
	SELECTF flag96 VLV_V0_3 F.0 VLV_VEL_3
  else86_2:
  endif86:
  else70_2:
  endif70:
    MULF -1.0 VLV_ENCODERB_3 F.1
    SUBF F.1 VLV_ENCODERC_3 F.0
    MULF F.0 1.0 VLV_ERROR_3
    MULF VLV_ERROR_3 VLV_KP_3 F.0
    SUBF VLV_ERROR_3 VLV_OLDERROR_3 F.2
    MULF F.2 VLV_KD_3 F.1
    ADDF F.0 F.1 VLV_CORRECCION_3
    SUBF VLV_VEL_3 VLV_CORRECCION_3 F.1
    MATH NEGATE F.1 F.0
    ADDF VLV_VEL_3 VLV_CORRECCION_3 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    MOVEF_F VLV_ERROR_3 VLV_OLDERROR_3
    MATH ABS VLV_ENCODERC_3 F.0
    ADDF VLV_GRADOS1_3 VLV_GRADOS2_3 F.2
    ADDF F.2 VLV_GRADOS3_3 F.1
    JR_LTF F.0 F.1 whilebody62
  endwhile62:
    OUTPUT_POWER 0 6 0
	OUTPUT_STOP 0 6 0
RETSUB_M_RECTO_ACCELDECELF_5:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_RECTO_ACCELDECELF_5:
SUB_M_RECTO_DECEL_4:
    CALL MOTOR.GETCOUNT 'B' VLV_STARTB_4
    CALL MOTOR.GETCOUNT 'C' VLV_STARTC_4
    MATH ABS VLV_V0_4 F.0
    DATAF tmpf115
    DATA8 flag115
    DIVF VLV_V0_4 F.0 tmpf115
    CP_EQF 0.0 F.0 flag115
    SELECTF flag115 0.0 tmpf115 VLV_SIGNO_4

    MATH ABS VLV_V0_4 F.1
    DATA8 flag117
	CP_LTF 90.0 F.1 flag117
	SELECTF flag117 90.0 F.1 F.0
    MULF F.0 VLV_SIGNO_4 VLV_V0_4
    MATH ABS VLV_VMIN_4 F.1
    DATA8 flag120
	CP_GTF 8.0 F.1 flag120
	SELECTF flag120 8.0 F.1 F.0
    MULF F.0 VLV_SIGNO_4 VLV_VMIN_4
    MOVEF_F 0.0 VLV_VEL_4
    MOVEF_F 0.4 VLV_KP_4
    MOVEF_F 0.5 VLV_KD_4
    MOVEF_F 0.0 VLV_ERROR_4
    MOVEF_F 0.0 VLV_OLDERROR_4
    MULF VLV_DISTANCIA1_4 360.0 F.0
    MOVEF_F 3.1415926535897932384 F.2
    MULF 6.24 F.2 F.1
    DATAF tmpf125
    DATA8 flag125
    DIVF F.0 F.1 tmpf125
    CP_EQF 0.0 F.1 flag125
    SELECTF flag125 0.0 tmpf125 VLV_GRADOS1_4

    MULF VLV_DISTANCIA2_4 360.0 F.0
    MOVEF_F 3.1415926535897932384 F.2
    MULF 6.24 F.2 F.1
    DATAF tmpf129
    DATA8 flag129
    DIVF F.0 F.1 tmpf129
    CP_EQF 0.0 F.1 flag129
    SELECTF flag129 0.0 tmpf129 VLV_GRADOS2_4

    MOVEF_F 0.0 VLV_ENCODERB_4
    MOVEF_F 0.0 VLV_ENCODERC_4
  while130:
    MATH ABS VLV_ENCODERC_4 F.0
    ADDF VLV_GRADOS1_4 VLV_GRADOS2_4 F.1
    JR_GTEQF F.0 F.1 endwhile130
  whilebody130:
    CALL MOTOR.GETCOUNT 'B' F.0
    SUBF F.0 VLV_STARTB_4 VLV_ENCODERB_4
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_STARTC_4 VLV_ENCODERC_4
    SUBF VLV_VMIN_4 VLV_V0_4 F.1
    DATAF tmpf138
    DATA8 flag138
    DIVF F.1 VLV_GRADOS1_4 tmpf138
    CP_EQF 0.0 VLV_GRADOS1_4 flag138
    SELECTF flag138 0.0 tmpf138 F.0

    MULF F.0 VLV_SIGNO_4 VLV_PENDIENTE_4
    JR_LTEQF VLV_SIGNO_4 0.0 else140_1
    MULF VLV_PENDIENTE_4 VLV_ENCODERC_4 F.1
    ADDF F.1 VLV_V0_4 F.0
    DATA8 flag143
	CP_GTF VLV_VMIN_4 F.0 flag143
	SELECTF flag143 VLV_VMIN_4 F.0 VLV_VEL_4
    JR endif140
  else140_1:
    MULF VLV_PENDIENTE_4 VLV_ENCODERC_4 F.1
    ADDF F.1 VLV_V0_4 F.0
    DATA8 flag146
	CP_LTF VLV_VMIN_4 F.0 flag146
	SELECTF flag146 VLV_VMIN_4 F.0 VLV_VEL_4
  else140_2:
  endif140:
    MULF -1.0 VLV_ENCODERB_4 F.1
    SUBF F.1 VLV_ENCODERC_4 F.0
    MULF F.0 1.0 VLV_ERROR_4
    MULF VLV_ERROR_4 VLV_KP_4 F.0
    SUBF VLV_ERROR_4 VLV_OLDERROR_4 F.2
    MULF F.2 VLV_KD_4 F.1
    ADDF F.0 F.1 VLV_CORRECCION_4
    MOVEF_F VLV_ERROR_4 VLV_OLDERROR_4
    SUBF VLV_VEL_4 VLV_CORRECCION_4 F.2
    MATH NEGATE F.2 F.1
    MULF F.1 1.0 F.0
    ADDF VLV_VEL_4 VLV_CORRECCION_4 F.2
    MULF F.2 1.0 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    MATH ABS VLV_ENCODERC_4 F.0
    ADDF VLV_GRADOS1_4 VLV_GRADOS2_4 F.1
    JR_LTF F.0 F.1 whilebody130
  endwhile130:
    OUTPUT_POWER 0 6 0
	OUTPUT_STOP 0 6 1
RETSUB_M_RECTO_DECEL_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_RECTO_DECEL_4:
SUB_M_RECTO_ENCODER_2:
    MOVEF_F 0.0 VLV_CORRECCION_5
    MULF VLV_DISTANCIA_5 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf165
    DATA8 flag165
    DIVF F.1 F.2 tmpf165
    CP_EQF 0.0 F.2 flag165
    SELECTF flag165 0.0 tmpf165 F.0

    DATAF tmpf166
    DATA8 flag166
    DIVF F.0 6.24 tmpf166
    CP_EQF 0.0 6.24 flag166
    SELECTF flag166 0.0 tmpf166 VLV_ENC_5

    OUTPUT_POWER 0 6 0
	OUTPUT_STOP 0 6 0
    DATA32 milliseconds168
	MOVEF_32 500.0 milliseconds168
	DATA32 timer168
	TIMER_WAIT milliseconds168 timer168
	TIMER_READY timer168
    MATH NEGATE VLV_VELOCIDAD_5 F.1
    ADDF F.1 VLV_CORRECCION_5 F.0
    ADDF VLV_VELOCIDAD_5 VLV_CORRECCION_5 F.1
    CALL MOTOR.SCHEDULESYNC 'BC' F.0 F.1 VLV_ENC_5 'True'

	DATA8 layer172
	DATA8 nos172
	DATA8 busy172
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer172 nos172
	JR_EQ8 0 nos172 motornotbusy172
  motorwaiting172:
	OUTPUT_TEST layer172 nos172 busy172
	JR_EQ8 busy172 0 motornotbusy172
	SLEEP
	JR motorwaiting172
  motornotbusy172:
RETSUB_M_RECTO_ENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_RECTO_ENCODER_2:
SUB_M_BRAZO_DTIMER_2:
    TIMER_READ timeMC1
  while174:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 VLV_TIMER_6 endwhile174
  whilebody174:
    MOVEF_8 VLV_VELOCIDAD_6 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 VLV_TIMER_6 whilebody174
  endwhile174:
    OUTPUT_POWER 0 8 0
	OUTPUT_STOP 0 8 1
RETSUB_M_BRAZO_DTIMER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_DTIMER_2:
SUB_M_BRAZO_AENCODER_2:
    CALL MOTOR.GETCOUNT 'A' F.0
    SUBF VLV_ENCODER_7 F.0 VLV_ENCDIFF_7
    MATH ABS VLV_ENCDIFF_7 F.0
    DATAF tmpf182
    DATA8 flag182
    DIVF VLV_ENCDIFF_7 F.0 tmpf182
    CP_EQF 0.0 F.0 flag182
    SELECTF flag182 0.0 tmpf182 VLV_SIGNO_7

    MATH ABS VLV_ENCDIFF_7 F.4
    DATAF tmpf184
    DATA8 flag184
    DIVF F.4 100.0 tmpf184
    CP_EQF 0.0 100.0 flag184
    SELECTF flag184 0.0 tmpf184 F.3

    DATAF tmpf185
    DATA8 flag185
    DIVF VLV_VELOCIDAD_7 20.0 tmpf185
    CP_EQF 0.0 20.0 flag185
    SELECTF flag185 0.0 tmpf185 F.4

    DATAF tmpf186
    DATA8 flag186
    DIVF F.3 F.4 tmpf186
    CP_EQF 0.0 F.4 flag186
    SELECTF flag186 0.0 tmpf186 F.2

    MULF F.2 650.0 F.1
    MULF F.1 2.0 F.0
    DATA8 flag189
	CP_GTF F.0 400.0 flag189
	SELECTF flag189 F.0 400.0 VLV_SAFETYTIMER_7
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_7 0.0 else191_1
  while192:
    CALL MOTOR.GETCOUNT 'A' F.2
    SUBF F.2 VLV_ENCODER_7 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 25.0 endwhile192
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 2000.0 endwhile192
  whilebody192:
    MULF VLV_SIGNO_7 VLV_VELOCIDAD_7 F.0
    MOVEF_8 F.0 setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    CALL MOTOR.GETCOUNT 'A' F.2
    SUBF F.2 VLV_ENCODER_7 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 25.0 and199
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 2000.0 whilebody192
  and199:
  endwhile192:
    CALL MOTOR.STOP 'A' 'True'
  else191_1:
  endif191:
RETSUB_M_BRAZO_AENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_AENCODER_2:
SUB_M_BRAZO_DENCODER_2:
    CALL MOTOR.GETCOUNT 'D' F.0
    SUBF VLV_ENCODER_8 F.0 VLV_ENCDIFF_8
    MATH ABS VLV_ENCDIFF_8 F.0
    DATAF tmpf208
    DATA8 flag208
    DIVF VLV_ENCDIFF_8 F.0 tmpf208
    CP_EQF 0.0 F.0 flag208
    SELECTF flag208 0.0 tmpf208 VLV_SIGNO_8

    MATH ABS VLV_ENCDIFF_8 F.4
    DATAF tmpf210
    DATA8 flag210
    DIVF F.4 100.0 tmpf210
    CP_EQF 0.0 100.0 flag210
    SELECTF flag210 0.0 tmpf210 F.3

    DATAF tmpf211
    DATA8 flag211
    DIVF VLV_VELOCIDAD_8 20.0 tmpf211
    CP_EQF 0.0 20.0 flag211
    SELECTF flag211 0.0 tmpf211 F.4

    DATAF tmpf212
    DATA8 flag212
    DIVF F.3 F.4 tmpf212
    CP_EQF 0.0 F.4 flag212
    SELECTF flag212 0.0 tmpf212 F.2

    MULF F.2 650.0 F.1
    MULF F.1 2.0 F.0
    DATA8 flag215
	CP_GTF F.0 400.0 flag215
	SELECTF flag215 F.0 400.0 VLV_SAFETYTIMER_8
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_8 0.0 else217_1
  while218:
    CALL MOTOR.GETCOUNT 'D' F.2
    SUBF F.2 VLV_ENCODER_8 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 endwhile218
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 VLV_SAFETYTIMER_8 endwhile218
  whilebody218:
    MULF VLV_SIGNO_8 VLV_VELOCIDAD_8 F.0
    MOVEF_8 F.0 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VLV_SAFETYTIMER_8 '%g' 99 S.1
    CALL TEXT.APPEND 'safetyTimer: ' S.1 S.0
    CALL LCD.WRITE 5.0 30.0 S.0
    CALL MOTOR.GETCOUNT 'D' F.2
    SUBF F.2 VLV_ENCODER_8 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 and229
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 VLV_SAFETYTIMER_8 whilebody218
  and229:
  endwhile218:
    CALL MOTOR.STOP 'D' 'True'
  else217_1:
  endif217:
RETSUB_M_BRAZO_DENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_DENCODER_2:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
