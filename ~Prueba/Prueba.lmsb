DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_VELOCIDADA_1
DATAF VLV_VELOCIDADD_1
DATAF VLV_ENCODERA_1
DATAF VLV_ENCODERD_1
DATAF VLV_VELOCIDAD_2
DATAF VLV_ENCODER_2
DATAF VLV_VELOCIDAD_3
DATAF VLV_ENCODER_3
DATAF VLV_ENCDIFFA_1
DATAF VLV_ENCDIFFD_1
DATAF VLV_SIGNOA_1
DATAF VLV_SIGNOD_1
DATAF VLV_SAFETYTIMER_1
DATAF VLV_ENCDIFF_2
DATAF VLV_SIGNO_2
DATAF VLV_SAFETYTIMER_2
DATAF VLV_ENCDIFF_3
DATAF VLV_SIGNO_3
DATAF VLV_SAFETYTIMER_3

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_VELOCIDADA_1
    MOVEF_F 0.0 VLV_VELOCIDADD_1
    MOVEF_F 0.0 VLV_ENCODERA_1
    MOVEF_F 0.0 VLV_ENCODERD_1
    MOVEF_F 0.0 VLV_VELOCIDAD_2
    MOVEF_F 0.0 VLV_ENCODER_2
    MOVEF_F 0.0 VLV_VELOCIDAD_3
    MOVEF_F 0.0 VLV_ENCODER_3
    MOVEF_F 0.0 VLV_ENCDIFFA_1
    MOVEF_F 0.0 VLV_ENCDIFFD_1
    MOVEF_F 0.0 VLV_SIGNOA_1
    MOVEF_F 0.0 VLV_SIGNOD_1
    MOVEF_F 0.0 VLV_SAFETYTIMER_1
    MOVEF_F 0.0 VLV_ENCDIFF_2
    MOVEF_F 0.0 VLV_SIGNO_2
    MOVEF_F 0.0 VLV_SAFETYTIMER_2
    MOVEF_F 0.0 VLV_ENCDIFF_3
    MOVEF_F 0.0 VLV_SIGNO_3
    MOVEF_F 0.0 VLV_SAFETYTIMER_3
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    DATAF F.6
    DATAF F.7
    DATAF F.8
    DATAF F.9
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VLV_VELOCIDADA_1
    MOVEF_F 0.0 VLV_VELOCIDADD_1
    MOVEF_F 0.0 VLV_ENCODERA_1
    MOVEF_F 0.0 VLV_ENCODERD_1
    MOVEF_F 0.0 VLV_VELOCIDAD_2
    MOVEF_F 0.0 VLV_ENCODER_2
    MOVEF_F 0.0 VLV_VELOCIDAD_3
    MOVEF_F 0.0 VLV_ENCODER_3
    MOVEF_F 70.0 VLV_VELOCIDADA_1
    MOVEF_F 80.0 VLV_VELOCIDADD_1
    MOVEF_F -300.0 VLV_ENCODERA_1
    MOVEF_F 400.0 VLV_ENCODERD_1
    WRITE32 ENDSUB_M_BRAZO_ADENCODER_4:CALLSUB0 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_ADENCODER_4
CALLSUB0:
    DATA32 milliseconds1
	MOVEF_32 4000.0 milliseconds1
	DATA32 timer1
	TIMER_WAIT milliseconds1 timer1
	TIMER_READY timer1
    MOVEF_F 50.0 VLV_VELOCIDAD_2
    MOVEF_F 0.0 VLV_ENCODER_2
    WRITE32 ENDSUB_M_BRAZO_AENCODER_2:CALLSUB2 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_AENCODER_2
CALLSUB2:
    MOVEF_F 80.0 VLV_VELOCIDAD_3
    MOVEF_F 0.0 VLV_ENCODER_3
    WRITE32 ENDSUB_M_BRAZO_DENCODER_2:CALLSUB3 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_DENCODER_2
CALLSUB3:
    MOVEF_F 20.0 VLV_VELOCIDAD_2
    MOVEF_F 0.0 VLV_ENCODER_2
    WRITE32 ENDSUB_M_BRAZO_AENCODER_2:CALLSUB4 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_AENCODER_2
CALLSUB4:
ENDTHREAD:
    RETURN
SUB_M_BRAZO_ADENCODER_4:
    CALL MOTOR.GETCOUNT 'A' F.0
    SUBF VLV_ENCODERA_1 F.0 VLV_ENCDIFFA_1
    CALL MOTOR.GETCOUNT 'D' F.0
    SUBF VLV_ENCODERD_1 F.0 VLV_ENCDIFFD_1
    MATH ABS VLV_ENCDIFFA_1 F.0
    DATAF tmpf10
    DATA8 flag10
    DIVF VLV_ENCDIFFA_1 F.0 tmpf10
    CP_EQF 0.0 F.0 flag10
    SELECTF flag10 0.0 tmpf10 VLV_SIGNOA_1

    MATH ABS VLV_ENCDIFFD_1 F.0
    DATAF tmpf12
    DATA8 flag12
    DIVF VLV_ENCDIFFD_1 F.0 tmpf12
    CP_EQF 0.0 F.0 flag12
    SELECTF flag12 0.0 tmpf12 VLV_SIGNOD_1

    MATH ABS VLV_ENCDIFFA_1 F.8
    MATH ABS VLV_ENCDIFFD_1 F.9
    DATA8 flag15
	CP_GTF F.8 F.9 flag15
	SELECTF flag15 F.8 F.9 F.7
    MATH ABS F.7 F.6
    DATAF tmpf17
    DATA8 flag17
    DIVF F.6 100.0 tmpf17
    CP_EQF 0.0 100.0 flag17
    SELECTF flag17 0.0 tmpf17 F.5

    DATA8 flag18
	CP_LTF VLV_VELOCIDADA_1 VLV_VELOCIDADD_1 flag18
	SELECTF flag18 VLV_VELOCIDADA_1 VLV_VELOCIDADD_1 F.7
    DATAF tmpf19
    DATA8 flag19
    DIVF F.7 20.0 tmpf19
    CP_EQF 0.0 20.0 flag19
    SELECTF flag19 0.0 tmpf19 F.6

    DATAF tmpf20
    DATA8 flag20
    DIVF F.5 F.6 tmpf20
    CP_EQF 0.0 F.6 flag20
    SELECTF flag20 0.0 tmpf20 F.4

    MULF F.4 650.0 F.3
    MULF F.3 2.0 F.2
    MULF F.2 2.0 F.1
    DATAF tmpf24
    DATA8 flag24
    DIVF F.1 3.0 tmpf24
    CP_EQF 0.0 3.0 flag24
    SELECTF flag24 0.0 tmpf24 F.0

    DATA8 flag25
	CP_GTF F.0 400.0 flag25
	SELECTF flag25 F.0 400.0 VLV_SAFETYTIMER_1
    TIMER_READ timeMC3
  while27:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    JR_NEQF F.0 VLV_ENCODERA_1 or28
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    JR_EQF F.0 VLV_ENCODERD_1 endwhile27
  or28:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 VLV_SAFETYTIMER_1 endwhile27
  whilebody27:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    JR_GTEQF F.0 VLV_ENCODERA_1 else32_1
    DATAF tmpf34
    DATA8 flag34
    DIVF VLV_VELOCIDADA_1 2.0 tmpf34
    CP_EQF 0.0 2.0 flag34
    SELECTF flag34 0.0 tmpf34 F.2

    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.5
    SUBF VLV_ENCODERA_1 F.5 F.4
    DATAF tmpf37
    DATA8 flag37
    DIVF F.4 10.0 tmpf37
    CP_EQF 0.0 10.0 flag37
    SELECTF flag37 0.0 tmpf37 F.3

    ADDF F.2 F.3 F.1
    DATA8 flag39
	CP_LTF VLV_VELOCIDADA_1 F.1 flag39
	SELECTF flag39 VLV_VELOCIDADA_1 F.1 F.0
    MOVEF_8 F.0 setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    JR endif32
  else32_1:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    JR_LTEQF F.0 VLV_ENCODERA_1 else32_2
    DATAF tmpf42
    DATA8 flag42
    DIVF VLV_VELOCIDADA_1 2.0 tmpf42
    CP_EQF 0.0 2.0 flag42
    SELECTF flag42 0.0 tmpf42 F.3

    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.6
    SUBF F.6 VLV_ENCODERA_1 F.5
    DATAF tmpf45
    DATA8 flag45
    DIVF F.5 10.0 tmpf45
    CP_EQF 0.0 10.0 flag45
    SELECTF flag45 0.0 tmpf45 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag47
	CP_LTF VLV_VELOCIDADA_1 F.2 flag47
	SELECTF flag47 VLV_VELOCIDADA_1 F.2 F.1
    MATH NEGATE F.1 F.0
    MOVEF_8 F.0 setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    JR endif32
  else32_2:
    OUTPUT_POWER 0 1 0
	OUTPUT_STOP 0 1 1
  else32_3:
  endif32:
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    JR_GTEQF F.0 VLV_ENCODERD_1 else51_1
    DATAF tmpf53
    DATA8 flag53
    DIVF VLV_VELOCIDADD_1 2.0 tmpf53
    CP_EQF 0.0 2.0 flag53
    SELECTF flag53 0.0 tmpf53 F.2

    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.5
    SUBF VLV_ENCODERD_1 F.5 F.4
    DATAF tmpf56
    DATA8 flag56
    DIVF F.4 10.0 tmpf56
    CP_EQF 0.0 10.0 flag56
    SELECTF flag56 0.0 tmpf56 F.3

    ADDF F.2 F.3 F.1
    DATA8 flag58
	CP_LTF VLV_VELOCIDADD_1 F.1 flag58
	SELECTF flag58 VLV_VELOCIDADD_1 F.1 F.0
    MOVEF_8 F.0 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    JR endif51
  else51_1:
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    JR_LTEQF F.0 VLV_ENCODERD_1 else51_2
    DATAF tmpf61
    DATA8 flag61
    DIVF VLV_VELOCIDADD_1 2.0 tmpf61
    CP_EQF 0.0 2.0 flag61
    SELECTF flag61 0.0 tmpf61 F.3

    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.6
    SUBF F.6 VLV_ENCODERD_1 F.5
    DATAF tmpf64
    DATA8 flag64
    DIVF F.5 10.0 tmpf64
    CP_EQF 0.0 10.0 flag64
    SELECTF flag64 0.0 tmpf64 F.4

    ADDF F.3 F.4 F.2
    DATA8 flag66
	CP_LTF VLV_VELOCIDADD_1 F.2 flag66
	SELECTF flag66 VLV_VELOCIDADD_1 F.2 F.1
    MATH NEGATE F.1 F.0
    MOVEF_8 F.0 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    JR endif51
  else51_2:
    OUTPUT_POWER 0 8 0
	OUTPUT_STOP 0 8 1
  else51_3:
  endif51:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    JR_NEQF F.0 VLV_ENCODERA_1 or71
    OUTPUT_GET_COUNT 0 3 getTachoD
	MOVE32_F getTachoD F.0
    JR_EQF F.0 VLV_ENCODERD_1 and70
  or71:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 VLV_SAFETYTIMER_1 whilebody27
  and70:
  endwhile27:
    OUTPUT_POWER 0 9 0
	OUTPUT_STOP 0 9 1
RETSUB_M_BRAZO_ADENCODER_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_ADENCODER_4:
SUB_M_BRAZO_AENCODER_2:
    CALL MOTOR.GETCOUNT 'A' F.0
    SUBF VLV_ENCODER_2 F.0 VLV_ENCDIFF_2
    MATH ABS VLV_ENCDIFF_2 F.0
    DATAF tmpf79
    DATA8 flag79
    DIVF VLV_ENCDIFF_2 F.0 tmpf79
    CP_EQF 0.0 F.0 flag79
    SELECTF flag79 0.0 tmpf79 VLV_SIGNO_2

    MATH ABS VLV_ENCDIFF_2 F.4
    DATAF tmpf81
    DATA8 flag81
    DIVF F.4 100.0 tmpf81
    CP_EQF 0.0 100.0 flag81
    SELECTF flag81 0.0 tmpf81 F.3

    DATAF tmpf82
    DATA8 flag82
    DIVF VLV_VELOCIDAD_2 20.0 tmpf82
    CP_EQF 0.0 20.0 flag82
    SELECTF flag82 0.0 tmpf82 F.4

    DATAF tmpf83
    DATA8 flag83
    DIVF F.3 F.4 tmpf83
    CP_EQF 0.0 F.4 flag83
    SELECTF flag83 0.0 tmpf83 F.2

    MULF F.2 650.0 F.1
    MULF F.1 2.0 F.0
    DATA8 flag86
	CP_GTF F.0 400.0 flag86
	SELECTF flag86 F.0 400.0 VLV_SAFETYTIMER_2
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_2 0.0 else88_1
  while89:
    CALL MOTOR.GETCOUNT 'A' F.2
    SUBF F.2 VLV_ENCODER_2 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 25.0 endwhile89
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 2000.0 endwhile89
  whilebody89:
    MULF VLV_SIGNO_2 VLV_VELOCIDAD_2 F.0
    MOVEF_8 F.0 setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    CALL MOTOR.GETCOUNT 'A' F.2
    SUBF F.2 VLV_ENCODER_2 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 25.0 and96
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 2000.0 whilebody89
  and96:
  endwhile89:
    CALL MOTOR.STOP 'A' 'True'
  else88_1:
  endif88:
RETSUB_M_BRAZO_AENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_AENCODER_2:
SUB_M_BRAZO_DENCODER_2:
    CALL MOTOR.GETCOUNT 'D' F.0
    SUBF VLV_ENCODER_3 F.0 VLV_ENCDIFF_3
    MATH ABS VLV_ENCDIFF_3 F.0
    DATAF tmpf105
    DATA8 flag105
    DIVF VLV_ENCDIFF_3 F.0 tmpf105
    CP_EQF 0.0 F.0 flag105
    SELECTF flag105 0.0 tmpf105 VLV_SIGNO_3

    MATH ABS VLV_ENCDIFF_3 F.4
    DATAF tmpf107
    DATA8 flag107
    DIVF F.4 100.0 tmpf107
    CP_EQF 0.0 100.0 flag107
    SELECTF flag107 0.0 tmpf107 F.3

    DATAF tmpf108
    DATA8 flag108
    DIVF VLV_VELOCIDAD_3 20.0 tmpf108
    CP_EQF 0.0 20.0 flag108
    SELECTF flag108 0.0 tmpf108 F.4

    DATAF tmpf109
    DATA8 flag109
    DIVF F.3 F.4 tmpf109
    CP_EQF 0.0 F.4 flag109
    SELECTF flag109 0.0 tmpf109 F.2

    MULF F.2 650.0 F.1
    MULF F.1 2.0 F.0
    DATA8 flag112
	CP_GTF F.0 400.0 flag112
	SELECTF flag112 F.0 400.0 VLV_SAFETYTIMER_3
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_3 0.0 else114_1
  while115:
    CALL MOTOR.GETCOUNT 'D' F.2
    SUBF F.2 VLV_ENCODER_3 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 endwhile115
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 VLV_SAFETYTIMER_3 endwhile115
  whilebody115:
    MULF VLV_SIGNO_3 VLV_VELOCIDAD_3 F.0
    MOVEF_8 F.0 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VLV_SAFETYTIMER_3 '%g' 99 S.1
    CALL TEXT.APPEND 'SafetyTimer: ' S.1 S.0
    CALL LCD.WRITE 5.0 30.0 S.0
    CALL MOTOR.GETCOUNT 'D' F.2
    SUBF F.2 VLV_ENCODER_3 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 and126
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 VLV_SAFETYTIMER_3 whilebody115
  and126:
  endwhile115:
    CALL MOTOR.STOP 'D' 'True'
  else114_1:
  endif114:
RETSUB_M_BRAZO_DENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_DENCODER_2:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
