DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_VELOCIDAD_1
DATAF VLV_ENCODER_1
DATAF VLV_VELOCIDADA_2
DATAF VLV_VELOCIDADD_2
DATAF VLV_TIMER_2
DATAF VLV_VELOCIDAD_3
DATAF VLV_ENCODER_3
DATAF VLV_VELOCIDAD_5
DATAF VLV_DISTANCIA_5
DATAF VLV_VELOCIDAD_4
DATAF VLV_TIMER_4
DATAF VLV_ENCDIFF_1
DATAF VLV_SIGNO_1
DATAF VLV_SAFETYTIMER_1
DATAF VLV_ENCDIFF_3
DATAF VLV_SIGNO_3
DATAF VLV_SAFETYTIMER_3
DATAF VLV_OLDERROR_5
DATAF VLV_ERRSUM_5
DATAF VLV_KP_5
DATAF VLV_KI_5
DATAF VLV_KD_5
DATAF VLV_ENC_5
DATAF VLV_START_B_5
DATAF VLV_START_C_5
DATAF VLV_ENCODER_C_5
DATAF VLV_ENCODER_B_5
DATAF VLV_ERROR_5
DATAF VLV_CORRECCION_5

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_ENCODER_1
    MOVEF_F 0.0 VLV_VELOCIDADA_2
    MOVEF_F 0.0 VLV_VELOCIDADD_2
    MOVEF_F 0.0 VLV_TIMER_2
    MOVEF_F 0.0 VLV_VELOCIDAD_3
    MOVEF_F 0.0 VLV_ENCODER_3
    MOVEF_F 0.0 VLV_VELOCIDAD_5
    MOVEF_F 0.0 VLV_DISTANCIA_5
    MOVEF_F 0.0 VLV_VELOCIDAD_4
    MOVEF_F 0.0 VLV_TIMER_4
    MOVEF_F 0.0 VLV_ENCDIFF_1
    MOVEF_F 0.0 VLV_SIGNO_1
    MOVEF_F 0.0 VLV_SAFETYTIMER_1
    MOVEF_F 0.0 VLV_ENCDIFF_3
    MOVEF_F 0.0 VLV_SIGNO_3
    MOVEF_F 0.0 VLV_SAFETYTIMER_3
    MOVEF_F 0.0 VLV_OLDERROR_5
    MOVEF_F 0.0 VLV_ERRSUM_5
    MOVEF_F 0.0 VLV_KP_5
    MOVEF_F 0.0 VLV_KI_5
    MOVEF_F 0.0 VLV_KD_5
    MOVEF_F 0.0 VLV_ENC_5
    MOVEF_F 0.0 VLV_START_B_5
    MOVEF_F 0.0 VLV_START_C_5
    MOVEF_F 0.0 VLV_ENCODER_C_5
    MOVEF_F 0.0 VLV_ENCODER_B_5
    MOVEF_F 0.0 VLV_ERROR_5
    MOVEF_F 0.0 VLV_CORRECCION_5
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_ENCODER_1
    MOVEF_F 0.0 VLV_VELOCIDADA_2
    MOVEF_F 0.0 VLV_VELOCIDADD_2
    MOVEF_F 0.0 VLV_TIMER_2
    MOVEF_F 0.0 VLV_VELOCIDAD_3
    MOVEF_F 0.0 VLV_ENCODER_3
    MOVEF_F 0.0 VLV_VELOCIDAD_5
    MOVEF_F 0.0 VLV_DISTANCIA_5
    MOVEF_F 0.0 VLV_VELOCIDAD_4
    MOVEF_F 0.0 VLV_TIMER_4
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB0 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB0:
ENDTHREAD:
    RETURN
SUB_F_MAIN_0:
    WRITE32 ENDSUB_F_STARTARM_0:CALLSUB1 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STARTARM_0
CALLSUB1:
    WRITE32 ENDSUB_F_COGER_0:CALLSUB2 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_COGER_0
CALLSUB2:
    WRITE32 ENDSUB_F_COGER_0:CALLSUB3 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_COGER_0
CALLSUB3:
    WRITE32 ENDSUB_F_COGER_0:CALLSUB4 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_COGER_0
CALLSUB4:
    WRITE32 ENDSUB_F_COGER_0:CALLSUB5 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_COGER_0
CALLSUB5:
    WRITE32 ENDSUB_F_COGER_0:CALLSUB6 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_COGER_0
CALLSUB6:
    DATA32 milliseconds7
	MOVEF_32 5000.0 milliseconds7
	DATA32 timer7
	TIMER_WAIT milliseconds7 timer7
	TIMER_READY timer7
    MOVEF_F 50.0 VLV_VELOCIDAD_1
    MOVEF_F 0.0 VLV_ENCODER_1
    WRITE32 ENDSUB_M_BRAZO_DENCODER_2:CALLSUB8 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_DENCODER_2
CALLSUB8:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_STARTARM_0:
    MOVEF_F 40.0 VLV_VELOCIDADA_2
    MOVEF_F 0.0 VLV_VELOCIDADD_2
    MOVEF_F 800.0 VLV_TIMER_2
    WRITE32 ENDSUB_M_BRAZO_ADTIMER_3:CALLSUB9 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_ADTIMER_3
CALLSUB9:
    OUTPUT_CLR_COUNT 0 1
    OUTPUT_CLR_COUNT 0 8
    MOVEF_F 30.0 VLV_VELOCIDAD_3
    MOVEF_F -110.0 VLV_ENCODER_3
    WRITE32 ENDSUB_M_BRAZO_AENCODER_2:CALLSUB12 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_AENCODER_2
CALLSUB12:
    OUTPUT_CLR_COUNT 0 1
    OUTPUT_CLR_COUNT 0 8
    MOVEF_F 30.0 VLV_VELOCIDAD_3
    MOVEF_F -130.0 VLV_ENCODER_3
    WRITE32 ENDSUB_M_BRAZO_AENCODER_2:CALLSUB15 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_AENCODER_2
CALLSUB15:
RETSUB_F_STARTARM_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STARTARM_0:
SUB_F_COGER_0:
    MOVEF_F 50.0 VLV_VELOCIDAD_3
    MOVEF_F -210.0 VLV_ENCODER_3
    WRITE32 ENDSUB_M_BRAZO_AENCODER_2:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_AENCODER_2
CALLSUB16:
    MOVEF_F 25.0 VLV_VELOCIDAD_5
    MOVEF_F 6.0 VLV_DISTANCIA_5
    WRITE32 ENDSUB_M_RECTO_ENCODER_2:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_RECTO_ENCODER_2
CALLSUB17:
    MOVEF_F 30.0 VLV_VELOCIDAD_3
    MOVEF_F -60.0 VLV_ENCODER_3
    WRITE32 ENDSUB_M_BRAZO_AENCODER_2:CALLSUB18 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_AENCODER_2
CALLSUB18:
    DATA32 milliseconds19
	MOVEF_32 200.0 milliseconds19
	DATA32 timer19
	TIMER_WAIT milliseconds19 timer19
	TIMER_READY timer19
    MOVEF_F 60.0 VLV_VELOCIDAD_4
    MOVEF_F 400.0 VLV_TIMER_4
    WRITE32 ENDSUB_M_BRAZO_DTIMER_2:CALLSUB20 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_DTIMER_2
CALLSUB20:
    MOVEF_F 50.0 VLV_VELOCIDAD_3
    MOVEF_F 90.0 VLV_ENCODER_3
    WRITE32 ENDSUB_M_BRAZO_AENCODER_2:CALLSUB21 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_AENCODER_2
CALLSUB21:
    MOVEF_F 60.0 VLV_VELOCIDAD_1
    MOVEF_F -80.0 VLV_ENCODER_1
    WRITE32 ENDSUB_M_BRAZO_DENCODER_2:CALLSUB22 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_DENCODER_2
CALLSUB22:
    MOVEF_F 50.0 VLV_VELOCIDAD_3
    MOVEF_F -130.0 VLV_ENCODER_3
    WRITE32 ENDSUB_M_BRAZO_AENCODER_2:CALLSUB23 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_BRAZO_AENCODER_2
CALLSUB23:
RETSUB_F_COGER_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_COGER_0:
SUB_M_BRAZO_DENCODER_2:
    CALL MOTOR.GETCOUNT 'D' F.0
    SUBF VLV_ENCODER_1 F.0 VLV_ENCDIFF_1
    MATH ABS VLV_ENCDIFF_1 F.0
    DATAF tmpf27
    DATA8 flag27
    DIVF VLV_ENCDIFF_1 F.0 tmpf27
    CP_EQF 0.0 F.0 flag27
    SELECTF flag27 0.0 tmpf27 VLV_SIGNO_1

    MATH ABS VLV_ENCDIFF_1 F.4
    DATAF tmpf29
    DATA8 flag29
    DIVF F.4 100.0 tmpf29
    CP_EQF 0.0 100.0 flag29
    SELECTF flag29 0.0 tmpf29 F.3

    DATAF tmpf30
    DATA8 flag30
    DIVF VLV_VELOCIDAD_1 20.0 tmpf30
    CP_EQF 0.0 20.0 flag30
    SELECTF flag30 0.0 tmpf30 F.4

    DATAF tmpf31
    DATA8 flag31
    DIVF F.3 F.4 tmpf31
    CP_EQF 0.0 F.4 flag31
    SELECTF flag31 0.0 tmpf31 F.2

    MULF F.2 650.0 F.1
    MULF F.1 2.0 F.0
    DATA8 flag34
	CP_GTF F.0 400.0 flag34
	SELECTF flag34 F.0 400.0 VLV_SAFETYTIMER_1
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_1 0.0 else36_1
  while37:
    CALL MOTOR.GETCOUNT 'D' F.2
    SUBF F.2 VLV_ENCODER_1 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 endwhile37
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 VLV_SAFETYTIMER_1 endwhile37
  whilebody37:
    MULF VLV_SIGNO_1 VLV_VELOCIDAD_1 F.0
    MOVEF_8 F.0 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VLV_SAFETYTIMER_1 '%g' 99 S.1
    CALL TEXT.APPEND 'SafetyTimer: ' S.1 S.0
    CALL LCD.WRITE 5.0 30.0 S.0
    CALL MOTOR.GETCOUNT 'D' F.2
    SUBF F.2 VLV_ENCODER_1 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 and48
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 VLV_SAFETYTIMER_1 whilebody37
  and48:
  endwhile37:
    CALL MOTOR.STOP 'D' 'True'
  else36_1:
  endif36:
RETSUB_M_BRAZO_DENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_DENCODER_2:
SUB_M_BRAZO_ADTIMER_3:
    TIMER_READ timeMC1
  while55:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 VLV_TIMER_2 endwhile55
  whilebody55:
    MOVEF_8 VLV_VELOCIDADA_2 setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    MOVEF_8 VLV_VELOCIDADD_2 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 VLV_TIMER_2 whilebody55
  endwhile55:
    CALL MOTOR.STOP 'AD' 'True'
RETSUB_M_BRAZO_ADTIMER_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_ADTIMER_3:
SUB_M_BRAZO_AENCODER_2:
    CALL MOTOR.GETCOUNT 'A' F.0
    SUBF VLV_ENCODER_3 F.0 VLV_ENCDIFF_3
    MATH ABS VLV_ENCDIFF_3 F.0
    DATAF tmpf64
    DATA8 flag64
    DIVF VLV_ENCDIFF_3 F.0 tmpf64
    CP_EQF 0.0 F.0 flag64
    SELECTF flag64 0.0 tmpf64 VLV_SIGNO_3

    MATH ABS VLV_ENCDIFF_3 F.4
    DATAF tmpf66
    DATA8 flag66
    DIVF F.4 100.0 tmpf66
    CP_EQF 0.0 100.0 flag66
    SELECTF flag66 0.0 tmpf66 F.3

    DATAF tmpf67
    DATA8 flag67
    DIVF VLV_VELOCIDAD_3 20.0 tmpf67
    CP_EQF 0.0 20.0 flag67
    SELECTF flag67 0.0 tmpf67 F.4

    DATAF tmpf68
    DATA8 flag68
    DIVF F.3 F.4 tmpf68
    CP_EQF 0.0 F.4 flag68
    SELECTF flag68 0.0 tmpf68 F.2

    MULF F.2 650.0 F.1
    MULF F.1 2.0 F.0
    DATA8 flag71
	CP_GTF F.0 400.0 flag71
	SELECTF flag71 F.0 400.0 VLV_SAFETYTIMER_3
    TIMER_READ timeMC3
    JR_EQF VLV_ENCDIFF_3 0.0 else73_1
  while74:
    CALL MOTOR.GETCOUNT 'A' F.2
    SUBF F.2 VLV_ENCODER_3 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 25.0 endwhile74
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 2000.0 endwhile74
  whilebody74:
    MULF VLV_SIGNO_3 VLV_VELOCIDAD_3 F.0
    MOVEF_8 F.0 setSpeedA
	OUTPUT_SPEED 0 1 setSpeedA
	OUTPUT_START 0 1
    CALL MOTOR.GETCOUNT 'A' F.2
    SUBF F.2 VLV_ENCODER_3 F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 25.0 and81
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 2000.0 whilebody74
  and81:
  endwhile74:
    CALL MOTOR.STOP 'A' 'True'
  else73_1:
  endif73:
RETSUB_M_BRAZO_AENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_AENCODER_2:
SUB_M_BRAZO_DTIMER_2:
    TIMER_READ timeMC1
  while88:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 VLV_TIMER_4 endwhile88
  whilebody88:
    MOVEF_8 VLV_VELOCIDAD_4 setSpeedD
	OUTPUT_SPEED 0 8 setSpeedD
	OUTPUT_START 0 8
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 VLV_TIMER_4 whilebody88
  endwhile88:
    OUTPUT_POWER 0 8 0
	OUTPUT_STOP 0 8 1
RETSUB_M_BRAZO_DTIMER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_BRAZO_DTIMER_2:
SUB_M_RECTO_ENCODER_2:
    MULF VLV_VELOCIDAD_5 1.0 VLV_VELOCIDAD_5
    MOVEF_F 0.0 VLV_OLDERROR_5
    MOVEF_F 0.0 VLV_ERRSUM_5
    MOVEF_F 0.1 VLV_KP_5
    MOVEF_F 0.0001 VLV_KI_5
    MOVEF_F 0.1 VLV_KD_5
    MULF VLV_DISTANCIA_5 360.0 F.1
    MOVEF_F 3.1415926535897932384 F.2
    DATAF tmpf96
    DATA8 flag96
    DIVF F.1 F.2 tmpf96
    CP_EQF 0.0 F.2 flag96
    SELECTF flag96 0.0 tmpf96 F.0

    DATAF tmpf97
    DATA8 flag97
    DIVF F.0 6.24 tmpf97
    CP_EQF 0.0 6.24 flag97
    SELECTF flag97 0.0 tmpf97 VLV_ENC_5

    CALL MOTOR.GETCOUNT 'B' F.0
    MULF F.0 -1.0 VLV_START_B_5
    CALL MOTOR.GETCOUNT 'C' VLV_START_C_5
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_5 VLV_ENCODER_C_5
  while103:
    MATH ABS VLV_ENCODER_C_5 F.0
    JR_GTEQF F.0 VLV_ENC_5 endwhile103
  whilebody103:
    CALL MOTOR.GETCOUNT 'B' F.1
    MULF F.1 -1.0 F.0
    SUBF F.0 VLV_START_B_5 VLV_ENCODER_B_5
    CALL MOTOR.GETCOUNT 'C' F.0
    SUBF F.0 VLV_START_C_5 VLV_ENCODER_C_5
    SUBF VLV_ENCODER_B_5 VLV_ENCODER_C_5 F.0
    MULF F.0 1.0 VLV_ERROR_5
    ADDF VLV_ERRSUM_5 VLV_ERROR_5 VLV_ERRSUM_5
    MULF VLV_ERROR_5 VLV_KP_5 F.1
    MULF VLV_ERRSUM_5 VLV_KI_5 F.2
    ADDF F.1 F.2 F.0
    SUBF VLV_ERROR_5 VLV_OLDERROR_5 F.2
    MULF F.2 VLV_KD_5 F.1
    ADDF F.0 F.1 VLV_CORRECCION_5
    SUBF VLV_VELOCIDAD_5 VLV_CORRECCION_5 F.1
    MATH NEGATE F.1 F.0
    ADDF VLV_VELOCIDAD_5 VLV_CORRECCION_5 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    MOVEF_F VLV_ERROR_5 VLV_OLDERROR_5
    MATH ABS VLV_ENCODER_C_5 F.0
    JR_LTF F.0 VLV_ENC_5 whilebody103
  endwhile103:
    CALL MOTOR.STOP 'BC' 'True'
RETSUB_M_RECTO_ENCODER_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_RECTO_ENCODER_2:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
